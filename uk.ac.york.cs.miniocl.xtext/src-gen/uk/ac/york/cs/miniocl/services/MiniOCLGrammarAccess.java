/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package uk.ac.york.cs.miniocl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniOCLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RootCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.RootCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPackagesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPackagesPackageCSParserRuleCall_0_0 = (RuleCall)cPackagesAssignment_0.eContents().get(0);
		private final Assignment cContraintsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cContraintsConstraintCSParserRuleCall_1_0 = (RuleCall)cContraintsAssignment_1.eContents().get(0);
		
		//RootCS:
		//	(packages+=PackageCS
		//	| contraints+=ConstraintCS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(packages+=PackageCS | contraints+=ConstraintCS)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//packages+=PackageCS
		public Assignment getPackagesAssignment_0() { return cPackagesAssignment_0; }
		
		//PackageCS
		public RuleCall getPackagesPackageCSParserRuleCall_0_0() { return cPackagesPackageCSParserRuleCall_0_0; }
		
		//contraints+=ConstraintCS
		public Assignment getContraintsAssignment_1() { return cContraintsAssignment_1; }
		
		//ConstraintCS
		public RuleCall getContraintsConstraintCSParserRuleCall_1_0() { return cContraintsConstraintCSParserRuleCall_1_0; }
	}
	public class PackageCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.PackageCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPackagesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPackagesPackageCSParserRuleCall_3_0_0 = (RuleCall)cPackagesAssignment_3_0.eContents().get(0);
		private final Assignment cClassesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cClassesClassCSParserRuleCall_3_1_0 = (RuleCall)cClassesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageCS:
		//	'package' name=ID '{' (packages+=PackageCS
		//	| classes+=ClassCS)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID '{' (packages+=PackageCS | classes+=ClassCS)* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(packages+=PackageCS | classes+=ClassCS)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//packages+=PackageCS
		public Assignment getPackagesAssignment_3_0() { return cPackagesAssignment_3_0; }
		
		//PackageCS
		public RuleCall getPackagesPackageCSParserRuleCall_3_0_0() { return cPackagesPackageCSParserRuleCall_3_0_0; }
		
		//classes+=ClassCS
		public Assignment getClassesAssignment_3_1() { return cClassesAssignment_3_1; }
		
		//ClassCS
		public RuleCall getClassesClassCSParserRuleCall_3_1_0() { return cClassesClassCSParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ClassCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.ClassCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtendsPathNameCSParserRuleCall_2_1_0 = (RuleCall)cExtendsAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cPropertiesPropertyCSParserRuleCall_4_0_0 = (RuleCall)cPropertiesAssignment_4_0.eContents().get(0);
		private final Assignment cOperationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOperationsOperationCSParserRuleCall_4_1_0 = (RuleCall)cOperationsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassCS:
		//	'class' name=ID ('extends' extends=PathNameCS)? '{' (properties+=PropertyCS
		//	| operations+=OperationCS)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID ('extends' extends=PathNameCS)? '{' (properties+=PropertyCS | operations+=OperationCS)* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' extends=PathNameCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extends=PathNameCS
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }
		
		//PathNameCS
		public RuleCall getExtendsPathNameCSParserRuleCall_2_1_0() { return cExtendsPathNameCSParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(properties+=PropertyCS | operations+=OperationCS)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//properties+=PropertyCS
		public Assignment getPropertiesAssignment_4_0() { return cPropertiesAssignment_4_0; }
		
		//PropertyCS
		public RuleCall getPropertiesPropertyCSParserRuleCall_4_0_0() { return cPropertiesPropertyCSParserRuleCall_4_0_0; }
		
		//operations+=OperationCS
		public Assignment getOperationsAssignment_4_1() { return cOperationsAssignment_4_1; }
		
		//OperationCS
		public RuleCall getOperationsOperationCSParserRuleCall_4_1_0() { return cOperationsOperationCSParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.PropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRefPathNameCSParserRuleCall_3_0 = (RuleCall)cTypeRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PropertyCS:
		//	'prop' name=ID ':' typeRef=PathNameCS ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'prop' name=ID ':' typeRef=PathNameCS ';'
		public Group getGroup() { return cGroup; }
		
		//'prop'
		public Keyword getPropKeyword_0() { return cPropKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//typeRef=PathNameCS
		public Assignment getTypeRefAssignment_3() { return cTypeRefAssignment_3; }
		
		//PathNameCS
		public RuleCall getTypeRefPathNameCSParserRuleCall_3_0() { return cTypeRefPathNameCSParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class OperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.OperationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterCSParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterCSParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResultRefAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultRefPathNameCSParserRuleCall_6_0 = (RuleCall)cResultRefAssignment_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyExpCSParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//OperationCS:
		//	'op' name=ID
		//	'(' (params+=ParameterCS (',' params+=ParameterCS)*)? ')'
		//	':' resultRef=PathNameCS
		//	'=' body=ExpCS
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'op' name=ID '(' (params+=ParameterCS (',' params+=ParameterCS)*)? ')' ':' resultRef=PathNameCS '=' body=ExpCS ';'
		public Group getGroup() { return cGroup; }
		
		//'op'
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=ParameterCS (',' params+=ParameterCS)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=ParameterCS
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//ParameterCS
		public RuleCall getParamsParameterCSParserRuleCall_3_0_0() { return cParamsParameterCSParserRuleCall_3_0_0; }
		
		//(',' params+=ParameterCS)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=ParameterCS
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//ParameterCS
		public RuleCall getParamsParameterCSParserRuleCall_3_1_1_0() { return cParamsParameterCSParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//resultRef=PathNameCS
		public Assignment getResultRefAssignment_6() { return cResultRefAssignment_6; }
		
		//PathNameCS
		public RuleCall getResultRefPathNameCSParserRuleCall_6_0() { return cResultRefPathNameCSParserRuleCall_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//body=ExpCS
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//ExpCS
		public RuleCall getBodyExpCSParserRuleCall_8_0() { return cBodyExpCSParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class ParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.ParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRefPathNameCSParserRuleCall_2_0 = (RuleCall)cTypeRefAssignment_2.eContents().get(0);
		
		//ParameterCS:
		//	name=ID ':' typeRef=PathNameCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' typeRef=PathNameCS
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeRef=PathNameCS
		public Assignment getTypeRefAssignment_2() { return cTypeRefAssignment_2; }
		
		//PathNameCS
		public RuleCall getTypeRefPathNameCSParserRuleCall_2_0() { return cTypeRefPathNameCSParserRuleCall_2_0; }
	}
	public class ConstraintCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.ConstraintCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRefPathNameCSParserRuleCall_1_0 = (RuleCall)cTypeRefAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInvariantsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvariantsInvariantCSParserRuleCall_3_0 = (RuleCall)cInvariantsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConstraintCS:
		//	'context' typeRef=PathNameCS '{'
		//	invariants+=InvariantCS*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'context' typeRef=PathNameCS '{' invariants+=InvariantCS* '}'
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//typeRef=PathNameCS
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }
		
		//PathNameCS
		public RuleCall getTypeRefPathNameCSParserRuleCall_1_0() { return cTypeRefPathNameCSParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//invariants+=InvariantCS*
		public Assignment getInvariantsAssignment_3() { return cInvariantsAssignment_3; }
		
		//InvariantCS
		public RuleCall getInvariantsInvariantCSParserRuleCall_3_0() { return cInvariantsInvariantCSParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InvariantCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.InvariantCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpCSParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InvariantCS:
		//	'inv' ':' exp=ExpCS ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'inv' ':' exp=ExpCS ';'
		public Group getGroup() { return cGroup; }
		
		//'inv'
		public Keyword getInvKeyword_0() { return cInvKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=ExpCS
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//ExpCS
		public RuleCall getExpExpCSParserRuleCall_2_0() { return cExpExpCSParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.ExpCS");
		private final RuleCall cLogicExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Expressions
		//ExpCS:
		//	LogicExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicExpCS
		public RuleCall getLogicExpCSParserRuleCall() { return cLogicExpCSParserRuleCall; }
	}
	public class LogicExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.LogicExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCallExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicExpCSLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCallExpCSParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicExpCS:
		//	CallExpCS ({LogicExpCS.left=current} op=('=' | '<>') right=CallExpCS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CallExpCS ({LogicExpCS.left=current} op=('=' | '<>') right=CallExpCS)*
		public Group getGroup() { return cGroup; }
		
		//CallExpCS
		public RuleCall getCallExpCSParserRuleCall_0() { return cCallExpCSParserRuleCall_0; }
		
		//({LogicExpCS.left=current} op=('=' | '<>') right=CallExpCS)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicExpCS.left=current}
		public Action getLogicExpCSLeftAction_1_0() { return cLogicExpCSLeftAction_1_0; }
		
		//op=('=' | '<>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('=' | '<>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }
		
		//'<>'
		public Keyword getOpLessThanSignGreaterThanSignKeyword_1_1_0_1() { return cOpLessThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//right=CallExpCS
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CallExpCS
		public RuleCall getRightCallExpCSParserRuleCall_1_2_0() { return cRightCallExpCSParserRuleCall_1_2_0; }
	}
	public class CallExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.CallExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCallExpCSSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpFullStopKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cNameExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameExpNameExpCSParserRuleCall_1_2_0 = (RuleCall)cNameExpAssignment_1_2.eContents().get(0);
		
		//CallExpCS:
		//	PrimaryExpCS ({CallExpCS.source=current} op=('.' | '->') nameExp=NameExpCS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpCS ({CallExpCS.source=current} op=('.' | '->') nameExp=NameExpCS)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpCS
		public RuleCall getPrimaryExpCSParserRuleCall_0() { return cPrimaryExpCSParserRuleCall_0; }
		
		//({CallExpCS.source=current} op=('.' | '->') nameExp=NameExpCS)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{CallExpCS.source=current}
		public Action getCallExpCSSourceAction_1_0() { return cCallExpCSSourceAction_1_0; }
		
		//op=('.' | '->')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('.' | '->')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'.'
		public Keyword getOpFullStopKeyword_1_1_0_0() { return cOpFullStopKeyword_1_1_0_0; }
		
		//'->'
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_1_0_1() { return cOpHyphenMinusGreaterThanSignKeyword_1_1_0_1; }
		
		//nameExp=NameExpCS
		public Assignment getNameExpAssignment_1_2() { return cNameExpAssignment_1_2; }
		
		//NameExpCS
		public RuleCall getNameExpNameExpCSParserRuleCall_1_2_0() { return cNameExpNameExpCSParserRuleCall_1_2_0; }
	}
	public class PrimaryExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.PrimaryExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpCS:
		//	NameExpCS | LiteralExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//NameExpCS | LiteralExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameExpCS
		public RuleCall getNameExpCSParserRuleCall_0() { return cNameExpCSParserRuleCall_0; }
		
		//LiteralExpCS
		public RuleCall getLiteralExpCSParserRuleCall_1() { return cLiteralExpCSParserRuleCall_1; }
	}
	public class NameExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.NameExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpNamePathNameCSParserRuleCall_0_0 = (RuleCall)cExpNameAssignment_0.eContents().get(0);
		private final Assignment cRoundedBracketsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoundedBracketsRoundedBracketClauseCSParserRuleCall_1_0 = (RuleCall)cRoundedBracketsAssignment_1.eContents().get(0);
		private final Assignment cCallExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallExpCallExpCSParserRuleCall_2_0 = (RuleCall)cCallExpAssignment_2.eContents().get(0);
		
		//NameExpCS:
		//	expName=PathNameCS
		//	roundedBrackets=RoundedBracketClauseCS?
		//	callExp=CallExpCS?;
		@Override public ParserRule getRule() { return rule; }
		
		//expName=PathNameCS roundedBrackets=RoundedBracketClauseCS? callExp=CallExpCS?
		public Group getGroup() { return cGroup; }
		
		//expName=PathNameCS
		public Assignment getExpNameAssignment_0() { return cExpNameAssignment_0; }
		
		//PathNameCS
		public RuleCall getExpNamePathNameCSParserRuleCall_0_0() { return cExpNamePathNameCSParserRuleCall_0_0; }
		
		//roundedBrackets=RoundedBracketClauseCS?
		public Assignment getRoundedBracketsAssignment_1() { return cRoundedBracketsAssignment_1; }
		
		//RoundedBracketClauseCS
		public RuleCall getRoundedBracketsRoundedBracketClauseCSParserRuleCall_1_0() { return cRoundedBracketsRoundedBracketClauseCSParserRuleCall_1_0; }
		
		//callExp=CallExpCS?
		public Assignment getCallExpAssignment_2() { return cCallExpAssignment_2; }
		
		//CallExpCS
		public RuleCall getCallExpCallExpCSParserRuleCall_2_0() { return cCallExpCallExpCSParserRuleCall_2_0; }
	}
	public class RoundedBracketClauseCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.RoundedBracketClauseCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoundedBracketClauseCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpCSParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpCSParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RoundedBracketClauseCS:
		//	{RoundedBracketClauseCS}
		//	'(' (args+=ExpCS (',' args+=ExpCS)*)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{RoundedBracketClauseCS} '(' (args+=ExpCS (',' args+=ExpCS)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{RoundedBracketClauseCS}
		public Action getRoundedBracketClauseCSAction_0() { return cRoundedBracketClauseCSAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args+=ExpCS (',' args+=ExpCS)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=ExpCS
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//ExpCS
		public RuleCall getArgsExpCSParserRuleCall_2_0_0() { return cArgsExpCSParserRuleCall_2_0_0; }
		
		//(',' args+=ExpCS)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=ExpCS
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//ExpCS
		public RuleCall getArgsExpCSParserRuleCall_2_1_1_0() { return cArgsExpCSParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.LiteralExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LiteralExpCS:
		//	IntLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteralExpCS
		public RuleCall getIntLiteralExpCSParserRuleCall_0() { return cIntLiteralExpCSParserRuleCall_0; }
		
		//StringLiteralExpCS
		public RuleCall getStringLiteralExpCSParserRuleCall_1() { return cStringLiteralExpCSParserRuleCall_1; }
		
		//BooleanLiteralExpCS
		public RuleCall getBooleanLiteralExpCSParserRuleCall_2() { return cBooleanLiteralExpCSParserRuleCall_2; }
	}
	public class IntLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.IntLiteralExpCS");
		private final Assignment cIntSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntSymbolINTTerminalRuleCall_0 = (RuleCall)cIntSymbolAssignment.eContents().get(0);
		
		//IntLiteralExpCS:
		//	intSymbol=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//intSymbol=INT
		public Assignment getIntSymbolAssignment() { return cIntSymbolAssignment; }
		
		//INT
		public RuleCall getIntSymbolINTTerminalRuleCall_0() { return cIntSymbolINTTerminalRuleCall_0; }
	}
	public class StringLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.StringLiteralExpCS");
		private final Assignment cStringSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringSymbolSTRINGTerminalRuleCall_0 = (RuleCall)cStringSymbolAssignment.eContents().get(0);
		
		//StringLiteralExpCS:
		//	stringSymbol=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//stringSymbol=STRING
		public Assignment getStringSymbolAssignment() { return cStringSymbolAssignment; }
		
		//STRING
		public RuleCall getStringSymbolSTRINGTerminalRuleCall_0() { return cStringSymbolSTRINGTerminalRuleCall_0; }
	}
	public class BooleanLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.BooleanLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBoolSymbolAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cBoolSymbolTrueKeyword_1_0_0 = (Keyword)cBoolSymbolAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanLiteralExpCS:
		//	{BooleanExpCS} (boolSymbol?='true'
		//	| 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanExpCS} (boolSymbol?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{BooleanExpCS}
		public Action getBooleanExpCSAction_0() { return cBooleanExpCSAction_0; }
		
		//(boolSymbol?='true' | 'false')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//boolSymbol?='true'
		public Assignment getBoolSymbolAssignment_1_0() { return cBoolSymbolAssignment_1_0; }
		
		//'true'
		public Keyword getBoolSymbolTrueKeyword_1_0_0() { return cBoolSymbolTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class PathNameCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.PathNameCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathPathElementCSParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPathAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathPathElementCSParserRuleCall_1_1_0 = (RuleCall)cPathAssignment_1_1.eContents().get(0);
		
		//PathNameCS:
		//	path+=PathElementCS ('::' path+=PathElementCS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//path+=PathElementCS ('::' path+=PathElementCS)*
		public Group getGroup() { return cGroup; }
		
		//path+=PathElementCS
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }
		
		//PathElementCS
		public RuleCall getPathPathElementCSParserRuleCall_0_0() { return cPathPathElementCSParserRuleCall_0_0; }
		
		//('::' path+=PathElementCS)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//path+=PathElementCS
		public Assignment getPathAssignment_1_1() { return cPathAssignment_1_1; }
		
		//PathElementCS
		public RuleCall getPathPathElementCSParserRuleCall_1_1_0() { return cPathPathElementCSParserRuleCall_1_1_0; }
	}
	public class PathElementCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.miniocl.MiniOCL.PathElementCS");
		private final Assignment cPathNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathNameIDTerminalRuleCall_0 = (RuleCall)cPathNameAssignment.eContents().get(0);
		
		//PathElementCS:
		//	pathName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//pathName=ID
		public Assignment getPathNameAssignment() { return cPathNameAssignment; }
		
		//ID
		public RuleCall getPathNameIDTerminalRuleCall_0() { return cPathNameIDTerminalRuleCall_0; }
	}
	
	
	private final RootCSElements pRootCS;
	private final PackageCSElements pPackageCS;
	private final ClassCSElements pClassCS;
	private final PropertyCSElements pPropertyCS;
	private final OperationCSElements pOperationCS;
	private final ParameterCSElements pParameterCS;
	private final ConstraintCSElements pConstraintCS;
	private final InvariantCSElements pInvariantCS;
	private final ExpCSElements pExpCS;
	private final LogicExpCSElements pLogicExpCS;
	private final CallExpCSElements pCallExpCS;
	private final PrimaryExpCSElements pPrimaryExpCS;
	private final NameExpCSElements pNameExpCS;
	private final RoundedBracketClauseCSElements pRoundedBracketClauseCS;
	private final LiteralExpCSElements pLiteralExpCS;
	private final IntLiteralExpCSElements pIntLiteralExpCS;
	private final StringLiteralExpCSElements pStringLiteralExpCS;
	private final BooleanLiteralExpCSElements pBooleanLiteralExpCS;
	private final PathNameCSElements pPathNameCS;
	private final PathElementCSElements pPathElementCS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniOCLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRootCS = new RootCSElements();
		this.pPackageCS = new PackageCSElements();
		this.pClassCS = new ClassCSElements();
		this.pPropertyCS = new PropertyCSElements();
		this.pOperationCS = new OperationCSElements();
		this.pParameterCS = new ParameterCSElements();
		this.pConstraintCS = new ConstraintCSElements();
		this.pInvariantCS = new InvariantCSElements();
		this.pExpCS = new ExpCSElements();
		this.pLogicExpCS = new LogicExpCSElements();
		this.pCallExpCS = new CallExpCSElements();
		this.pPrimaryExpCS = new PrimaryExpCSElements();
		this.pNameExpCS = new NameExpCSElements();
		this.pRoundedBracketClauseCS = new RoundedBracketClauseCSElements();
		this.pLiteralExpCS = new LiteralExpCSElements();
		this.pIntLiteralExpCS = new IntLiteralExpCSElements();
		this.pStringLiteralExpCS = new StringLiteralExpCSElements();
		this.pBooleanLiteralExpCS = new BooleanLiteralExpCSElements();
		this.pPathNameCS = new PathNameCSElements();
		this.pPathElementCS = new PathElementCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.york.cs.miniocl.MiniOCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RootCS:
	//	(packages+=PackageCS
	//	| contraints+=ConstraintCS)*;
	public RootCSElements getRootCSAccess() {
		return pRootCS;
	}
	
	public ParserRule getRootCSRule() {
		return getRootCSAccess().getRule();
	}
	
	//PackageCS:
	//	'package' name=ID '{' (packages+=PackageCS
	//	| classes+=ClassCS)*
	//	'}';
	public PackageCSElements getPackageCSAccess() {
		return pPackageCS;
	}
	
	public ParserRule getPackageCSRule() {
		return getPackageCSAccess().getRule();
	}
	
	//ClassCS:
	//	'class' name=ID ('extends' extends=PathNameCS)? '{' (properties+=PropertyCS
	//	| operations+=OperationCS)*
	//	'}';
	public ClassCSElements getClassCSAccess() {
		return pClassCS;
	}
	
	public ParserRule getClassCSRule() {
		return getClassCSAccess().getRule();
	}
	
	//PropertyCS:
	//	'prop' name=ID ':' typeRef=PathNameCS ';';
	public PropertyCSElements getPropertyCSAccess() {
		return pPropertyCS;
	}
	
	public ParserRule getPropertyCSRule() {
		return getPropertyCSAccess().getRule();
	}
	
	//OperationCS:
	//	'op' name=ID
	//	'(' (params+=ParameterCS (',' params+=ParameterCS)*)? ')'
	//	':' resultRef=PathNameCS
	//	'=' body=ExpCS
	//	';';
	public OperationCSElements getOperationCSAccess() {
		return pOperationCS;
	}
	
	public ParserRule getOperationCSRule() {
		return getOperationCSAccess().getRule();
	}
	
	//ParameterCS:
	//	name=ID ':' typeRef=PathNameCS;
	public ParameterCSElements getParameterCSAccess() {
		return pParameterCS;
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}
	
	//ConstraintCS:
	//	'context' typeRef=PathNameCS '{'
	//	invariants+=InvariantCS*
	//	'}';
	public ConstraintCSElements getConstraintCSAccess() {
		return pConstraintCS;
	}
	
	public ParserRule getConstraintCSRule() {
		return getConstraintCSAccess().getRule();
	}
	
	//InvariantCS:
	//	'inv' ':' exp=ExpCS ';';
	public InvariantCSElements getInvariantCSAccess() {
		return pInvariantCS;
	}
	
	public ParserRule getInvariantCSRule() {
		return getInvariantCSAccess().getRule();
	}
	
	//// Expressions
	//ExpCS:
	//	LogicExpCS;
	public ExpCSElements getExpCSAccess() {
		return pExpCS;
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}
	
	//LogicExpCS:
	//	CallExpCS ({LogicExpCS.left=current} op=('=' | '<>') right=CallExpCS)*;
	public LogicExpCSElements getLogicExpCSAccess() {
		return pLogicExpCS;
	}
	
	public ParserRule getLogicExpCSRule() {
		return getLogicExpCSAccess().getRule();
	}
	
	//CallExpCS:
	//	PrimaryExpCS ({CallExpCS.source=current} op=('.' | '->') nameExp=NameExpCS)*;
	public CallExpCSElements getCallExpCSAccess() {
		return pCallExpCS;
	}
	
	public ParserRule getCallExpCSRule() {
		return getCallExpCSAccess().getRule();
	}
	
	//PrimaryExpCS:
	//	NameExpCS | LiteralExpCS;
	public PrimaryExpCSElements getPrimaryExpCSAccess() {
		return pPrimaryExpCS;
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}
	
	//NameExpCS:
	//	expName=PathNameCS
	//	roundedBrackets=RoundedBracketClauseCS?
	//	callExp=CallExpCS?;
	public NameExpCSElements getNameExpCSAccess() {
		return pNameExpCS;
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}
	
	//RoundedBracketClauseCS:
	//	{RoundedBracketClauseCS}
	//	'(' (args+=ExpCS (',' args+=ExpCS)*)?
	//	')';
	public RoundedBracketClauseCSElements getRoundedBracketClauseCSAccess() {
		return pRoundedBracketClauseCS;
	}
	
	public ParserRule getRoundedBracketClauseCSRule() {
		return getRoundedBracketClauseCSAccess().getRule();
	}
	
	//LiteralExpCS:
	//	IntLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS;
	public LiteralExpCSElements getLiteralExpCSAccess() {
		return pLiteralExpCS;
	}
	
	public ParserRule getLiteralExpCSRule() {
		return getLiteralExpCSAccess().getRule();
	}
	
	//IntLiteralExpCS:
	//	intSymbol=INT;
	public IntLiteralExpCSElements getIntLiteralExpCSAccess() {
		return pIntLiteralExpCS;
	}
	
	public ParserRule getIntLiteralExpCSRule() {
		return getIntLiteralExpCSAccess().getRule();
	}
	
	//StringLiteralExpCS:
	//	stringSymbol=STRING;
	public StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return pStringLiteralExpCS;
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}
	
	//BooleanLiteralExpCS:
	//	{BooleanExpCS} (boolSymbol?='true'
	//	| 'false');
	public BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return pBooleanLiteralExpCS;
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}
	
	//PathNameCS:
	//	path+=PathElementCS ('::' path+=PathElementCS)*;
	public PathNameCSElements getPathNameCSAccess() {
		return pPathNameCS;
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}
	
	//PathElementCS:
	//	pathName=ID;
	public PathElementCSElements getPathElementCSAccess() {
		return pPathElementCS;
	}
	
	public ParserRule getPathElementCSRule() {
		return getPathElementCSAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
