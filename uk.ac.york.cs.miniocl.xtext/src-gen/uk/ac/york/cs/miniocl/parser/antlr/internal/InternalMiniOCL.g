/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
grammar InternalMiniOCL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package uk.ac.york.cs.miniocl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.york.cs.miniocl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.york.cs.miniocl.services.MiniOCLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private MiniOCLGrammarAccess grammarAccess;

    public InternalMiniOCLParser(TokenStream input, MiniOCLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RootCS";
   	}

   	@Override
   	protected MiniOCLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRootCS
entryRuleRootCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootCSRule()); }
	iv_ruleRootCS=ruleRootCS
	{ $current=$iv_ruleRootCS.current; }
	EOF;

// Rule RootCS
ruleRootCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRootCSAccess().getPackagesPackageCSParserRuleCall_0_0());
				}
				lv_packages_0_0=rulePackageCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootCSRule());
					}
					add(
						$current,
						"packages",
						lv_packages_0_0,
						"uk.ac.york.cs.miniocl.MiniOCL.PackageCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRootCSAccess().getContraintsConstraintCSParserRuleCall_1_0());
				}
				lv_contraints_1_0=ruleConstraintCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootCSRule());
					}
					add(
						$current,
						"contraints",
						lv_contraints_1_0,
						"uk.ac.york.cs.miniocl.MiniOCL.ConstraintCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRulePackageCS
entryRulePackageCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageCSRule()); }
	iv_rulePackageCS=rulePackageCS
	{ $current=$iv_rulePackageCS.current; }
	EOF;

// Rule PackageCS
rulePackageCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageCSAccess().getPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPackageCSAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageCSRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageCSAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageCSAccess().getPackagesPackageCSParserRuleCall_3_0_0());
					}
					lv_packages_3_0=rulePackageCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageCSRule());
						}
						add(
							$current,
							"packages",
							lv_packages_3_0,
							"uk.ac.york.cs.miniocl.MiniOCL.PackageCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageCSAccess().getClassesClassCSParserRuleCall_3_1_0());
					}
					lv_classes_4_0=ruleClassCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageCSRule());
						}
						add(
							$current,
							"classes",
							lv_classes_4_0,
							"uk.ac.york.cs.miniocl.MiniOCL.ClassCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getPackageCSAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleClassCS
entryRuleClassCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassCSRule()); }
	iv_ruleClassCS=ruleClassCS
	{ $current=$iv_ruleClassCS.current; }
	EOF;

// Rule ClassCS
ruleClassCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassCSAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassCSAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassCSRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getClassCSAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClassCSAccess().getExtendsPathNameCSParserRuleCall_2_1_0());
					}
					lv_extends_3_0=rulePathNameCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassCSRule());
						}
						set(
							$current,
							"extends",
							lv_extends_3_0,
							"uk.ac.york.cs.miniocl.MiniOCL.PathNameCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getClassCSAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClassCSAccess().getPropertiesPropertyCSParserRuleCall_4_0_0());
					}
					lv_properties_5_0=rulePropertyCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassCSRule());
						}
						add(
							$current,
							"properties",
							lv_properties_5_0,
							"uk.ac.york.cs.miniocl.MiniOCL.PropertyCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getClassCSAccess().getOperationsOperationCSParserRuleCall_4_1_0());
					}
					lv_operations_6_0=ruleOperationCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassCSRule());
						}
						add(
							$current,
							"operations",
							lv_operations_6_0,
							"uk.ac.york.cs.miniocl.MiniOCL.OperationCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getClassCSAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRulePropertyCS
entryRulePropertyCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyCSRule()); }
	iv_rulePropertyCS=rulePropertyCS
	{ $current=$iv_rulePropertyCS.current; }
	EOF;

// Rule PropertyCS
rulePropertyCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='prop'
		{
			newLeafNode(otherlv_0, grammarAccess.getPropertyCSAccess().getPropKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPropertyCSAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyCSRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPropertyCSAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyCSAccess().getTypeRefPathNameCSParserRuleCall_3_0());
				}
				lv_typeRef_3_0=rulePathNameCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyCSRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_3_0,
						"uk.ac.york.cs.miniocl.MiniOCL.PathNameCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getPropertyCSAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleOperationCS
entryRuleOperationCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationCSRule()); }
	iv_ruleOperationCS=ruleOperationCS
	{ $current=$iv_ruleOperationCS.current; }
	EOF;

// Rule OperationCS
ruleOperationCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='op'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationCSAccess().getOpKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOperationCSAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationCSRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationCSAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationCSAccess().getParamsParameterCSParserRuleCall_3_0_0());
					}
					lv_params_3_0=ruleParameterCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationCSRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"uk.ac.york.cs.miniocl.MiniOCL.ParameterCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getOperationCSAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOperationCSAccess().getParamsParameterCSParserRuleCall_3_1_1_0());
						}
						lv_params_5_0=ruleParameterCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOperationCSRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"uk.ac.york.cs.miniocl.MiniOCL.ParameterCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getOperationCSAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getOperationCSAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationCSAccess().getResultRefPathNameCSParserRuleCall_6_0());
				}
				lv_resultRef_8_0=rulePathNameCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationCSRule());
					}
					set(
						$current,
						"resultRef",
						lv_resultRef_8_0,
						"uk.ac.york.cs.miniocl.MiniOCL.PathNameCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='='
		{
			newLeafNode(otherlv_9, grammarAccess.getOperationCSAccess().getEqualsSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationCSAccess().getBodyExpCSParserRuleCall_8_0());
				}
				lv_body_10_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationCSRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"uk.ac.york.cs.miniocl.MiniOCL.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getOperationCSAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleParameterCS
entryRuleParameterCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterCSRule()); }
	iv_ruleParameterCS=ruleParameterCS
	{ $current=$iv_ruleParameterCS.current; }
	EOF;

// Rule ParameterCS
ruleParameterCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterCSAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterCSRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterCSAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterCSAccess().getTypeRefPathNameCSParserRuleCall_2_0());
				}
				lv_typeRef_2_0=rulePathNameCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterCSRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_2_0,
						"uk.ac.york.cs.miniocl.MiniOCL.PathNameCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstraintCS
entryRuleConstraintCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintCSRule()); }
	iv_ruleConstraintCS=ruleConstraintCS
	{ $current=$iv_ruleConstraintCS.current; }
	EOF;

// Rule ConstraintCS
ruleConstraintCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintCSAccess().getContextKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintCSAccess().getTypeRefPathNameCSParserRuleCall_1_0());
				}
				lv_typeRef_1_0=rulePathNameCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintCSRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_1_0,
						"uk.ac.york.cs.miniocl.MiniOCL.PathNameCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintCSAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintCSAccess().getInvariantsInvariantCSParserRuleCall_3_0());
				}
				lv_invariants_3_0=ruleInvariantCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintCSRule());
					}
					add(
						$current,
						"invariants",
						lv_invariants_3_0,
						"uk.ac.york.cs.miniocl.MiniOCL.InvariantCS");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstraintCSAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInvariantCS
entryRuleInvariantCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantCSRule()); }
	iv_ruleInvariantCS=ruleInvariantCS
	{ $current=$iv_ruleInvariantCS.current; }
	EOF;

// Rule InvariantCS
ruleInvariantCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inv'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantCSAccess().getInvKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getInvariantCSAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantCSAccess().getExpExpCSParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantCSRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"uk.ac.york.cs.miniocl.MiniOCL.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getInvariantCSAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleExpCS
entryRuleExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpCSRule()); }
	iv_ruleExpCS=ruleExpCS
	{ $current=$iv_ruleExpCS.current; }
	EOF;

// Rule ExpCS
ruleExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getExpCSAccess().getLogicExpCSParserRuleCall());
	}
	this_LogicExpCS_0=ruleLogicExpCS
	{
		$current = $this_LogicExpCS_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLogicExpCS
entryRuleLogicExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicExpCSRule()); }
	iv_ruleLogicExpCS=ruleLogicExpCS
	{ $current=$iv_ruleLogicExpCS.current; }
	EOF;

// Rule LogicExpCS
ruleLogicExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLogicExpCSAccess().getCallExpCSParserRuleCall_0());
		}
		this_CallExpCS_0=ruleCallExpCS
		{
			$current = $this_CallExpCS_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicExpCSAccess().getLogicExpCSLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getLogicExpCSAccess().getOpEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLogicExpCSRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<>'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getLogicExpCSAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLogicExpCSRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicExpCSAccess().getRightCallExpCSParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCallExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicExpCSRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.york.cs.miniocl.MiniOCL.CallExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCallExpCS
entryRuleCallExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallExpCSRule()); }
	iv_ruleCallExpCS=ruleCallExpCS
	{ $current=$iv_ruleCallExpCS.current; }
	EOF;

// Rule CallExpCS
ruleCallExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCallExpCSAccess().getPrimaryExpCSParserRuleCall_0());
		}
		this_PrimaryExpCS_0=rulePrimaryExpCS
		{
			$current = $this_PrimaryExpCS_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCallExpCSAccess().getCallExpCSSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='.'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getCallExpCSAccess().getOpFullStopKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCallExpCSRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='->'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getCallExpCSAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCallExpCSRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCallExpCSAccess().getNameExpNameExpCSParserRuleCall_1_2_0());
					}
					lv_nameExp_3_0=ruleNameExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCallExpCSRule());
						}
						set(
							$current,
							"nameExp",
							lv_nameExp_3_0,
							"uk.ac.york.cs.miniocl.MiniOCL.NameExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpCS
entryRulePrimaryExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpCSRule()); }
	iv_rulePrimaryExpCS=rulePrimaryExpCS
	{ $current=$iv_rulePrimaryExpCS.current; }
	EOF;

// Rule PrimaryExpCS
rulePrimaryExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getNameExpCSParserRuleCall_0());
		}
		this_NameExpCS_0=ruleNameExpCS
		{
			$current = $this_NameExpCS_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getLiteralExpCSParserRuleCall_1());
		}
		this_LiteralExpCS_1=ruleLiteralExpCS
		{
			$current = $this_LiteralExpCS_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNameExpCS
entryRuleNameExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameExpCSRule()); }
	iv_ruleNameExpCS=ruleNameExpCS
	{ $current=$iv_ruleNameExpCS.current; }
	EOF;

// Rule NameExpCS
ruleNameExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNameExpCSAccess().getExpNamePathNameCSParserRuleCall_0_0());
				}
				lv_expName_0_0=rulePathNameCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameExpCSRule());
					}
					set(
						$current,
						"expName",
						lv_expName_0_0,
						"uk.ac.york.cs.miniocl.MiniOCL.PathNameCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNameExpCSAccess().getRoundedBracketsRoundedBracketClauseCSParserRuleCall_1_0());
				}
				lv_roundedBrackets_1_0=ruleRoundedBracketClauseCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameExpCSRule());
					}
					set(
						$current,
						"roundedBrackets",
						lv_roundedBrackets_1_0,
						"uk.ac.york.cs.miniocl.MiniOCL.RoundedBracketClauseCS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNameExpCSAccess().getCallExpCallExpCSParserRuleCall_2_0());
				}
				lv_callExp_2_0=ruleCallExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameExpCSRule());
					}
					set(
						$current,
						"callExp",
						lv_callExp_2_0,
						"uk.ac.york.cs.miniocl.MiniOCL.CallExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRoundedBracketClauseCS
entryRuleRoundedBracketClauseCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoundedBracketClauseCSRule()); }
	iv_ruleRoundedBracketClauseCS=ruleRoundedBracketClauseCS
	{ $current=$iv_ruleRoundedBracketClauseCS.current; }
	EOF;

// Rule RoundedBracketClauseCS
ruleRoundedBracketClauseCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRoundedBracketClauseCSAccess().getRoundedBracketClauseCSAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRoundedBracketClauseCSAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRoundedBracketClauseCSAccess().getArgsExpCSParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRoundedBracketClauseCSRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"uk.ac.york.cs.miniocl.MiniOCL.ExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getRoundedBracketClauseCSAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRoundedBracketClauseCSAccess().getArgsExpCSParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRoundedBracketClauseCSRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"uk.ac.york.cs.miniocl.MiniOCL.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRoundedBracketClauseCSAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLiteralExpCS
entryRuleLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpCSRule()); }
	iv_ruleLiteralExpCS=ruleLiteralExpCS
	{ $current=$iv_ruleLiteralExpCS.current; }
	EOF;

// Rule LiteralExpCS
ruleLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLiteralExpCSAccess().getIntLiteralExpCSParserRuleCall_0());
		}
		this_IntLiteralExpCS_0=ruleIntLiteralExpCS
		{
			$current = $this_IntLiteralExpCS_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLiteralExpCSAccess().getStringLiteralExpCSParserRuleCall_1());
		}
		this_StringLiteralExpCS_1=ruleStringLiteralExpCS
		{
			$current = $this_StringLiteralExpCS_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLiteralExpCSAccess().getBooleanLiteralExpCSParserRuleCall_2());
		}
		this_BooleanLiteralExpCS_2=ruleBooleanLiteralExpCS
		{
			$current = $this_BooleanLiteralExpCS_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntLiteralExpCS
entryRuleIntLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralExpCSRule()); }
	iv_ruleIntLiteralExpCS=ruleIntLiteralExpCS
	{ $current=$iv_ruleIntLiteralExpCS.current; }
	EOF;

// Rule IntLiteralExpCS
ruleIntLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_intSymbol_0_0=RULE_INT
			{
				newLeafNode(lv_intSymbol_0_0, grammarAccess.getIntLiteralExpCSAccess().getIntSymbolINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralExpCSRule());
				}
				setWithLastConsumed(
					$current,
					"intSymbol",
					lv_intSymbol_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStringLiteralExpCS
entryRuleStringLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralExpCSRule()); }
	iv_ruleStringLiteralExpCS=ruleStringLiteralExpCS
	{ $current=$iv_ruleStringLiteralExpCS.current; }
	EOF;

// Rule StringLiteralExpCS
ruleStringLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_stringSymbol_0_0=RULE_STRING
			{
				newLeafNode(lv_stringSymbol_0_0, grammarAccess.getStringLiteralExpCSAccess().getStringSymbolSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralExpCSRule());
				}
				setWithLastConsumed(
					$current,
					"stringSymbol",
					lv_stringSymbol_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteralExpCS
entryRuleBooleanLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralExpCSRule()); }
	iv_ruleBooleanLiteralExpCS=ruleBooleanLiteralExpCS
	{ $current=$iv_ruleBooleanLiteralExpCS.current; }
	EOF;

// Rule BooleanLiteralExpCS
ruleBooleanLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanLiteralExpCSAccess().getBooleanExpCSAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_boolSymbol_1_0='true'
					{
						newLeafNode(lv_boolSymbol_1_0, grammarAccess.getBooleanLiteralExpCSAccess().getBoolSymbolTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanLiteralExpCSRule());
						}
						setWithLastConsumed($current, "boolSymbol", true, "true");
					}
				)
			)
			    |
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralExpCSAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRulePathNameCS
entryRulePathNameCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathNameCSRule()); }
	iv_rulePathNameCS=rulePathNameCS
	{ $current=$iv_rulePathNameCS.current; }
	EOF;

// Rule PathNameCS
rulePathNameCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPathNameCSAccess().getPathPathElementCSParserRuleCall_0_0());
				}
				lv_path_0_0=rulePathElementCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPathNameCSRule());
					}
					add(
						$current,
						"path",
						lv_path_0_0,
						"uk.ac.york.cs.miniocl.MiniOCL.PathElementCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='::'
			{
				newLeafNode(otherlv_1, grammarAccess.getPathNameCSAccess().getColonColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPathNameCSAccess().getPathPathElementCSParserRuleCall_1_1_0());
					}
					lv_path_2_0=rulePathElementCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathNameCSRule());
						}
						add(
							$current,
							"path",
							lv_path_2_0,
							"uk.ac.york.cs.miniocl.MiniOCL.PathElementCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePathElementCS
entryRulePathElementCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathElementCSRule()); }
	iv_rulePathElementCS=rulePathElementCS
	{ $current=$iv_rulePathElementCS.current; }
	EOF;

// Rule PathElementCS
rulePathElementCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_pathName_0_0=RULE_ID
			{
				newLeafNode(lv_pathName_0_0, grammarAccess.getPathElementCSAccess().getPathNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPathElementCSRule());
				}
				setWithLastConsumed(
					$current,
					"pathName",
					lv_pathName_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
