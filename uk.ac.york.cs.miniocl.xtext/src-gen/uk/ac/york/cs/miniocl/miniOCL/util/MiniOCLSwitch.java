/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package uk.ac.york.cs.miniocl.miniOCL.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import uk.ac.york.cs.miniocl.miniOCL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see uk.ac.york.cs.miniocl.miniOCL.MiniOCLPackage
 * @generated
 */
public class MiniOCLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MiniOCLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniOCLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MiniOCLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MiniOCLPackage.ROOT_CS:
      {
        RootCS rootCS = (RootCS)theEObject;
        T result = caseRootCS(rootCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.PACKAGE_CS:
      {
        PackageCS packageCS = (PackageCS)theEObject;
        T result = casePackageCS(packageCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.CLASS_CS:
      {
        ClassCS classCS = (ClassCS)theEObject;
        T result = caseClassCS(classCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.PROPERTY_CS:
      {
        PropertyCS propertyCS = (PropertyCS)theEObject;
        T result = casePropertyCS(propertyCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.OPERATION_CS:
      {
        OperationCS operationCS = (OperationCS)theEObject;
        T result = caseOperationCS(operationCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.PARAMETER_CS:
      {
        ParameterCS parameterCS = (ParameterCS)theEObject;
        T result = caseParameterCS(parameterCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.CONSTRAINT_CS:
      {
        ConstraintCS constraintCS = (ConstraintCS)theEObject;
        T result = caseConstraintCS(constraintCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.INVARIANT_CS:
      {
        InvariantCS invariantCS = (InvariantCS)theEObject;
        T result = caseInvariantCS(invariantCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.EXP_CS:
      {
        ExpCS expCS = (ExpCS)theEObject;
        T result = caseExpCS(expCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.LOGIC_EXP_CS:
      {
        LogicExpCS logicExpCS = (LogicExpCS)theEObject;
        T result = caseLogicExpCS(logicExpCS);
        if (result == null) result = caseExpCS(logicExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.CALL_EXP_CS:
      {
        CallExpCS callExpCS = (CallExpCS)theEObject;
        T result = caseCallExpCS(callExpCS);
        if (result == null) result = caseLogicExpCS(callExpCS);
        if (result == null) result = caseExpCS(callExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.PRIMARY_EXP_CS:
      {
        PrimaryExpCS primaryExpCS = (PrimaryExpCS)theEObject;
        T result = casePrimaryExpCS(primaryExpCS);
        if (result == null) result = caseCallExpCS(primaryExpCS);
        if (result == null) result = caseLogicExpCS(primaryExpCS);
        if (result == null) result = caseExpCS(primaryExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.NAME_EXP_CS:
      {
        NameExpCS nameExpCS = (NameExpCS)theEObject;
        T result = caseNameExpCS(nameExpCS);
        if (result == null) result = casePrimaryExpCS(nameExpCS);
        if (result == null) result = caseCallExpCS(nameExpCS);
        if (result == null) result = caseLogicExpCS(nameExpCS);
        if (result == null) result = caseExpCS(nameExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.ROUNDED_BRACKET_CLAUSE_CS:
      {
        RoundedBracketClauseCS roundedBracketClauseCS = (RoundedBracketClauseCS)theEObject;
        T result = caseRoundedBracketClauseCS(roundedBracketClauseCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.LITERAL_EXP_CS:
      {
        LiteralExpCS literalExpCS = (LiteralExpCS)theEObject;
        T result = caseLiteralExpCS(literalExpCS);
        if (result == null) result = casePrimaryExpCS(literalExpCS);
        if (result == null) result = caseCallExpCS(literalExpCS);
        if (result == null) result = caseLogicExpCS(literalExpCS);
        if (result == null) result = caseExpCS(literalExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.INT_LITERAL_EXP_CS:
      {
        IntLiteralExpCS intLiteralExpCS = (IntLiteralExpCS)theEObject;
        T result = caseIntLiteralExpCS(intLiteralExpCS);
        if (result == null) result = caseLiteralExpCS(intLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(intLiteralExpCS);
        if (result == null) result = caseCallExpCS(intLiteralExpCS);
        if (result == null) result = caseLogicExpCS(intLiteralExpCS);
        if (result == null) result = caseExpCS(intLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.STRING_LITERAL_EXP_CS:
      {
        StringLiteralExpCS stringLiteralExpCS = (StringLiteralExpCS)theEObject;
        T result = caseStringLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = caseLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(stringLiteralExpCS);
        if (result == null) result = caseCallExpCS(stringLiteralExpCS);
        if (result == null) result = caseLogicExpCS(stringLiteralExpCS);
        if (result == null) result = caseExpCS(stringLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.BOOLEAN_LITERAL_EXP_CS:
      {
        BooleanLiteralExpCS booleanLiteralExpCS = (BooleanLiteralExpCS)theEObject;
        T result = caseBooleanLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = caseLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(booleanLiteralExpCS);
        if (result == null) result = caseCallExpCS(booleanLiteralExpCS);
        if (result == null) result = caseLogicExpCS(booleanLiteralExpCS);
        if (result == null) result = caseExpCS(booleanLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.PATH_NAME_CS:
      {
        PathNameCS pathNameCS = (PathNameCS)theEObject;
        T result = casePathNameCS(pathNameCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.PATH_ELEMENT_CS:
      {
        PathElementCS pathElementCS = (PathElementCS)theEObject;
        T result = casePathElementCS(pathElementCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MiniOCLPackage.BOOLEAN_EXP_CS:
      {
        BooleanExpCS booleanExpCS = (BooleanExpCS)theEObject;
        T result = caseBooleanExpCS(booleanExpCS);
        if (result == null) result = caseBooleanLiteralExpCS(booleanExpCS);
        if (result == null) result = caseLiteralExpCS(booleanExpCS);
        if (result == null) result = casePrimaryExpCS(booleanExpCS);
        if (result == null) result = caseCallExpCS(booleanExpCS);
        if (result == null) result = caseLogicExpCS(booleanExpCS);
        if (result == null) result = caseExpCS(booleanExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Root CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Root CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRootCS(RootCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageCS(PackageCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassCS(ClassCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyCS(PropertyCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationCS(OperationCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterCS(ParameterCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraintCS(ConstraintCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantCS(InvariantCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpCS(ExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicExpCS(LogicExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallExpCS(CallExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpCS(PrimaryExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameExpCS(NameExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rounded Bracket Clause CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rounded Bracket Clause CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoundedBracketClauseCS(RoundedBracketClauseCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralExpCS(LiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntLiteralExpCS(IntLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExpCS(StringLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExpCS(BooleanLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Name CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Name CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathNameCS(PathNameCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Element CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Element CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathElementCS(PathElementCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanExpCS(BooleanExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MiniOCLSwitch
