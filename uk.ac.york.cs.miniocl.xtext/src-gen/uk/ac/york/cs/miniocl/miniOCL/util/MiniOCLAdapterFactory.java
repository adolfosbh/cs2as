/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package uk.ac.york.cs.miniocl.miniOCL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uk.ac.york.cs.miniocl.miniOCL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uk.ac.york.cs.miniocl.miniOCL.MiniOCLPackage
 * @generated
 */
public class MiniOCLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MiniOCLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniOCLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MiniOCLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MiniOCLSwitch<Adapter> modelSwitch =
    new MiniOCLSwitch<Adapter>()
    {
      @Override
      public Adapter caseRootCS(RootCS object)
      {
        return createRootCSAdapter();
      }
      @Override
      public Adapter casePackageCS(PackageCS object)
      {
        return createPackageCSAdapter();
      }
      @Override
      public Adapter caseClassCS(ClassCS object)
      {
        return createClassCSAdapter();
      }
      @Override
      public Adapter casePropertyCS(PropertyCS object)
      {
        return createPropertyCSAdapter();
      }
      @Override
      public Adapter caseOperationCS(OperationCS object)
      {
        return createOperationCSAdapter();
      }
      @Override
      public Adapter caseParameterCS(ParameterCS object)
      {
        return createParameterCSAdapter();
      }
      @Override
      public Adapter caseConstraintCS(ConstraintCS object)
      {
        return createConstraintCSAdapter();
      }
      @Override
      public Adapter caseInvariantCS(InvariantCS object)
      {
        return createInvariantCSAdapter();
      }
      @Override
      public Adapter caseExpCS(ExpCS object)
      {
        return createExpCSAdapter();
      }
      @Override
      public Adapter caseLogicExpCS(LogicExpCS object)
      {
        return createLogicExpCSAdapter();
      }
      @Override
      public Adapter caseCallExpCS(CallExpCS object)
      {
        return createCallExpCSAdapter();
      }
      @Override
      public Adapter casePrimaryExpCS(PrimaryExpCS object)
      {
        return createPrimaryExpCSAdapter();
      }
      @Override
      public Adapter caseNameExpCS(NameExpCS object)
      {
        return createNameExpCSAdapter();
      }
      @Override
      public Adapter caseRoundedBracketClauseCS(RoundedBracketClauseCS object)
      {
        return createRoundedBracketClauseCSAdapter();
      }
      @Override
      public Adapter caseLiteralExpCS(LiteralExpCS object)
      {
        return createLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseIntLiteralExpCS(IntLiteralExpCS object)
      {
        return createIntLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseStringLiteralExpCS(StringLiteralExpCS object)
      {
        return createStringLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseBooleanLiteralExpCS(BooleanLiteralExpCS object)
      {
        return createBooleanLiteralExpCSAdapter();
      }
      @Override
      public Adapter casePathNameCS(PathNameCS object)
      {
        return createPathNameCSAdapter();
      }
      @Override
      public Adapter casePathElementCS(PathElementCS object)
      {
        return createPathElementCSAdapter();
      }
      @Override
      public Adapter caseBooleanExpCS(BooleanExpCS object)
      {
        return createBooleanExpCSAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.RootCS <em>Root CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.RootCS
   * @generated
   */
  public Adapter createRootCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.PackageCS <em>Package CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.PackageCS
   * @generated
   */
  public Adapter createPackageCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.ClassCS <em>Class CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.ClassCS
   * @generated
   */
  public Adapter createClassCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.PropertyCS <em>Property CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.PropertyCS
   * @generated
   */
  public Adapter createPropertyCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.OperationCS <em>Operation CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.OperationCS
   * @generated
   */
  public Adapter createOperationCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.ParameterCS <em>Parameter CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.ParameterCS
   * @generated
   */
  public Adapter createParameterCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.ConstraintCS <em>Constraint CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.ConstraintCS
   * @generated
   */
  public Adapter createConstraintCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.InvariantCS <em>Invariant CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.InvariantCS
   * @generated
   */
  public Adapter createInvariantCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.ExpCS <em>Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.ExpCS
   * @generated
   */
  public Adapter createExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.LogicExpCS <em>Logic Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.LogicExpCS
   * @generated
   */
  public Adapter createLogicExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.CallExpCS <em>Call Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.CallExpCS
   * @generated
   */
  public Adapter createCallExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.PrimaryExpCS <em>Primary Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.PrimaryExpCS
   * @generated
   */
  public Adapter createPrimaryExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.NameExpCS <em>Name Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.NameExpCS
   * @generated
   */
  public Adapter createNameExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.RoundedBracketClauseCS <em>Rounded Bracket Clause CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.RoundedBracketClauseCS
   * @generated
   */
  public Adapter createRoundedBracketClauseCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.LiteralExpCS <em>Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.LiteralExpCS
   * @generated
   */
  public Adapter createLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.IntLiteralExpCS <em>Int Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.IntLiteralExpCS
   * @generated
   */
  public Adapter createIntLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.StringLiteralExpCS <em>String Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.StringLiteralExpCS
   * @generated
   */
  public Adapter createStringLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.BooleanLiteralExpCS <em>Boolean Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.BooleanLiteralExpCS
   * @generated
   */
  public Adapter createBooleanLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.PathNameCS <em>Path Name CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.PathNameCS
   * @generated
   */
  public Adapter createPathNameCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.PathElementCS <em>Path Element CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.PathElementCS
   * @generated
   */
  public Adapter createPathElementCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.miniocl.miniOCL.BooleanExpCS <em>Boolean Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.miniocl.miniOCL.BooleanExpCS
   * @generated
   */
  public Adapter createBooleanExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MiniOCLAdapterFactory
