-- Transformation model parameters:
--     OCL - A CompleteOCL document 
--     QVTi - The output QVTi model

import 'ocl2qvtiUtils.eol';

pre {
	var MIDDLE_PACKAGE = MiddleMM!Package.all.first();
	var LEFTCS_PACKAGE = OCL!Package.all.first();	 
	var RIGHT = "rightAS";
	var LEFT = "leftCS";
	var MIDDLE = "middle";
	
	var qvtiModel = new QVTi!ImperativeModel;
	
	var qvtiTransf = new QVTi!Transformation;
	qvtiTransf.name = OCL!Root.all.first().name.replace(".ocl","");
	qvtiTransf.modelParameter.addAll(QVTi!TypedModel.all());
	
	var typedModel = new QVTi!TypedModel;
	typedModel.name = LEFT;
	typedModel.usedPackage.add(
		OCL!Import.all.importedNamespace.nestedPackage.flatten().selectOne(x 
				| x.name = OCL!ConstructorExp.all.first().getExpressionContextType().package.name));
	qvtiTransf.modelParameter.add(typedModel);
	
	typedModel = new QVTi!TypedModel;
	typedModel.name = RIGHT;
	typedModel.usedPackage.add(
		OCL!Import.all.importedNamespace.nestedPackage.flatten().selectOne(x 
				| x.name = OCL!ConstructorExp.all.first().type.package.name));
	qvtiTransf.modelParameter.add(typedModel);
	
	typedModel = new QVTi!TypedModel;
	typedModel.name = MIDDLE;
	typedModel.usedPackage.add(MIDDLE_PACKAGE);
	qvtiTransf.modelParameter.add(typedModel);
	
	qvtiModel.nestedPackage.add(qvtiTransf);
}


rule ConstructorExp2Mapping_LM
	transform s : OCL!ConstructorExp
	to t : QVTi!Mapping {
	
	guard {
		return s.closure(x|x.eContainer()).contains(LEFTCS_PACKAGE); 
	}
	
	t.name = 'm'+s.getTraceElementName()+'_LM';
	
	var leftDomain = s.createLM_LeftDomain();
	var middleDomain = s.createLM_MiddleDomain();
	
	t.domain.add(leftDomain);
	t.domain.add(middleDomain);
	
	var guardPattern = new QVTi!GuardPattern;
	var bottomPattern = new QVTi!BottomPattern;
	
	var pAssignment = new QVTi!MiddlePropertyAssignment;
	var value = new QVTi!VariableExp;
	value.referredVariable = leftDomain.guardPattern.variable.first();
	value.type = value.referredVariable.type;
	var slotExpression = new QVTi!VariableExp;	
	slotExpression.referredVariable = middleDomain.bottomPattern.realizedVariable.first();
	slotExpression.type = slotExpression.referredVariable.type;
	
	pAssignment.value = value;
	pAssignment.slotExpression = slotExpression;
	pAssignment.targetProperty = slotExpression.type.ownedAttribute.selectOne(x | x.name = value.type.name.firstToLowerCase());	
	
	bottomPattern.assignment.add(pAssignment);
		
	t.guardPattern = guardPattern;
	t.bottomPattern = bottomPattern;
}

rule ConstructorExp2Mapping_MR
	transform s : OCL!ConstructorExp
	to t : QVTi!Mapping {
	
	guard {
		return s.closure(x|x.eContainer()).contains(LEFTCS_PACKAGE); 
	}
	
	t.name = 'm'+s.getTraceElementName()+'_MR';

	var middleDomain = s.createMR_MiddleDomain();
	var rightDomain = s.createMR_RightDomain();
		
	t.domain.add(middleDomain);
	t.domain.add(rightDomain);
	
	var guardPattern = new QVTi!GuardPattern;
	var bottomPattern = new QVTi!BottomPattern;

	var pAssignment = new QVTi!MiddlePropertyAssignment;
	var value = new QVTi!VariableExp;
	value.referredVariable = rightDomain.bottomPattern.realizedVariable.first();
	value.type = value.referredVariable.type;
	var slotExpression = new QVTi!VariableExp;	
	slotExpression.referredVariable = middleDomain.guardPattern.variable.first();
	slotExpression.type = slotExpression.referredVariable.type;
	
	pAssignment.value = value;
	pAssignment.slotExpression = slotExpression;
	pAssignment.targetProperty = slotExpression.type.ownedAttribute.selectOne(x | x.name = value.type.name.firstToLowerCase());	
	
	bottomPattern.assignment.add(pAssignment);
		
	t.guardPattern = guardPattern;
	t.bottomPattern = bottomPattern;
}


rule ConstructorPart2UpdateMapping
	transform s : OCL!ConstructorPart
	to t : QVTi!Mapping {
	
	guard { 
		var astCalls = s.getAstCalls();
		return astCalls.isEmpty() and s.closure(x|x.eContainer()).contains(LEFTCS_PACKAGE);
	}
		
	var constructorExp = s.eContainer();
	var refProp = s.referredProperty;
		
	t.name = 'u'+constructorExp.type.name+'_'+refProp.name;

	var rightDomain = constructorExp.createUpdate_RightDomain();
	var middleDomain = constructorExp.createUpdate_MiddleDomain();
	
	t.domain.add(rightDomain);	
	t.domain.add(middleDomain);
		
	var guardPattern = new QVTi!GuardPattern;
	var bottomPattern = new QVTi!BottomPattern;

	t.guardPattern = guardPattern;
	t.bottomPattern = bottomPattern;
}
--rule Root2ImperativeModel 
--	transform s : OCL!Root
--	to t : QVTi!ImperativeModel {
	
	
--	var qvtiTransf = new QVTi!Transformation;
--	qvtiTransf.name = s.name.replace(".ocl","");
--	qvtiTransf.modelParameter.addAll(QVTi!TypedModel.all());
--	qvtiTransf.`rule`.addAll(QVTi!Mapping.all());
	
--	t.nestedPackage.add(qvtiTransf);
--}

operation OCL!ConstructorExp createLM_LeftDomain ( ) : QVTi!CoreDomain {
	var contextType = self.getExpressionContextType();
	var domain = new QVTi!CoreDomain;	
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= LEFT);
	domain.isCheckable = true;
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!Variable;
	variable.name = contextType.name.firstToLowerCase();
	variable.type = contextType;
	
	guardPattern.variable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createLM_MiddleDomain () : QVTi!CoreDomain {
	var contextType = self.getExpressionContextType();

	var domain = new QVTi!CoreDomain;	
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= MIDDLE);
	domain.isEnforceable = true;
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!RealizedVariable;
	variable.name = self.getTraceElementVariableName();
	variable.type = MIDDLE_PACKAGE.ownedType.selectOne(x| x.name = self.getTraceElementName());

	bottomPattern.realizedVariable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createMR_MiddleDomain () : QVTi!CoreDomain {
	var contextType = self.getExpressionContextType();
		
	var domain = new QVTi!CoreDomain;
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= MIDDLE);
	domain.isCheckable = true;
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!Variable;
	variable.name = self.getTraceElementVariableName();
	variable.type = MIDDLE_PACKAGE.ownedType.selectOne(x| x.name = self.getTraceElementName());
	
	guardPattern.variable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createMR_RightDomain () : QVTi!CoreDomain {
	var constructedType = self.type;
		
	var domain = new QVTi!CoreDomain;
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= RIGHT);
	domain.isEnforceable = true;
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!RealizedVariable;
	variable.name = constructedType.name.firstToLowerCase();
	variable.type = constructedType;

	bottomPattern.realizedVariable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createUpdate_RightDomain () : QVTi!CoreDomain {
	var constructedType = self.type;
		
	var domain = new QVTi!CoreDomain;
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= RIGHT);
	domain.isEnforceable = true;
	
	var guardPattern = new QVTi!GuardPattern;
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!Variable;
	variable.name = constructedType.name.firstToLowerCase();
	variable.type = constructedType;

	guardPattern.variable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createUpdate_MiddleDomain () : QVTi!CoreDomain {
	var constructedType = self.type;
		
	var domain = new QVTi!CoreDomain;
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= MIDDLE);
	domain.isCheckable = true;
	
	var guardPattern = new QVTi!GuardPattern;
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!Variable;
	variable.name = self.getTraceElementVariableName();
	variable.type = MIDDLE_PACKAGE.ownedType.selectOne(x| x.name = self.getTraceElementName());

	guardPattern.variable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorPart getAstCalls() : Collection(OCL!OperationCallExpression) {
	var result = Sequence {};  
	for (exp in self.initExpression.getAllContents().including(self.initExpression)) {
		if (exp.isKindOf(OCL!OperationCallExp) and exp.referredOperation.name = "ast") {
			result.add(exp);
		}
	}
	return result;
}

post {
	qvtiTransf.`rule`.addAll(QVTi!Mapping.all());
	"OCL 2 QVTi completed".println();
}