import 'ocl2qvtiUtils.eol';

pre {
	var qvtiModel = new QVTi!ImperativeModel;
	
	var qvtiTransf = new QVTi!Transformation;
	qvtiTransf.name = OCL!Root.all.first().name.replace(".ocl","");
	qvtiTransf.modelParameter.addAll(QVTi!TypedModel.all());
	
	var typedModel = new QVTi!TypedModel;
	typedModel.name = "leftCS";
	typedModel.usedPackage.add(
		OCL!Import.all.importedNamespace.nestedPackage.flatten().selectOne(x 
				| x.name = OCL!ConstructorExp.all.selectOne(x|true).getExpressionContextType().package.name));
	qvtiTransf.modelParameter.add(typedModel);
	
	typedModel = new QVTi!TypedModel;
	typedModel.name = "rightAS";
	typedModel.usedPackage.add(
		OCL!Import.all.importedNamespace.nestedPackage.flatten().selectOne(x 
				| x.name = OCL!ConstructorExp.all.selectOne(x|true).type.package.name));	
	qvtiTransf.modelParameter.add(typedModel);		
	
	typedModel = new QVTi!TypedModel;
	typedModel.name = "middle";
	typedModel.usedPackage.add(MiddleMM!Package.all.first());
	qvtiTransf.modelParameter.add(typedModel);
	
	qvtiModel.nestedPackage.add(qvtiTransf);
}
-- Transformation model parameters:
--     OCL - A CompleteOCL document 
--     QVTi - The output QVTi model

rule ConstructorExp2Mapping_LM
	transform s : OCL!ConstructorExp
	to t : QVTi!Mapping {
	
	t.name = 'm'+s.getTraceElementName()+'_LM';
	
	var leftDomain = s.createLM_LeftDomain();
	var middleDomain = s.createLM_MiddleDomain();
	
	t.domain.add(leftDomain);
	t.domain.add(middleDomain);
	
	var guardPattern = new QVTi!GuardPattern;
	var bottomPattern = new QVTi!BottomPattern;
	
	--var pAssignment = QVTi!MiddlePropertyAssignment;
	
	t.guardPattern = guardPattern;
	t.bottomPattern = bottomPattern;
}

rule ConstructorExp2Mapping_MR
	transform s : OCL!ConstructorExp
	to t : QVTi!Mapping {
	
	t.name = 'm'+s.getTraceElementName()+'_MR';

	var middleDomain = s.createMR_MiddleDomain();
	var rightDomain = s.createMR_RightDomain();
		
	t.domain.add(middleDomain);
	t.domain.add(rightDomain);
	
	var guardPattern = new QVTi!GuardPattern;
	var bottomPattern = new QVTi!BottomPattern;

	t.guardPattern = guardPattern;
	t.bottomPattern = bottomPattern;
}

--rule Root2ImperativeModel 
--	transform s : OCL!Root
--	to t : QVTi!ImperativeModel {
	
	
--	var qvtiTransf = new QVTi!Transformation;
--	qvtiTransf.name = s.name.replace(".ocl","");
--	qvtiTransf.modelParameter.addAll(QVTi!TypedModel.all());
--	qvtiTransf.`rule`.addAll(QVTi!Mapping.all());
	
--	t.nestedPackage.add(qvtiTransf);
--}

operation OCL!ConstructorExp createLM_LeftDomain ( ) : QVTi!CoreDomain {
	var contextType = self.getExpressionContextType();
	var domain = new QVTi!CoreDomain;	
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= "leftCS");
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!Variable;
	variable.name = contextType.name.firstToLowerCase();
	variable.type = contextType;
	
	guardPattern.variable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createLM_MiddleDomain () : QVTi!CoreDomain {
	var contextType = self.getExpressionContextType();
		
	var domain = new QVTi!CoreDomain;	
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= "middle");
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!RealizedVariable;
	variable.name = self.getTraceElementName().firstToLowerCase();
	-- FIXME variable.type = the trace element type;

	bottomPattern.realizedVariable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createMR_MiddleDomain () : QVTi!CoreDomain {
	var contextType = self.getExpressionContextType();
		
	var domain = new QVTi!CoreDomain;	
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= "middle");
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!Variable;
	variable.name = self.getTraceElementName().firstToLowerCase();
	variable.type = contextType;
	
	guardPattern.variable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

operation OCL!ConstructorExp createMR_RightDomain () : QVTi!CoreDomain {
	var constructedType = self.type;
		
	var domain = new QVTi!CoreDomain;
	domain.typedModel = QVTi!TypedModel.all.selectOne(x | x.name= "rightAS");
	
	var guardPattern = new QVTi!GuardPattern;	
	var bottomPattern = new QVTi!BottomPattern;
	
	var variable = new QVTi!RealizedVariable;
	variable.name = constructedType.name.firstToLowerCase();
	variable.type = constructedType;

	bottomPattern.realizedVariable.add(variable);
	
	domain.guardPattern = guardPattern;
	domain.bottomPattern = bottomPattern;
	return domain;
}

post {
	qvtiTransf.`rule`.addAll(QVTi!Mapping.all());
	"OCL 2 QVTi completed".println();
}