import 'SourceMM1.ecore'
import 'TargetMM1.ecore'
import 'Environment.ecore'
import 'TargetLookup.ocl'

package source

context SRoot
def : ast() : target::TRoot =
	target::TRoot {
		ownedA = ownedX.ast()
	}

context X
def : ast() : target::A =
	invalid -- To be overriden

context AmbX
def : ast() : target::A =
	if isA1
	then target::A1 {
		ownsB = ownsY.oclAsType(Y1).ast()
	}
	else target::A2 {
		ownsC = ownsY.oclAsType(Y2).ast()
	}
	endif

context Y1	
def : ast() : target::B =
	target::B {
		ownsD = ownsZ.ast(),
		name = name
	}
	
context Y2	
def : ast() : target::C =
	target::C {
		ownsD = ownsZ.ast(),
		name = name
	}

context Z
def : ast() : target::D =
	invalid -- To be overriden
	
context AmbZ
def : ast() : target::D =
	if toY.oclIsKindOf(source::Y1)
	then target::D {
		toA = toY.oclAsType(source::Y1).ast().toA1,
		name = name,
		refsB = ast().lookupB(name) -- Lookups are performed from the created ast element
									-- Problem : disambiguating lookups need to start from the container 
	}
	else target::D {
		toA = toY.oclAsType(source::Y2).ast().toA2,
		name = name,
		refsC = ast().lookupC(name) -- Lookups are performed from the created ast element
									-- Problem : disambiguating lookups need to start from the container 
	}
	endif

endpackage
