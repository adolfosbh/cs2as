import ClassesCS: 'ClassesCS.ecore'::classescs;
import ClassesAS: 'Classes.ecore'::classes;

transformation classesCS2classesAS {
    cAS imports ClassesAS;
    cCS imports ClassesCS;
}

map rootCS2rootAS in classesCS2classesAS {
    check cCS (rootCS : RootCS) {}    
    enforce cAS () {
    	realize rootAS : Root
    }
    
    where () {
    	rootCS.ast := rootAS;
    }
}

map packageCS2packageAS in classesCS2classesAS {
    check cCS (packageCS : PackageCS) {}    
    enforce cAS () {
    	realize packageAS : Package
    }
    
    where () {
    	packageCS.ast := packageAS;    	
    }
}

map rootAS_ownedPackages in classesCS2classesAS {
	check cCS(rootCS : RootCS, packageCS : PackageCS){}
	check cAS(rootAS : Root, packageAS : Package){}
	where (	rootCS.ast = rootAS;
			packageCS.ast = packageAS;
			rootCS.ownedPackages->includes(packageCS);
	) {
		rootAS.ownedPackages := rootAS.ownedPackages->including(packageAS);
	}
}

map packageAS_name in classesCS2classesAS {
	check cCS(packageCS : PackageCS) {}
	check cAS(packageAS : Package) {}
	
	where (packageCS.ast = packageAS;)
	{
		packageAS.name := packageCS.name;
	}
}