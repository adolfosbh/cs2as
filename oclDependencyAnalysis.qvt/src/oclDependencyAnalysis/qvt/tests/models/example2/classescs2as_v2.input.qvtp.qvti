import ClassesCS: 'ClassesCS.ecore'::classescs;
import ClassesAS: 'Classes.ecore'::classes;

transformation classesCS2classesAS {
    cAS imports ClassesAS;
    cCS imports ClassesCS;
}

map rootCS2rootAS in classesCS2classesAS {
    check cCS (rootCS : RootCS) {}    
    enforce cAS () {
    	realize rootAS : Root
    }
    
    where () {
    	rootCS.ast := rootAS;
    }
}

map packageCS2packageAS in classesCS2classesAS {
    check cCS (packageCS : PackageCS) {}    
    enforce cAS () {
    	realize packageAS : Package
    }
    
    where () {
    	packageCS.ast := packageAS;
    }
}

map rootAS_ownedPackages in classesCS2classesAS {
	check cCS(rootCS : RootCS){}
	enforce cAS(){}
	where () {
		rootCS.ast.oclAsType(Root).ownedPackages := rootCS.ownedPackages.ast.oclAsType(Package);
	}
}

map packageAS_name in classesCS2classesAS {
	check cCS(packageCS : PackageCS) {}
	enforce cAS() {}	
	where ()
	{
		packageCS.ast.oclAsType(Package).name := packageCS.name;
	}
}