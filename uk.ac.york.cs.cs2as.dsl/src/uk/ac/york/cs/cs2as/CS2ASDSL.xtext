grammar uk.ac.york.cs.cs2as.CS2ASDSL with org.eclipse.ocl.xtext.essentialocl.EssentialOCL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.pivot/model/Pivot.ecore" as pivot
import "platform:/resource/org.eclipse.ocl.xtext.base/model/BaseCS.ecore" as base
import "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.ecore" as essentialocl

generate cs2as_dsl "http://www.ac.uk/york/cs/cs2as/CS2ASDSL"

CS2ASModel:
	source=SourceDomain
	target=TargetDomain
	(mappingSect=MappingSect 
	& disambiguationSect=DisambiguationSect? 
	& nameresoSect=NameResolutionSect?
	& helpersSect=HelpersSect?
	)
;

SourceDomain:
	'source' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*
;

TargetDomain:
	'target' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*
;

MetaModelDecl returns base::ImportCS:
	(name=ID ':')? ownedPathName=URIPathNameCS (isAll?='::*')?
;

MappingSect:
	{MappingSect}
	'mappings' '{'
		mappings+=MappingDef*
	'}'	
;

MappingDef:
	MappingCreation | MappingReference
;

MappingCreation:
	'create' to=PathNameCS 'from'  from=PathNameCS  ('when' rule=ID )? '{'
		properties += PropertyDef*
	'}'
;

PropertyDef:
	(redefine?='redefine')? propRef=PathNameCS ':=' 
	propInit=ExpCS ';'
;


MappingReference:
	'ref' to=PathNameCS 'from'  from=PathNameCS
	':=' expression=ExpCS
;


DisambiguationSect:
	{DisambiguationSect}
	'disambiguation' '{'
		disambiguations+=DisambiguationDef*
	'}'
;

DisambiguationDef:
	classRef=PathNameCS '{'
		rules+=DisambiguationRule*
	'}'
;


DisambiguationRule:
	name=SIMPLE_ID ':=' exp=ExpCS 
	';'
;

NameResolutionSect:
	{NameResolutionSect}
	'name_resolution' '{'
		targetsDef=Targets?
		inputsDef=Inputs?
		providersDef=Providers?
	'}'
;

Targets:
	{Targets}
	'targets' '{'
		targets+=Target*
	'}'
;

Target:
	classRef=PathNameCS  
	('using' propRef=PathNameCS ignoreCase?='ignore_case'? 
		escapeSeqDef=EscapeSequenceDef? )?
	filter=FilterDef?
	qualification=QualificationDef?
	';' ;
EscapeSequenceDef:
	'scaped_with' escapes+=EscapeSequence (',' escapes+=EscapeSequence)* ;
EscapeSequence:
	prefix=StringLiteral ('and' suffix=StringLiteral)? ;
Inputs:
	{Inputs}
	'inputs' '{'	
		inputs+=Input*
	'}'
;

Input:
	(qualifier?='qualifier')?
	typeRef=PathNameCS ('using' propRef=PathNameCS)? ';'
;

Providers:
	{Providers}
	'providers' '{'
		providers+=Provider*
	'}'
;

Provider:
	classRef=PathNameCS '{'
		varsDecl=ProviderVarsDecl?
		currentScope=CurrentScopeDecl?
		exportedscope=ExportedScopeDecl?
	'}'
;

ProviderVarsDecl:
	'vars' varDecl+= LetVariableCS (',' varDecl+=LetVariableCS)* ';'
;

FilterDef:
	'filtered_by' params+=ParameterDef (',' params+=ParameterDef)* 'when' expression=ExpCS
;

QualificationDef:
	'qualifies' qualifications+=Qualification (',' qualifications+=Qualification)*
;

Qualification:
	qualifiedClasses=MultiplePathNames
	'using' contributions+=ExpCS (',' contributions+=ExpCS)*
;

CurrentScopeDecl:
	'in'  'current_scope' 
	provisionsDef+=CurrentScopeProvisionDef+
;

CurrentScopeProvisionDef:
	selectionDef=SelectionDef?
	'provides'
	('occluding' | sameScope?='adding' | emptyScope?='resetting')?
	 provisions+=Provision+
	';'
;

SelectionDef:
	'for'
	( {SelectionAll} 'all' ('excepting' exceptions+=PathNameCS (',' exceptions+=PathNameCS)*)?
	| {SelectionSpecific} (selections+=PathNameCS (',' selections+=PathNameCS)* )
	)
;

Provision:
	(providedClasses=MultiplePathNames
	'using')? contributionsDef=ContributionsDef
	occludingDefs+=OccludingDef*
;

MultiplePathNames:
	pathNames+=PathNameCS (',' pathNames+=PathNameCS)*
;

OccludingDef:
	'occluding' contributionsDef=ContributionsDef 
;

ContributionsDef:
	 contributions+=Contribution (',' contributions+=Contribution)* 
;

Contribution:
	(('with_child' child=ParameterDef 'in')
	 | isPreceding?='preceding' )?
	expression=ExpCS
;

ExportedScopeDecl:
	'in' 'exported_scope'
	declarations+=ExportedScopeProvisionDef+
;

ExportedScopeProvisionDef:
	// selectionDef=SelectionDef?
	'provides' provisionDefs+=Provision+
	';'
;

HelpersSect:
	{HelpersSect}
	'helpers' '{'
		classHelpers+=HelperClass*
	'}'
;

HelperClass:
	context=PathNameCS '{'
		helpers+=HelperOp*
	'}'
;

// Similar to Complete OCL definitions
HelperOp:
	(ownedSignature=TemplateSignatureCS)?
	name=UnrestrictedName 
	'(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')' (':' ownedType=TypeExpCS)?
	':=' helperBody=ExpCS
	';'
;

ParameterDef returns base::ParameterCS:
	name=UnrestrictedName ':' ownedType=TypeExpCS;

/* A primary expression identifies the basic expressions from which more complex expressions may be constructed. */
PrimaryExpCS returns essentialocl::ExpCS:
	NestedExpCS
|	IfExpCS
| 	SelfExpCS
| 	PrimitiveLiteralExpCS
| 	TupleLiteralExpCS
| 	MapLiteralExpCS
| 	CollectionLiteralExpCS
| 	LambdaLiteralExpCS
| 	TypeLiteralExpCS
| 	NameExpCS
|	TraceExpCS	// DSL addition
|	LookupExpCS;	// DSL addition

TraceExpCS:
	{TraceExpCS}
	'trace'
;


LookupExpCS:
	('lookup' | isExported?='lookupExported') 
	'('	args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')'
;