grammar uk.ac.york.cs.cs2as.CS2ASDSL with org.eclipse.emf.ecore.xcore.Xcore

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2011/Xcore" as xcore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

generate cs2as_dsl "http://www.ac.uk/york/cs/cs2as/CS2ASDSL"

Model:
	csDecl=CSDecl
	asDecl=ASDecl
	
	(mappingSect=MappingSect 
	& disambiguationSect=DisambiguationSect? 
	& nameresoSect=NameResolutionSect?
	& helpersSect=HelpersSect?
	)
	
;

CSDecl:
	'source' (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName]) 
;

ASDecl:
	'target' (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName])
;

//ImportCS returns base::ImportCS:
//	(name=Identifier ':')? ownedPathName=URIPathNameCS (isAll?='::*')?
//;

MappingSect:
	{MappingSect}
	'mappings' '{'
		mappings+=ClassMap*
	'}'	
;
ClassMap:
	'map' to=[xcore::XClass | XQualifiedName] 'from'  from=[xcore::XClass | XQualifiedName]  ('when' rule=ID )? '{'
		sXQualifiedNametatements += ClassMapStmnt*
	'}'
;

ClassMapStmnt:
	PropertyMap
	';'
;

PropertyMap:
	(redefine?='redefine')? propName=[xcore::XStructuralFeature | XQualifiedName] ':=' propInit=XExpression
;

DisambiguationSect:
	{DisambiguationSect}
	'disambiguation' '{'
		disambiguations+=ClassDisambiguation*
	'}'
;

ClassDisambiguation:
	class=[xcore::XClass | XQualifiedName] '{'
		statements+=ClassDisambiguationStmnt*
		
	'}'
;

ClassDisambiguationStmnt:
	DisambiguationDef
	';'
;

DisambiguationDef:
	name=ID ':=' exp=XExpression
;

NameResolutionSect:
	{NameResolutionSect}
	'nameresolution' '{'
		namedElement=DefaultNamedElementDef?
		nameReferencer=DefaultNameReferencerDef?
		nameQualifier=NameQualifierDef?
		nameResolutions+=ClassNameResolution*
	'}'
;

DefaultNamedElementDef:
	'named-element' nameElement=ID 'name-property' nameProperty=[xcore::XAttribute | XQualifiedName] ';'
;

DefaultNameReferencerDef:
	'name-referencer' nameReferencer=ID 'name-property' nameProperty=[xcore::XAttribute | XQualifiedName] ';'
;

NameQualifierDef:
	'name-qualifier' nameQualifier=ID 'name-segments-property' segmentsProp=[xcore::XReference | XQualifiedName] ';'	
;

ClassNameResolution:
	class=[xcore::XClass | XQualifiedName] '{'
		statements+=ClassNameResolutionStmnt*
	'}'
;

ClassNameResolutionStmnt:
	(NamedElementDef | ScopeDef | ExportDef)
	';'
;

NamedElementDef:
	{NamedElementDef}
	'named-element' ('name-property' namePoperty=[xcore::XAttribute | XQualifiedName])? 
	filter=FilterDef?
	('qualifies' qualifications+=QualificationDef (',' qualifications+=QualificationDef)*)?
;

FilterDef:
	'filtered' ('by' params+=ParameterDef (',' params+=ParameterDef)* )? 'when' expression=XExpression
;

QualificationDef:
	targetsDef=TargetsDef
	'using' contribution+=ElementsContribExp
;
	
ElementsContribExp:
	(isPreceding?='preceding' | isImported?='imported'?)? expression=XExpression 
;

ScopeDef:
	selectionDef=SelectionDef?
	('scopes' | 'scopes-occluding' | sameScope?='scopes-adding' | emptyScope?='scopes-resetting')
	(alsoExports?='also-exports')?
	provisionDefs+=ProvisionDef+
;

ProvisionDef:
	targetsDef=TargetsDef 
	'using' contribution=ContributionDef
	occludingDefs+=OccludingDef*
;

TargetsDef:
	targetClasses+=[xcore::XClass | XQualifiedName] (',' targetClasses+=[xcore::XClass | XQualifiedName])*	
;

OccludingDef:
	'occluding' contribution=ContributionDef 
;

ContributionDef:
	 contributions+=ElementsContribExp (',' contributions+=ElementsContribExp)* 
;

SelectionDef:
	'for'
	( {SelectionAll} 'all' ('excepting' exceptionProperties+=XExpression (',' exceptionProperties+=XExpression)*)?
	| {SelectionSpecific} (selectedProperties+=XExpression (',' selectedProperties+=XExpression)* )
	)
;

ExportDef:
	selectionDef=SelectionDef?
	'exports'
	provisionDefs+=ProvisionDef+
;

HelpersSect:
	{HelpersSect}
	'helpers' '{'
		classHelpers+=ClassHelper*
	'}'
;

ClassHelper:
	context=[xcore::XClass | XQualifiedName] '{'
		helpers+=HelperDef*
	'}'
	
;

// Similar to Complete OCL definitions
HelperDef:
	//(ownedSignature=TemplateSignatureCS)?
	name=ID 
	'(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')' (':' ownedType=[xcore::XClass | XQualifiedName])?
	':=' helperBody=XExpression
	';'
;

ParameterDef returns xcore::XParameter :
	name=ID ':'  XQualifiedName;


	
/* A primary expression identifies the basic expressions from which more complex expressions may be constructed. */
XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XSynchronizedExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XBasicForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression
|	TraceExpCS	// DSL addition
|	LookupExpCS;	// DSL addition

TraceExpCS:
	{TraceExpCS}
	'trace'
;


LookupExpCS:
	('lookup' | fromExp?='lookupFrom') '(' args+=XExpression (',' args+=XExpression)* ')'
;