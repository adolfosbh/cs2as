grammar uk.ac.york.cs.cs2as.CS2ASDSL with org.eclipse.ocl.xtext.essentialocl.EssentialOCL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.pivot/model/Pivot.ecore" as pivot
import "platform:/resource/org.eclipse.ocl.xtext.base/model/BaseCS.ecore" as base
import "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.ecore" as essentialocl

generate cs2as_dsl "http://www.ac.uk/york/cs/cs2as/CS2ASDSL"

Model:
	csDecl=CSDecl
	asDecl=ASDecl
	
	(mappingSect=MappingSect & disambiguationSect=DisambiguationSect & nameresoSect=NameResolutionSect )
	
;

CSDecl:
	'source' metamodels+=ImportCS (',' metamodels+=ImportCS)*
;

ASDecl:
	'target' metamodels+=ImportCS (',' metamodels+=ImportCS)*
;

ImportCS returns base::ImportCS:
	(name=Identifier ':')? ownedPathName=URIPathNameCS (isAll?='::*')?
;

MappingSect:
	{MappingSect}
	'mappings' '{'
		mappings+=ClassMap*
	'}'	
;
ClassMap:
	'map' to=PathNameCS 'from'  from=PathNameCS '{'
		('when' rule=SIMPLE_ID ';')?
		statements += ClassMapStmnt*
	'}'
;

ClassMapStmnt:
	PropertyMap
	';'
;

PropertyMap:
	(redefine?='redefine')? propName=SIMPLE_ID ':=' propInit=ExpCS
;

DisambiguationSect:
	{DisambiguationSect}
	'disambiguation' '{'
		disambiguations+=ClassDisambiguation*
	'}'
;

ClassDisambiguation:
	class=PathNameCS '{'
		statements+=ClassDisambiguationStmnt*
		
	'}'
;

ClassDisambiguationStmnt:
	DisambiguationDef
	';'
;

DisambiguationDef:
	name=SIMPLE_ID ':=' exp=ExpCS
;

NameResolutionSect:
	{NameResolutionSect}
	'nameresolution' '{'
		namedElement=DefaultNamedElementDef?
		nameReferencer=DefaultNameReferencerDef?
		nameQualifier=NameQualifierDef?
		nameResolutions+=ClassNameResolution*
	'}'
;

DefaultNamedElementDef:
	'named-element' nameElement=SIMPLE_ID 'name-property' nameProperty=NameExpCS ';'
;

DefaultNameReferencerDef:
	'name-referencer' nameReferencer=SIMPLE_ID 'name-property' nameProperty=NameExpCS ';'
;

NameQualifierDef:
	'name-qualifier' nameQualifier=SIMPLE_ID 'name-segments-property' segmentsProp=NameExpCS ';'	
;

ClassNameResolution:
	class=PathNameCS '{'
		statements+=ClassNameResolutionStmnt*
	'}'
;

ClassNameResolutionStmnt:
	(NamedElementDef | ScopeDef | ExportDef)
	';'
;

NamedElementDef:
	{NamedElementDef}
	'named-element' ('name-property' namePoperty=NameExpCS)? 
	('qualifying' qualification+=QualificationDef (',' qualification+=QualificationDef)*)?
;

QualificationDef:
	qualifiedClass=TypeExpCS 'using' contribution+=ElementsContribExp 
;
	
ElementsContribExp:
	(following?='following')? expression=ExpCS ('['typeFilter=TypeExpCS']')? 
;

ScopeDef:
	('new-scope' | sameScope?='same-scope')?
	(alsoExports?='also-exports')?
	contibution+=ElementsContribExp (',' contibution+=ElementsContribExp)*
	occludingDefs+=OccludingDef*
	propagationDef=PropagationDef? 
;

OccludingDef:
	'occluding' contibution+=ElementsContribExp (',' contibution+=ElementsContribExp)* 
;

PropagationDef:
	'for' 
	( {PropagationAll} 'all-children' ('excepting' exceptionProperties+=ExpCS)?
	| {PropagationSelective} (propagatingProperties+=ExpCS (',' propagatingProperties+=ExpCS)* )
	)
;

ExportDef:
	'exports' contibution+=ElementsContribExp (',' contibution+=ElementsContribExp)*
	 occludingDefs+=OccludingDef*
	('to' (acceptingAll?='all' | acceptingElement=ExpCS))?
;

/* A primary expression identifies the basic expressions from which more complex expressions may be constructed. */
PrimaryExpCS returns essentialocl::ExpCS:
	NestedExpCS
|	IfExpCS
| 	SelfExpCS
| 	PrimitiveLiteralExpCS
| 	TupleLiteralExpCS
| 	MapLiteralExpCS
| 	CollectionLiteralExpCS
| 	LambdaLiteralExpCS
| 	TypeLiteralExpCS
| 	NameExpCS
|	ResolveExpCS	// DSL addition
|	LookupExpCS;	// DSL addition

ResolveExpCS:
	{ResolveExpCS}
	'resolve'
;


LookupExpCS:
	('lookup' | fromExp?='lookupFrom') '(' args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')'
;