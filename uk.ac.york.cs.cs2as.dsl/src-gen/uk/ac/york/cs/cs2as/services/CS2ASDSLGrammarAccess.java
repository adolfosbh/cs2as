/*
 * generated by Xtext
 */
package uk.ac.york.cs.cs2as.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;

@Singleton
public class CS2ASDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCsDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCsDeclCSDeclParserRuleCall_0_0 = (RuleCall)cCsDeclAssignment_0.eContents().get(0);
		private final Assignment cAsDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsDeclASDeclParserRuleCall_1_0 = (RuleCall)cAsDeclAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cMappingSectAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cMappingSectMappingSectParserRuleCall_2_0_0 = (RuleCall)cMappingSectAssignment_2_0.eContents().get(0);
		private final Assignment cDisambiguationSectAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0 = (RuleCall)cDisambiguationSectAssignment_2_1.eContents().get(0);
		private final Assignment cNameresoSectAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cNameresoSectNameResolutionSectParserRuleCall_2_2_0 = (RuleCall)cNameresoSectAssignment_2_2.eContents().get(0);
		
		//Model:
		//	csDecl=CSDecl asDecl=ASDecl (mappingSect=MappingSect & disambiguationSect=DisambiguationSect &
		//	nameresoSect=NameResolutionSect);
		@Override public ParserRule getRule() { return rule; }

		//csDecl=CSDecl asDecl=ASDecl (mappingSect=MappingSect & disambiguationSect=DisambiguationSect &
		//nameresoSect=NameResolutionSect)
		public Group getGroup() { return cGroup; }

		//csDecl=CSDecl
		public Assignment getCsDeclAssignment_0() { return cCsDeclAssignment_0; }

		//CSDecl
		public RuleCall getCsDeclCSDeclParserRuleCall_0_0() { return cCsDeclCSDeclParserRuleCall_0_0; }

		//asDecl=ASDecl
		public Assignment getAsDeclAssignment_1() { return cAsDeclAssignment_1; }

		//ASDecl
		public RuleCall getAsDeclASDeclParserRuleCall_1_0() { return cAsDeclASDeclParserRuleCall_1_0; }

		//mappingSect=MappingSect & disambiguationSect=DisambiguationSect & nameresoSect=NameResolutionSect
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//mappingSect=MappingSect
		public Assignment getMappingSectAssignment_2_0() { return cMappingSectAssignment_2_0; }

		//MappingSect
		public RuleCall getMappingSectMappingSectParserRuleCall_2_0_0() { return cMappingSectMappingSectParserRuleCall_2_0_0; }

		//disambiguationSect=DisambiguationSect
		public Assignment getDisambiguationSectAssignment_2_1() { return cDisambiguationSectAssignment_2_1; }

		//DisambiguationSect
		public RuleCall getDisambiguationSectDisambiguationSectParserRuleCall_2_1_0() { return cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0; }

		//nameresoSect=NameResolutionSect
		public Assignment getNameresoSectAssignment_2_2() { return cNameresoSectAssignment_2_2; }

		//NameResolutionSect
		public RuleCall getNameresoSectNameResolutionSectParserRuleCall_2_2_0() { return cNameresoSectNameResolutionSectParserRuleCall_2_2_0; }
	}

	public class CSDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_1_0 = (RuleCall)cMetamodelsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_2_1_0 = (RuleCall)cMetamodelsAssignment_2_1.eContents().get(0);
		
		//CSDecl:
		//	"source" metamodels+=ImportCS ("," metamodels+=ImportCS)*;
		@Override public ParserRule getRule() { return rule; }

		//"source" metamodels+=ImportCS ("," metamodels+=ImportCS)*
		public Group getGroup() { return cGroup; }

		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_1() { return cMetamodelsAssignment_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_1_0() { return cMetamodelsImportCSParserRuleCall_1_0; }

		//("," metamodels+=ImportCS)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_2_1() { return cMetamodelsAssignment_2_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_2_1_0() { return cMetamodelsImportCSParserRuleCall_2_1_0; }
	}

	public class ASDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_1_0 = (RuleCall)cMetamodelsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_2_1_0 = (RuleCall)cMetamodelsAssignment_2_1.eContents().get(0);
		
		//ASDecl:
		//	"target" metamodels+=ImportCS ("," metamodels+=ImportCS)*;
		@Override public ParserRule getRule() { return rule; }

		//"target" metamodels+=ImportCS ("," metamodels+=ImportCS)*
		public Group getGroup() { return cGroup; }

		//"target"
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_1() { return cMetamodelsAssignment_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_1_0() { return cMetamodelsImportCSParserRuleCall_1_0; }

		//("," metamodels+=ImportCS)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_2_1() { return cMetamodelsAssignment_2_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_2_1_0() { return cMetamodelsImportCSParserRuleCall_2_1_0; }
	}

	public class ImportCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedPathNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPathNameURIPathNameCSParserRuleCall_1_0 = (RuleCall)cOwnedPathNameAssignment_1.eContents().get(0);
		private final Assignment cIsAllAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsAllColonColonAsteriskKeyword_2_0 = (Keyword)cIsAllAssignment_2.eContents().get(0);
		
		//ImportCS returns base::ImportCS:
		//	(name=Identifier ":")? ownedPathName=URIPathNameCS isAll?="::*"?;
		@Override public ParserRule getRule() { return rule; }

		//(name=Identifier ":")? ownedPathName=URIPathNameCS isAll?="::*"?
		public Group getGroup() { return cGroup; }

		//(name=Identifier ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=Identifier
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0_0() { return cNameIdentifierParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//ownedPathName=URIPathNameCS
		public Assignment getOwnedPathNameAssignment_1() { return cOwnedPathNameAssignment_1; }

		//URIPathNameCS
		public RuleCall getOwnedPathNameURIPathNameCSParserRuleCall_1_0() { return cOwnedPathNameURIPathNameCSParserRuleCall_1_0; }

		//isAll?="::*"?
		public Assignment getIsAllAssignment_2() { return cIsAllAssignment_2; }

		//"::*"
		public Keyword getIsAllColonColonAsteriskKeyword_2_0() { return cIsAllColonColonAsteriskKeyword_2_0; }
	}

	public class MappingSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMappingsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsClassMapParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MappingSect:
		//	{MappingSect} "mappings" "{" mappings+=ClassMap* "}";
		@Override public ParserRule getRule() { return rule; }

		//{MappingSect} "mappings" "{" mappings+=ClassMap* "}"
		public Group getGroup() { return cGroup; }

		//{MappingSect}
		public Action getMappingSectAction_0() { return cMappingSectAction_0; }

		//"mappings"
		public Keyword getMappingsKeyword_1() { return cMappingsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//mappings+=ClassMap*
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }

		//ClassMap
		public RuleCall getMappingsClassMapParserRuleCall_3_0() { return cMappingsClassMapParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToPathNameCSParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromPathNameCSParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRuleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRuleSIMPLE_IDTerminalRuleCall_5_1_0 = (RuleCall)cRuleAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsClassMapStmntParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClassMap:
		//	"map" to=PathNameCS "from" from=PathNameCS "{" ("when" rule=SIMPLE_ID ";")? statements+=ClassMapStmnt* "}";
		@Override public ParserRule getRule() { return rule; }

		//"map" to=PathNameCS "from" from=PathNameCS "{" ("when" rule=SIMPLE_ID ";")? statements+=ClassMapStmnt* "}"
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//to=PathNameCS
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//PathNameCS
		public RuleCall getToPathNameCSParserRuleCall_1_0() { return cToPathNameCSParserRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//from=PathNameCS
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//PathNameCS
		public RuleCall getFromPathNameCSParserRuleCall_3_0() { return cFromPathNameCSParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("when" rule=SIMPLE_ID ";")?
		public Group getGroup_5() { return cGroup_5; }

		//"when"
		public Keyword getWhenKeyword_5_0() { return cWhenKeyword_5_0; }

		//rule=SIMPLE_ID
		public Assignment getRuleAssignment_5_1() { return cRuleAssignment_5_1; }

		//SIMPLE_ID
		public RuleCall getRuleSIMPLE_IDTerminalRuleCall_5_1_0() { return cRuleSIMPLE_IDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//statements+=ClassMapStmnt*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//ClassMapStmnt
		public RuleCall getStatementsClassMapStmntParserRuleCall_6_0() { return cStatementsClassMapStmntParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ClassMapStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMapStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyMapParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassMapStmnt:
		//	PropertyMap ";";
		@Override public ParserRule getRule() { return rule; }

		//PropertyMap ";"
		public Group getGroup() { return cGroup; }

		//PropertyMap
		public RuleCall getPropertyMapParserRuleCall_0() { return cPropertyMapParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class PropertyMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedefineAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRedefineRedefineKeyword_0_0 = (Keyword)cRedefineAssignment_0.eContents().get(0);
		private final Assignment cPropNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropNameSIMPLE_IDTerminalRuleCall_1_0 = (RuleCall)cPropNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropInitExpCSParserRuleCall_3_0 = (RuleCall)cPropInitAssignment_3.eContents().get(0);
		
		//PropertyMap:
		//	redefine?="redefine"? propName=SIMPLE_ID ":=" propInit=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//redefine?="redefine"? propName=SIMPLE_ID ":=" propInit=ExpCS
		public Group getGroup() { return cGroup; }

		//redefine?="redefine"?
		public Assignment getRedefineAssignment_0() { return cRedefineAssignment_0; }

		//"redefine"
		public Keyword getRedefineRedefineKeyword_0_0() { return cRedefineRedefineKeyword_0_0; }

		//propName=SIMPLE_ID
		public Assignment getPropNameAssignment_1() { return cPropNameAssignment_1; }

		//SIMPLE_ID
		public RuleCall getPropNameSIMPLE_IDTerminalRuleCall_1_0() { return cPropNameSIMPLE_IDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//propInit=ExpCS
		public Assignment getPropInitAssignment_3() { return cPropInitAssignment_3; }

		//ExpCS
		public RuleCall getPropInitExpCSParserRuleCall_3_0() { return cPropInitExpCSParserRuleCall_3_0; }
	}

	public class DisambiguationSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisambiguationSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisambiguationSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDisambiguationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisambiguationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisambiguationsClassDisambiguationParserRuleCall_3_0 = (RuleCall)cDisambiguationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DisambiguationSect:
		//	{DisambiguationSect} "disambiguation" "{" disambiguations+=ClassDisambiguation* "}";
		@Override public ParserRule getRule() { return rule; }

		//{DisambiguationSect} "disambiguation" "{" disambiguations+=ClassDisambiguation* "}"
		public Group getGroup() { return cGroup; }

		//{DisambiguationSect}
		public Action getDisambiguationSectAction_0() { return cDisambiguationSectAction_0; }

		//"disambiguation"
		public Keyword getDisambiguationKeyword_1() { return cDisambiguationKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//disambiguations+=ClassDisambiguation*
		public Assignment getDisambiguationsAssignment_3() { return cDisambiguationsAssignment_3; }

		//ClassDisambiguation
		public RuleCall getDisambiguationsClassDisambiguationParserRuleCall_3_0() { return cDisambiguationsClassDisambiguationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassDisambiguationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDisambiguation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassPathNameCSParserRuleCall_0_0 = (RuleCall)cClassAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsClassDisambiguationStmntParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassDisambiguation:
		//	class=PathNameCS "{" statements+=ClassDisambiguationStmnt* "}";
		@Override public ParserRule getRule() { return rule; }

		//class=PathNameCS "{" statements+=ClassDisambiguationStmnt* "}"
		public Group getGroup() { return cGroup; }

		//class=PathNameCS
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }

		//PathNameCS
		public RuleCall getClassPathNameCSParserRuleCall_0_0() { return cClassPathNameCSParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=ClassDisambiguationStmnt*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ClassDisambiguationStmnt
		public RuleCall getStatementsClassDisambiguationStmntParserRuleCall_2_0() { return cStatementsClassDisambiguationStmntParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassDisambiguationStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDisambiguationStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDisambiguationDefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassDisambiguationStmnt:
		//	DisambiguationDef ";";
		@Override public ParserRule getRule() { return rule; }

		//DisambiguationDef ";"
		public Group getGroup() { return cGroup; }

		//DisambiguationDef
		public RuleCall getDisambiguationDefParserRuleCall_0() { return cDisambiguationDefParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class DisambiguationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisambiguationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSIMPLE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpCSParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//DisambiguationDef:
		//	name=SIMPLE_ID ":=" exp=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//name=SIMPLE_ID ":=" exp=ExpCS
		public Group getGroup() { return cGroup; }

		//name=SIMPLE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SIMPLE_ID
		public RuleCall getNameSIMPLE_IDTerminalRuleCall_0_0() { return cNameSIMPLE_IDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//exp=ExpCS
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//ExpCS
		public RuleCall getExpExpCSParserRuleCall_2_0() { return cExpExpCSParserRuleCall_2_0; }
	}

	public class NameResolutionSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameResolutionSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameResolutionSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameresolutionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamedElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamedElementDefaultNamedElementDefParserRuleCall_3_0 = (RuleCall)cNamedElementAssignment_3.eContents().get(0);
		private final Assignment cNameReferencerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameReferencerDefaultNameReferencerDefParserRuleCall_4_0 = (RuleCall)cNameReferencerAssignment_4.eContents().get(0);
		private final Assignment cNameQualifierAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameQualifierNameQualifierDefParserRuleCall_5_0 = (RuleCall)cNameQualifierAssignment_5.eContents().get(0);
		private final Assignment cNameResolutionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameResolutionsClassNameResolutionParserRuleCall_6_0 = (RuleCall)cNameResolutionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NameResolutionSect:
		//	{NameResolutionSect} "nameresolution" "{" namedElement=DefaultNamedElementDef?
		//	nameReferencer=DefaultNameReferencerDef? nameQualifier=NameQualifierDef? nameResolutions+=ClassNameResolution* "}";
		@Override public ParserRule getRule() { return rule; }

		//{NameResolutionSect} "nameresolution" "{" namedElement=DefaultNamedElementDef? nameReferencer=DefaultNameReferencerDef?
		//nameQualifier=NameQualifierDef? nameResolutions+=ClassNameResolution* "}"
		public Group getGroup() { return cGroup; }

		//{NameResolutionSect}
		public Action getNameResolutionSectAction_0() { return cNameResolutionSectAction_0; }

		//"nameresolution"
		public Keyword getNameresolutionKeyword_1() { return cNameresolutionKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//namedElement=DefaultNamedElementDef?
		public Assignment getNamedElementAssignment_3() { return cNamedElementAssignment_3; }

		//DefaultNamedElementDef
		public RuleCall getNamedElementDefaultNamedElementDefParserRuleCall_3_0() { return cNamedElementDefaultNamedElementDefParserRuleCall_3_0; }

		//nameReferencer=DefaultNameReferencerDef?
		public Assignment getNameReferencerAssignment_4() { return cNameReferencerAssignment_4; }

		//DefaultNameReferencerDef
		public RuleCall getNameReferencerDefaultNameReferencerDefParserRuleCall_4_0() { return cNameReferencerDefaultNameReferencerDefParserRuleCall_4_0; }

		//nameQualifier=NameQualifierDef?
		public Assignment getNameQualifierAssignment_5() { return cNameQualifierAssignment_5; }

		//NameQualifierDef
		public RuleCall getNameQualifierNameQualifierDefParserRuleCall_5_0() { return cNameQualifierNameQualifierDefParserRuleCall_5_0; }

		//nameResolutions+=ClassNameResolution*
		public Assignment getNameResolutionsAssignment_6() { return cNameResolutionsAssignment_6; }

		//ClassNameResolution
		public RuleCall getNameResolutionsClassNameResolutionParserRuleCall_6_0() { return cNameResolutionsClassNameResolutionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DefaultNamedElementDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultNamedElementDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamedElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameElementSIMPLE_IDTerminalRuleCall_1_0 = (RuleCall)cNameElementAssignment_1.eContents().get(0);
		private final Keyword cNamePropertyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamePropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePropertyNameExpCSParserRuleCall_3_0 = (RuleCall)cNamePropertyAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefaultNamedElementDef:
		//	"named-element" nameElement=SIMPLE_ID "name-property" nameProperty=NameExpCS ";";
		@Override public ParserRule getRule() { return rule; }

		//"named-element" nameElement=SIMPLE_ID "name-property" nameProperty=NameExpCS ";"
		public Group getGroup() { return cGroup; }

		//"named-element"
		public Keyword getNamedElementKeyword_0() { return cNamedElementKeyword_0; }

		//nameElement=SIMPLE_ID
		public Assignment getNameElementAssignment_1() { return cNameElementAssignment_1; }

		//SIMPLE_ID
		public RuleCall getNameElementSIMPLE_IDTerminalRuleCall_1_0() { return cNameElementSIMPLE_IDTerminalRuleCall_1_0; }

		//"name-property"
		public Keyword getNamePropertyKeyword_2() { return cNamePropertyKeyword_2; }

		//nameProperty=NameExpCS
		public Assignment getNamePropertyAssignment_3() { return cNamePropertyAssignment_3; }

		//NameExpCS
		public RuleCall getNamePropertyNameExpCSParserRuleCall_3_0() { return cNamePropertyNameExpCSParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DefaultNameReferencerDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultNameReferencerDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameReferencerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameReferencerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameReferencerSIMPLE_IDTerminalRuleCall_1_0 = (RuleCall)cNameReferencerAssignment_1.eContents().get(0);
		private final Keyword cNamePropertyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamePropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePropertyNameExpCSParserRuleCall_3_0 = (RuleCall)cNamePropertyAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefaultNameReferencerDef:
		//	"name-referencer" nameReferencer=SIMPLE_ID "name-property" nameProperty=NameExpCS ";";
		@Override public ParserRule getRule() { return rule; }

		//"name-referencer" nameReferencer=SIMPLE_ID "name-property" nameProperty=NameExpCS ";"
		public Group getGroup() { return cGroup; }

		//"name-referencer"
		public Keyword getNameReferencerKeyword_0() { return cNameReferencerKeyword_0; }

		//nameReferencer=SIMPLE_ID
		public Assignment getNameReferencerAssignment_1() { return cNameReferencerAssignment_1; }

		//SIMPLE_ID
		public RuleCall getNameReferencerSIMPLE_IDTerminalRuleCall_1_0() { return cNameReferencerSIMPLE_IDTerminalRuleCall_1_0; }

		//"name-property"
		public Keyword getNamePropertyKeyword_2() { return cNamePropertyKeyword_2; }

		//nameProperty=NameExpCS
		public Assignment getNamePropertyAssignment_3() { return cNamePropertyAssignment_3; }

		//NameExpCS
		public RuleCall getNamePropertyNameExpCSParserRuleCall_3_0() { return cNamePropertyNameExpCSParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NameQualifierDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameQualifierDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameQualifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifierSIMPLE_IDTerminalRuleCall_1_0 = (RuleCall)cNameQualifierAssignment_1.eContents().get(0);
		private final Keyword cNameSegmentsPropertyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSegmentsPropAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSegmentsPropNameExpCSParserRuleCall_3_0 = (RuleCall)cSegmentsPropAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NameQualifierDef:
		//	"name-qualifier" nameQualifier=SIMPLE_ID "name-segments-property" segmentsProp=NameExpCS ";";
		@Override public ParserRule getRule() { return rule; }

		//"name-qualifier" nameQualifier=SIMPLE_ID "name-segments-property" segmentsProp=NameExpCS ";"
		public Group getGroup() { return cGroup; }

		//"name-qualifier"
		public Keyword getNameQualifierKeyword_0() { return cNameQualifierKeyword_0; }

		//nameQualifier=SIMPLE_ID
		public Assignment getNameQualifierAssignment_1() { return cNameQualifierAssignment_1; }

		//SIMPLE_ID
		public RuleCall getNameQualifierSIMPLE_IDTerminalRuleCall_1_0() { return cNameQualifierSIMPLE_IDTerminalRuleCall_1_0; }

		//"name-segments-property"
		public Keyword getNameSegmentsPropertyKeyword_2() { return cNameSegmentsPropertyKeyword_2; }

		//segmentsProp=NameExpCS
		public Assignment getSegmentsPropAssignment_3() { return cSegmentsPropAssignment_3; }

		//NameExpCS
		public RuleCall getSegmentsPropNameExpCSParserRuleCall_3_0() { return cSegmentsPropNameExpCSParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ClassNameResolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassNameResolution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassPathNameCSParserRuleCall_0_0 = (RuleCall)cClassAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsClassNameResolutionStmntParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassNameResolution:
		//	class=PathNameCS "{" statements+=ClassNameResolutionStmnt* "}";
		@Override public ParserRule getRule() { return rule; }

		//class=PathNameCS "{" statements+=ClassNameResolutionStmnt* "}"
		public Group getGroup() { return cGroup; }

		//class=PathNameCS
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }

		//PathNameCS
		public RuleCall getClassPathNameCSParserRuleCall_0_0() { return cClassPathNameCSParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=ClassNameResolutionStmnt*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ClassNameResolutionStmnt
		public RuleCall getStatementsClassNameResolutionStmntParserRuleCall_2_0() { return cStatementsClassNameResolutionStmntParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassNameResolutionStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassNameResolutionStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNamedElementDefParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cScopeDefParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cExportDefParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassNameResolutionStmnt:
		//	(NamedElementDef | ScopeDef | ExportDef) ";";
		@Override public ParserRule getRule() { return rule; }

		//(NamedElementDef | ScopeDef | ExportDef) ";"
		public Group getGroup() { return cGroup; }

		//NamedElementDef | ScopeDef | ExportDef
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//NamedElementDef
		public RuleCall getNamedElementDefParserRuleCall_0_0() { return cNamedElementDefParserRuleCall_0_0; }

		//ScopeDef
		public RuleCall getScopeDefParserRuleCall_0_1() { return cScopeDefParserRuleCall_0_1; }

		//ExportDef
		public RuleCall getExportDefParserRuleCall_0_2() { return cExportDefParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class NamedElementDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedElementDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamedElementDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNamedElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNamePropertyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamePopertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamePopertyNameExpCSParserRuleCall_2_1_0 = (RuleCall)cNamePopertyAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cQualifyingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualificationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualificationQualificationDefParserRuleCall_3_1_0 = (RuleCall)cQualificationAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cQualificationAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cQualificationQualificationDefParserRuleCall_3_2_1_0 = (RuleCall)cQualificationAssignment_3_2_1.eContents().get(0);
		
		//NamedElementDef:
		//	{NamedElementDef} "named-element" ("name-property" namePoperty=NameExpCS)? ("qualifying"
		//	qualification+=QualificationDef ("," qualification+=QualificationDef)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{NamedElementDef} "named-element" ("name-property" namePoperty=NameExpCS)? ("qualifying" qualification+=QualificationDef
		//("," qualification+=QualificationDef)*)?
		public Group getGroup() { return cGroup; }

		//{NamedElementDef}
		public Action getNamedElementDefAction_0() { return cNamedElementDefAction_0; }

		//"named-element"
		public Keyword getNamedElementKeyword_1() { return cNamedElementKeyword_1; }

		//("name-property" namePoperty=NameExpCS)?
		public Group getGroup_2() { return cGroup_2; }

		//"name-property"
		public Keyword getNamePropertyKeyword_2_0() { return cNamePropertyKeyword_2_0; }

		//namePoperty=NameExpCS
		public Assignment getNamePopertyAssignment_2_1() { return cNamePopertyAssignment_2_1; }

		//NameExpCS
		public RuleCall getNamePopertyNameExpCSParserRuleCall_2_1_0() { return cNamePopertyNameExpCSParserRuleCall_2_1_0; }

		//("qualifying" qualification+=QualificationDef ("," qualification+=QualificationDef)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"qualifying"
		public Keyword getQualifyingKeyword_3_0() { return cQualifyingKeyword_3_0; }

		//qualification+=QualificationDef
		public Assignment getQualificationAssignment_3_1() { return cQualificationAssignment_3_1; }

		//QualificationDef
		public RuleCall getQualificationQualificationDefParserRuleCall_3_1_0() { return cQualificationQualificationDefParserRuleCall_3_1_0; }

		//("," qualification+=QualificationDef)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//qualification+=QualificationDef
		public Assignment getQualificationAssignment_3_2_1() { return cQualificationAssignment_3_2_1; }

		//QualificationDef
		public RuleCall getQualificationQualificationDefParserRuleCall_3_2_1_0() { return cQualificationQualificationDefParserRuleCall_3_2_1_0; }
	}

	public class QualificationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualificationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiedClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiedClassTypeExpCSParserRuleCall_0_0 = (RuleCall)cQualifiedClassAssignment_0.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContributionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContributionElementsContribExpParserRuleCall_2_0 = (RuleCall)cContributionAssignment_2.eContents().get(0);
		
		//QualificationDef:
		//	qualifiedClass=TypeExpCS "using" contribution+=ElementsContribExp;
		@Override public ParserRule getRule() { return rule; }

		//qualifiedClass=TypeExpCS "using" contribution+=ElementsContribExp
		public Group getGroup() { return cGroup; }

		//qualifiedClass=TypeExpCS
		public Assignment getQualifiedClassAssignment_0() { return cQualifiedClassAssignment_0; }

		//TypeExpCS
		public RuleCall getQualifiedClassTypeExpCSParserRuleCall_0_0() { return cQualifiedClassTypeExpCSParserRuleCall_0_0; }

		//"using"
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//contribution+=ElementsContribExp
		public Assignment getContributionAssignment_2() { return cContributionAssignment_2; }

		//ElementsContribExp
		public RuleCall getContributionElementsContribExpParserRuleCall_2_0() { return cContributionElementsContribExpParserRuleCall_2_0; }
	}

	public class ElementsContribExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementsContribExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsFollowingAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsFollowingFollowingKeyword_0_0_0 = (Keyword)cIsFollowingAssignment_0_0.eContents().get(0);
		private final Assignment cIsImportedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsImportedImportedKeyword_0_1_0 = (Keyword)cIsImportedAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpCSParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ElementsContribExp:
		//	(isFollowing?="following" | isImported?="imported"?)? expression=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//(isFollowing?="following" | isImported?="imported"?)? expression=ExpCS
		public Group getGroup() { return cGroup; }

		//(isFollowing?="following" | isImported?="imported"?)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isFollowing?="following"
		public Assignment getIsFollowingAssignment_0_0() { return cIsFollowingAssignment_0_0; }

		//"following"
		public Keyword getIsFollowingFollowingKeyword_0_0_0() { return cIsFollowingFollowingKeyword_0_0_0; }

		//isImported?="imported"?
		public Assignment getIsImportedAssignment_0_1() { return cIsImportedAssignment_0_1; }

		//"imported"
		public Keyword getIsImportedImportedKeyword_0_1_0() { return cIsImportedImportedKeyword_0_1_0; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_1_0() { return cExpressionExpCSParserRuleCall_1_0; }
	}

	public class ScopeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionDefSelectionDefParserRuleCall_0_0 = (RuleCall)cSelectionDefAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNestedScopeKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cSameScopeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSameScopeSameScopeKeyword_1_1_0 = (Keyword)cSameScopeAssignment_1_1.eContents().get(0);
		private final Assignment cEmptyScopeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cEmptyScopeEmptyScopeKeyword_1_2_0 = (Keyword)cEmptyScopeAssignment_1_2.eContents().get(0);
		private final Assignment cAlsoExportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAlsoExportsAlsoExportsKeyword_2_0 = (Keyword)cAlsoExportsAssignment_2.eContents().get(0);
		private final Assignment cContributionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContributionContributionDefParserRuleCall_3_0 = (RuleCall)cContributionAssignment_3.eContents().get(0);
		private final Assignment cOccludingDefsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOccludingDefsOccludingDefParserRuleCall_4_0 = (RuleCall)cOccludingDefsAssignment_4.eContents().get(0);
		
		//ScopeDef:
		//	selectionDef=SelectionDef? ("nested-scope" | sameScope?="same-scope" | emptyScope?="empty-scope")?
		//	alsoExports?="also-exports"? contribution=ContributionDef occludingDefs+=OccludingDef*;
		@Override public ParserRule getRule() { return rule; }

		//selectionDef=SelectionDef? ("nested-scope" | sameScope?="same-scope" | emptyScope?="empty-scope")?
		//alsoExports?="also-exports"? contribution=ContributionDef occludingDefs+=OccludingDef*
		public Group getGroup() { return cGroup; }

		//selectionDef=SelectionDef?
		public Assignment getSelectionDefAssignment_0() { return cSelectionDefAssignment_0; }

		//SelectionDef
		public RuleCall getSelectionDefSelectionDefParserRuleCall_0_0() { return cSelectionDefSelectionDefParserRuleCall_0_0; }

		//("nested-scope" | sameScope?="same-scope" | emptyScope?="empty-scope")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"nested-scope"
		public Keyword getNestedScopeKeyword_1_0() { return cNestedScopeKeyword_1_0; }

		//sameScope?="same-scope"
		public Assignment getSameScopeAssignment_1_1() { return cSameScopeAssignment_1_1; }

		//"same-scope"
		public Keyword getSameScopeSameScopeKeyword_1_1_0() { return cSameScopeSameScopeKeyword_1_1_0; }

		//emptyScope?="empty-scope"
		public Assignment getEmptyScopeAssignment_1_2() { return cEmptyScopeAssignment_1_2; }

		//"empty-scope"
		public Keyword getEmptyScopeEmptyScopeKeyword_1_2_0() { return cEmptyScopeEmptyScopeKeyword_1_2_0; }

		//alsoExports?="also-exports"?
		public Assignment getAlsoExportsAssignment_2() { return cAlsoExportsAssignment_2; }

		//"also-exports"
		public Keyword getAlsoExportsAlsoExportsKeyword_2_0() { return cAlsoExportsAlsoExportsKeyword_2_0; }

		//contribution=ContributionDef
		public Assignment getContributionAssignment_3() { return cContributionAssignment_3; }

		//ContributionDef
		public RuleCall getContributionContributionDefParserRuleCall_3_0() { return cContributionContributionDefParserRuleCall_3_0; }

		//occludingDefs+=OccludingDef*
		public Assignment getOccludingDefsAssignment_4() { return cOccludingDefsAssignment_4; }

		//OccludingDef
		public RuleCall getOccludingDefsOccludingDefParserRuleCall_4_0() { return cOccludingDefsOccludingDefParserRuleCall_4_0; }
	}

	public class OccludingDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OccludingDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOccludingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContributionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContributionContributionDefParserRuleCall_1_0 = (RuleCall)cContributionAssignment_1.eContents().get(0);
		
		//OccludingDef:
		//	"occluding" contribution=ContributionDef;
		@Override public ParserRule getRule() { return rule; }

		//"occluding" contribution=ContributionDef
		public Group getGroup() { return cGroup; }

		//"occluding"
		public Keyword getOccludingKeyword_0() { return cOccludingKeyword_0; }

		//contribution=ContributionDef
		public Assignment getContributionAssignment_1() { return cContributionAssignment_1; }

		//ContributionDef
		public RuleCall getContributionContributionDefParserRuleCall_1_0() { return cContributionContributionDefParserRuleCall_1_0; }
	}

	public class ContributionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContributionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContributionsElementsContribExpParserRuleCall_0_0 = (RuleCall)cContributionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContributionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContributionsElementsContribExpParserRuleCall_1_1_0 = (RuleCall)cContributionsAssignment_1_1.eContents().get(0);
		
		//ContributionDef:
		//	contributions+=ElementsContribExp ("," contributions+=ElementsContribExp)*;
		@Override public ParserRule getRule() { return rule; }

		//contributions+=ElementsContribExp ("," contributions+=ElementsContribExp)*
		public Group getGroup() { return cGroup; }

		//contributions+=ElementsContribExp
		public Assignment getContributionsAssignment_0() { return cContributionsAssignment_0; }

		//ElementsContribExp
		public RuleCall getContributionsElementsContribExpParserRuleCall_0_0() { return cContributionsElementsContribExpParserRuleCall_0_0; }

		//("," contributions+=ElementsContribExp)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//contributions+=ElementsContribExp
		public Assignment getContributionsAssignment_1_1() { return cContributionsAssignment_1_1; }

		//ElementsContribExp
		public RuleCall getContributionsElementsContribExpParserRuleCall_1_1_0() { return cContributionsElementsContribExpParserRuleCall_1_1_0; }
	}

	public class SelectionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSelectionAllAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAllKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cExceptingKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExceptionPropertiesAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExceptionPropertiesExpCSParserRuleCall_1_0_2_1_0 = (RuleCall)cExceptionPropertiesAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_2_2 = (Group)cGroup_1_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_2_0 = (Keyword)cGroup_1_0_2_2.eContents().get(0);
		private final Assignment cExceptionPropertiesAssignment_1_0_2_2_1 = (Assignment)cGroup_1_0_2_2.eContents().get(1);
		private final RuleCall cExceptionPropertiesExpCSParserRuleCall_1_0_2_2_1_0 = (RuleCall)cExceptionPropertiesAssignment_1_0_2_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSelectionSpecificAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSelectedPropertiesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSelectedPropertiesExpCSParserRuleCall_1_1_1_0_0 = (RuleCall)cSelectedPropertiesAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cSelectedPropertiesAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cSelectedPropertiesExpCSParserRuleCall_1_1_1_1_1_0 = (RuleCall)cSelectedPropertiesAssignment_1_1_1_1_1.eContents().get(0);
		
		//SelectionDef:
		//	"for" ({SelectionAll} "all" ("excepting" exceptionProperties+=ExpCS ("," exceptionProperties+=ExpCS)*)? |
		//	{SelectionSpecific} (selectedProperties+=ExpCS ("," selectedProperties+=ExpCS)*));
		@Override public ParserRule getRule() { return rule; }

		//"for" ({SelectionAll} "all" ("excepting" exceptionProperties+=ExpCS ("," exceptionProperties+=ExpCS)*)? |
		//{SelectionSpecific} (selectedProperties+=ExpCS ("," selectedProperties+=ExpCS)*))
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//{SelectionAll} "all" ("excepting" exceptionProperties+=ExpCS ("," exceptionProperties+=ExpCS)*)? | {SelectionSpecific}
		//(selectedProperties+=ExpCS ("," selectedProperties+=ExpCS)*)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{SelectionAll} "all" ("excepting" exceptionProperties+=ExpCS ("," exceptionProperties+=ExpCS)*)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{SelectionAll}
		public Action getSelectionAllAction_1_0_0() { return cSelectionAllAction_1_0_0; }

		//"all"
		public Keyword getAllKeyword_1_0_1() { return cAllKeyword_1_0_1; }

		//("excepting" exceptionProperties+=ExpCS ("," exceptionProperties+=ExpCS)*)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"excepting"
		public Keyword getExceptingKeyword_1_0_2_0() { return cExceptingKeyword_1_0_2_0; }

		//exceptionProperties+=ExpCS
		public Assignment getExceptionPropertiesAssignment_1_0_2_1() { return cExceptionPropertiesAssignment_1_0_2_1; }

		//ExpCS
		public RuleCall getExceptionPropertiesExpCSParserRuleCall_1_0_2_1_0() { return cExceptionPropertiesExpCSParserRuleCall_1_0_2_1_0; }

		//("," exceptionProperties+=ExpCS)*
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_2_0() { return cCommaKeyword_1_0_2_2_0; }

		//exceptionProperties+=ExpCS
		public Assignment getExceptionPropertiesAssignment_1_0_2_2_1() { return cExceptionPropertiesAssignment_1_0_2_2_1; }

		//ExpCS
		public RuleCall getExceptionPropertiesExpCSParserRuleCall_1_0_2_2_1_0() { return cExceptionPropertiesExpCSParserRuleCall_1_0_2_2_1_0; }

		//{SelectionSpecific} (selectedProperties+=ExpCS ("," selectedProperties+=ExpCS)*)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{SelectionSpecific}
		public Action getSelectionSpecificAction_1_1_0() { return cSelectionSpecificAction_1_1_0; }

		//selectedProperties+=ExpCS ("," selectedProperties+=ExpCS)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//selectedProperties+=ExpCS
		public Assignment getSelectedPropertiesAssignment_1_1_1_0() { return cSelectedPropertiesAssignment_1_1_1_0; }

		//ExpCS
		public RuleCall getSelectedPropertiesExpCSParserRuleCall_1_1_1_0_0() { return cSelectedPropertiesExpCSParserRuleCall_1_1_1_0_0; }

		//("," selectedProperties+=ExpCS)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//selectedProperties+=ExpCS
		public Assignment getSelectedPropertiesAssignment_1_1_1_1_1() { return cSelectedPropertiesAssignment_1_1_1_1_1; }

		//ExpCS
		public RuleCall getSelectedPropertiesExpCSParserRuleCall_1_1_1_1_1_0() { return cSelectedPropertiesExpCSParserRuleCall_1_1_1_1_1_0; }
	}

	public class ExportDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExportDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionDefSelectionDefParserRuleCall_0_0 = (RuleCall)cSelectionDefAssignment_0.eContents().get(0);
		private final Keyword cExportsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExportedClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExportedClassTypeExpCSParserRuleCall_2_0 = (RuleCall)cExportedClassAssignment_2.eContents().get(0);
		private final Keyword cUsingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContributionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContributionContributionDefParserRuleCall_4_0 = (RuleCall)cContributionAssignment_4.eContents().get(0);
		private final Assignment cOccludingDefsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOccludingDefsOccludingDefParserRuleCall_5_0 = (RuleCall)cOccludingDefsAssignment_5.eContents().get(0);
		
		//ExportDef:
		//	selectionDef=SelectionDef? "exports" exportedClass=TypeExpCS "using" contribution=ContributionDef
		//	occludingDefs+=OccludingDef*;
		@Override public ParserRule getRule() { return rule; }

		//selectionDef=SelectionDef? "exports" exportedClass=TypeExpCS "using" contribution=ContributionDef
		//occludingDefs+=OccludingDef*
		public Group getGroup() { return cGroup; }

		//selectionDef=SelectionDef?
		public Assignment getSelectionDefAssignment_0() { return cSelectionDefAssignment_0; }

		//SelectionDef
		public RuleCall getSelectionDefSelectionDefParserRuleCall_0_0() { return cSelectionDefSelectionDefParserRuleCall_0_0; }

		//"exports"
		public Keyword getExportsKeyword_1() { return cExportsKeyword_1; }

		//exportedClass=TypeExpCS
		public Assignment getExportedClassAssignment_2() { return cExportedClassAssignment_2; }

		//TypeExpCS
		public RuleCall getExportedClassTypeExpCSParserRuleCall_2_0() { return cExportedClassTypeExpCSParserRuleCall_2_0; }

		//"using"
		public Keyword getUsingKeyword_3() { return cUsingKeyword_3; }

		//contribution=ContributionDef
		public Assignment getContributionAssignment_4() { return cContributionAssignment_4; }

		//ContributionDef
		public RuleCall getContributionContributionDefParserRuleCall_4_0() { return cContributionContributionDefParserRuleCall_4_0; }

		//occludingDefs+=OccludingDef*
		public Assignment getOccludingDefsAssignment_5() { return cOccludingDefsAssignment_5; }

		//OccludingDef
		public RuleCall getOccludingDefsOccludingDefParserRuleCall_5_0() { return cOccludingDefsOccludingDefParserRuleCall_5_0; }
	}

	public class PrimaryExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelfExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTupleLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMapLiteralExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCollectionLiteralExpCSParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLambdaLiteralExpCSParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypeLiteralExpCSParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNameExpCSParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cResolveExpCSParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLookupExpCSParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
		//// DSL addition
		// PrimaryExpCS returns essentialocl::ExpCS:
		//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | MapLiteralExpCS |
		//	CollectionLiteralExpCS | LambdaLiteralExpCS | TypeLiteralExpCS | NameExpCS | // DSL addition
		// ResolveExpCS |
		//	LookupExpCS;
		@Override public ParserRule getRule() { return rule; }

		//NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | MapLiteralExpCS | CollectionLiteralExpCS
		//| LambdaLiteralExpCS | TypeLiteralExpCS | NameExpCS | // DSL addition
		// ResolveExpCS | LookupExpCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//NestedExpCS
		public RuleCall getNestedExpCSParserRuleCall_0() { return cNestedExpCSParserRuleCall_0; }

		//IfExpCS
		public RuleCall getIfExpCSParserRuleCall_1() { return cIfExpCSParserRuleCall_1; }

		//SelfExpCS
		public RuleCall getSelfExpCSParserRuleCall_2() { return cSelfExpCSParserRuleCall_2; }

		//PrimitiveLiteralExpCS
		public RuleCall getPrimitiveLiteralExpCSParserRuleCall_3() { return cPrimitiveLiteralExpCSParserRuleCall_3; }

		//TupleLiteralExpCS
		public RuleCall getTupleLiteralExpCSParserRuleCall_4() { return cTupleLiteralExpCSParserRuleCall_4; }

		//MapLiteralExpCS
		public RuleCall getMapLiteralExpCSParserRuleCall_5() { return cMapLiteralExpCSParserRuleCall_5; }

		//CollectionLiteralExpCS
		public RuleCall getCollectionLiteralExpCSParserRuleCall_6() { return cCollectionLiteralExpCSParserRuleCall_6; }

		//LambdaLiteralExpCS
		public RuleCall getLambdaLiteralExpCSParserRuleCall_7() { return cLambdaLiteralExpCSParserRuleCall_7; }

		//TypeLiteralExpCS
		public RuleCall getTypeLiteralExpCSParserRuleCall_8() { return cTypeLiteralExpCSParserRuleCall_8; }

		//NameExpCS
		public RuleCall getNameExpCSParserRuleCall_9() { return cNameExpCSParserRuleCall_9; }

		//// DSL addition
		// ResolveExpCS
		public RuleCall getResolveExpCSParserRuleCall_10() { return cResolveExpCSParserRuleCall_10; }

		//LookupExpCS
		public RuleCall getLookupExpCSParserRuleCall_11() { return cLookupExpCSParserRuleCall_11; }
	}

	public class ResolveExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResolveExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResolveExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cResolveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ResolveExpCS:
		//	{ResolveExpCS} "resolve";
		@Override public ParserRule getRule() { return rule; }

		//{ResolveExpCS} "resolve"
		public Group getGroup() { return cGroup; }

		//{ResolveExpCS}
		public Action getResolveExpCSAction_0() { return cResolveExpCSAction_0; }

		//"resolve"
		public Keyword getResolveKeyword_1() { return cResolveKeyword_1; }
	}

	public class LookupExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookupExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLookupKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cFromExpAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cFromExpLookupFromKeyword_0_1_0 = (Keyword)cFromExpAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsNavigatingArgExpCSParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsNavigatingArgExpCSParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LookupExpCS:
		//	("lookup" | fromExp?="lookupFrom") "(" args+=NavigatingArgExpCS ("," args+=NavigatingArgExpCS)* ")";
		@Override public ParserRule getRule() { return rule; }

		//("lookup" | fromExp?="lookupFrom") "(" args+=NavigatingArgExpCS ("," args+=NavigatingArgExpCS)* ")"
		public Group getGroup() { return cGroup; }

		//"lookup" | fromExp?="lookupFrom"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"lookup"
		public Keyword getLookupKeyword_0_0() { return cLookupKeyword_0_0; }

		//fromExp?="lookupFrom"
		public Assignment getFromExpAssignment_0_1() { return cFromExpAssignment_0_1; }

		//"lookupFrom"
		public Keyword getFromExpLookupFromKeyword_0_1_0() { return cFromExpLookupFromKeyword_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args+=NavigatingArgExpCS
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//NavigatingArgExpCS
		public RuleCall getArgsNavigatingArgExpCSParserRuleCall_2_0() { return cArgsNavigatingArgExpCSParserRuleCall_2_0; }

		//("," args+=NavigatingArgExpCS)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//args+=NavigatingArgExpCS
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//NavigatingArgExpCS
		public RuleCall getArgsNavigatingArgExpCSParserRuleCall_3_1_0() { return cArgsNavigatingArgExpCSParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final CSDeclElements pCSDecl;
	private final ASDeclElements pASDecl;
	private final ImportCSElements pImportCS;
	private final MappingSectElements pMappingSect;
	private final ClassMapElements pClassMap;
	private final ClassMapStmntElements pClassMapStmnt;
	private final PropertyMapElements pPropertyMap;
	private final DisambiguationSectElements pDisambiguationSect;
	private final ClassDisambiguationElements pClassDisambiguation;
	private final ClassDisambiguationStmntElements pClassDisambiguationStmnt;
	private final DisambiguationDefElements pDisambiguationDef;
	private final NameResolutionSectElements pNameResolutionSect;
	private final DefaultNamedElementDefElements pDefaultNamedElementDef;
	private final DefaultNameReferencerDefElements pDefaultNameReferencerDef;
	private final NameQualifierDefElements pNameQualifierDef;
	private final ClassNameResolutionElements pClassNameResolution;
	private final ClassNameResolutionStmntElements pClassNameResolutionStmnt;
	private final NamedElementDefElements pNamedElementDef;
	private final QualificationDefElements pQualificationDef;
	private final ElementsContribExpElements pElementsContribExp;
	private final ScopeDefElements pScopeDef;
	private final OccludingDefElements pOccludingDef;
	private final ContributionDefElements pContributionDef;
	private final SelectionDefElements pSelectionDef;
	private final ExportDefElements pExportDef;
	private final PrimaryExpCSElements pPrimaryExpCS;
	private final ResolveExpCSElements pResolveExpCS;
	private final LookupExpCSElements pLookupExpCS;
	
	private final Grammar grammar;

	private final EssentialOCLGrammarAccess gaEssentialOCL;

	@Inject
	public CS2ASDSLGrammarAccess(GrammarProvider grammarProvider,
		EssentialOCLGrammarAccess gaEssentialOCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEssentialOCL = gaEssentialOCL;
		this.pModel = new ModelElements();
		this.pCSDecl = new CSDeclElements();
		this.pASDecl = new ASDeclElements();
		this.pImportCS = new ImportCSElements();
		this.pMappingSect = new MappingSectElements();
		this.pClassMap = new ClassMapElements();
		this.pClassMapStmnt = new ClassMapStmntElements();
		this.pPropertyMap = new PropertyMapElements();
		this.pDisambiguationSect = new DisambiguationSectElements();
		this.pClassDisambiguation = new ClassDisambiguationElements();
		this.pClassDisambiguationStmnt = new ClassDisambiguationStmntElements();
		this.pDisambiguationDef = new DisambiguationDefElements();
		this.pNameResolutionSect = new NameResolutionSectElements();
		this.pDefaultNamedElementDef = new DefaultNamedElementDefElements();
		this.pDefaultNameReferencerDef = new DefaultNameReferencerDefElements();
		this.pNameQualifierDef = new NameQualifierDefElements();
		this.pClassNameResolution = new ClassNameResolutionElements();
		this.pClassNameResolutionStmnt = new ClassNameResolutionStmntElements();
		this.pNamedElementDef = new NamedElementDefElements();
		this.pQualificationDef = new QualificationDefElements();
		this.pElementsContribExp = new ElementsContribExpElements();
		this.pScopeDef = new ScopeDefElements();
		this.pOccludingDef = new OccludingDefElements();
		this.pContributionDef = new ContributionDefElements();
		this.pSelectionDef = new SelectionDefElements();
		this.pExportDef = new ExportDefElements();
		this.pPrimaryExpCS = new PrimaryExpCSElements();
		this.pResolveExpCS = new ResolveExpCSElements();
		this.pLookupExpCS = new LookupExpCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.york.cs.cs2as.CS2ASDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	
	//Model:
	//	csDecl=CSDecl asDecl=ASDecl (mappingSect=MappingSect & disambiguationSect=DisambiguationSect &
	//	nameresoSect=NameResolutionSect);
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//CSDecl:
	//	"source" metamodels+=ImportCS ("," metamodels+=ImportCS)*;
	public CSDeclElements getCSDeclAccess() {
		return pCSDecl;
	}
	
	public ParserRule getCSDeclRule() {
		return getCSDeclAccess().getRule();
	}

	//ASDecl:
	//	"target" metamodels+=ImportCS ("," metamodels+=ImportCS)*;
	public ASDeclElements getASDeclAccess() {
		return pASDecl;
	}
	
	public ParserRule getASDeclRule() {
		return getASDeclAccess().getRule();
	}

	//ImportCS returns base::ImportCS:
	//	(name=Identifier ":")? ownedPathName=URIPathNameCS isAll?="::*"?;
	public ImportCSElements getImportCSAccess() {
		return pImportCS;
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	//MappingSect:
	//	{MappingSect} "mappings" "{" mappings+=ClassMap* "}";
	public MappingSectElements getMappingSectAccess() {
		return pMappingSect;
	}
	
	public ParserRule getMappingSectRule() {
		return getMappingSectAccess().getRule();
	}

	//ClassMap:
	//	"map" to=PathNameCS "from" from=PathNameCS "{" ("when" rule=SIMPLE_ID ";")? statements+=ClassMapStmnt* "}";
	public ClassMapElements getClassMapAccess() {
		return pClassMap;
	}
	
	public ParserRule getClassMapRule() {
		return getClassMapAccess().getRule();
	}

	//ClassMapStmnt:
	//	PropertyMap ";";
	public ClassMapStmntElements getClassMapStmntAccess() {
		return pClassMapStmnt;
	}
	
	public ParserRule getClassMapStmntRule() {
		return getClassMapStmntAccess().getRule();
	}

	//PropertyMap:
	//	redefine?="redefine"? propName=SIMPLE_ID ":=" propInit=ExpCS;
	public PropertyMapElements getPropertyMapAccess() {
		return pPropertyMap;
	}
	
	public ParserRule getPropertyMapRule() {
		return getPropertyMapAccess().getRule();
	}

	//DisambiguationSect:
	//	{DisambiguationSect} "disambiguation" "{" disambiguations+=ClassDisambiguation* "}";
	public DisambiguationSectElements getDisambiguationSectAccess() {
		return pDisambiguationSect;
	}
	
	public ParserRule getDisambiguationSectRule() {
		return getDisambiguationSectAccess().getRule();
	}

	//ClassDisambiguation:
	//	class=PathNameCS "{" statements+=ClassDisambiguationStmnt* "}";
	public ClassDisambiguationElements getClassDisambiguationAccess() {
		return pClassDisambiguation;
	}
	
	public ParserRule getClassDisambiguationRule() {
		return getClassDisambiguationAccess().getRule();
	}

	//ClassDisambiguationStmnt:
	//	DisambiguationDef ";";
	public ClassDisambiguationStmntElements getClassDisambiguationStmntAccess() {
		return pClassDisambiguationStmnt;
	}
	
	public ParserRule getClassDisambiguationStmntRule() {
		return getClassDisambiguationStmntAccess().getRule();
	}

	//DisambiguationDef:
	//	name=SIMPLE_ID ":=" exp=ExpCS;
	public DisambiguationDefElements getDisambiguationDefAccess() {
		return pDisambiguationDef;
	}
	
	public ParserRule getDisambiguationDefRule() {
		return getDisambiguationDefAccess().getRule();
	}

	//NameResolutionSect:
	//	{NameResolutionSect} "nameresolution" "{" namedElement=DefaultNamedElementDef?
	//	nameReferencer=DefaultNameReferencerDef? nameQualifier=NameQualifierDef? nameResolutions+=ClassNameResolution* "}";
	public NameResolutionSectElements getNameResolutionSectAccess() {
		return pNameResolutionSect;
	}
	
	public ParserRule getNameResolutionSectRule() {
		return getNameResolutionSectAccess().getRule();
	}

	//DefaultNamedElementDef:
	//	"named-element" nameElement=SIMPLE_ID "name-property" nameProperty=NameExpCS ";";
	public DefaultNamedElementDefElements getDefaultNamedElementDefAccess() {
		return pDefaultNamedElementDef;
	}
	
	public ParserRule getDefaultNamedElementDefRule() {
		return getDefaultNamedElementDefAccess().getRule();
	}

	//DefaultNameReferencerDef:
	//	"name-referencer" nameReferencer=SIMPLE_ID "name-property" nameProperty=NameExpCS ";";
	public DefaultNameReferencerDefElements getDefaultNameReferencerDefAccess() {
		return pDefaultNameReferencerDef;
	}
	
	public ParserRule getDefaultNameReferencerDefRule() {
		return getDefaultNameReferencerDefAccess().getRule();
	}

	//NameQualifierDef:
	//	"name-qualifier" nameQualifier=SIMPLE_ID "name-segments-property" segmentsProp=NameExpCS ";";
	public NameQualifierDefElements getNameQualifierDefAccess() {
		return pNameQualifierDef;
	}
	
	public ParserRule getNameQualifierDefRule() {
		return getNameQualifierDefAccess().getRule();
	}

	//ClassNameResolution:
	//	class=PathNameCS "{" statements+=ClassNameResolutionStmnt* "}";
	public ClassNameResolutionElements getClassNameResolutionAccess() {
		return pClassNameResolution;
	}
	
	public ParserRule getClassNameResolutionRule() {
		return getClassNameResolutionAccess().getRule();
	}

	//ClassNameResolutionStmnt:
	//	(NamedElementDef | ScopeDef | ExportDef) ";";
	public ClassNameResolutionStmntElements getClassNameResolutionStmntAccess() {
		return pClassNameResolutionStmnt;
	}
	
	public ParserRule getClassNameResolutionStmntRule() {
		return getClassNameResolutionStmntAccess().getRule();
	}

	//NamedElementDef:
	//	{NamedElementDef} "named-element" ("name-property" namePoperty=NameExpCS)? ("qualifying"
	//	qualification+=QualificationDef ("," qualification+=QualificationDef)*)?;
	public NamedElementDefElements getNamedElementDefAccess() {
		return pNamedElementDef;
	}
	
	public ParserRule getNamedElementDefRule() {
		return getNamedElementDefAccess().getRule();
	}

	//QualificationDef:
	//	qualifiedClass=TypeExpCS "using" contribution+=ElementsContribExp;
	public QualificationDefElements getQualificationDefAccess() {
		return pQualificationDef;
	}
	
	public ParserRule getQualificationDefRule() {
		return getQualificationDefAccess().getRule();
	}

	//ElementsContribExp:
	//	(isFollowing?="following" | isImported?="imported"?)? expression=ExpCS;
	public ElementsContribExpElements getElementsContribExpAccess() {
		return pElementsContribExp;
	}
	
	public ParserRule getElementsContribExpRule() {
		return getElementsContribExpAccess().getRule();
	}

	//ScopeDef:
	//	selectionDef=SelectionDef? ("nested-scope" | sameScope?="same-scope" | emptyScope?="empty-scope")?
	//	alsoExports?="also-exports"? contribution=ContributionDef occludingDefs+=OccludingDef*;
	public ScopeDefElements getScopeDefAccess() {
		return pScopeDef;
	}
	
	public ParserRule getScopeDefRule() {
		return getScopeDefAccess().getRule();
	}

	//OccludingDef:
	//	"occluding" contribution=ContributionDef;
	public OccludingDefElements getOccludingDefAccess() {
		return pOccludingDef;
	}
	
	public ParserRule getOccludingDefRule() {
		return getOccludingDefAccess().getRule();
	}

	//ContributionDef:
	//	contributions+=ElementsContribExp ("," contributions+=ElementsContribExp)*;
	public ContributionDefElements getContributionDefAccess() {
		return pContributionDef;
	}
	
	public ParserRule getContributionDefRule() {
		return getContributionDefAccess().getRule();
	}

	//SelectionDef:
	//	"for" ({SelectionAll} "all" ("excepting" exceptionProperties+=ExpCS ("," exceptionProperties+=ExpCS)*)? |
	//	{SelectionSpecific} (selectedProperties+=ExpCS ("," selectedProperties+=ExpCS)*));
	public SelectionDefElements getSelectionDefAccess() {
		return pSelectionDef;
	}
	
	public ParserRule getSelectionDefRule() {
		return getSelectionDefAccess().getRule();
	}

	//ExportDef:
	//	selectionDef=SelectionDef? "exports" exportedClass=TypeExpCS "using" contribution=ContributionDef
	//	occludingDefs+=OccludingDef*;
	public ExportDefElements getExportDefAccess() {
		return pExportDef;
	}
	
	public ParserRule getExportDefRule() {
		return getExportDefAccess().getRule();
	}

	/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
	//// DSL addition
	// PrimaryExpCS returns essentialocl::ExpCS:
	//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | MapLiteralExpCS |
	//	CollectionLiteralExpCS | LambdaLiteralExpCS | TypeLiteralExpCS | NameExpCS | // DSL addition
	// ResolveExpCS |
	//	LookupExpCS;
	public PrimaryExpCSElements getPrimaryExpCSAccess() {
		return pPrimaryExpCS;
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//ResolveExpCS:
	//	{ResolveExpCS} "resolve";
	public ResolveExpCSElements getResolveExpCSAccess() {
		return pResolveExpCS;
	}
	
	public ParserRule getResolveExpCSRule() {
		return getResolveExpCSAccess().getRule();
	}

	//LookupExpCS:
	//	("lookup" | fromExp?="lookupFrom") "(" args+=NavigatingArgExpCS ("," args+=NavigatingArgExpCS)* ")";
	public LookupExpCSElements getLookupExpCSAccess() {
		return pLookupExpCS;
	}
	
	public ParserRule getLookupExpCSRule() {
		return getLookupExpCSAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLReservedKeyword:
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnaryOperatorName:
	//	"-" | "not";
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLInfixOperatorName:
	//	"*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies";
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLNavigationOperatorName:
	//	"." | "->" | "?." | "?->";
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}

	//BinaryOperatorName:
	//	InfixOperatorName | NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaEssentialOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}

	//// Intended to be overrideable
	// InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaEssentialOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}

	//// Intended to be overrideable
	// NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName;
	public EssentialOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaEssentialOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}

	//// Intended to be overrideable
	// UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaEssentialOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Names
	//
	////---------------------------------------------------------------------
	//
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnrestrictedName returns ecore::EString:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnrestrictedName returns ecore::EString:
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaEssentialOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnreservedName returns ecore::EString:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Map" | "Tuple";
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnreservedName returns ecore::EString:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//URIPathNameCS returns base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ("::" ownedPathElements+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS returns base::PathElementCS:
	//	name=UnrestrictedName | {base::PathElementWithURICS} uri=URI;
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Types
	//
	////---------------------------------------------------------------------
	// PrimitiveTypeIdentifier:
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaEssentialOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//PrimitiveTypeCS returns base::PrimitiveTypeRefCS:
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ("(" ownedType=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MapTypeCS:
	//	name="Map" ("(" ownedKeyType=TypeExpCS "," ownedValueType=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaEssentialOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}

	//TupleTypeCS returns base::TupleTypeCS:
	//	name="Tuple" ("(" (ownedParts+=TuplePartCS ("," ownedParts+=TuplePartCS)*)? ")")?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS returns base::TuplePartCS:
	//	name=UnrestrictedName ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Literals
	//
	////---------------------------------------------------------------------
	// CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS "{" (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	ownedExpression=ExpCS (".." ownedLastExpression=ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS "{" (ownedParts+=PatternExpCS ("," ownedParts+=PatternExpCS)* ("++"
	//	restVariableName=Identifier))? "}";
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaEssentialOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}

	//// PatternPartCS
	// ShadowPartCS:
	//	referredProperty=[pivot::Property|UnrestrictedName] "=" ownedInitExpression=(ExpCS | PatternExpCS);
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaEssentialOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}

	//PatternExpCS:
	//	patternVariableName=UnrestrictedName? ":" ownedPatternType=TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaEssentialOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}

	//LambdaLiteralExpCS:
	//	"Lambda" "{" ownedExpressionCS=ExpCS "}";
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaEssentialOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}

	//MapLiteralExpCS:
	//	ownedType=MapTypeCS "{" (ownedParts+=MapLiteralPartCS ("," ownedParts+=MapLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaEssentialOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}

	//MapLiteralPartCS:
	//	ownedKey=ExpCS "<-" ownedValue=ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaEssentialOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
	//	NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	"Tuple" "{" ownedParts+=TupleLiteralPartCS ("," ownedParts+=TupleLiteralPartCS)* "}";
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	symbol="true" | symbol="false";
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} "*";
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} "invalid";
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} "null";
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralCS returns base::TypedRefCS:
	//	PrimitiveTypeCS | CollectionTypeCS | MapTypeCS | TupleTypeCS;
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS returns base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ("{" ownedPatternGuard=ExpCS "}")?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS returns base::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS) ownedMultiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Expressions
	//
	////---------------------------------------------------------------------
	//
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	//
	////  that let is right associative, whereas infix operators are left associative.
	//
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	// // is
	//
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	//
	/// * An expression elaborates a prefixed expression with zero or more binary operator and expression suffixes.
	// * An optionally prefixed let expression is permitted except when suffixed with further expressions.* /
	//ExpCS:
	//	PrefixedPrimaryExpCS ({InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)?
	//	//	({InfixExpCS} ownedSource=PrefixedExpCS name=BinaryOperatorName ownedArgument=ExpCS)
	// //| 	PrefixedExpCS
	//
	//	// the above takes exponential or worse time for backtracking, below is fast
	// | PrefixedLetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	/// * A prefixed let expression elaborates a let expression with zero or more unary prefix operators. * / PrefixedLetExpCS
	//returns ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS;
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaEssentialOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}

	/// * A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. * /
	//PrefixedPrimaryExpCS returns ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}

	/// * A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.* /
	//NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?="@"
	//	"pre")?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.* /
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} "{" ((ownedParts+=ShadowPartCS ("," ownedParts+=ShadowPartCS)*)? | value=StringLiteral) "}";
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaEssentialOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for template specialisations and operations arguments.* /
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} "(" (ownedArguments+=NavigatingArgCS ownedArguments+=NavigatingCommaArgCS*
	//	(ownedArguments+=NavigatingSemiArgCS ownedArguments+=NavigatingCommaArgCS*)? (ownedArguments+=NavigatingBarArgCS
	//	ownedArguments+=NavigatingCommaArgCS*)*)? ")";
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaEssentialOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}

	/// * A square bracket clause is a generalized rule for association class qualifiers and roles.* / SquareBracketedClauseCS:
	//	"[" ownedTerms+=ExpCS ("," ownedTerms+=ExpCS)* "]";
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaEssentialOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}

	/// * A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. * /
	//// Type-less init is an illegal infix expression
	// NavigatingArgCS:
	//	ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)? | "in"
	//	ownedInitExpression=ExpCS)? | ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	/// * A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. * /
	//// Type-less init is an illegal infix expression
	// NavigatingBarArgCS returns NavigatingArgCS:
	//	prefix="|" ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	/// * A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. * /
	//// Type-less init is an illegal infix expression
	// NavigatingCommaArgCS returns NavigatingArgCS:
	//	prefix="," ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)? | "in"
	//	ownedInitExpression=ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	/// * A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. * /
	//// Type-less init is an illegal infix expression
	// NavigatingSemiArgCS returns NavigatingArgCS:
	//	prefix=";" ownedNameExpression=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" ownedInitExpression=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//// Intended to be overridden
	// //	'?'	-- defined by Complete OCL
	// NavigatingArgExpCS returns ExpCS:
	//	ExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaEssentialOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//IfExpCS:
	//	"if" ownedCondition=(ExpCS | PatternExpCS) "then" ownedThenExpression=ExpCS //	ifThenExpressions+=IfThenExpCS
	//
	//	ownedIfThenExpressions+=ElseIfThenExpCS* "else" ownedElseExpression=ExpCS "endif";
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	////IfThenExpCS returns IfThenExpCS:
	// //	'if' condition=ExpCS
	// //	'then' thenExpression=ExpCS
	// //;
	// ElseIfThenExpCS
	//returns IfThenExpCS:
	//	"elseif" ownedCondition=ExpCS "then" ownedThenExpression=ExpCS;
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaEssentialOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}

	//LetExpCS:
	//	"let" ownedVariables+=LetVariableCS ("," ownedVariables+=LetVariableCS)* "in" ownedInExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (":" ownedType=TypeExpCS)? "="
	//	ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	"(" ownedExpression=ExpCS ")";
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} "self";
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}

	//MultiplicityBoundsCS:
	//	lowerBound=LOWER (".." upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaEssentialOCL.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityCS:
	//	"[" (MultiplicityBoundsCS | MultiplicityStringCS) ("|?" | isNullFree?="|1")? "]";
	public BaseGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaEssentialOCL.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//MultiplicityStringCS:
	//	stringBounds=("*" | "+" | "?");
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaEssentialOCL.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ("::" ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaEssentialOCL.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS returns PathElementCS:
	//	name=UnrestrictedName;
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaEssentialOCL.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS returns PathElementCS:
	//	name=UnreservedName;
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaEssentialOCL.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS ("," ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaEssentialOCL.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}

	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaEssentialOCL.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}

	//TemplateSignatureCS:
	//	"(" ownedParameters+=TypeParameterCS ("," ownedParameters+=TypeParameterCS)* ")";
	public BaseGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaEssentialOCL.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}

	//TypeParameterCS:
	//	name=UnrestrictedName ("extends" ownedExtends+=TypedRefCS ("&&" ownedExtends+=TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaEssentialOCL.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}

	//TypeRefCS:
	//	TypedRefCS | WildcardTypeRefCS;
	public BaseGrammarAccess.TypeRefCSElements getTypeRefCSAccess() {
		return gaEssentialOCL.getTypeRefCSAccess();
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}

	//TypedRefCS:
	//	TypedTypeRefCS;
	public BaseGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaEssentialOCL.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}

	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ("(" ownedBinding=TemplateBindingCS ")")?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaEssentialOCL.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}

	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} "?" ("extends" ownedExtends=TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaEssentialOCL.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaEssentialOCL.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaEssentialOCL.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	/// * A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. * /
	//LOWER returns ecore::EInt:
	//	INT;
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaEssentialOCL.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	/// * A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// * /
	//// Not terminal to allow parser backtracking to sort out "5..7"
	//
	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	// NUMBER_LITERAL returns
	//BigNumber:
	//	INT;
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaEssentialOCL.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaEssentialOCL.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	/// * An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. * /
	//UPPER returns ecore::EInt:
	//	INT | "*";
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaEssentialOCL.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaEssentialOCL.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\");
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaEssentialOCL.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaEssentialOCL.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//	"\"" (ESCAPED_CHARACTER | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"\'" (ESCAPED_CHARACTER | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/\'"->"\'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | "0".."9")*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaEssentialOCL.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaEssentialOCL.getESCAPED_IDRule();
	} 

	//// String to allow diverse re-use
	// // multiple leading zeroes occur as floating point fractional part
	// terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaEssentialOCL.getINTRule();
	} 

	/// * A multi-line comment supports a comment that may span more than one line using familiar slash-star...star-slash comment delimiters * /
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaEssentialOCL.getML_COMMENTRule();
	} 

	/// * A single-line comment supports a comment that terminates at the end of the line * / terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaEssentialOCL.getSL_COMMENTRule();
	} 

	/// * Whitespace may occur between any pair of tokens * / terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaEssentialOCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaEssentialOCL.getANY_OTHERRule();
	} 
}
