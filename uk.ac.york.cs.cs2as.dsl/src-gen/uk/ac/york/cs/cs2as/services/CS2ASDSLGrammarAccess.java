/*
 * generated by Xtext
 */
package uk.ac.york.cs.cs2as.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;

@Singleton
public class CS2ASDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CS2ASModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.CS2ASModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceSourceDomainParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetTargetDomainParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cMappingSectAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cMappingSectMappingSectParserRuleCall_2_0_0 = (RuleCall)cMappingSectAssignment_2_0.eContents().get(0);
		private final Assignment cDisambiguationSectAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0 = (RuleCall)cDisambiguationSectAssignment_2_1.eContents().get(0);
		private final Assignment cNameresoSectAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cNameresoSectNameResolutionSectParserRuleCall_2_2_0 = (RuleCall)cNameresoSectAssignment_2_2.eContents().get(0);
		private final Assignment cHelpersSectAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cHelpersSectHelpersSectParserRuleCall_2_3_0 = (RuleCall)cHelpersSectAssignment_2_3.eContents().get(0);
		
		//CS2ASModel:
		//	source=SourceDomain
		//	target=TargetDomain (mappingSect=MappingSect
		//	& disambiguationSect=DisambiguationSect?
		//	& nameresoSect=NameResolutionSect?
		//	& helpersSect=HelpersSect?);
		@Override public ParserRule getRule() { return rule; }

		//source=SourceDomain target=TargetDomain (mappingSect=MappingSect & disambiguationSect=DisambiguationSect? &
		//nameresoSect=NameResolutionSect? & helpersSect=HelpersSect?)
		public Group getGroup() { return cGroup; }

		//source=SourceDomain
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//SourceDomain
		public RuleCall getSourceSourceDomainParserRuleCall_0_0() { return cSourceSourceDomainParserRuleCall_0_0; }

		//target=TargetDomain
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//TargetDomain
		public RuleCall getTargetTargetDomainParserRuleCall_1_0() { return cTargetTargetDomainParserRuleCall_1_0; }

		//(mappingSect=MappingSect & disambiguationSect=DisambiguationSect? & nameresoSect=NameResolutionSect? &
		//helpersSect=HelpersSect?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//mappingSect=MappingSect
		public Assignment getMappingSectAssignment_2_0() { return cMappingSectAssignment_2_0; }

		//MappingSect
		public RuleCall getMappingSectMappingSectParserRuleCall_2_0_0() { return cMappingSectMappingSectParserRuleCall_2_0_0; }

		//disambiguationSect=DisambiguationSect?
		public Assignment getDisambiguationSectAssignment_2_1() { return cDisambiguationSectAssignment_2_1; }

		//DisambiguationSect
		public RuleCall getDisambiguationSectDisambiguationSectParserRuleCall_2_1_0() { return cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0; }

		//nameresoSect=NameResolutionSect?
		public Assignment getNameresoSectAssignment_2_2() { return cNameresoSectAssignment_2_2; }

		//NameResolutionSect
		public RuleCall getNameresoSectNameResolutionSectParserRuleCall_2_2_0() { return cNameresoSectNameResolutionSectParserRuleCall_2_2_0; }

		//helpersSect=HelpersSect?
		public Assignment getHelpersSectAssignment_2_3() { return cHelpersSectAssignment_2_3; }

		//HelpersSect
		public RuleCall getHelpersSectHelpersSectParserRuleCall_2_3_0() { return cHelpersSectHelpersSectParserRuleCall_2_3_0; }
	}

	public class SourceDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.SourceDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelsMetaModelDeclParserRuleCall_1_0 = (RuleCall)cMetamodelsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetamodelsMetaModelDeclParserRuleCall_2_1_0 = (RuleCall)cMetamodelsAssignment_2_1.eContents().get(0);
		
		//SourceDomain:
		//	'source' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*;
		@Override public ParserRule getRule() { return rule; }

		//'source' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*
		public Group getGroup() { return cGroup; }

		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//metamodels+=MetaModelDecl
		public Assignment getMetamodelsAssignment_1() { return cMetamodelsAssignment_1; }

		//MetaModelDecl
		public RuleCall getMetamodelsMetaModelDeclParserRuleCall_1_0() { return cMetamodelsMetaModelDeclParserRuleCall_1_0; }

		//(',' metamodels+=MetaModelDecl)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//metamodels+=MetaModelDecl
		public Assignment getMetamodelsAssignment_2_1() { return cMetamodelsAssignment_2_1; }

		//MetaModelDecl
		public RuleCall getMetamodelsMetaModelDeclParserRuleCall_2_1_0() { return cMetamodelsMetaModelDeclParserRuleCall_2_1_0; }
	}

	public class TargetDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.TargetDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelsMetaModelDeclParserRuleCall_1_0 = (RuleCall)cMetamodelsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetamodelsMetaModelDeclParserRuleCall_2_1_0 = (RuleCall)cMetamodelsAssignment_2_1.eContents().get(0);
		
		//TargetDomain:
		//	'target' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*;
		@Override public ParserRule getRule() { return rule; }

		//'target' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*
		public Group getGroup() { return cGroup; }

		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }

		//metamodels+=MetaModelDecl
		public Assignment getMetamodelsAssignment_1() { return cMetamodelsAssignment_1; }

		//MetaModelDecl
		public RuleCall getMetamodelsMetaModelDeclParserRuleCall_1_0() { return cMetamodelsMetaModelDeclParserRuleCall_1_0; }

		//(',' metamodels+=MetaModelDecl)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//metamodels+=MetaModelDecl
		public Assignment getMetamodelsAssignment_2_1() { return cMetamodelsAssignment_2_1; }

		//MetaModelDecl
		public RuleCall getMetamodelsMetaModelDeclParserRuleCall_2_1_0() { return cMetamodelsMetaModelDeclParserRuleCall_2_1_0; }
	}

	public class MetaModelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MetaModelDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedPathNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPathNameURIPathNameCSParserRuleCall_1_0 = (RuleCall)cOwnedPathNameAssignment_1.eContents().get(0);
		private final Assignment cIsAllAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsAllColonColonAsteriskKeyword_2_0 = (Keyword)cIsAllAssignment_2.eContents().get(0);
		
		//MetaModelDecl base::ImportCS:
		//	(name=ID ':')? ownedPathName=URIPathNameCS isAll?='::*'?
		@Override public ParserRule getRule() { return rule; }

		//(name=ID ':')? ownedPathName=URIPathNameCS isAll?='::*'?
		public Group getGroup() { return cGroup; }

		//(name=ID ':')?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDParserRuleCall_0_0_0() { return cNameIDParserRuleCall_0_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//ownedPathName=URIPathNameCS
		public Assignment getOwnedPathNameAssignment_1() { return cOwnedPathNameAssignment_1; }

		//URIPathNameCS
		public RuleCall getOwnedPathNameURIPathNameCSParserRuleCall_1_0() { return cOwnedPathNameURIPathNameCSParserRuleCall_1_0; }

		//isAll?='::*'?
		public Assignment getIsAllAssignment_2() { return cIsAllAssignment_2; }

		//'::*'
		public Keyword getIsAllColonColonAsteriskKeyword_2_0() { return cIsAllColonColonAsteriskKeyword_2_0; }
	}

	public class MappingSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MappingSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMappingsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsMappingDefParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MappingSect:
		//	{MappingSect}
		//	'mappings' '{'
		//	mappings+=MappingDef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{MappingSect} 'mappings' '{' mappings+=MappingDef* '}'
		public Group getGroup() { return cGroup; }

		//{MappingSect}
		public Action getMappingSectAction_0() { return cMappingSectAction_0; }

		//'mappings'
		public Keyword getMappingsKeyword_1() { return cMappingsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//mappings+=MappingDef*
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }

		//MappingDef
		public RuleCall getMappingsMappingDefParserRuleCall_3_0() { return cMappingsMappingDefParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MappingDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MappingDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMappingCreationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MappingDef:
		//	MappingCreation | MappingReference;
		@Override public ParserRule getRule() { return rule; }

		//MappingCreation | MappingReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//MappingCreation
		public RuleCall getMappingCreationParserRuleCall_0() { return cMappingCreationParserRuleCall_0; }

		//MappingReference
		public RuleCall getMappingReferenceParserRuleCall_1() { return cMappingReferenceParserRuleCall_1; }
	}

	public class MappingCreationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MappingCreation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToPathNameCSParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromPathNameCSParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRuleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRuleIDParserRuleCall_4_1_0 = (RuleCall)cRuleAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyDefParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MappingCreation:
		//	'create' to=PathNameCS 'from' from=PathNameCS ('when' rule=ID)? '{'
		//	properties+=PropertyDef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'create' to=PathNameCS 'from' from=PathNameCS ('when' rule=ID)? '{' properties+=PropertyDef* '}'
		public Group getGroup() { return cGroup; }

		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }

		//to=PathNameCS
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//PathNameCS
		public RuleCall getToPathNameCSParserRuleCall_1_0() { return cToPathNameCSParserRuleCall_1_0; }

		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//from=PathNameCS
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//PathNameCS
		public RuleCall getFromPathNameCSParserRuleCall_3_0() { return cFromPathNameCSParserRuleCall_3_0; }

		//('when' rule=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//'when'
		public Keyword getWhenKeyword_4_0() { return cWhenKeyword_4_0; }

		//rule=ID
		public Assignment getRuleAssignment_4_1() { return cRuleAssignment_4_1; }

		//ID
		public RuleCall getRuleIDParserRuleCall_4_1_0() { return cRuleIDParserRuleCall_4_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//properties+=PropertyDef*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }

		//PropertyDef
		public RuleCall getPropertiesPropertyDefParserRuleCall_6_0() { return cPropertiesPropertyDefParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.PropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedefineAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRedefineRedefineKeyword_0_0 = (Keyword)cRedefineAssignment_0.eContents().get(0);
		private final Assignment cPropRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropRefPathNameCSParserRuleCall_1_0 = (RuleCall)cPropRefAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropInitExpCSParserRuleCall_3_0 = (RuleCall)cPropInitAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PropertyDef:
		//	redefine?='redefine'? propRef=PathNameCS ':='
		//	propInit=ExpCS ';';
		@Override public ParserRule getRule() { return rule; }

		//redefine?='redefine'? propRef=PathNameCS ':=' propInit=ExpCS ';'
		public Group getGroup() { return cGroup; }

		//redefine?='redefine'?
		public Assignment getRedefineAssignment_0() { return cRedefineAssignment_0; }

		//'redefine'
		public Keyword getRedefineRedefineKeyword_0_0() { return cRedefineRedefineKeyword_0_0; }

		//propRef=PathNameCS
		public Assignment getPropRefAssignment_1() { return cPropRefAssignment_1; }

		//PathNameCS
		public RuleCall getPropRefPathNameCSParserRuleCall_1_0() { return cPropRefPathNameCSParserRuleCall_1_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//propInit=ExpCS
		public Assignment getPropInitAssignment_3() { return cPropInitAssignment_3; }

		//ExpCS
		public RuleCall getPropInitExpCSParserRuleCall_3_0() { return cPropInitExpCSParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class MappingReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MappingReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToPathNameCSParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromPathNameCSParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpCSParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		
		//MappingReference:
		//	'ref' to=PathNameCS 'from' from=PathNameCS
		//	':=' expression=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//'ref' to=PathNameCS 'from' from=PathNameCS ':=' expression=ExpCS
		public Group getGroup() { return cGroup; }

		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//to=PathNameCS
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//PathNameCS
		public RuleCall getToPathNameCSParserRuleCall_1_0() { return cToPathNameCSParserRuleCall_1_0; }

		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//from=PathNameCS
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//PathNameCS
		public RuleCall getFromPathNameCSParserRuleCall_3_0() { return cFromPathNameCSParserRuleCall_3_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_5_0() { return cExpressionExpCSParserRuleCall_5_0; }
	}

	public class DisambiguationSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.DisambiguationSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisambiguationSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDisambiguationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisambiguationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisambiguationsDisambiguationDefParserRuleCall_3_0 = (RuleCall)cDisambiguationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DisambiguationSect:
		//	{DisambiguationSect}
		//	'disambiguation' '{'
		//	disambiguations+=DisambiguationDef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{DisambiguationSect} 'disambiguation' '{' disambiguations+=DisambiguationDef* '}'
		public Group getGroup() { return cGroup; }

		//{DisambiguationSect}
		public Action getDisambiguationSectAction_0() { return cDisambiguationSectAction_0; }

		//'disambiguation'
		public Keyword getDisambiguationKeyword_1() { return cDisambiguationKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//disambiguations+=DisambiguationDef*
		public Assignment getDisambiguationsAssignment_3() { return cDisambiguationsAssignment_3; }

		//DisambiguationDef
		public RuleCall getDisambiguationsDisambiguationDefParserRuleCall_3_0() { return cDisambiguationsDisambiguationDefParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DisambiguationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.DisambiguationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassRefPathNameCSParserRuleCall_0_0 = (RuleCall)cClassRefAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesDisambiguationRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DisambiguationDef:
		//	classRef=PathNameCS '{'
		//	rules+=DisambiguationRule*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//classRef=PathNameCS '{' rules+=DisambiguationRule* '}'
		public Group getGroup() { return cGroup; }

		//classRef=PathNameCS
		public Assignment getClassRefAssignment_0() { return cClassRefAssignment_0; }

		//PathNameCS
		public RuleCall getClassRefPathNameCSParserRuleCall_0_0() { return cClassRefPathNameCSParserRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//rules+=DisambiguationRule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }

		//DisambiguationRule
		public RuleCall getRulesDisambiguationRuleParserRuleCall_2_0() { return cRulesDisambiguationRuleParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DisambiguationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.DisambiguationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSIMPLE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpCSParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DisambiguationRule:
		//	name=SIMPLE_ID ':=' exp=ExpCS
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//name=SIMPLE_ID ':=' exp=ExpCS ';'
		public Group getGroup() { return cGroup; }

		//name=SIMPLE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SIMPLE_ID
		public RuleCall getNameSIMPLE_IDTerminalRuleCall_0_0() { return cNameSIMPLE_IDTerminalRuleCall_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//exp=ExpCS
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//ExpCS
		public RuleCall getExpExpCSParserRuleCall_2_0() { return cExpExpCSParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class NameResolutionSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.NameResolutionSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameResolutionSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cName_resolutionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetsDefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsDefTargetsParserRuleCall_3_0 = (RuleCall)cTargetsDefAssignment_3.eContents().get(0);
		private final Assignment cInputsDefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsDefInputsParserRuleCall_4_0 = (RuleCall)cInputsDefAssignment_4.eContents().get(0);
		private final Assignment cProvidersDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProvidersDefProvidersParserRuleCall_5_0 = (RuleCall)cProvidersDefAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NameResolutionSect:
		//	{NameResolutionSect}
		//	'name_resolution' '{'
		//	targetsDef=Targets?
		//	inputsDef=Inputs?
		//	providersDef=Providers?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{NameResolutionSect} 'name_resolution' '{' targetsDef=Targets? inputsDef=Inputs? providersDef=Providers? '}'
		public Group getGroup() { return cGroup; }

		//{NameResolutionSect}
		public Action getNameResolutionSectAction_0() { return cNameResolutionSectAction_0; }

		//'name_resolution'
		public Keyword getName_resolutionKeyword_1() { return cName_resolutionKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//targetsDef=Targets?
		public Assignment getTargetsDefAssignment_3() { return cTargetsDefAssignment_3; }

		//Targets
		public RuleCall getTargetsDefTargetsParserRuleCall_3_0() { return cTargetsDefTargetsParserRuleCall_3_0; }

		//inputsDef=Inputs?
		public Assignment getInputsDefAssignment_4() { return cInputsDefAssignment_4; }

		//Inputs
		public RuleCall getInputsDefInputsParserRuleCall_4_0() { return cInputsDefInputsParserRuleCall_4_0; }

		//providersDef=Providers?
		public Assignment getProvidersDefAssignment_5() { return cProvidersDefAssignment_5; }

		//Providers
		public RuleCall getProvidersDefProvidersParserRuleCall_5_0() { return cProvidersDefProvidersParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TargetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Targets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTargetsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsTargetParserRuleCall_3_0 = (RuleCall)cTargetsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Targets:
		//	{Targets}
		//	'targets' '{'
		//	targets+=Target*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Targets} 'targets' '{' targets+=Target* '}'
		public Group getGroup() { return cGroup; }

		//{Targets}
		public Action getTargetsAction_0() { return cTargetsAction_0; }

		//'targets'
		public Keyword getTargetsKeyword_1() { return cTargetsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//targets+=Target*
		public Assignment getTargetsAssignment_3() { return cTargetsAssignment_3; }

		//Target
		public RuleCall getTargetsTargetParserRuleCall_3_0() { return cTargetsTargetParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassRefPathNameCSParserRuleCall_0_0 = (RuleCall)cClassRefAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUsingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropRefPathNameCSParserRuleCall_1_1_0 = (RuleCall)cPropRefAssignment_1_1.eContents().get(0);
		private final Assignment cIgnoreCaseAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cIgnoreCaseIgnore_caseKeyword_1_2_0 = (Keyword)cIgnoreCaseAssignment_1_2.eContents().get(0);
		private final Assignment cEscapeSeqDefAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEscapeSeqDefEscapeSequenceDefParserRuleCall_1_3_0 = (RuleCall)cEscapeSeqDefAssignment_1_3.eContents().get(0);
		private final Assignment cFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilterFilterDefParserRuleCall_2_0 = (RuleCall)cFilterAssignment_2.eContents().get(0);
		private final Assignment cQualificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQualificationQualificationDefParserRuleCall_3_0 = (RuleCall)cQualificationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Target:
		//	classRef=PathNameCS ('using' propRef=PathNameCS ignoreCase?='ignore_case'?
		//	escapeSeqDef=EscapeSequenceDef?)?
		//	filter=FilterDef?
		//	qualification=QualificationDef?
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//classRef=PathNameCS ('using' propRef=PathNameCS ignoreCase?='ignore_case'? escapeSeqDef=EscapeSequenceDef?)?
		//filter=FilterDef? qualification=QualificationDef? ';'
		public Group getGroup() { return cGroup; }

		//classRef=PathNameCS
		public Assignment getClassRefAssignment_0() { return cClassRefAssignment_0; }

		//PathNameCS
		public RuleCall getClassRefPathNameCSParserRuleCall_0_0() { return cClassRefPathNameCSParserRuleCall_0_0; }

		//('using' propRef=PathNameCS ignoreCase?='ignore_case'? escapeSeqDef=EscapeSequenceDef?)?
		public Group getGroup_1() { return cGroup_1; }

		//'using'
		public Keyword getUsingKeyword_1_0() { return cUsingKeyword_1_0; }

		//propRef=PathNameCS
		public Assignment getPropRefAssignment_1_1() { return cPropRefAssignment_1_1; }

		//PathNameCS
		public RuleCall getPropRefPathNameCSParserRuleCall_1_1_0() { return cPropRefPathNameCSParserRuleCall_1_1_0; }

		//ignoreCase?='ignore_case'?
		public Assignment getIgnoreCaseAssignment_1_2() { return cIgnoreCaseAssignment_1_2; }

		//'ignore_case'
		public Keyword getIgnoreCaseIgnore_caseKeyword_1_2_0() { return cIgnoreCaseIgnore_caseKeyword_1_2_0; }

		//escapeSeqDef=EscapeSequenceDef?
		public Assignment getEscapeSeqDefAssignment_1_3() { return cEscapeSeqDefAssignment_1_3; }

		//EscapeSequenceDef
		public RuleCall getEscapeSeqDefEscapeSequenceDefParserRuleCall_1_3_0() { return cEscapeSeqDefEscapeSequenceDefParserRuleCall_1_3_0; }

		//filter=FilterDef?
		public Assignment getFilterAssignment_2() { return cFilterAssignment_2; }

		//FilterDef
		public RuleCall getFilterFilterDefParserRuleCall_2_0() { return cFilterFilterDefParserRuleCall_2_0; }

		//qualification=QualificationDef?
		public Assignment getQualificationAssignment_3() { return cQualificationAssignment_3; }

		//QualificationDef
		public RuleCall getQualificationQualificationDefParserRuleCall_3_0() { return cQualificationQualificationDefParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EscapeSequenceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.EscapeSequenceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScaped_withKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEscapesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEscapesEscapeSequenceParserRuleCall_1_0 = (RuleCall)cEscapesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEscapesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEscapesEscapeSequenceParserRuleCall_2_1_0 = (RuleCall)cEscapesAssignment_2_1.eContents().get(0);
		
		//EscapeSequenceDef:
		//	'scaped_with' escapes+=EscapeSequence (',' escapes+=EscapeSequence)*;
		@Override public ParserRule getRule() { return rule; }

		//'scaped_with' escapes+=EscapeSequence (',' escapes+=EscapeSequence)*
		public Group getGroup() { return cGroup; }

		//'scaped_with'
		public Keyword getScaped_withKeyword_0() { return cScaped_withKeyword_0; }

		//escapes+=EscapeSequence
		public Assignment getEscapesAssignment_1() { return cEscapesAssignment_1; }

		//EscapeSequence
		public RuleCall getEscapesEscapeSequenceParserRuleCall_1_0() { return cEscapesEscapeSequenceParserRuleCall_1_0; }

		//(',' escapes+=EscapeSequence)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//escapes+=EscapeSequence
		public Assignment getEscapesAssignment_2_1() { return cEscapesAssignment_2_1; }

		//EscapeSequence
		public RuleCall getEscapesEscapeSequenceParserRuleCall_2_1_0() { return cEscapesEscapeSequenceParserRuleCall_2_1_0; }
	}

	public class EscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.EscapeSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixStringLiteralParserRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuffixAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuffixStringLiteralParserRuleCall_1_1_0 = (RuleCall)cSuffixAssignment_1_1.eContents().get(0);
		
		//EscapeSequence:
		//	prefix=StringLiteral ('and' suffix=StringLiteral)?;
		@Override public ParserRule getRule() { return rule; }

		//prefix=StringLiteral ('and' suffix=StringLiteral)?
		public Group getGroup() { return cGroup; }

		//prefix=StringLiteral
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//StringLiteral
		public RuleCall getPrefixStringLiteralParserRuleCall_0_0() { return cPrefixStringLiteralParserRuleCall_0_0; }

		//('and' suffix=StringLiteral)?
		public Group getGroup_1() { return cGroup_1; }

		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//suffix=StringLiteral
		public Assignment getSuffixAssignment_1_1() { return cSuffixAssignment_1_1; }

		//StringLiteral
		public RuleCall getSuffixStringLiteralParserRuleCall_1_1_0() { return cSuffixStringLiteralParserRuleCall_1_1_0; }
	}

	public class InputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Inputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsInputParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Inputs:
		//	{Inputs}
		//	'inputs' '{'
		//	inputs+=Input*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Inputs} 'inputs' '{' inputs+=Input* '}'
		public Group getGroup() { return cGroup; }

		//{Inputs}
		public Action getInputsAction_0() { return cInputsAction_0; }

		//'inputs'
		public Keyword getInputsKeyword_1() { return cInputsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//inputs+=Input*
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }

		//Input
		public RuleCall getInputsInputParserRuleCall_3_0() { return cInputsInputParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cQualifierQualifierKeyword_0_0 = (Keyword)cQualifierAssignment_0.eContents().get(0);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRefPathNameCSParserRuleCall_1_0 = (RuleCall)cTypeRefAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropRefPathNameCSParserRuleCall_2_1_0 = (RuleCall)cPropRefAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Input:
		//	qualifier?='qualifier'?
		//	typeRef=PathNameCS ('using' propRef=PathNameCS)? ';';
		@Override public ParserRule getRule() { return rule; }

		//qualifier?='qualifier'? typeRef=PathNameCS ('using' propRef=PathNameCS)? ';'
		public Group getGroup() { return cGroup; }

		//qualifier?='qualifier'?
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }

		//'qualifier'
		public Keyword getQualifierQualifierKeyword_0_0() { return cQualifierQualifierKeyword_0_0; }

		//typeRef=PathNameCS
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }

		//PathNameCS
		public RuleCall getTypeRefPathNameCSParserRuleCall_1_0() { return cTypeRefPathNameCSParserRuleCall_1_0; }

		//('using' propRef=PathNameCS)?
		public Group getGroup_2() { return cGroup_2; }

		//'using'
		public Keyword getUsingKeyword_2_0() { return cUsingKeyword_2_0; }

		//propRef=PathNameCS
		public Assignment getPropRefAssignment_2_1() { return cPropRefAssignment_2_1; }

		//PathNameCS
		public RuleCall getPropRefPathNameCSParserRuleCall_2_1_0() { return cPropRefPathNameCSParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ProvidersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Providers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProvidersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProvidersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProvidersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvidersProviderParserRuleCall_3_0 = (RuleCall)cProvidersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Providers:
		//	{Providers}
		//	'providers' '{'
		//	providers+=Provider*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Providers} 'providers' '{' providers+=Provider* '}'
		public Group getGroup() { return cGroup; }

		//{Providers}
		public Action getProvidersAction_0() { return cProvidersAction_0; }

		//'providers'
		public Keyword getProvidersKeyword_1() { return cProvidersKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//providers+=Provider*
		public Assignment getProvidersAssignment_3() { return cProvidersAssignment_3; }

		//Provider
		public RuleCall getProvidersProviderParserRuleCall_3_0() { return cProvidersProviderParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Provider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassRefPathNameCSParserRuleCall_0_0 = (RuleCall)cClassRefAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsDeclProviderVarsDeclParserRuleCall_2_0 = (RuleCall)cVarsDeclAssignment_2.eContents().get(0);
		private final Assignment cCurrentScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCurrentScopeCurrentScopeDeclParserRuleCall_3_0 = (RuleCall)cCurrentScopeAssignment_3.eContents().get(0);
		private final Assignment cExportedScopeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExportedScopeExportedScopeDeclParserRuleCall_4_0 = (RuleCall)cExportedScopeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Provider:
		//	classRef=PathNameCS '{'
		//	varsDecl=ProviderVarsDecl?
		//	currentScope=CurrentScopeDecl?
		//	exportedScope=ExportedScopeDecl?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//classRef=PathNameCS '{' varsDecl=ProviderVarsDecl? currentScope=CurrentScopeDecl? exportedScope=ExportedScopeDecl? '}'
		public Group getGroup() { return cGroup; }

		//classRef=PathNameCS
		public Assignment getClassRefAssignment_0() { return cClassRefAssignment_0; }

		//PathNameCS
		public RuleCall getClassRefPathNameCSParserRuleCall_0_0() { return cClassRefPathNameCSParserRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//varsDecl=ProviderVarsDecl?
		public Assignment getVarsDeclAssignment_2() { return cVarsDeclAssignment_2; }

		//ProviderVarsDecl
		public RuleCall getVarsDeclProviderVarsDeclParserRuleCall_2_0() { return cVarsDeclProviderVarsDeclParserRuleCall_2_0; }

		//currentScope=CurrentScopeDecl?
		public Assignment getCurrentScopeAssignment_3() { return cCurrentScopeAssignment_3; }

		//CurrentScopeDecl
		public RuleCall getCurrentScopeCurrentScopeDeclParserRuleCall_3_0() { return cCurrentScopeCurrentScopeDeclParserRuleCall_3_0; }

		//exportedScope=ExportedScopeDecl?
		public Assignment getExportedScopeAssignment_4() { return cExportedScopeAssignment_4; }

		//ExportedScopeDecl
		public RuleCall getExportedScopeExportedScopeDeclParserRuleCall_4_0() { return cExportedScopeExportedScopeDeclParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ProviderVarsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ProviderVarsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarDeclLetVariableCSParserRuleCall_1_0 = (RuleCall)cVarDeclAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarDeclAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarDeclLetVariableCSParserRuleCall_2_1_0 = (RuleCall)cVarDeclAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProviderVarsDecl:
		//	'vars' varDecl+=LetVariableCS (',' varDecl+=LetVariableCS)* ';';
		@Override public ParserRule getRule() { return rule; }

		//'vars' varDecl+=LetVariableCS (',' varDecl+=LetVariableCS)* ';'
		public Group getGroup() { return cGroup; }

		//'vars'
		public Keyword getVarsKeyword_0() { return cVarsKeyword_0; }

		//varDecl+=LetVariableCS
		public Assignment getVarDeclAssignment_1() { return cVarDeclAssignment_1; }

		//LetVariableCS
		public RuleCall getVarDeclLetVariableCSParserRuleCall_1_0() { return cVarDeclLetVariableCSParserRuleCall_1_0; }

		//(',' varDecl+=LetVariableCS)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//varDecl+=LetVariableCS
		public Assignment getVarDeclAssignment_2_1() { return cVarDeclAssignment_2_1; }

		//LetVariableCS
		public RuleCall getVarDeclLetVariableCSParserRuleCall_2_1_0() { return cVarDeclLetVariableCSParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FilterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.FilterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFiltered_byKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpCSParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//FilterDef:
		//	'filtered_by' params+=ParameterDef (',' params+=ParameterDef)* 'when' expression=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//'filtered_by' params+=ParameterDef (',' params+=ParameterDef)* 'when' expression=ExpCS
		public Group getGroup() { return cGroup; }

		//'filtered_by'
		public Keyword getFiltered_byKeyword_0() { return cFiltered_byKeyword_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_1_0() { return cParamsParameterDefParserRuleCall_1_0; }

		//(',' params+=ParameterDef)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_2_1_0() { return cParamsParameterDefParserRuleCall_2_1_0; }

		//'when'
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_4_0() { return cExpressionExpCSParserRuleCall_4_0; }
	}

	public class QualificationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.QualificationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQualifiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualificationsQualificationParserRuleCall_1_0 = (RuleCall)cQualificationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQualificationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQualificationsQualificationParserRuleCall_2_1_0 = (RuleCall)cQualificationsAssignment_2_1.eContents().get(0);
		
		//QualificationDef:
		//	'qualifies' qualifications+=Qualification (',' qualifications+=Qualification)*;
		@Override public ParserRule getRule() { return rule; }

		//'qualifies' qualifications+=Qualification (',' qualifications+=Qualification)*
		public Group getGroup() { return cGroup; }

		//'qualifies'
		public Keyword getQualifiesKeyword_0() { return cQualifiesKeyword_0; }

		//qualifications+=Qualification
		public Assignment getQualificationsAssignment_1() { return cQualificationsAssignment_1; }

		//Qualification
		public RuleCall getQualificationsQualificationParserRuleCall_1_0() { return cQualificationsQualificationParserRuleCall_1_0; }

		//(',' qualifications+=Qualification)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//qualifications+=Qualification
		public Assignment getQualificationsAssignment_2_1() { return cQualificationsAssignment_2_1; }

		//Qualification
		public RuleCall getQualificationsQualificationParserRuleCall_2_1_0() { return cQualificationsQualificationParserRuleCall_2_1_0; }
	}

	public class QualificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Qualification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiedClassesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiedClassesMultiplePathNamesParserRuleCall_0_0 = (RuleCall)cQualifiedClassesAssignment_0.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContributionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContributionsExpCSParserRuleCall_2_0 = (RuleCall)cContributionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContributionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContributionsExpCSParserRuleCall_3_1_0 = (RuleCall)cContributionsAssignment_3_1.eContents().get(0);
		
		//Qualification:
		//	qualifiedClasses=MultiplePathNames
		//	'using' contributions+=ExpCS (',' contributions+=ExpCS)*;
		@Override public ParserRule getRule() { return rule; }

		//qualifiedClasses=MultiplePathNames 'using' contributions+=ExpCS (',' contributions+=ExpCS)*
		public Group getGroup() { return cGroup; }

		//qualifiedClasses=MultiplePathNames
		public Assignment getQualifiedClassesAssignment_0() { return cQualifiedClassesAssignment_0; }

		//MultiplePathNames
		public RuleCall getQualifiedClassesMultiplePathNamesParserRuleCall_0_0() { return cQualifiedClassesMultiplePathNamesParserRuleCall_0_0; }

		//'using'
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//contributions+=ExpCS
		public Assignment getContributionsAssignment_2() { return cContributionsAssignment_2; }

		//ExpCS
		public RuleCall getContributionsExpCSParserRuleCall_2_0() { return cContributionsExpCSParserRuleCall_2_0; }

		//(',' contributions+=ExpCS)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//contributions+=ExpCS
		public Assignment getContributionsAssignment_3_1() { return cContributionsAssignment_3_1; }

		//ExpCS
		public RuleCall getContributionsExpCSParserRuleCall_3_1_0() { return cContributionsExpCSParserRuleCall_3_1_0; }
	}

	public class CurrentScopeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.CurrentScopeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCurrent_scopeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProvisionDefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProvisionDefsCurrentScopeProvisionDefParserRuleCall_2_0 = (RuleCall)cProvisionDefsAssignment_2.eContents().get(0);
		
		//CurrentScopeDecl:
		//	'in' 'current_scope'
		//	provisionDefs+=CurrentScopeProvisionDef+;
		@Override public ParserRule getRule() { return rule; }

		//'in' 'current_scope' provisionDefs+=CurrentScopeProvisionDef+
		public Group getGroup() { return cGroup; }

		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//'current_scope'
		public Keyword getCurrent_scopeKeyword_1() { return cCurrent_scopeKeyword_1; }

		//provisionDefs+=CurrentScopeProvisionDef+
		public Assignment getProvisionDefsAssignment_2() { return cProvisionDefsAssignment_2; }

		//CurrentScopeProvisionDef
		public RuleCall getProvisionDefsCurrentScopeProvisionDefParserRuleCall_2_0() { return cProvisionDefsCurrentScopeProvisionDefParserRuleCall_2_0; }
	}

	public class CurrentScopeProvisionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.CurrentScopeProvisionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionDefSelectionDefParserRuleCall_0_0 = (RuleCall)cSelectionDefAssignment_0.eContents().get(0);
		private final Keyword cProvidesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cOccludingKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cSameScopeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cSameScopeAddingKeyword_2_1_0 = (Keyword)cSameScopeAssignment_2_1.eContents().get(0);
		private final Assignment cEmptyScopeAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cEmptyScopeResettingKeyword_2_2_0 = (Keyword)cEmptyScopeAssignment_2_2.eContents().get(0);
		private final Assignment cProvisionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvisionsProvisionParserRuleCall_3_0 = (RuleCall)cProvisionsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CurrentScopeProvisionDef:
		//	selectionDef=SelectionDef?
		//	'provides' ('occluding' | sameScope?='adding' | emptyScope?='resetting')?
		//	provisions+=Provision+
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//selectionDef=SelectionDef? 'provides' ('occluding' | sameScope?='adding' | emptyScope?='resetting')?
		//provisions+=Provision+ ';'
		public Group getGroup() { return cGroup; }

		//selectionDef=SelectionDef?
		public Assignment getSelectionDefAssignment_0() { return cSelectionDefAssignment_0; }

		//SelectionDef
		public RuleCall getSelectionDefSelectionDefParserRuleCall_0_0() { return cSelectionDefSelectionDefParserRuleCall_0_0; }

		//'provides'
		public Keyword getProvidesKeyword_1() { return cProvidesKeyword_1; }

		//('occluding' | sameScope?='adding' | emptyScope?='resetting')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'occluding'
		public Keyword getOccludingKeyword_2_0() { return cOccludingKeyword_2_0; }

		//sameScope?='adding'
		public Assignment getSameScopeAssignment_2_1() { return cSameScopeAssignment_2_1; }

		//'adding'
		public Keyword getSameScopeAddingKeyword_2_1_0() { return cSameScopeAddingKeyword_2_1_0; }

		//emptyScope?='resetting'
		public Assignment getEmptyScopeAssignment_2_2() { return cEmptyScopeAssignment_2_2; }

		//'resetting'
		public Keyword getEmptyScopeResettingKeyword_2_2_0() { return cEmptyScopeResettingKeyword_2_2_0; }

		//provisions+=Provision+
		public Assignment getProvisionsAssignment_3() { return cProvisionsAssignment_3; }

		//Provision
		public RuleCall getProvisionsProvisionParserRuleCall_3_0() { return cProvisionsProvisionParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SelectionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.SelectionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSelectionAllAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAllKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cExceptingKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExceptionsPathNameCSParserRuleCall_1_0_2_1_0 = (RuleCall)cExceptionsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_2_2 = (Group)cGroup_1_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_2_0 = (Keyword)cGroup_1_0_2_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_1_0_2_2_1 = (Assignment)cGroup_1_0_2_2.eContents().get(1);
		private final RuleCall cExceptionsPathNameCSParserRuleCall_1_0_2_2_1_0 = (RuleCall)cExceptionsAssignment_1_0_2_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSelectionSpecificAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSelectionsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSelectionsPathNameCSParserRuleCall_1_1_1_0_0 = (RuleCall)cSelectionsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cSelectionsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cSelectionsPathNameCSParserRuleCall_1_1_1_1_1_0 = (RuleCall)cSelectionsAssignment_1_1_1_1_1.eContents().get(0);
		
		//SelectionDef:
		//	'for' ({SelectionAll} 'all' ('excepting' exceptions+=PathNameCS (',' exceptions+=PathNameCS)*)?
		//	| {SelectionSpecific} (selections+=PathNameCS (',' selections+=PathNameCS)*));
		@Override public ParserRule getRule() { return rule; }

		//'for' ({SelectionAll} 'all' ('excepting' exceptions+=PathNameCS (',' exceptions+=PathNameCS)*)? | {SelectionSpecific}
		//(selections+=PathNameCS (',' selections+=PathNameCS)*))
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//({SelectionAll} 'all' ('excepting' exceptions+=PathNameCS (',' exceptions+=PathNameCS)*)? | {SelectionSpecific}
		//(selections+=PathNameCS (',' selections+=PathNameCS)*))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{SelectionAll} 'all' ('excepting' exceptions+=PathNameCS (',' exceptions+=PathNameCS)*)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{SelectionAll}
		public Action getSelectionAllAction_1_0_0() { return cSelectionAllAction_1_0_0; }

		//'all'
		public Keyword getAllKeyword_1_0_1() { return cAllKeyword_1_0_1; }

		//('excepting' exceptions+=PathNameCS (',' exceptions+=PathNameCS)*)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//'excepting'
		public Keyword getExceptingKeyword_1_0_2_0() { return cExceptingKeyword_1_0_2_0; }

		//exceptions+=PathNameCS
		public Assignment getExceptionsAssignment_1_0_2_1() { return cExceptionsAssignment_1_0_2_1; }

		//PathNameCS
		public RuleCall getExceptionsPathNameCSParserRuleCall_1_0_2_1_0() { return cExceptionsPathNameCSParserRuleCall_1_0_2_1_0; }

		//(',' exceptions+=PathNameCS)*
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }

		//','
		public Keyword getCommaKeyword_1_0_2_2_0() { return cCommaKeyword_1_0_2_2_0; }

		//exceptions+=PathNameCS
		public Assignment getExceptionsAssignment_1_0_2_2_1() { return cExceptionsAssignment_1_0_2_2_1; }

		//PathNameCS
		public RuleCall getExceptionsPathNameCSParserRuleCall_1_0_2_2_1_0() { return cExceptionsPathNameCSParserRuleCall_1_0_2_2_1_0; }

		//{SelectionSpecific} (selections+=PathNameCS (',' selections+=PathNameCS)*)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{SelectionSpecific}
		public Action getSelectionSpecificAction_1_1_0() { return cSelectionSpecificAction_1_1_0; }

		//(selections+=PathNameCS (',' selections+=PathNameCS)*)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//selections+=PathNameCS
		public Assignment getSelectionsAssignment_1_1_1_0() { return cSelectionsAssignment_1_1_1_0; }

		//PathNameCS
		public RuleCall getSelectionsPathNameCSParserRuleCall_1_1_1_0_0() { return cSelectionsPathNameCSParserRuleCall_1_1_1_0_0; }

		//(',' selections+=PathNameCS)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//selections+=PathNameCS
		public Assignment getSelectionsAssignment_1_1_1_1_1() { return cSelectionsAssignment_1_1_1_1_1; }

		//PathNameCS
		public RuleCall getSelectionsPathNameCSParserRuleCall_1_1_1_1_1_0() { return cSelectionsPathNameCSParserRuleCall_1_1_1_1_1_0; }
	}

	public class ProvisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Provision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cProvidedClassesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cProvidedClassesMultiplePathNamesParserRuleCall_0_0_0 = (RuleCall)cProvidedClassesAssignment_0_0.eContents().get(0);
		private final Keyword cUsingKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cContributionsDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContributionsDefContributionsDefParserRuleCall_1_0 = (RuleCall)cContributionsDefAssignment_1.eContents().get(0);
		private final Assignment cOccludingDefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOccludingDefsOccludingDefParserRuleCall_2_0 = (RuleCall)cOccludingDefsAssignment_2.eContents().get(0);
		
		//Provision:
		//	(providedClasses=MultiplePathNames
		//	'using')? contributionsDef=ContributionsDef
		//	occludingDefs+=OccludingDef*;
		@Override public ParserRule getRule() { return rule; }

		//(providedClasses=MultiplePathNames 'using')? contributionsDef=ContributionsDef occludingDefs+=OccludingDef*
		public Group getGroup() { return cGroup; }

		//(providedClasses=MultiplePathNames 'using')?
		public Group getGroup_0() { return cGroup_0; }

		//providedClasses=MultiplePathNames
		public Assignment getProvidedClassesAssignment_0_0() { return cProvidedClassesAssignment_0_0; }

		//MultiplePathNames
		public RuleCall getProvidedClassesMultiplePathNamesParserRuleCall_0_0_0() { return cProvidedClassesMultiplePathNamesParserRuleCall_0_0_0; }

		//'using'
		public Keyword getUsingKeyword_0_1() { return cUsingKeyword_0_1; }

		//contributionsDef=ContributionsDef
		public Assignment getContributionsDefAssignment_1() { return cContributionsDefAssignment_1; }

		//ContributionsDef
		public RuleCall getContributionsDefContributionsDefParserRuleCall_1_0() { return cContributionsDefContributionsDefParserRuleCall_1_0; }

		//occludingDefs+=OccludingDef*
		public Assignment getOccludingDefsAssignment_2() { return cOccludingDefsAssignment_2; }

		//OccludingDef
		public RuleCall getOccludingDefsOccludingDefParserRuleCall_2_0() { return cOccludingDefsOccludingDefParserRuleCall_2_0; }
	}

	public class MultiplePathNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MultiplePathNames");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathNamesPathNameCSParserRuleCall_0_0 = (RuleCall)cPathNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPathNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathNamesPathNameCSParserRuleCall_1_1_0 = (RuleCall)cPathNamesAssignment_1_1.eContents().get(0);
		
		//MultiplePathNames:
		//	pathNames+=PathNameCS (',' pathNames+=PathNameCS)*;
		@Override public ParserRule getRule() { return rule; }

		//pathNames+=PathNameCS (',' pathNames+=PathNameCS)*
		public Group getGroup() { return cGroup; }

		//pathNames+=PathNameCS
		public Assignment getPathNamesAssignment_0() { return cPathNamesAssignment_0; }

		//PathNameCS
		public RuleCall getPathNamesPathNameCSParserRuleCall_0_0() { return cPathNamesPathNameCSParserRuleCall_0_0; }

		//(',' pathNames+=PathNameCS)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//pathNames+=PathNameCS
		public Assignment getPathNamesAssignment_1_1() { return cPathNamesAssignment_1_1; }

		//PathNameCS
		public RuleCall getPathNamesPathNameCSParserRuleCall_1_1_0() { return cPathNamesPathNameCSParserRuleCall_1_1_0; }
	}

	public class OccludingDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.OccludingDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOccludingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContributionsDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContributionsDefContributionsDefParserRuleCall_1_0 = (RuleCall)cContributionsDefAssignment_1.eContents().get(0);
		
		//OccludingDef:
		//	'occluding' contributionsDef=ContributionsDef;
		@Override public ParserRule getRule() { return rule; }

		//'occluding' contributionsDef=ContributionsDef
		public Group getGroup() { return cGroup; }

		//'occluding'
		public Keyword getOccludingKeyword_0() { return cOccludingKeyword_0; }

		//contributionsDef=ContributionsDef
		public Assignment getContributionsDefAssignment_1() { return cContributionsDefAssignment_1; }

		//ContributionsDef
		public RuleCall getContributionsDefContributionsDefParserRuleCall_1_0() { return cContributionsDefContributionsDefParserRuleCall_1_0; }
	}

	public class ContributionsDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ContributionsDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContributionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContributionsContributionParserRuleCall_0_0 = (RuleCall)cContributionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContributionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContributionsContributionParserRuleCall_1_1_0 = (RuleCall)cContributionsAssignment_1_1.eContents().get(0);
		
		//ContributionsDef:
		//	contributions+=Contribution (',' contributions+=Contribution)*;
		@Override public ParserRule getRule() { return rule; }

		//contributions+=Contribution (',' contributions+=Contribution)*
		public Group getGroup() { return cGroup; }

		//contributions+=Contribution
		public Assignment getContributionsAssignment_0() { return cContributionsAssignment_0; }

		//Contribution
		public RuleCall getContributionsContributionParserRuleCall_0_0() { return cContributionsContributionParserRuleCall_0_0; }

		//(',' contributions+=Contribution)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//contributions+=Contribution
		public Assignment getContributionsAssignment_1_1() { return cContributionsAssignment_1_1; }

		//Contribution
		public RuleCall getContributionsContributionParserRuleCall_1_1_0() { return cContributionsContributionParserRuleCall_1_1_0; }
	}

	public class ContributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Contribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cChildKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cChildAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cChildParameterDefParserRuleCall_0_0_1_0 = (RuleCall)cChildAssignment_0_0_1.eContents().get(0);
		private final Keyword cInKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cIsPrecedingAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsPrecedingPrecedingKeyword_0_1_0 = (Keyword)cIsPrecedingAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cIsExportedAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cIsExportedExportedKeyword_0_2_0_0 = (Keyword)cIsExportedAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Assignment cTypeRefsAssignment_0_2_1_0 = (Assignment)cGroup_0_2_1.eContents().get(0);
		private final RuleCall cTypeRefsPathNameCSParserRuleCall_0_2_1_0_0 = (RuleCall)cTypeRefsAssignment_0_2_1_0.eContents().get(0);
		private final Group cGroup_0_2_1_1 = (Group)cGroup_0_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_1_0 = (Keyword)cGroup_0_2_1_1.eContents().get(0);
		private final Assignment cTypeRefsAssignment_0_2_1_1_1 = (Assignment)cGroup_0_2_1_1.eContents().get(1);
		private final RuleCall cTypeRefsPathNameCSParserRuleCall_0_2_1_1_1_0 = (RuleCall)cTypeRefsAssignment_0_2_1_1_1.eContents().get(0);
		private final Keyword cFromKeyword_0_2_1_2 = (Keyword)cGroup_0_2_1.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Assignment cIsLoadedAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final Keyword cIsLoadedLoadedKeyword_0_3_0_0 = (Keyword)cIsLoadedAssignment_0_3_0.eContents().get(0);
		private final Assignment cTypeRefsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cTypeRefsPathNameCSParserRuleCall_0_3_1_0 = (RuleCall)cTypeRefsAssignment_0_3_1.eContents().get(0);
		private final Keyword cFromKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpCSParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Contribution:
		//	('child' child=ParameterDef 'in' | isPreceding?='preceding'
		//	| isExported?='exported' (typeRefs+=PathNameCS (',' typeRefs+=PathNameCS)* 'from')? | isLoaded?='loaded'
		//	typeRefs+=PathNameCS 'from')?
		//	expression=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//('child' child=ParameterDef 'in' | isPreceding?='preceding' | isExported?='exported' (typeRefs+=PathNameCS (','
		//typeRefs+=PathNameCS)* 'from')? | isLoaded?='loaded' typeRefs+=PathNameCS 'from')? expression=ExpCS
		public Group getGroup() { return cGroup; }

		//('child' child=ParameterDef 'in' | isPreceding?='preceding' | isExported?='exported' (typeRefs+=PathNameCS (','
		//typeRefs+=PathNameCS)* 'from')? | isLoaded?='loaded' typeRefs+=PathNameCS 'from')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'child' child=ParameterDef 'in'
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'child'
		public Keyword getChildKeyword_0_0_0() { return cChildKeyword_0_0_0; }

		//child=ParameterDef
		public Assignment getChildAssignment_0_0_1() { return cChildAssignment_0_0_1; }

		//ParameterDef
		public RuleCall getChildParameterDefParserRuleCall_0_0_1_0() { return cChildParameterDefParserRuleCall_0_0_1_0; }

		//'in'
		public Keyword getInKeyword_0_0_2() { return cInKeyword_0_0_2; }

		//isPreceding?='preceding'
		public Assignment getIsPrecedingAssignment_0_1() { return cIsPrecedingAssignment_0_1; }

		//'preceding'
		public Keyword getIsPrecedingPrecedingKeyword_0_1_0() { return cIsPrecedingPrecedingKeyword_0_1_0; }

		//isExported?='exported' (typeRefs+=PathNameCS (',' typeRefs+=PathNameCS)* 'from')?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//isExported?='exported'
		public Assignment getIsExportedAssignment_0_2_0() { return cIsExportedAssignment_0_2_0; }

		//'exported'
		public Keyword getIsExportedExportedKeyword_0_2_0_0() { return cIsExportedExportedKeyword_0_2_0_0; }

		//(typeRefs+=PathNameCS (',' typeRefs+=PathNameCS)* 'from')?
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//typeRefs+=PathNameCS
		public Assignment getTypeRefsAssignment_0_2_1_0() { return cTypeRefsAssignment_0_2_1_0; }

		//PathNameCS
		public RuleCall getTypeRefsPathNameCSParserRuleCall_0_2_1_0_0() { return cTypeRefsPathNameCSParserRuleCall_0_2_1_0_0; }

		//(',' typeRefs+=PathNameCS)*
		public Group getGroup_0_2_1_1() { return cGroup_0_2_1_1; }

		//','
		public Keyword getCommaKeyword_0_2_1_1_0() { return cCommaKeyword_0_2_1_1_0; }

		//typeRefs+=PathNameCS
		public Assignment getTypeRefsAssignment_0_2_1_1_1() { return cTypeRefsAssignment_0_2_1_1_1; }

		//PathNameCS
		public RuleCall getTypeRefsPathNameCSParserRuleCall_0_2_1_1_1_0() { return cTypeRefsPathNameCSParserRuleCall_0_2_1_1_1_0; }

		//'from'
		public Keyword getFromKeyword_0_2_1_2() { return cFromKeyword_0_2_1_2; }

		//isLoaded?='loaded' typeRefs+=PathNameCS 'from'
		public Group getGroup_0_3() { return cGroup_0_3; }

		//isLoaded?='loaded'
		public Assignment getIsLoadedAssignment_0_3_0() { return cIsLoadedAssignment_0_3_0; }

		//'loaded'
		public Keyword getIsLoadedLoadedKeyword_0_3_0_0() { return cIsLoadedLoadedKeyword_0_3_0_0; }

		//typeRefs+=PathNameCS
		public Assignment getTypeRefsAssignment_0_3_1() { return cTypeRefsAssignment_0_3_1; }

		//PathNameCS
		public RuleCall getTypeRefsPathNameCSParserRuleCall_0_3_1_0() { return cTypeRefsPathNameCSParserRuleCall_0_3_1_0; }

		//'from'
		public Keyword getFromKeyword_0_3_2() { return cFromKeyword_0_3_2; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_1_0() { return cExpressionExpCSParserRuleCall_1_0; }
	}

	public class ExportedScopeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ExportedScopeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExported_scopeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProvisionDefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProvisionDefsExportedScopeProvisionDefParserRuleCall_2_0 = (RuleCall)cProvisionDefsAssignment_2.eContents().get(0);
		
		//ExportedScopeDecl:
		//	'in' 'exported_scope'
		//	provisionDefs+=ExportedScopeProvisionDef+;
		@Override public ParserRule getRule() { return rule; }

		//'in' 'exported_scope' provisionDefs+=ExportedScopeProvisionDef+
		public Group getGroup() { return cGroup; }

		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//'exported_scope'
		public Keyword getExported_scopeKeyword_1() { return cExported_scopeKeyword_1; }

		//provisionDefs+=ExportedScopeProvisionDef+
		public Assignment getProvisionDefsAssignment_2() { return cProvisionDefsAssignment_2; }

		//ExportedScopeProvisionDef
		public RuleCall getProvisionDefsExportedScopeProvisionDefParserRuleCall_2_0() { return cProvisionDefsExportedScopeProvisionDefParserRuleCall_2_0; }
	}

	public class ExportedScopeProvisionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ExportedScopeProvisionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProvisionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProvisionsProvisionParserRuleCall_1_0 = (RuleCall)cProvisionsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExportedScopeProvisionDef: // selectionDef=SelectionDef?
		//	'provides' provisions+=Provision+ ';';
		@Override public ParserRule getRule() { return rule; }

		//// selectionDef=SelectionDef?
		//'provides' provisions+=Provision+ ';'
		public Group getGroup() { return cGroup; }

		//// selectionDef=SelectionDef?
		//'provides'
		public Keyword getProvidesKeyword_0() { return cProvidesKeyword_0; }

		//provisions+=Provision+
		public Assignment getProvisionsAssignment_1() { return cProvisionsAssignment_1; }

		//Provision
		public RuleCall getProvisionsProvisionParserRuleCall_1_0() { return cProvisionsProvisionParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class HelpersSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.HelpersSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHelpersSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHelpersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassHelpersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassHelpersHelperClassParserRuleCall_3_0 = (RuleCall)cClassHelpersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HelpersSect:
		//	{HelpersSect}
		//	'helpers' '{'
		//	classHelpers+=HelperClass*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{HelpersSect} 'helpers' '{' classHelpers+=HelperClass* '}'
		public Group getGroup() { return cGroup; }

		//{HelpersSect}
		public Action getHelpersSectAction_0() { return cHelpersSectAction_0; }

		//'helpers'
		public Keyword getHelpersKeyword_1() { return cHelpersKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//classHelpers+=HelperClass*
		public Assignment getClassHelpersAssignment_3() { return cClassHelpersAssignment_3; }

		//HelperClass
		public RuleCall getClassHelpersHelperClassParserRuleCall_3_0() { return cClassHelpersHelperClassParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class HelperClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.HelperClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextPathNameCSParserRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHelpersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHelpersHelperOpParserRuleCall_2_0 = (RuleCall)cHelpersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HelperClass:
		//	context=PathNameCS '{'
		//	helpers+=HelperOp*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//context=PathNameCS '{' helpers+=HelperOp* '}'
		public Group getGroup() { return cGroup; }

		//context=PathNameCS
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//PathNameCS
		public RuleCall getContextPathNameCSParserRuleCall_0_0() { return cContextPathNameCSParserRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//helpers+=HelperOp*
		public Assignment getHelpersAssignment_2() { return cHelpersAssignment_2; }

		//HelperOp
		public RuleCall getHelpersHelperOpParserRuleCall_2_0() { return cHelpersHelperOpParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class HelperOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.HelperOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedSignatureTemplateSignatureCSParserRuleCall_0_0 = (RuleCall)cOwnedSignatureAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterDefParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_5_1_0 = (RuleCall)cOwnedTypeAssignment_5_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cHelperBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHelperBodyExpCSParserRuleCall_7_0 = (RuleCall)cHelperBodyAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Similar to Complete OCL definitions
		//HelperOp:
		//	ownedSignature=TemplateSignatureCS?
		//	name=UnrestrictedName
		//	'(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')' (':' ownedType=TypeExpCS)?
		//	':=' helperBody=ExpCS
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//ownedSignature=TemplateSignatureCS? name=UnrestrictedName '(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')'
		//(':' ownedType=TypeExpCS)? ':=' helperBody=ExpCS ';'
		public Group getGroup() { return cGroup; }

		//ownedSignature=TemplateSignatureCS?
		public Assignment getOwnedSignatureAssignment_0() { return cOwnedSignatureAssignment_0; }

		//TemplateSignatureCS
		public RuleCall getOwnedSignatureTemplateSignatureCSParserRuleCall_0_0() { return cOwnedSignatureTemplateSignatureCSParserRuleCall_0_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=ParameterDef (',' params+=ParameterDef)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_3_0_0() { return cParamsParameterDefParserRuleCall_3_0_0; }

		//(',' params+=ParameterDef)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_3_1_1_0() { return cParamsParameterDefParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(':' ownedType=TypeExpCS)?
		public Group getGroup_5() { return cGroup_5; }

		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_5_1() { return cOwnedTypeAssignment_5_1; }

		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_5_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_5_1_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_6() { return cColonEqualsSignKeyword_6; }

		//helperBody=ExpCS
		public Assignment getHelperBodyAssignment_7() { return cHelperBodyAssignment_7; }

		//ExpCS
		public RuleCall getHelperBodyExpCSParserRuleCall_7_0() { return cHelperBodyExpCSParserRuleCall_7_0; }

		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//ParameterDef base::ParameterCS:
		//	name=UnrestrictedName ':' ownedType=TypeExpCS
		@Override public ParserRule getRule() { return rule; }

		//name=UnrestrictedName ':' ownedType=TypeExpCS
		public Group getGroup() { return cGroup; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }

		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_0; }
	}

	public class PrimaryExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.PrimaryExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelfExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTupleLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMapLiteralExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCollectionLiteralExpCSParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLambdaLiteralExpCSParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypeLiteralExpCSParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNameExpCSParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTraceExpCSParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLookupExpCSParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
		//PrimaryExpCS essentialocl::ExpCS:
		//	NestedExpCS
		//	| IfExpCS
		//	| SelfExpCS
		//	| PrimitiveLiteralExpCS
		//	| TupleLiteralExpCS
		//	| MapLiteralExpCS
		//	| CollectionLiteralExpCS
		//	| LambdaLiteralExpCS
		//	| TypeLiteralExpCS
		//	| NameExpCS
		//	| TraceExpCS // DSL addition
		//	| LookupExpCS
		@Override public ParserRule getRule() { return rule; }

		//NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | MapLiteralExpCS | CollectionLiteralExpCS
		//| LambdaLiteralExpCS | TypeLiteralExpCS | NameExpCS | TraceExpCS // DSL addition
		//| LookupExpCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//NestedExpCS
		public RuleCall getNestedExpCSParserRuleCall_0() { return cNestedExpCSParserRuleCall_0; }

		//IfExpCS
		public RuleCall getIfExpCSParserRuleCall_1() { return cIfExpCSParserRuleCall_1; }

		//SelfExpCS
		public RuleCall getSelfExpCSParserRuleCall_2() { return cSelfExpCSParserRuleCall_2; }

		//PrimitiveLiteralExpCS
		public RuleCall getPrimitiveLiteralExpCSParserRuleCall_3() { return cPrimitiveLiteralExpCSParserRuleCall_3; }

		//TupleLiteralExpCS
		public RuleCall getTupleLiteralExpCSParserRuleCall_4() { return cTupleLiteralExpCSParserRuleCall_4; }

		//MapLiteralExpCS
		public RuleCall getMapLiteralExpCSParserRuleCall_5() { return cMapLiteralExpCSParserRuleCall_5; }

		//CollectionLiteralExpCS
		public RuleCall getCollectionLiteralExpCSParserRuleCall_6() { return cCollectionLiteralExpCSParserRuleCall_6; }

		//LambdaLiteralExpCS
		public RuleCall getLambdaLiteralExpCSParserRuleCall_7() { return cLambdaLiteralExpCSParserRuleCall_7; }

		//TypeLiteralExpCS
		public RuleCall getTypeLiteralExpCSParserRuleCall_8() { return cTypeLiteralExpCSParserRuleCall_8; }

		//NameExpCS
		public RuleCall getNameExpCSParserRuleCall_9() { return cNameExpCSParserRuleCall_9; }

		//TraceExpCS
		public RuleCall getTraceExpCSParserRuleCall_10() { return cTraceExpCSParserRuleCall_10; }

		//LookupExpCS
		public RuleCall getLookupExpCSParserRuleCall_11() { return cLookupExpCSParserRuleCall_11; }
	}

	public class TraceExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.TraceExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraceExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTraceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// DSL addition
		//TraceExpCS:
		//	{TraceExpCS}
		//	'trace';
		@Override public ParserRule getRule() { return rule; }

		//{TraceExpCS} 'trace'
		public Group getGroup() { return cGroup; }

		//{TraceExpCS}
		public Action getTraceExpCSAction_0() { return cTraceExpCSAction_0; }

		//'trace'
		public Keyword getTraceKeyword_1() { return cTraceKeyword_1; }
	}

	public class LookupExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.LookupExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLookupKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cIsExportedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsExportedLookupExportedKeyword_0_1_0 = (Keyword)cIsExportedAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsNavigatingArgExpCSParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsNavigatingArgExpCSParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LookupExpCS:
		//	('lookup' | isExported?='lookupExported')
		//	'(' args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')';
		@Override public ParserRule getRule() { return rule; }

		//('lookup' | isExported?='lookupExported') '(' args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')'
		public Group getGroup() { return cGroup; }

		//('lookup' | isExported?='lookupExported')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'lookup'
		public Keyword getLookupKeyword_0_0() { return cLookupKeyword_0_0; }

		//isExported?='lookupExported'
		public Assignment getIsExportedAssignment_0_1() { return cIsExportedAssignment_0_1; }

		//'lookupExported'
		public Keyword getIsExportedLookupExportedKeyword_0_1_0() { return cIsExportedLookupExportedKeyword_0_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args+=NavigatingArgExpCS
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//NavigatingArgExpCS
		public RuleCall getArgsNavigatingArgExpCSParserRuleCall_2_0() { return cArgsNavigatingArgExpCSParserRuleCall_2_0; }

		//(',' args+=NavigatingArgExpCS)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//args+=NavigatingArgExpCS
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//NavigatingArgExpCS
		public RuleCall getArgsNavigatingArgExpCSParserRuleCall_3_1_0() { return cArgsNavigatingArgExpCSParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final CS2ASModelElements pCS2ASModel;
	private final SourceDomainElements pSourceDomain;
	private final TargetDomainElements pTargetDomain;
	private final MetaModelDeclElements pMetaModelDecl;
	private final MappingSectElements pMappingSect;
	private final MappingDefElements pMappingDef;
	private final MappingCreationElements pMappingCreation;
	private final PropertyDefElements pPropertyDef;
	private final MappingReferenceElements pMappingReference;
	private final DisambiguationSectElements pDisambiguationSect;
	private final DisambiguationDefElements pDisambiguationDef;
	private final DisambiguationRuleElements pDisambiguationRule;
	private final NameResolutionSectElements pNameResolutionSect;
	private final TargetsElements pTargets;
	private final TargetElements pTarget;
	private final EscapeSequenceDefElements pEscapeSequenceDef;
	private final EscapeSequenceElements pEscapeSequence;
	private final InputsElements pInputs;
	private final InputElements pInput;
	private final ProvidersElements pProviders;
	private final ProviderElements pProvider;
	private final ProviderVarsDeclElements pProviderVarsDecl;
	private final FilterDefElements pFilterDef;
	private final QualificationDefElements pQualificationDef;
	private final QualificationElements pQualification;
	private final CurrentScopeDeclElements pCurrentScopeDecl;
	private final CurrentScopeProvisionDefElements pCurrentScopeProvisionDef;
	private final SelectionDefElements pSelectionDef;
	private final ProvisionElements pProvision;
	private final MultiplePathNamesElements pMultiplePathNames;
	private final OccludingDefElements pOccludingDef;
	private final ContributionsDefElements pContributionsDef;
	private final ContributionElements pContribution;
	private final ExportedScopeDeclElements pExportedScopeDecl;
	private final ExportedScopeProvisionDefElements pExportedScopeProvisionDef;
	private final HelpersSectElements pHelpersSect;
	private final HelperClassElements pHelperClass;
	private final HelperOpElements pHelperOp;
	private final ParameterDefElements pParameterDef;
	private final PrimaryExpCSElements pPrimaryExpCS;
	private final TraceExpCSElements pTraceExpCS;
	private final LookupExpCSElements pLookupExpCS;
	
	private final Grammar grammar;

	private final EssentialOCLGrammarAccess gaEssentialOCL;

	private final BaseGrammarAccess gaBase;

	@Inject
	public CS2ASDSLGrammarAccess(GrammarProvider grammarProvider,
		EssentialOCLGrammarAccess gaEssentialOCL,
		BaseGrammarAccess gaBase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEssentialOCL = gaEssentialOCL;
		this.gaBase = gaBase;
		this.pCS2ASModel = new CS2ASModelElements();
		this.pSourceDomain = new SourceDomainElements();
		this.pTargetDomain = new TargetDomainElements();
		this.pMetaModelDecl = new MetaModelDeclElements();
		this.pMappingSect = new MappingSectElements();
		this.pMappingDef = new MappingDefElements();
		this.pMappingCreation = new MappingCreationElements();
		this.pPropertyDef = new PropertyDefElements();
		this.pMappingReference = new MappingReferenceElements();
		this.pDisambiguationSect = new DisambiguationSectElements();
		this.pDisambiguationDef = new DisambiguationDefElements();
		this.pDisambiguationRule = new DisambiguationRuleElements();
		this.pNameResolutionSect = new NameResolutionSectElements();
		this.pTargets = new TargetsElements();
		this.pTarget = new TargetElements();
		this.pEscapeSequenceDef = new EscapeSequenceDefElements();
		this.pEscapeSequence = new EscapeSequenceElements();
		this.pInputs = new InputsElements();
		this.pInput = new InputElements();
		this.pProviders = new ProvidersElements();
		this.pProvider = new ProviderElements();
		this.pProviderVarsDecl = new ProviderVarsDeclElements();
		this.pFilterDef = new FilterDefElements();
		this.pQualificationDef = new QualificationDefElements();
		this.pQualification = new QualificationElements();
		this.pCurrentScopeDecl = new CurrentScopeDeclElements();
		this.pCurrentScopeProvisionDef = new CurrentScopeProvisionDefElements();
		this.pSelectionDef = new SelectionDefElements();
		this.pProvision = new ProvisionElements();
		this.pMultiplePathNames = new MultiplePathNamesElements();
		this.pOccludingDef = new OccludingDefElements();
		this.pContributionsDef = new ContributionsDefElements();
		this.pContribution = new ContributionElements();
		this.pExportedScopeDecl = new ExportedScopeDeclElements();
		this.pExportedScopeProvisionDef = new ExportedScopeProvisionDefElements();
		this.pHelpersSect = new HelpersSectElements();
		this.pHelperClass = new HelperClassElements();
		this.pHelperOp = new HelperOpElements();
		this.pParameterDef = new ParameterDefElements();
		this.pPrimaryExpCS = new PrimaryExpCSElements();
		this.pTraceExpCS = new TraceExpCSElements();
		this.pLookupExpCS = new LookupExpCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.york.cs.cs2as.CS2ASDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}

	
	//CS2ASModel:
	//	source=SourceDomain
	//	target=TargetDomain (mappingSect=MappingSect
	//	& disambiguationSect=DisambiguationSect?
	//	& nameresoSect=NameResolutionSect?
	//	& helpersSect=HelpersSect?);
	public CS2ASModelElements getCS2ASModelAccess() {
		return pCS2ASModel;
	}
	
	public ParserRule getCS2ASModelRule() {
		return getCS2ASModelAccess().getRule();
	}

	//SourceDomain:
	//	'source' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*;
	public SourceDomainElements getSourceDomainAccess() {
		return pSourceDomain;
	}
	
	public ParserRule getSourceDomainRule() {
		return getSourceDomainAccess().getRule();
	}

	//TargetDomain:
	//	'target' metamodels+=MetaModelDecl (',' metamodels+=MetaModelDecl)*;
	public TargetDomainElements getTargetDomainAccess() {
		return pTargetDomain;
	}
	
	public ParserRule getTargetDomainRule() {
		return getTargetDomainAccess().getRule();
	}

	//MetaModelDecl base::ImportCS:
	//	(name=ID ':')? ownedPathName=URIPathNameCS isAll?='::*'?
	public MetaModelDeclElements getMetaModelDeclAccess() {
		return pMetaModelDecl;
	}
	
	public ParserRule getMetaModelDeclRule() {
		return getMetaModelDeclAccess().getRule();
	}

	//MappingSect:
	//	{MappingSect}
	//	'mappings' '{'
	//	mappings+=MappingDef*
	//	'}';
	public MappingSectElements getMappingSectAccess() {
		return pMappingSect;
	}
	
	public ParserRule getMappingSectRule() {
		return getMappingSectAccess().getRule();
	}

	//MappingDef:
	//	MappingCreation | MappingReference;
	public MappingDefElements getMappingDefAccess() {
		return pMappingDef;
	}
	
	public ParserRule getMappingDefRule() {
		return getMappingDefAccess().getRule();
	}

	//MappingCreation:
	//	'create' to=PathNameCS 'from' from=PathNameCS ('when' rule=ID)? '{'
	//	properties+=PropertyDef*
	//	'}';
	public MappingCreationElements getMappingCreationAccess() {
		return pMappingCreation;
	}
	
	public ParserRule getMappingCreationRule() {
		return getMappingCreationAccess().getRule();
	}

	//PropertyDef:
	//	redefine?='redefine'? propRef=PathNameCS ':='
	//	propInit=ExpCS ';';
	public PropertyDefElements getPropertyDefAccess() {
		return pPropertyDef;
	}
	
	public ParserRule getPropertyDefRule() {
		return getPropertyDefAccess().getRule();
	}

	//MappingReference:
	//	'ref' to=PathNameCS 'from' from=PathNameCS
	//	':=' expression=ExpCS;
	public MappingReferenceElements getMappingReferenceAccess() {
		return pMappingReference;
	}
	
	public ParserRule getMappingReferenceRule() {
		return getMappingReferenceAccess().getRule();
	}

	//DisambiguationSect:
	//	{DisambiguationSect}
	//	'disambiguation' '{'
	//	disambiguations+=DisambiguationDef*
	//	'}';
	public DisambiguationSectElements getDisambiguationSectAccess() {
		return pDisambiguationSect;
	}
	
	public ParserRule getDisambiguationSectRule() {
		return getDisambiguationSectAccess().getRule();
	}

	//DisambiguationDef:
	//	classRef=PathNameCS '{'
	//	rules+=DisambiguationRule*
	//	'}';
	public DisambiguationDefElements getDisambiguationDefAccess() {
		return pDisambiguationDef;
	}
	
	public ParserRule getDisambiguationDefRule() {
		return getDisambiguationDefAccess().getRule();
	}

	//DisambiguationRule:
	//	name=SIMPLE_ID ':=' exp=ExpCS
	//	';';
	public DisambiguationRuleElements getDisambiguationRuleAccess() {
		return pDisambiguationRule;
	}
	
	public ParserRule getDisambiguationRuleRule() {
		return getDisambiguationRuleAccess().getRule();
	}

	//NameResolutionSect:
	//	{NameResolutionSect}
	//	'name_resolution' '{'
	//	targetsDef=Targets?
	//	inputsDef=Inputs?
	//	providersDef=Providers?
	//	'}';
	public NameResolutionSectElements getNameResolutionSectAccess() {
		return pNameResolutionSect;
	}
	
	public ParserRule getNameResolutionSectRule() {
		return getNameResolutionSectAccess().getRule();
	}

	//Targets:
	//	{Targets}
	//	'targets' '{'
	//	targets+=Target*
	//	'}';
	public TargetsElements getTargetsAccess() {
		return pTargets;
	}
	
	public ParserRule getTargetsRule() {
		return getTargetsAccess().getRule();
	}

	//Target:
	//	classRef=PathNameCS ('using' propRef=PathNameCS ignoreCase?='ignore_case'?
	//	escapeSeqDef=EscapeSequenceDef?)?
	//	filter=FilterDef?
	//	qualification=QualificationDef?
	//	';';
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	//EscapeSequenceDef:
	//	'scaped_with' escapes+=EscapeSequence (',' escapes+=EscapeSequence)*;
	public EscapeSequenceDefElements getEscapeSequenceDefAccess() {
		return pEscapeSequenceDef;
	}
	
	public ParserRule getEscapeSequenceDefRule() {
		return getEscapeSequenceDefAccess().getRule();
	}

	//EscapeSequence:
	//	prefix=StringLiteral ('and' suffix=StringLiteral)?;
	public EscapeSequenceElements getEscapeSequenceAccess() {
		return pEscapeSequence;
	}
	
	public ParserRule getEscapeSequenceRule() {
		return getEscapeSequenceAccess().getRule();
	}

	//Inputs:
	//	{Inputs}
	//	'inputs' '{'
	//	inputs+=Input*
	//	'}';
	public InputsElements getInputsAccess() {
		return pInputs;
	}
	
	public ParserRule getInputsRule() {
		return getInputsAccess().getRule();
	}

	//Input:
	//	qualifier?='qualifier'?
	//	typeRef=PathNameCS ('using' propRef=PathNameCS)? ';';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Providers:
	//	{Providers}
	//	'providers' '{'
	//	providers+=Provider*
	//	'}';
	public ProvidersElements getProvidersAccess() {
		return pProviders;
	}
	
	public ParserRule getProvidersRule() {
		return getProvidersAccess().getRule();
	}

	//Provider:
	//	classRef=PathNameCS '{'
	//	varsDecl=ProviderVarsDecl?
	//	currentScope=CurrentScopeDecl?
	//	exportedScope=ExportedScopeDecl?
	//	'}';
	public ProviderElements getProviderAccess() {
		return pProvider;
	}
	
	public ParserRule getProviderRule() {
		return getProviderAccess().getRule();
	}

	//ProviderVarsDecl:
	//	'vars' varDecl+=LetVariableCS (',' varDecl+=LetVariableCS)* ';';
	public ProviderVarsDeclElements getProviderVarsDeclAccess() {
		return pProviderVarsDecl;
	}
	
	public ParserRule getProviderVarsDeclRule() {
		return getProviderVarsDeclAccess().getRule();
	}

	//FilterDef:
	//	'filtered_by' params+=ParameterDef (',' params+=ParameterDef)* 'when' expression=ExpCS;
	public FilterDefElements getFilterDefAccess() {
		return pFilterDef;
	}
	
	public ParserRule getFilterDefRule() {
		return getFilterDefAccess().getRule();
	}

	//QualificationDef:
	//	'qualifies' qualifications+=Qualification (',' qualifications+=Qualification)*;
	public QualificationDefElements getQualificationDefAccess() {
		return pQualificationDef;
	}
	
	public ParserRule getQualificationDefRule() {
		return getQualificationDefAccess().getRule();
	}

	//Qualification:
	//	qualifiedClasses=MultiplePathNames
	//	'using' contributions+=ExpCS (',' contributions+=ExpCS)*;
	public QualificationElements getQualificationAccess() {
		return pQualification;
	}
	
	public ParserRule getQualificationRule() {
		return getQualificationAccess().getRule();
	}

	//CurrentScopeDecl:
	//	'in' 'current_scope'
	//	provisionDefs+=CurrentScopeProvisionDef+;
	public CurrentScopeDeclElements getCurrentScopeDeclAccess() {
		return pCurrentScopeDecl;
	}
	
	public ParserRule getCurrentScopeDeclRule() {
		return getCurrentScopeDeclAccess().getRule();
	}

	//CurrentScopeProvisionDef:
	//	selectionDef=SelectionDef?
	//	'provides' ('occluding' | sameScope?='adding' | emptyScope?='resetting')?
	//	provisions+=Provision+
	//	';';
	public CurrentScopeProvisionDefElements getCurrentScopeProvisionDefAccess() {
		return pCurrentScopeProvisionDef;
	}
	
	public ParserRule getCurrentScopeProvisionDefRule() {
		return getCurrentScopeProvisionDefAccess().getRule();
	}

	//SelectionDef:
	//	'for' ({SelectionAll} 'all' ('excepting' exceptions+=PathNameCS (',' exceptions+=PathNameCS)*)?
	//	| {SelectionSpecific} (selections+=PathNameCS (',' selections+=PathNameCS)*));
	public SelectionDefElements getSelectionDefAccess() {
		return pSelectionDef;
	}
	
	public ParserRule getSelectionDefRule() {
		return getSelectionDefAccess().getRule();
	}

	//Provision:
	//	(providedClasses=MultiplePathNames
	//	'using')? contributionsDef=ContributionsDef
	//	occludingDefs+=OccludingDef*;
	public ProvisionElements getProvisionAccess() {
		return pProvision;
	}
	
	public ParserRule getProvisionRule() {
		return getProvisionAccess().getRule();
	}

	//MultiplePathNames:
	//	pathNames+=PathNameCS (',' pathNames+=PathNameCS)*;
	public MultiplePathNamesElements getMultiplePathNamesAccess() {
		return pMultiplePathNames;
	}
	
	public ParserRule getMultiplePathNamesRule() {
		return getMultiplePathNamesAccess().getRule();
	}

	//OccludingDef:
	//	'occluding' contributionsDef=ContributionsDef;
	public OccludingDefElements getOccludingDefAccess() {
		return pOccludingDef;
	}
	
	public ParserRule getOccludingDefRule() {
		return getOccludingDefAccess().getRule();
	}

	//ContributionsDef:
	//	contributions+=Contribution (',' contributions+=Contribution)*;
	public ContributionsDefElements getContributionsDefAccess() {
		return pContributionsDef;
	}
	
	public ParserRule getContributionsDefRule() {
		return getContributionsDefAccess().getRule();
	}

	//Contribution:
	//	('child' child=ParameterDef 'in' | isPreceding?='preceding'
	//	| isExported?='exported' (typeRefs+=PathNameCS (',' typeRefs+=PathNameCS)* 'from')? | isLoaded?='loaded'
	//	typeRefs+=PathNameCS 'from')?
	//	expression=ExpCS;
	public ContributionElements getContributionAccess() {
		return pContribution;
	}
	
	public ParserRule getContributionRule() {
		return getContributionAccess().getRule();
	}

	//ExportedScopeDecl:
	//	'in' 'exported_scope'
	//	provisionDefs+=ExportedScopeProvisionDef+;
	public ExportedScopeDeclElements getExportedScopeDeclAccess() {
		return pExportedScopeDecl;
	}
	
	public ParserRule getExportedScopeDeclRule() {
		return getExportedScopeDeclAccess().getRule();
	}

	//ExportedScopeProvisionDef: // selectionDef=SelectionDef?
	//	'provides' provisions+=Provision+ ';';
	public ExportedScopeProvisionDefElements getExportedScopeProvisionDefAccess() {
		return pExportedScopeProvisionDef;
	}
	
	public ParserRule getExportedScopeProvisionDefRule() {
		return getExportedScopeProvisionDefAccess().getRule();
	}

	//HelpersSect:
	//	{HelpersSect}
	//	'helpers' '{'
	//	classHelpers+=HelperClass*
	//	'}';
	public HelpersSectElements getHelpersSectAccess() {
		return pHelpersSect;
	}
	
	public ParserRule getHelpersSectRule() {
		return getHelpersSectAccess().getRule();
	}

	//HelperClass:
	//	context=PathNameCS '{'
	//	helpers+=HelperOp*
	//	'}';
	public HelperClassElements getHelperClassAccess() {
		return pHelperClass;
	}
	
	public ParserRule getHelperClassRule() {
		return getHelperClassAccess().getRule();
	}

	//// Similar to Complete OCL definitions
	//HelperOp:
	//	ownedSignature=TemplateSignatureCS?
	//	name=UnrestrictedName
	//	'(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')' (':' ownedType=TypeExpCS)?
	//	':=' helperBody=ExpCS
	//	';';
	public HelperOpElements getHelperOpAccess() {
		return pHelperOp;
	}
	
	public ParserRule getHelperOpRule() {
		return getHelperOpAccess().getRule();
	}

	//ParameterDef base::ParameterCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS
	public ParameterDefElements getParameterDefAccess() {
		return pParameterDef;
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}

	/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
	//PrimaryExpCS essentialocl::ExpCS:
	//	NestedExpCS
	//	| IfExpCS
	//	| SelfExpCS
	//	| PrimitiveLiteralExpCS
	//	| TupleLiteralExpCS
	//	| MapLiteralExpCS
	//	| CollectionLiteralExpCS
	//	| LambdaLiteralExpCS
	//	| TypeLiteralExpCS
	//	| NameExpCS
	//	| TraceExpCS // DSL addition
	//	| LookupExpCS
	public PrimaryExpCSElements getPrimaryExpCSAccess() {
		return pPrimaryExpCS;
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//// DSL addition
	//TraceExpCS:
	//	{TraceExpCS}
	//	'trace';
	public TraceExpCSElements getTraceExpCSAccess() {
		return pTraceExpCS;
	}
	
	public ParserRule getTraceExpCSRule() {
		return getTraceExpCSAccess().getRule();
	}

	//LookupExpCS:
	//	('lookup' | isExported?='lookupExported')
	//	'(' args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')';
	public LookupExpCSElements getLookupExpCSAccess() {
		return pLookupExpCS;
	}
	
	public ParserRule getLookupExpCSRule() {
		return getLookupExpCSAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	//Model ContextCS:
	//	ownedExpression=ExpCS
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLReservedKeyword:
	//	'and'
	//	| 'else'
	//	| 'endif'
	//	| 'if'
	//	| 'implies'
	//	| 'in'
	//	| 'let'
	//	| 'not'
	//	| 'or'
	//	| 'then'
	//	| 'xor';
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnaryOperatorName:
	//	'-' | 'not';
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLInfixOperatorName:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'or' | 'xor' | 'implies';
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLNavigationOperatorName:
	//	'.' | '->' | '?.' | '?->';
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}

	//BinaryOperatorName:
	//	InfixOperatorName | NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaEssentialOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}

	//InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaEssentialOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}

	//NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName;
	public EssentialOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaEssentialOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}

	//UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaEssentialOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Names
	////---------------------------------------------------------------------
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnrestrictedName:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaEssentialOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnreservedName:
	//	UnrestrictedName
	//	| CollectionTypeIdentifier
	//	| PrimitiveTypeIdentifier
	//	| 'Map'
	//	| 'Tuple';
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//URIPathNameCS base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS base::PathElementCS:
	//	name=UnrestrictedName | {base::PathElementWithURICS} uri=URI
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Types
	////---------------------------------------------------------------------
	//PrimitiveTypeIdentifier:
	//	'Boolean'
	//	| 'Integer'
	//	| 'Real'
	//	| 'String'
	//	| 'UnlimitedNatural'
	//	| 'OclAny'
	//	| 'OclInvalid'
	//	| 'OclVoid';
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaEssentialOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//PrimitiveTypeCS base::PrimitiveTypeRefCS:
	//	name=PrimitiveTypeIdentifier
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier:
	//	'Set'
	//	| 'Bag'
	//	| 'Sequence'
	//	| 'Collection'
	//	| 'OrderedSet';
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MapTypeCS:
	//	name='Map' ('(' ownedKeyType=TypeExpCS ',' ownedValueType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaEssentialOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}

	//TupleTypeCS base::TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=TuplePartCS (',' ownedParts+=TuplePartCS)*)? ')')?
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS base::TuplePartCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Literals
	////---------------------------------------------------------------------
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	ownedExpression=ExpCS ('..' ownedLastExpression=ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=PatternExpCS (',' ownedParts+=PatternExpCS)* ('++' restVariableName=Identifier))?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaEssentialOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}

	//ShadowPartCS:
	//	referredProperty=[pivot::Property|UnrestrictedName] '=' ownedInitExpression=(ExpCS | PatternExpCS);
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaEssentialOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}

	//PatternExpCS:
	//	patternVariableName=UnrestrictedName? ':' ownedPatternType=TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaEssentialOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}

	//LambdaLiteralExpCS:
	//	'Lambda' '{' ownedExpressionCS=ExpCS '}';
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaEssentialOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}

	//MapLiteralExpCS:
	//	ownedType=MapTypeCS '{' (ownedParts+=MapLiteralPartCS (',' ownedParts+=MapLiteralPartCS)*)? '}';
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaEssentialOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}

	//MapLiteralPartCS:
	//	ownedKey=ExpCS '<-' ownedValue=ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaEssentialOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS
	//	| StringLiteralExpCS
	//	| BooleanLiteralExpCS
	//	| UnlimitedNaturalLiteralExpCS
	//	| InvalidLiteralExpCS
	//	| NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}';
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	symbol='true'
	//	| symbol='false';
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralCS base::TypedRefCS:
	//	PrimitiveTypeCS
	//	| CollectionTypeCS
	//	| MapTypeCS
	//	| TupleTypeCS
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ('{' ownedPatternGuard=ExpCS '}')?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS base::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS) ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Expressions
	////---------------------------------------------------------------------
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	////  that let is right associative, whereas infix operators are left associative.
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	//// is
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	/// * An expression elaborates a prefixed expression with zero or more binary operator and expression suffixes.
	// * An optionally prefixed let expression is permitted except when suffixed with further expressions.* / ExpCS:
	//	PrefixedPrimaryExpCS ({InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	/// * A prefixed let expression elaborates a let expression with zero or more unary prefix operators. * / PrefixedLetExpCS
	//ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaEssentialOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}

	/// * A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. * /
	//PrefixedPrimaryExpCS ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | super::PrimaryExpCS
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}

	/// * A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.* / NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?='@'
	//	'pre')?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.* /
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} '{' ((ownedParts+=ShadowPartCS (',' ownedParts+=ShadowPartCS)*)?
	//	| value=StringLiteral) '}';
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaEssentialOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for template specialisations and operations arguments.* /
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} '(' (ownedArguments+=NavigatingArgCS ownedArguments+=NavigatingCommaArgCS*
	//	(ownedArguments+=NavigatingSemiArgCS ownedArguments+=NavigatingCommaArgCS*)? (ownedArguments+=NavigatingBarArgCS
	//	ownedArguments+=NavigatingCommaArgCS*)*)? ')';
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaEssentialOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}

	/// * A square bracket clause is a generalized rule for association class qualifiers and roles.* / SquareBracketedClauseCS:
	//	'[' ownedTerms+=ExpCS (',' ownedTerms+=ExpCS)* ']';
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaEssentialOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}

	/// * A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. * / NavigatingArgCS:
	//	ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? | 'in'
	//	ownedInitExpression=ExpCS)? | ':' ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. * /
	//NavigatingBarArgCS NavigatingArgCS:
	//	prefix='|' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. * / NavigatingCommaArgCS NavigatingArgCS:
	//	prefix=',' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? | 'in'
	//	ownedInitExpression=ExpCS)?
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. * /
	//NavigatingSemiArgCS NavigatingArgCS:
	//	prefix=';' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	//NavigatingArgExpCS ExpCS:
	//	ExpCS
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaEssentialOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//IfExpCS:
	//	'if' ownedCondition=(ExpCS | PatternExpCS)
	//	'then' ownedThenExpression=ExpCS
	//	//	ifThenExpressions+=IfThenExpCS
	//	ownedIfThenExpressions+=ElseIfThenExpCS*
	//	'else' ownedElseExpression=ExpCS
	//	'endif';
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	////IfThenExpCS returns IfThenExpCS:
	////	'if' condition=ExpCS
	////	'then' thenExpression=ExpCS
	////;
	//ElseIfThenExpCS IfThenExpCS:
	//	'elseif' ownedCondition=ExpCS
	//	'then' ownedThenExpression=ExpCS
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaEssentialOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}

	//LetExpCS:
	//	'let' ownedVariables+=LetVariableCS (',' ownedVariables+=LetVariableCS)*
	//	'in' ownedInExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (':' ownedType=TypeExpCS)? '='
	//	ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	'(' ownedExpression=ExpCS ')';
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}

	//MultiplicityBoundsCS:
	//	lowerBound=LOWER ('..' upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaBase.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityCS:
	//	'[' (MultiplicityBoundsCS | MultiplicityStringCS) ('|?' | isNullFree?='|1')? ']';
	public BaseGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaBase.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//MultiplicityStringCS:
	//	stringBounds=('*' | '+' | '?');
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaBase.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaBase.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS PathElementCS:
	//	name=super::UnrestrictedName
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaBase.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS PathElementCS:
	//	name=super::UnreservedName
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaBase.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS (',' ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaBase.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}

	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaBase.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}

	//TemplateSignatureCS:
	//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')';
	public BaseGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaBase.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}

	//TypeParameterCS:
	//	name=super::UnrestrictedName ('extends' ownedExtends+=TypedRefCS ('&&' ownedExtends+=TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaBase.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}

	//TypeRefCS:
	//	TypedRefCS | WildcardTypeRefCS;
	public BaseGrammarAccess.TypeRefCSElements getTypeRefCSAccess() {
		return gaBase.getTypeRefCSAccess();
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}

	//TypedRefCS:
	//	TypedTypeRefCS;
	public BaseGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaBase.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}

	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ('(' ownedBinding=TemplateBindingCS ')')?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaBase.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}

	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} '?' ('extends' ownedExtends=TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaBase.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaBase.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaBase.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	/// * A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. * /
	//LOWER ecore::EInt:
	//	INT
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaBase.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	/// * A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// * / NUMBER_LITERAL BigNumber:
	//	INT
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaBase.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	/// * An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. * /
	//UPPER ecore::EInt:
	//	INT | '*'
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaBase.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaBase.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaBase.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaBase.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//	'"' (ESCAPED_CHARACTER | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaBase.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"'" (ESCAPED_CHARACTER | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaBase.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaBase.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaBase.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaBase.getESCAPED_IDRule();
	} 

	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaBase.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaBase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaBase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaBase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBase.getANY_OTHERRule();
	} 
}
