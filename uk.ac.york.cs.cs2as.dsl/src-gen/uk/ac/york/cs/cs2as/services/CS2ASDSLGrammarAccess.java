/*
 * generated by Xtext
 */
package uk.ac.york.cs.cs2as.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;

@Singleton
public class CS2ASDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCsDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCsDeclCSDeclParserRuleCall_0_0 = (RuleCall)cCsDeclAssignment_0.eContents().get(0);
		private final Assignment cAsDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsDeclASDeclParserRuleCall_1_0 = (RuleCall)cAsDeclAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cMappingSectAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cMappingSectMappingSectParserRuleCall_2_0_0 = (RuleCall)cMappingSectAssignment_2_0.eContents().get(0);
		private final Assignment cDisambiguationSectAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0 = (RuleCall)cDisambiguationSectAssignment_2_1.eContents().get(0);
		private final Assignment cNameresoSectAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cNameresoSectNameResolutionSectParserRuleCall_2_2_0 = (RuleCall)cNameresoSectAssignment_2_2.eContents().get(0);
		private final Assignment cHelpersSectAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cHelpersSectHelpersSectParserRuleCall_2_3_0 = (RuleCall)cHelpersSectAssignment_2_3.eContents().get(0);
		
		//Model:
		//	csDecl=CSDecl
		//	asDecl=ASDecl (mappingSect=MappingSect
		//	& disambiguationSect=DisambiguationSect?
		//	& nameresoSect=NameResolutionSect?
		//	& helpersSect=HelpersSect?);
		@Override public ParserRule getRule() { return rule; }

		//csDecl=CSDecl asDecl=ASDecl (mappingSect=MappingSect & disambiguationSect=DisambiguationSect? &
		//nameresoSect=NameResolutionSect? & helpersSect=HelpersSect?)
		public Group getGroup() { return cGroup; }

		//csDecl=CSDecl
		public Assignment getCsDeclAssignment_0() { return cCsDeclAssignment_0; }

		//CSDecl
		public RuleCall getCsDeclCSDeclParserRuleCall_0_0() { return cCsDeclCSDeclParserRuleCall_0_0; }

		//asDecl=ASDecl
		public Assignment getAsDeclAssignment_1() { return cAsDeclAssignment_1; }

		//ASDecl
		public RuleCall getAsDeclASDeclParserRuleCall_1_0() { return cAsDeclASDeclParserRuleCall_1_0; }

		//(mappingSect=MappingSect & disambiguationSect=DisambiguationSect? & nameresoSect=NameResolutionSect? &
		//helpersSect=HelpersSect?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//mappingSect=MappingSect
		public Assignment getMappingSectAssignment_2_0() { return cMappingSectAssignment_2_0; }

		//MappingSect
		public RuleCall getMappingSectMappingSectParserRuleCall_2_0_0() { return cMappingSectMappingSectParserRuleCall_2_0_0; }

		//disambiguationSect=DisambiguationSect?
		public Assignment getDisambiguationSectAssignment_2_1() { return cDisambiguationSectAssignment_2_1; }

		//DisambiguationSect
		public RuleCall getDisambiguationSectDisambiguationSectParserRuleCall_2_1_0() { return cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0; }

		//nameresoSect=NameResolutionSect?
		public Assignment getNameresoSectAssignment_2_2() { return cNameresoSectAssignment_2_2; }

		//NameResolutionSect
		public RuleCall getNameresoSectNameResolutionSectParserRuleCall_2_2_0() { return cNameresoSectNameResolutionSectParserRuleCall_2_2_0; }

		//helpersSect=HelpersSect?
		public Assignment getHelpersSectAssignment_2_3() { return cHelpersSectAssignment_2_3; }

		//HelpersSect
		public RuleCall getHelpersSectHelpersSectParserRuleCall_2_3_0() { return cHelpersSectHelpersSectParserRuleCall_2_3_0; }
	}

	public class CSDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.CSDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_1_0 = (RuleCall)cMetamodelsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_2_1_0 = (RuleCall)cMetamodelsAssignment_2_1.eContents().get(0);
		
		//CSDecl:
		//	'source' metamodels+=ImportCS (',' metamodels+=ImportCS)*;
		@Override public ParserRule getRule() { return rule; }

		//'source' metamodels+=ImportCS (',' metamodels+=ImportCS)*
		public Group getGroup() { return cGroup; }

		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_1() { return cMetamodelsAssignment_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_1_0() { return cMetamodelsImportCSParserRuleCall_1_0; }

		//(',' metamodels+=ImportCS)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_2_1() { return cMetamodelsAssignment_2_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_2_1_0() { return cMetamodelsImportCSParserRuleCall_2_1_0; }
	}

	public class ASDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ASDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_1_0 = (RuleCall)cMetamodelsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetamodelsImportCSParserRuleCall_2_1_0 = (RuleCall)cMetamodelsAssignment_2_1.eContents().get(0);
		
		//ASDecl:
		//	'target' metamodels+=ImportCS (',' metamodels+=ImportCS)*;
		@Override public ParserRule getRule() { return rule; }

		//'target' metamodels+=ImportCS (',' metamodels+=ImportCS)*
		public Group getGroup() { return cGroup; }

		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_1() { return cMetamodelsAssignment_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_1_0() { return cMetamodelsImportCSParserRuleCall_1_0; }

		//(',' metamodels+=ImportCS)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//metamodels+=ImportCS
		public Assignment getMetamodelsAssignment_2_1() { return cMetamodelsAssignment_2_1; }

		//ImportCS
		public RuleCall getMetamodelsImportCSParserRuleCall_2_1_0() { return cMetamodelsImportCSParserRuleCall_2_1_0; }
	}

	public class ImportCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ImportCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedPathNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPathNameURIPathNameCSParserRuleCall_1_0 = (RuleCall)cOwnedPathNameAssignment_1.eContents().get(0);
		private final Assignment cIsAllAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsAllColonColonAsteriskKeyword_2_0 = (Keyword)cIsAllAssignment_2.eContents().get(0);
		
		//ImportCS base::ImportCS:
		//	(name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?
		@Override public ParserRule getRule() { return rule; }

		//(name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?
		public Group getGroup() { return cGroup; }

		//(name=Identifier ':')?
		public Group getGroup_0() { return cGroup_0; }

		//name=Identifier
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0_0() { return cNameIdentifierParserRuleCall_0_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//ownedPathName=URIPathNameCS
		public Assignment getOwnedPathNameAssignment_1() { return cOwnedPathNameAssignment_1; }

		//URIPathNameCS
		public RuleCall getOwnedPathNameURIPathNameCSParserRuleCall_1_0() { return cOwnedPathNameURIPathNameCSParserRuleCall_1_0; }

		//isAll?='::*'?
		public Assignment getIsAllAssignment_2() { return cIsAllAssignment_2; }

		//'::*'
		public Keyword getIsAllColonColonAsteriskKeyword_2_0() { return cIsAllColonColonAsteriskKeyword_2_0; }
	}

	public class MappingSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MappingSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMappingsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsClassMapParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MappingSect:
		//	{MappingSect}
		//	'mappings' '{'
		//	mappings+=ClassMap*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{MappingSect} 'mappings' '{' mappings+=ClassMap* '}'
		public Group getGroup() { return cGroup; }

		//{MappingSect}
		public Action getMappingSectAction_0() { return cMappingSectAction_0; }

		//'mappings'
		public Keyword getMappingsKeyword_1() { return cMappingsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//mappings+=ClassMap*
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }

		//ClassMap
		public RuleCall getMappingsClassMapParserRuleCall_3_0() { return cMappingsClassMapParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ClassMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToPathNameCSParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromPathNameCSParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRuleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRuleSIMPLE_IDTerminalRuleCall_4_1_0 = (RuleCall)cRuleAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsClassMapStmntParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClassMap:
		//	'map' to=PathNameCS 'from' from=PathNameCS ('when' rule=SIMPLE_ID)? '{'
		//	statements+=ClassMapStmnt*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'map' to=PathNameCS 'from' from=PathNameCS ('when' rule=SIMPLE_ID)? '{' statements+=ClassMapStmnt* '}'
		public Group getGroup() { return cGroup; }

		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//to=PathNameCS
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//PathNameCS
		public RuleCall getToPathNameCSParserRuleCall_1_0() { return cToPathNameCSParserRuleCall_1_0; }

		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//from=PathNameCS
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//PathNameCS
		public RuleCall getFromPathNameCSParserRuleCall_3_0() { return cFromPathNameCSParserRuleCall_3_0; }

		//('when' rule=SIMPLE_ID)?
		public Group getGroup_4() { return cGroup_4; }

		//'when'
		public Keyword getWhenKeyword_4_0() { return cWhenKeyword_4_0; }

		//rule=SIMPLE_ID
		public Assignment getRuleAssignment_4_1() { return cRuleAssignment_4_1; }

		//SIMPLE_ID
		public RuleCall getRuleSIMPLE_IDTerminalRuleCall_4_1_0() { return cRuleSIMPLE_IDTerminalRuleCall_4_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//statements+=ClassMapStmnt*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//ClassMapStmnt
		public RuleCall getStatementsClassMapStmntParserRuleCall_6_0() { return cStatementsClassMapStmntParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ClassMapStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ClassMapStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyMapParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassMapStmnt:
		//	PropertyMap
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//PropertyMap ';'
		public Group getGroup() { return cGroup; }

		//PropertyMap
		public RuleCall getPropertyMapParserRuleCall_0() { return cPropertyMapParserRuleCall_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class PropertyMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.PropertyMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedefineAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRedefineRedefineKeyword_0_0 = (Keyword)cRedefineAssignment_0.eContents().get(0);
		private final Assignment cPropNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropNameSIMPLE_IDTerminalRuleCall_1_0 = (RuleCall)cPropNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropInitExpCSParserRuleCall_3_0 = (RuleCall)cPropInitAssignment_3.eContents().get(0);
		
		//PropertyMap:
		//	redefine?='redefine'? propName=SIMPLE_ID ':=' propInit=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//redefine?='redefine'? propName=SIMPLE_ID ':=' propInit=ExpCS
		public Group getGroup() { return cGroup; }

		//redefine?='redefine'?
		public Assignment getRedefineAssignment_0() { return cRedefineAssignment_0; }

		//'redefine'
		public Keyword getRedefineRedefineKeyword_0_0() { return cRedefineRedefineKeyword_0_0; }

		//propName=SIMPLE_ID
		public Assignment getPropNameAssignment_1() { return cPropNameAssignment_1; }

		//SIMPLE_ID
		public RuleCall getPropNameSIMPLE_IDTerminalRuleCall_1_0() { return cPropNameSIMPLE_IDTerminalRuleCall_1_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//propInit=ExpCS
		public Assignment getPropInitAssignment_3() { return cPropInitAssignment_3; }

		//ExpCS
		public RuleCall getPropInitExpCSParserRuleCall_3_0() { return cPropInitExpCSParserRuleCall_3_0; }
	}

	public class DisambiguationSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.DisambiguationSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisambiguationSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDisambiguationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisambiguationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisambiguationsClassDisambiguationParserRuleCall_3_0 = (RuleCall)cDisambiguationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DisambiguationSect:
		//	{DisambiguationSect}
		//	'disambiguation' '{'
		//	disambiguations+=ClassDisambiguation*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{DisambiguationSect} 'disambiguation' '{' disambiguations+=ClassDisambiguation* '}'
		public Group getGroup() { return cGroup; }

		//{DisambiguationSect}
		public Action getDisambiguationSectAction_0() { return cDisambiguationSectAction_0; }

		//'disambiguation'
		public Keyword getDisambiguationKeyword_1() { return cDisambiguationKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//disambiguations+=ClassDisambiguation*
		public Assignment getDisambiguationsAssignment_3() { return cDisambiguationsAssignment_3; }

		//ClassDisambiguation
		public RuleCall getDisambiguationsClassDisambiguationParserRuleCall_3_0() { return cDisambiguationsClassDisambiguationParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassDisambiguationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ClassDisambiguation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassPathNameCSParserRuleCall_0_0 = (RuleCall)cClassAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsClassDisambiguationStmntParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassDisambiguation:
		//	class=PathNameCS '{'
		//	statements+=ClassDisambiguationStmnt*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//class=PathNameCS '{' statements+=ClassDisambiguationStmnt* '}'
		public Group getGroup() { return cGroup; }

		//class=PathNameCS
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }

		//PathNameCS
		public RuleCall getClassPathNameCSParserRuleCall_0_0() { return cClassPathNameCSParserRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=ClassDisambiguationStmnt*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ClassDisambiguationStmnt
		public RuleCall getStatementsClassDisambiguationStmntParserRuleCall_2_0() { return cStatementsClassDisambiguationStmntParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassDisambiguationStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ClassDisambiguationStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDisambiguationDefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassDisambiguationStmnt:
		//	DisambiguationDef
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//DisambiguationDef ';'
		public Group getGroup() { return cGroup; }

		//DisambiguationDef
		public RuleCall getDisambiguationDefParserRuleCall_0() { return cDisambiguationDefParserRuleCall_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class DisambiguationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.DisambiguationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSIMPLE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpCSParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//DisambiguationDef:
		//	name=SIMPLE_ID ':=' exp=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//name=SIMPLE_ID ':=' exp=ExpCS
		public Group getGroup() { return cGroup; }

		//name=SIMPLE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SIMPLE_ID
		public RuleCall getNameSIMPLE_IDTerminalRuleCall_0_0() { return cNameSIMPLE_IDTerminalRuleCall_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//exp=ExpCS
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//ExpCS
		public RuleCall getExpExpCSParserRuleCall_2_0() { return cExpExpCSParserRuleCall_2_0; }
	}

	public class NameResolutionSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.NameResolutionSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameResolutionSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameResolutionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetsDefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsDefTargetsParserRuleCall_3_0 = (RuleCall)cTargetsDefAssignment_3.eContents().get(0);
		private final Assignment cInputsDefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsDefInputsParserRuleCall_4_0 = (RuleCall)cInputsDefAssignment_4.eContents().get(0);
		private final Assignment cProvidersDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProvidersDefProvidersParserRuleCall_5_0 = (RuleCall)cProvidersDefAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NameResolutionSect:
		//	{NameResolutionSect}
		//	'name-resolution' '{'
		//	targetsDef=Targets
		//	inputsDef=Inputs
		//	providersDef=Providers
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{NameResolutionSect} 'name-resolution' '{' targetsDef=Targets inputsDef=Inputs providersDef=Providers '}'
		public Group getGroup() { return cGroup; }

		//{NameResolutionSect}
		public Action getNameResolutionSectAction_0() { return cNameResolutionSectAction_0; }

		//'name-resolution'
		public Keyword getNameResolutionKeyword_1() { return cNameResolutionKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//targetsDef=Targets
		public Assignment getTargetsDefAssignment_3() { return cTargetsDefAssignment_3; }

		//Targets
		public RuleCall getTargetsDefTargetsParserRuleCall_3_0() { return cTargetsDefTargetsParserRuleCall_3_0; }

		//inputsDef=Inputs
		public Assignment getInputsDefAssignment_4() { return cInputsDefAssignment_4; }

		//Inputs
		public RuleCall getInputsDefInputsParserRuleCall_4_0() { return cInputsDefInputsParserRuleCall_4_0; }

		//providersDef=Providers
		public Assignment getProvidersDefAssignment_5() { return cProvidersDefAssignment_5; }

		//Providers
		public RuleCall getProvidersDefProvidersParserRuleCall_5_0() { return cProvidersDefProvidersParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TargetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Targets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTargetsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsTargetParserRuleCall_3_0 = (RuleCall)cTargetsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Targets:
		//	{Targets}
		//	'targets' '{'
		//	targets+=Target*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Targets} 'targets' '{' targets+=Target* '}'
		public Group getGroup() { return cGroup; }

		//{Targets}
		public Action getTargetsAction_0() { return cTargetsAction_0; }

		//'targets'
		public Keyword getTargetsKeyword_1() { return cTargetsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//targets+=Target*
		public Assignment getTargetsAssignment_3() { return cTargetsAssignment_3; }

		//Target
		public RuleCall getTargetsTargetParserRuleCall_3_0() { return cTargetsTargetParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassRefClassRefParserRuleCall_0_0 = (RuleCall)cClassRefAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUsingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropRefPathNameCSParserRuleCall_1_1_0 = (RuleCall)cPropRefAssignment_1_1.eContents().get(0);
		private final Assignment cFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilterFilterDefParserRuleCall_2_0 = (RuleCall)cFilterAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cQualifiesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualificationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualificationsQualificationDefParserRuleCall_3_1_0 = (RuleCall)cQualificationsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cQualificationsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cQualificationsQualificationDefParserRuleCall_3_2_1_0 = (RuleCall)cQualificationsAssignment_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Target:
		//	classRef=ClassRef ('using' propRef=PathNameCS)?
		//	filter=FilterDef? ('qualifies' qualifications+=QualificationDef (',' qualifications+=QualificationDef)*)?
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//classRef=ClassRef ('using' propRef=PathNameCS)? filter=FilterDef? ('qualifies' qualifications+=QualificationDef (','
		//qualifications+=QualificationDef)*)? ';'
		public Group getGroup() { return cGroup; }

		//classRef=ClassRef
		public Assignment getClassRefAssignment_0() { return cClassRefAssignment_0; }

		//ClassRef
		public RuleCall getClassRefClassRefParserRuleCall_0_0() { return cClassRefClassRefParserRuleCall_0_0; }

		//('using' propRef=PathNameCS)?
		public Group getGroup_1() { return cGroup_1; }

		//'using'
		public Keyword getUsingKeyword_1_0() { return cUsingKeyword_1_0; }

		//propRef=PathNameCS
		public Assignment getPropRefAssignment_1_1() { return cPropRefAssignment_1_1; }

		//PathNameCS
		public RuleCall getPropRefPathNameCSParserRuleCall_1_1_0() { return cPropRefPathNameCSParserRuleCall_1_1_0; }

		//filter=FilterDef?
		public Assignment getFilterAssignment_2() { return cFilterAssignment_2; }

		//FilterDef
		public RuleCall getFilterFilterDefParserRuleCall_2_0() { return cFilterFilterDefParserRuleCall_2_0; }

		//('qualifies' qualifications+=QualificationDef (',' qualifications+=QualificationDef)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'qualifies'
		public Keyword getQualifiesKeyword_3_0() { return cQualifiesKeyword_3_0; }

		//qualifications+=QualificationDef
		public Assignment getQualificationsAssignment_3_1() { return cQualificationsAssignment_3_1; }

		//QualificationDef
		public RuleCall getQualificationsQualificationDefParserRuleCall_3_1_0() { return cQualificationsQualificationDefParserRuleCall_3_1_0; }

		//(',' qualifications+=QualificationDef)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//qualifications+=QualificationDef
		public Assignment getQualificationsAssignment_3_2_1() { return cQualificationsAssignment_3_2_1; }

		//QualificationDef
		public RuleCall getQualificationsQualificationDefParserRuleCall_3_2_1_0() { return cQualificationsQualificationDefParserRuleCall_3_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class InputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Inputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsInputParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Inputs:
		//	{Inputs}
		//	'inputs' '{'
		//	inputs+=Input*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Inputs} 'inputs' '{' inputs+=Input* '}'
		public Group getGroup() { return cGroup; }

		//{Inputs}
		public Action getInputsAction_0() { return cInputsAction_0; }

		//'inputs'
		public Keyword getInputsKeyword_1() { return cInputsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//inputs+=Input*
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }

		//Input
		public RuleCall getInputsInputParserRuleCall_3_0() { return cInputsInputParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cQualifierQualifierKeyword_0_0 = (Keyword)cQualifierAssignment_0.eContents().get(0);
		private final Assignment cClassRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassRefClassRefParserRuleCall_1_0 = (RuleCall)cClassRefAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropRefPathNameCSParserRuleCall_2_1_0 = (RuleCall)cPropRefAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Input:
		//	qualifier?='qualifier'?
		//	classRef=ClassRef ('using' propRef=PathNameCS)? ';';
		@Override public ParserRule getRule() { return rule; }

		//qualifier?='qualifier'? classRef=ClassRef ('using' propRef=PathNameCS)? ';'
		public Group getGroup() { return cGroup; }

		//qualifier?='qualifier'?
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }

		//'qualifier'
		public Keyword getQualifierQualifierKeyword_0_0() { return cQualifierQualifierKeyword_0_0; }

		//classRef=ClassRef
		public Assignment getClassRefAssignment_1() { return cClassRefAssignment_1; }

		//ClassRef
		public RuleCall getClassRefClassRefParserRuleCall_1_0() { return cClassRefClassRefParserRuleCall_1_0; }

		//('using' propRef=PathNameCS)?
		public Group getGroup_2() { return cGroup_2; }

		//'using'
		public Keyword getUsingKeyword_2_0() { return cUsingKeyword_2_0; }

		//propRef=PathNameCS
		public Assignment getPropRefAssignment_2_1() { return cPropRefAssignment_2_1; }

		//PathNameCS
		public RuleCall getPropRefPathNameCSParserRuleCall_2_1_0() { return cPropRefPathNameCSParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ProvidersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Providers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProvidersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProvidersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProvidersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvidersProviderParserRuleCall_3_0 = (RuleCall)cProvidersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Providers:
		//	{Providers}
		//	'providers' '{'
		//	providers+=Provider*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Providers} 'providers' '{' providers+=Provider* '}'
		public Group getGroup() { return cGroup; }

		//{Providers}
		public Action getProvidersAction_0() { return cProvidersAction_0; }

		//'providers'
		public Keyword getProvidersKeyword_1() { return cProvidersKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//providers+=Provider*
		public Assignment getProvidersAssignment_3() { return cProvidersAssignment_3; }

		//Provider
		public RuleCall getProvidersProviderParserRuleCall_3_0() { return cProvidersProviderParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.Provider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassRefPathNameCSParserRuleCall_0_0 = (RuleCall)cClassRefAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsDeclProviderVarsParserRuleCall_2_0 = (RuleCall)cVarsDeclAssignment_2.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsProviderStmntParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Provider:
		//	classRef=PathNameCS '{'
		//	varsDecl=ProviderVars?
		//	statements+=ProviderStmnt*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//classRef=PathNameCS '{' varsDecl=ProviderVars? statements+=ProviderStmnt* '}'
		public Group getGroup() { return cGroup; }

		//classRef=PathNameCS
		public Assignment getClassRefAssignment_0() { return cClassRefAssignment_0; }

		//PathNameCS
		public RuleCall getClassRefPathNameCSParserRuleCall_0_0() { return cClassRefPathNameCSParserRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//varsDecl=ProviderVars?
		public Assignment getVarsDeclAssignment_2() { return cVarsDeclAssignment_2; }

		//ProviderVars
		public RuleCall getVarsDeclProviderVarsParserRuleCall_2_0() { return cVarsDeclProviderVarsParserRuleCall_2_0; }

		//statements+=ProviderStmnt*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//ProviderStmnt
		public RuleCall getStatementsProviderStmntParserRuleCall_3_0() { return cStatementsProviderStmntParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProviderVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ProviderVars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarDeclLetVariableCSParserRuleCall_1_0 = (RuleCall)cVarDeclAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarDeclAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarDeclLetVariableCSParserRuleCall_2_1_0 = (RuleCall)cVarDeclAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProviderVars:
		//	'vars' varDecl+=LetVariableCS (',' varDecl+=LetVariableCS)* ';';
		@Override public ParserRule getRule() { return rule; }

		//'vars' varDecl+=LetVariableCS (',' varDecl+=LetVariableCS)* ';'
		public Group getGroup() { return cGroup; }

		//'vars'
		public Keyword getVarsKeyword_0() { return cVarsKeyword_0; }

		//varDecl+=LetVariableCS
		public Assignment getVarDeclAssignment_1() { return cVarDeclAssignment_1; }

		//LetVariableCS
		public RuleCall getVarDeclLetVariableCSParserRuleCall_1_0() { return cVarDeclLetVariableCSParserRuleCall_1_0; }

		//(',' varDecl+=LetVariableCS)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//varDecl+=LetVariableCS
		public Assignment getVarDeclAssignment_2_1() { return cVarDeclAssignment_2_1; }

		//LetVariableCS
		public RuleCall getVarDeclLetVariableCSParserRuleCall_2_1_0() { return cVarDeclLetVariableCSParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ProviderStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ProviderStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cScopeDefParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cExportDefParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ProviderStmnt:
		//	(ScopeDef | ExportDef) ';';
		@Override public ParserRule getRule() { return rule; }

		//(ScopeDef | ExportDef) ';'
		public Group getGroup() { return cGroup; }

		//(ScopeDef | ExportDef)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ScopeDef
		public RuleCall getScopeDefParserRuleCall_0_0() { return cScopeDefParserRuleCall_0_0; }

		//ExportDef
		public RuleCall getExportDefParserRuleCall_0_1() { return cExportDefParserRuleCall_0_1; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class FilterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.FilterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilteredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cByKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpCSParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//FilterDef:
		//	'filtered' ('by' params+=ParameterDef (',' params+=ParameterDef)*)? 'when' expression=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//'filtered' ('by' params+=ParameterDef (',' params+=ParameterDef)*)? 'when' expression=ExpCS
		public Group getGroup() { return cGroup; }

		//'filtered'
		public Keyword getFilteredKeyword_0() { return cFilteredKeyword_0; }

		//('by' params+=ParameterDef (',' params+=ParameterDef)*)?
		public Group getGroup_1() { return cGroup_1; }

		//'by'
		public Keyword getByKeyword_1_0() { return cByKeyword_1_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_1_1_0() { return cParamsParameterDefParserRuleCall_1_1_0; }

		//(',' params+=ParameterDef)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_1_2_1_0() { return cParamsParameterDefParserRuleCall_1_2_1_0; }

		//'when'
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_3_0() { return cExpressionExpCSParserRuleCall_3_0; }
	}

	public class QualificationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.QualificationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetsDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetsDefMultipleClassRefParserRuleCall_0_0 = (RuleCall)cTargetsDefAssignment_0.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContributionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContributionElementsContribExpParserRuleCall_2_0 = (RuleCall)cContributionAssignment_2.eContents().get(0);
		
		//QualificationDef:
		//	targetsDef=MultipleClassRef
		//	'using' contribution+=ElementsContribExp;
		@Override public ParserRule getRule() { return rule; }

		//targetsDef=MultipleClassRef 'using' contribution+=ElementsContribExp
		public Group getGroup() { return cGroup; }

		//targetsDef=MultipleClassRef
		public Assignment getTargetsDefAssignment_0() { return cTargetsDefAssignment_0; }

		//MultipleClassRef
		public RuleCall getTargetsDefMultipleClassRefParserRuleCall_0_0() { return cTargetsDefMultipleClassRefParserRuleCall_0_0; }

		//'using'
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//contribution+=ElementsContribExp
		public Assignment getContributionAssignment_2() { return cContributionAssignment_2; }

		//ElementsContribExp
		public RuleCall getContributionElementsContribExpParserRuleCall_2_0() { return cContributionElementsContribExpParserRuleCall_2_0; }
	}

	public class ElementsContribExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ElementsContribExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsPrecedingAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsPrecedingPrecedingKeyword_0_0_0 = (Keyword)cIsPrecedingAssignment_0_0.eContents().get(0);
		private final Assignment cIsImportedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsImportedImportedKeyword_0_1_0 = (Keyword)cIsImportedAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpCSParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ElementsContribExp:
		//	(isPreceding?='preceding' | isImported?='imported'?)? expression=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//(isPreceding?='preceding' | isImported?='imported'?)? expression=ExpCS
		public Group getGroup() { return cGroup; }

		//(isPreceding?='preceding' | isImported?='imported'?)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isPreceding?='preceding'
		public Assignment getIsPrecedingAssignment_0_0() { return cIsPrecedingAssignment_0_0; }

		//'preceding'
		public Keyword getIsPrecedingPrecedingKeyword_0_0_0() { return cIsPrecedingPrecedingKeyword_0_0_0; }

		//isImported?='imported'?
		public Assignment getIsImportedAssignment_0_1() { return cIsImportedAssignment_0_1; }

		//'imported'
		public Keyword getIsImportedImportedKeyword_0_1_0() { return cIsImportedImportedKeyword_0_1_0; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_1_0() { return cExpressionExpCSParserRuleCall_1_0; }
	}

	public class ScopeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ScopeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionDefSelectionDefParserRuleCall_0_0 = (RuleCall)cSelectionDefAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCurrentScopeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAlsoExportsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cAlsoExportsExportedScopeKeyword_3_1_0 = (Keyword)cAlsoExportsAssignment_3_1.eContents().get(0);
		private final Keyword cProvidesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cOccludingKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cSameScopeAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cSameScopeAddingKeyword_5_1_0 = (Keyword)cSameScopeAssignment_5_1.eContents().get(0);
		private final Assignment cEmptyScopeAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final Keyword cEmptyScopeResettingKeyword_5_2_0 = (Keyword)cEmptyScopeAssignment_5_2.eContents().get(0);
		private final Assignment cProvisionDefsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProvisionDefsProvisionDefParserRuleCall_6_0 = (RuleCall)cProvisionDefsAssignment_6.eContents().get(0);
		
		//ScopeDef:
		//	selectionDef=SelectionDef?
		//	'in' 'current-scope' ('and' alsoExports?='exported-scope')? 'provides' ('occluding' | sameScope?='adding' |
		//	emptyScope?='resetting')?
		//	provisionDefs+=ProvisionDef+;
		@Override public ParserRule getRule() { return rule; }

		//selectionDef=SelectionDef? 'in' 'current-scope' ('and' alsoExports?='exported-scope')? 'provides' ('occluding' |
		//sameScope?='adding' | emptyScope?='resetting')? provisionDefs+=ProvisionDef+
		public Group getGroup() { return cGroup; }

		//selectionDef=SelectionDef?
		public Assignment getSelectionDefAssignment_0() { return cSelectionDefAssignment_0; }

		//SelectionDef
		public RuleCall getSelectionDefSelectionDefParserRuleCall_0_0() { return cSelectionDefSelectionDefParserRuleCall_0_0; }

		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//'current-scope'
		public Keyword getCurrentScopeKeyword_2() { return cCurrentScopeKeyword_2; }

		//('and' alsoExports?='exported-scope')?
		public Group getGroup_3() { return cGroup_3; }

		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }

		//alsoExports?='exported-scope'
		public Assignment getAlsoExportsAssignment_3_1() { return cAlsoExportsAssignment_3_1; }

		//'exported-scope'
		public Keyword getAlsoExportsExportedScopeKeyword_3_1_0() { return cAlsoExportsExportedScopeKeyword_3_1_0; }

		//'provides'
		public Keyword getProvidesKeyword_4() { return cProvidesKeyword_4; }

		//('occluding' | sameScope?='adding' | emptyScope?='resetting')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//'occluding'
		public Keyword getOccludingKeyword_5_0() { return cOccludingKeyword_5_0; }

		//sameScope?='adding'
		public Assignment getSameScopeAssignment_5_1() { return cSameScopeAssignment_5_1; }

		//'adding'
		public Keyword getSameScopeAddingKeyword_5_1_0() { return cSameScopeAddingKeyword_5_1_0; }

		//emptyScope?='resetting'
		public Assignment getEmptyScopeAssignment_5_2() { return cEmptyScopeAssignment_5_2; }

		//'resetting'
		public Keyword getEmptyScopeResettingKeyword_5_2_0() { return cEmptyScopeResettingKeyword_5_2_0; }

		//provisionDefs+=ProvisionDef+
		public Assignment getProvisionDefsAssignment_6() { return cProvisionDefsAssignment_6; }

		//ProvisionDef
		public RuleCall getProvisionDefsProvisionDefParserRuleCall_6_0() { return cProvisionDefsProvisionDefParserRuleCall_6_0; }
	}

	public class SelectionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.SelectionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSelectionAllAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAllKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cExceptingKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExceptionPropertiesAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExceptionPropertiesExpCSParserRuleCall_1_0_2_1_0 = (RuleCall)cExceptionPropertiesAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_2_2 = (Group)cGroup_1_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_2_0 = (Keyword)cGroup_1_0_2_2.eContents().get(0);
		private final Assignment cExceptionPropertiesAssignment_1_0_2_2_1 = (Assignment)cGroup_1_0_2_2.eContents().get(1);
		private final RuleCall cExceptionPropertiesExpCSParserRuleCall_1_0_2_2_1_0 = (RuleCall)cExceptionPropertiesAssignment_1_0_2_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSelectionSpecificAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSelectedPropertiesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSelectedPropertiesExpCSParserRuleCall_1_1_1_0_0 = (RuleCall)cSelectedPropertiesAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cSelectedPropertiesAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cSelectedPropertiesExpCSParserRuleCall_1_1_1_1_1_0 = (RuleCall)cSelectedPropertiesAssignment_1_1_1_1_1.eContents().get(0);
		
		//SelectionDef:
		//	'for' ({SelectionAll} 'all' ('excepting' exceptionProperties+=ExpCS (',' exceptionProperties+=ExpCS)*)?
		//	| {SelectionSpecific} (selectedProperties+=ExpCS (',' selectedProperties+=ExpCS)*));
		@Override public ParserRule getRule() { return rule; }

		//'for' ({SelectionAll} 'all' ('excepting' exceptionProperties+=ExpCS (',' exceptionProperties+=ExpCS)*)? |
		//{SelectionSpecific} (selectedProperties+=ExpCS (',' selectedProperties+=ExpCS)*))
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//({SelectionAll} 'all' ('excepting' exceptionProperties+=ExpCS (',' exceptionProperties+=ExpCS)*)? | {SelectionSpecific}
		//(selectedProperties+=ExpCS (',' selectedProperties+=ExpCS)*))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{SelectionAll} 'all' ('excepting' exceptionProperties+=ExpCS (',' exceptionProperties+=ExpCS)*)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{SelectionAll}
		public Action getSelectionAllAction_1_0_0() { return cSelectionAllAction_1_0_0; }

		//'all'
		public Keyword getAllKeyword_1_0_1() { return cAllKeyword_1_0_1; }

		//('excepting' exceptionProperties+=ExpCS (',' exceptionProperties+=ExpCS)*)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//'excepting'
		public Keyword getExceptingKeyword_1_0_2_0() { return cExceptingKeyword_1_0_2_0; }

		//exceptionProperties+=ExpCS
		public Assignment getExceptionPropertiesAssignment_1_0_2_1() { return cExceptionPropertiesAssignment_1_0_2_1; }

		//ExpCS
		public RuleCall getExceptionPropertiesExpCSParserRuleCall_1_0_2_1_0() { return cExceptionPropertiesExpCSParserRuleCall_1_0_2_1_0; }

		//(',' exceptionProperties+=ExpCS)*
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }

		//','
		public Keyword getCommaKeyword_1_0_2_2_0() { return cCommaKeyword_1_0_2_2_0; }

		//exceptionProperties+=ExpCS
		public Assignment getExceptionPropertiesAssignment_1_0_2_2_1() { return cExceptionPropertiesAssignment_1_0_2_2_1; }

		//ExpCS
		public RuleCall getExceptionPropertiesExpCSParserRuleCall_1_0_2_2_1_0() { return cExceptionPropertiesExpCSParserRuleCall_1_0_2_2_1_0; }

		//{SelectionSpecific} (selectedProperties+=ExpCS (',' selectedProperties+=ExpCS)*)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{SelectionSpecific}
		public Action getSelectionSpecificAction_1_1_0() { return cSelectionSpecificAction_1_1_0; }

		//(selectedProperties+=ExpCS (',' selectedProperties+=ExpCS)*)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//selectedProperties+=ExpCS
		public Assignment getSelectedPropertiesAssignment_1_1_1_0() { return cSelectedPropertiesAssignment_1_1_1_0; }

		//ExpCS
		public RuleCall getSelectedPropertiesExpCSParserRuleCall_1_1_1_0_0() { return cSelectedPropertiesExpCSParserRuleCall_1_1_1_0_0; }

		//(',' selectedProperties+=ExpCS)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//selectedProperties+=ExpCS
		public Assignment getSelectedPropertiesAssignment_1_1_1_1_1() { return cSelectedPropertiesAssignment_1_1_1_1_1; }

		//ExpCS
		public RuleCall getSelectedPropertiesExpCSParserRuleCall_1_1_1_1_1_0() { return cSelectedPropertiesExpCSParserRuleCall_1_1_1_1_1_0; }
	}

	public class ProvisionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ProvisionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetsDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetsDefMultipleClassRefParserRuleCall_0_0 = (RuleCall)cTargetsDefAssignment_0.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContributionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContributionContributionDefParserRuleCall_2_0 = (RuleCall)cContributionAssignment_2.eContents().get(0);
		private final Assignment cOccludingDefsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOccludingDefsOccludingDefParserRuleCall_3_0 = (RuleCall)cOccludingDefsAssignment_3.eContents().get(0);
		
		//ProvisionDef:
		//	targetsDef=MultipleClassRef
		//	'using' contribution=ContributionDef
		//	occludingDefs+=OccludingDef*;
		@Override public ParserRule getRule() { return rule; }

		//targetsDef=MultipleClassRef 'using' contribution=ContributionDef occludingDefs+=OccludingDef*
		public Group getGroup() { return cGroup; }

		//targetsDef=MultipleClassRef
		public Assignment getTargetsDefAssignment_0() { return cTargetsDefAssignment_0; }

		//MultipleClassRef
		public RuleCall getTargetsDefMultipleClassRefParserRuleCall_0_0() { return cTargetsDefMultipleClassRefParserRuleCall_0_0; }

		//'using'
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//contribution=ContributionDef
		public Assignment getContributionAssignment_2() { return cContributionAssignment_2; }

		//ContributionDef
		public RuleCall getContributionContributionDefParserRuleCall_2_0() { return cContributionContributionDefParserRuleCall_2_0; }

		//occludingDefs+=OccludingDef*
		public Assignment getOccludingDefsAssignment_3() { return cOccludingDefsAssignment_3; }

		//OccludingDef
		public RuleCall getOccludingDefsOccludingDefParserRuleCall_3_0() { return cOccludingDefsOccludingDefParserRuleCall_3_0; }
	}

	public class ClassRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ClassRef");
		private final Assignment cClassNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClassNamePathNameCSParserRuleCall_0 = (RuleCall)cClassNameAssignment.eContents().get(0);
		
		//ClassRef:
		//	className=PathNameCS;
		@Override public ParserRule getRule() { return rule; }

		//className=PathNameCS
		public Assignment getClassNameAssignment() { return cClassNameAssignment; }

		//PathNameCS
		public RuleCall getClassNamePathNameCSParserRuleCall_0() { return cClassNamePathNameCSParserRuleCall_0; }
	}

	public class MultipleClassRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.MultipleClassRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassNamesPathNameCSParserRuleCall_0_0 = (RuleCall)cClassNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClassNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClassNamesPathNameCSParserRuleCall_1_1_0 = (RuleCall)cClassNamesAssignment_1_1.eContents().get(0);
		
		//MultipleClassRef:
		//	classNames+=PathNameCS (',' classNames+=PathNameCS)*;
		@Override public ParserRule getRule() { return rule; }

		//classNames+=PathNameCS (',' classNames+=PathNameCS)*
		public Group getGroup() { return cGroup; }

		//classNames+=PathNameCS
		public Assignment getClassNamesAssignment_0() { return cClassNamesAssignment_0; }

		//PathNameCS
		public RuleCall getClassNamesPathNameCSParserRuleCall_0_0() { return cClassNamesPathNameCSParserRuleCall_0_0; }

		//(',' classNames+=PathNameCS)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//classNames+=PathNameCS
		public Assignment getClassNamesAssignment_1_1() { return cClassNamesAssignment_1_1; }

		//PathNameCS
		public RuleCall getClassNamesPathNameCSParserRuleCall_1_1_0() { return cClassNamesPathNameCSParserRuleCall_1_1_0; }
	}

	public class OccludingDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.OccludingDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOccludingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContributionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContributionContributionDefParserRuleCall_1_0 = (RuleCall)cContributionAssignment_1.eContents().get(0);
		
		//OccludingDef:
		//	'occluding' contribution=ContributionDef;
		@Override public ParserRule getRule() { return rule; }

		//'occluding' contribution=ContributionDef
		public Group getGroup() { return cGroup; }

		//'occluding'
		public Keyword getOccludingKeyword_0() { return cOccludingKeyword_0; }

		//contribution=ContributionDef
		public Assignment getContributionAssignment_1() { return cContributionAssignment_1; }

		//ContributionDef
		public RuleCall getContributionContributionDefParserRuleCall_1_0() { return cContributionContributionDefParserRuleCall_1_0; }
	}

	public class ContributionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ContributionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContributionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContributionsElementsContribExpParserRuleCall_0_0 = (RuleCall)cContributionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContributionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContributionsElementsContribExpParserRuleCall_1_1_0 = (RuleCall)cContributionsAssignment_1_1.eContents().get(0);
		
		//ContributionDef:
		//	contributions+=ElementsContribExp (',' contributions+=ElementsContribExp)*;
		@Override public ParserRule getRule() { return rule; }

		//contributions+=ElementsContribExp (',' contributions+=ElementsContribExp)*
		public Group getGroup() { return cGroup; }

		//contributions+=ElementsContribExp
		public Assignment getContributionsAssignment_0() { return cContributionsAssignment_0; }

		//ElementsContribExp
		public RuleCall getContributionsElementsContribExpParserRuleCall_0_0() { return cContributionsElementsContribExpParserRuleCall_0_0; }

		//(',' contributions+=ElementsContribExp)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//contributions+=ElementsContribExp
		public Assignment getContributionsAssignment_1_1() { return cContributionsAssignment_1_1; }

		//ElementsContribExp
		public RuleCall getContributionsElementsContribExpParserRuleCall_1_1_0() { return cContributionsElementsContribExpParserRuleCall_1_1_0; }
	}

	public class ExportDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ExportDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionDefSelectionDefParserRuleCall_0_0 = (RuleCall)cSelectionDefAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExportedScopeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProvidesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProvisionDefsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProvisionDefsProvisionDefParserRuleCall_4_0 = (RuleCall)cProvisionDefsAssignment_4.eContents().get(0);
		
		//ExportDef:
		//	selectionDef=SelectionDef?
		//	'in' 'exported-scope' 'provides'
		//	provisionDefs+=ProvisionDef+;
		@Override public ParserRule getRule() { return rule; }

		//selectionDef=SelectionDef? 'in' 'exported-scope' 'provides' provisionDefs+=ProvisionDef+
		public Group getGroup() { return cGroup; }

		//selectionDef=SelectionDef?
		public Assignment getSelectionDefAssignment_0() { return cSelectionDefAssignment_0; }

		//SelectionDef
		public RuleCall getSelectionDefSelectionDefParserRuleCall_0_0() { return cSelectionDefSelectionDefParserRuleCall_0_0; }

		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//'exported-scope'
		public Keyword getExportedScopeKeyword_2() { return cExportedScopeKeyword_2; }

		//'provides'
		public Keyword getProvidesKeyword_3() { return cProvidesKeyword_3; }

		//provisionDefs+=ProvisionDef+
		public Assignment getProvisionDefsAssignment_4() { return cProvisionDefsAssignment_4; }

		//ProvisionDef
		public RuleCall getProvisionDefsProvisionDefParserRuleCall_4_0() { return cProvisionDefsProvisionDefParserRuleCall_4_0; }
	}

	public class HelpersSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.HelpersSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHelpersSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHelpersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassHelpersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassHelpersClassHelperParserRuleCall_3_0 = (RuleCall)cClassHelpersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HelpersSect:
		//	{HelpersSect}
		//	'helpers' '{'
		//	classHelpers+=ClassHelper*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{HelpersSect} 'helpers' '{' classHelpers+=ClassHelper* '}'
		public Group getGroup() { return cGroup; }

		//{HelpersSect}
		public Action getHelpersSectAction_0() { return cHelpersSectAction_0; }

		//'helpers'
		public Keyword getHelpersKeyword_1() { return cHelpersKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//classHelpers+=ClassHelper*
		public Assignment getClassHelpersAssignment_3() { return cClassHelpersAssignment_3; }

		//ClassHelper
		public RuleCall getClassHelpersClassHelperParserRuleCall_3_0() { return cClassHelpersClassHelperParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassHelperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ClassHelper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextPathNameCSParserRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHelpersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHelpersHelperDefParserRuleCall_2_0 = (RuleCall)cHelpersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassHelper:
		//	context=PathNameCS '{'
		//	helpers+=HelperDef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//context=PathNameCS '{' helpers+=HelperDef* '}'
		public Group getGroup() { return cGroup; }

		//context=PathNameCS
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//PathNameCS
		public RuleCall getContextPathNameCSParserRuleCall_0_0() { return cContextPathNameCSParserRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//helpers+=HelperDef*
		public Assignment getHelpersAssignment_2() { return cHelpersAssignment_2; }

		//HelperDef
		public RuleCall getHelpersHelperDefParserRuleCall_2_0() { return cHelpersHelperDefParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class HelperDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.HelperDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedSignatureTemplateSignatureCSParserRuleCall_0_0 = (RuleCall)cOwnedSignatureAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterDefParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_5_1_0 = (RuleCall)cOwnedTypeAssignment_5_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cHelperBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHelperBodyExpCSParserRuleCall_7_0 = (RuleCall)cHelperBodyAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Similar to Complete OCL definitions
		//HelperDef:
		//	ownedSignature=TemplateSignatureCS?
		//	name=UnrestrictedName
		//	'(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')' (':' ownedType=TypeExpCS)?
		//	':=' helperBody=ExpCS
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//ownedSignature=TemplateSignatureCS? name=UnrestrictedName '(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')'
		//(':' ownedType=TypeExpCS)? ':=' helperBody=ExpCS ';'
		public Group getGroup() { return cGroup; }

		//ownedSignature=TemplateSignatureCS?
		public Assignment getOwnedSignatureAssignment_0() { return cOwnedSignatureAssignment_0; }

		//TemplateSignatureCS
		public RuleCall getOwnedSignatureTemplateSignatureCSParserRuleCall_0_0() { return cOwnedSignatureTemplateSignatureCSParserRuleCall_0_0; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=ParameterDef (',' params+=ParameterDef)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_3_0_0() { return cParamsParameterDefParserRuleCall_3_0_0; }

		//(',' params+=ParameterDef)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_3_1_1_0() { return cParamsParameterDefParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(':' ownedType=TypeExpCS)?
		public Group getGroup_5() { return cGroup_5; }

		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_5_1() { return cOwnedTypeAssignment_5_1; }

		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_5_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_5_1_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_6() { return cColonEqualsSignKeyword_6; }

		//helperBody=ExpCS
		public Assignment getHelperBodyAssignment_7() { return cHelperBodyAssignment_7; }

		//ExpCS
		public RuleCall getHelperBodyExpCSParserRuleCall_7_0() { return cHelperBodyExpCSParserRuleCall_7_0; }

		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//ParameterDef base::ParameterCS:
		//	name=UnrestrictedName ':' ownedType=TypeExpCS
		@Override public ParserRule getRule() { return rule; }

		//name=UnrestrictedName ':' ownedType=TypeExpCS
		public Group getGroup() { return cGroup; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }

		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_0; }
	}

	public class PrimaryExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.PrimaryExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelfExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTupleLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMapLiteralExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCollectionLiteralExpCSParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLambdaLiteralExpCSParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypeLiteralExpCSParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNameExpCSParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTraceExpCSParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLookupExpCSParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
		//PrimaryExpCS essentialocl::ExpCS:
		//	NestedExpCS
		//	| IfExpCS
		//	| SelfExpCS
		//	| PrimitiveLiteralExpCS
		//	| TupleLiteralExpCS
		//	| MapLiteralExpCS
		//	| CollectionLiteralExpCS
		//	| LambdaLiteralExpCS
		//	| TypeLiteralExpCS
		//	| NameExpCS
		//	| TraceExpCS // DSL addition
		//	| LookupExpCS
		@Override public ParserRule getRule() { return rule; }

		//NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | MapLiteralExpCS | CollectionLiteralExpCS
		//| LambdaLiteralExpCS | TypeLiteralExpCS | NameExpCS | TraceExpCS // DSL addition
		//| LookupExpCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//NestedExpCS
		public RuleCall getNestedExpCSParserRuleCall_0() { return cNestedExpCSParserRuleCall_0; }

		//IfExpCS
		public RuleCall getIfExpCSParserRuleCall_1() { return cIfExpCSParserRuleCall_1; }

		//SelfExpCS
		public RuleCall getSelfExpCSParserRuleCall_2() { return cSelfExpCSParserRuleCall_2; }

		//PrimitiveLiteralExpCS
		public RuleCall getPrimitiveLiteralExpCSParserRuleCall_3() { return cPrimitiveLiteralExpCSParserRuleCall_3; }

		//TupleLiteralExpCS
		public RuleCall getTupleLiteralExpCSParserRuleCall_4() { return cTupleLiteralExpCSParserRuleCall_4; }

		//MapLiteralExpCS
		public RuleCall getMapLiteralExpCSParserRuleCall_5() { return cMapLiteralExpCSParserRuleCall_5; }

		//CollectionLiteralExpCS
		public RuleCall getCollectionLiteralExpCSParserRuleCall_6() { return cCollectionLiteralExpCSParserRuleCall_6; }

		//LambdaLiteralExpCS
		public RuleCall getLambdaLiteralExpCSParserRuleCall_7() { return cLambdaLiteralExpCSParserRuleCall_7; }

		//TypeLiteralExpCS
		public RuleCall getTypeLiteralExpCSParserRuleCall_8() { return cTypeLiteralExpCSParserRuleCall_8; }

		//NameExpCS
		public RuleCall getNameExpCSParserRuleCall_9() { return cNameExpCSParserRuleCall_9; }

		//TraceExpCS
		public RuleCall getTraceExpCSParserRuleCall_10() { return cTraceExpCSParserRuleCall_10; }

		//LookupExpCS
		public RuleCall getLookupExpCSParserRuleCall_11() { return cLookupExpCSParserRuleCall_11; }
	}

	public class TraceExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.TraceExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraceExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTraceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// DSL addition
		//TraceExpCS:
		//	{TraceExpCS}
		//	'trace';
		@Override public ParserRule getRule() { return rule; }

		//{TraceExpCS} 'trace'
		public Group getGroup() { return cGroup; }

		//{TraceExpCS}
		public Action getTraceExpCSAction_0() { return cTraceExpCSAction_0; }

		//'trace'
		public Keyword getTraceKeyword_1() { return cTraceKeyword_1; }
	}

	public class LookupExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.cs2as.CS2ASDSL.LookupExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLookupKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cFromExpAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cFromExpLookupFromKeyword_0_1_0 = (Keyword)cFromExpAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsNavigatingArgExpCSParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsNavigatingArgExpCSParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LookupExpCS:
		//	('lookup' | fromExp?='lookupFrom') '(' args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')';
		@Override public ParserRule getRule() { return rule; }

		//('lookup' | fromExp?='lookupFrom') '(' args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')'
		public Group getGroup() { return cGroup; }

		//('lookup' | fromExp?='lookupFrom')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'lookup'
		public Keyword getLookupKeyword_0_0() { return cLookupKeyword_0_0; }

		//fromExp?='lookupFrom'
		public Assignment getFromExpAssignment_0_1() { return cFromExpAssignment_0_1; }

		//'lookupFrom'
		public Keyword getFromExpLookupFromKeyword_0_1_0() { return cFromExpLookupFromKeyword_0_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args+=NavigatingArgExpCS
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//NavigatingArgExpCS
		public RuleCall getArgsNavigatingArgExpCSParserRuleCall_2_0() { return cArgsNavigatingArgExpCSParserRuleCall_2_0; }

		//(',' args+=NavigatingArgExpCS)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//args+=NavigatingArgExpCS
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//NavigatingArgExpCS
		public RuleCall getArgsNavigatingArgExpCSParserRuleCall_3_1_0() { return cArgsNavigatingArgExpCSParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final CSDeclElements pCSDecl;
	private final ASDeclElements pASDecl;
	private final ImportCSElements pImportCS;
	private final MappingSectElements pMappingSect;
	private final ClassMapElements pClassMap;
	private final ClassMapStmntElements pClassMapStmnt;
	private final PropertyMapElements pPropertyMap;
	private final DisambiguationSectElements pDisambiguationSect;
	private final ClassDisambiguationElements pClassDisambiguation;
	private final ClassDisambiguationStmntElements pClassDisambiguationStmnt;
	private final DisambiguationDefElements pDisambiguationDef;
	private final NameResolutionSectElements pNameResolutionSect;
	private final TargetsElements pTargets;
	private final TargetElements pTarget;
	private final InputsElements pInputs;
	private final InputElements pInput;
	private final ProvidersElements pProviders;
	private final ProviderElements pProvider;
	private final ProviderVarsElements pProviderVars;
	private final ProviderStmntElements pProviderStmnt;
	private final FilterDefElements pFilterDef;
	private final QualificationDefElements pQualificationDef;
	private final ElementsContribExpElements pElementsContribExp;
	private final ScopeDefElements pScopeDef;
	private final SelectionDefElements pSelectionDef;
	private final ProvisionDefElements pProvisionDef;
	private final ClassRefElements pClassRef;
	private final MultipleClassRefElements pMultipleClassRef;
	private final OccludingDefElements pOccludingDef;
	private final ContributionDefElements pContributionDef;
	private final ExportDefElements pExportDef;
	private final HelpersSectElements pHelpersSect;
	private final ClassHelperElements pClassHelper;
	private final HelperDefElements pHelperDef;
	private final ParameterDefElements pParameterDef;
	private final PrimaryExpCSElements pPrimaryExpCS;
	private final TraceExpCSElements pTraceExpCS;
	private final LookupExpCSElements pLookupExpCS;
	
	private final Grammar grammar;

	private final EssentialOCLGrammarAccess gaEssentialOCL;

	private final BaseGrammarAccess gaBase;

	@Inject
	public CS2ASDSLGrammarAccess(GrammarProvider grammarProvider,
		EssentialOCLGrammarAccess gaEssentialOCL,
		BaseGrammarAccess gaBase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEssentialOCL = gaEssentialOCL;
		this.gaBase = gaBase;
		this.pModel = new ModelElements();
		this.pCSDecl = new CSDeclElements();
		this.pASDecl = new ASDeclElements();
		this.pImportCS = new ImportCSElements();
		this.pMappingSect = new MappingSectElements();
		this.pClassMap = new ClassMapElements();
		this.pClassMapStmnt = new ClassMapStmntElements();
		this.pPropertyMap = new PropertyMapElements();
		this.pDisambiguationSect = new DisambiguationSectElements();
		this.pClassDisambiguation = new ClassDisambiguationElements();
		this.pClassDisambiguationStmnt = new ClassDisambiguationStmntElements();
		this.pDisambiguationDef = new DisambiguationDefElements();
		this.pNameResolutionSect = new NameResolutionSectElements();
		this.pTargets = new TargetsElements();
		this.pTarget = new TargetElements();
		this.pInputs = new InputsElements();
		this.pInput = new InputElements();
		this.pProviders = new ProvidersElements();
		this.pProvider = new ProviderElements();
		this.pProviderVars = new ProviderVarsElements();
		this.pProviderStmnt = new ProviderStmntElements();
		this.pFilterDef = new FilterDefElements();
		this.pQualificationDef = new QualificationDefElements();
		this.pElementsContribExp = new ElementsContribExpElements();
		this.pScopeDef = new ScopeDefElements();
		this.pSelectionDef = new SelectionDefElements();
		this.pProvisionDef = new ProvisionDefElements();
		this.pClassRef = new ClassRefElements();
		this.pMultipleClassRef = new MultipleClassRefElements();
		this.pOccludingDef = new OccludingDefElements();
		this.pContributionDef = new ContributionDefElements();
		this.pExportDef = new ExportDefElements();
		this.pHelpersSect = new HelpersSectElements();
		this.pClassHelper = new ClassHelperElements();
		this.pHelperDef = new HelperDefElements();
		this.pParameterDef = new ParameterDefElements();
		this.pPrimaryExpCS = new PrimaryExpCSElements();
		this.pTraceExpCS = new TraceExpCSElements();
		this.pLookupExpCS = new LookupExpCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.york.cs.cs2as.CS2ASDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}

	
	//Model:
	//	csDecl=CSDecl
	//	asDecl=ASDecl (mappingSect=MappingSect
	//	& disambiguationSect=DisambiguationSect?
	//	& nameresoSect=NameResolutionSect?
	//	& helpersSect=HelpersSect?);
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//CSDecl:
	//	'source' metamodels+=ImportCS (',' metamodels+=ImportCS)*;
	public CSDeclElements getCSDeclAccess() {
		return pCSDecl;
	}
	
	public ParserRule getCSDeclRule() {
		return getCSDeclAccess().getRule();
	}

	//ASDecl:
	//	'target' metamodels+=ImportCS (',' metamodels+=ImportCS)*;
	public ASDeclElements getASDeclAccess() {
		return pASDecl;
	}
	
	public ParserRule getASDeclRule() {
		return getASDeclAccess().getRule();
	}

	//ImportCS base::ImportCS:
	//	(name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?
	public ImportCSElements getImportCSAccess() {
		return pImportCS;
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	//MappingSect:
	//	{MappingSect}
	//	'mappings' '{'
	//	mappings+=ClassMap*
	//	'}';
	public MappingSectElements getMappingSectAccess() {
		return pMappingSect;
	}
	
	public ParserRule getMappingSectRule() {
		return getMappingSectAccess().getRule();
	}

	//ClassMap:
	//	'map' to=PathNameCS 'from' from=PathNameCS ('when' rule=SIMPLE_ID)? '{'
	//	statements+=ClassMapStmnt*
	//	'}';
	public ClassMapElements getClassMapAccess() {
		return pClassMap;
	}
	
	public ParserRule getClassMapRule() {
		return getClassMapAccess().getRule();
	}

	//ClassMapStmnt:
	//	PropertyMap
	//	';';
	public ClassMapStmntElements getClassMapStmntAccess() {
		return pClassMapStmnt;
	}
	
	public ParserRule getClassMapStmntRule() {
		return getClassMapStmntAccess().getRule();
	}

	//PropertyMap:
	//	redefine?='redefine'? propName=SIMPLE_ID ':=' propInit=ExpCS;
	public PropertyMapElements getPropertyMapAccess() {
		return pPropertyMap;
	}
	
	public ParserRule getPropertyMapRule() {
		return getPropertyMapAccess().getRule();
	}

	//DisambiguationSect:
	//	{DisambiguationSect}
	//	'disambiguation' '{'
	//	disambiguations+=ClassDisambiguation*
	//	'}';
	public DisambiguationSectElements getDisambiguationSectAccess() {
		return pDisambiguationSect;
	}
	
	public ParserRule getDisambiguationSectRule() {
		return getDisambiguationSectAccess().getRule();
	}

	//ClassDisambiguation:
	//	class=PathNameCS '{'
	//	statements+=ClassDisambiguationStmnt*
	//	'}';
	public ClassDisambiguationElements getClassDisambiguationAccess() {
		return pClassDisambiguation;
	}
	
	public ParserRule getClassDisambiguationRule() {
		return getClassDisambiguationAccess().getRule();
	}

	//ClassDisambiguationStmnt:
	//	DisambiguationDef
	//	';';
	public ClassDisambiguationStmntElements getClassDisambiguationStmntAccess() {
		return pClassDisambiguationStmnt;
	}
	
	public ParserRule getClassDisambiguationStmntRule() {
		return getClassDisambiguationStmntAccess().getRule();
	}

	//DisambiguationDef:
	//	name=SIMPLE_ID ':=' exp=ExpCS;
	public DisambiguationDefElements getDisambiguationDefAccess() {
		return pDisambiguationDef;
	}
	
	public ParserRule getDisambiguationDefRule() {
		return getDisambiguationDefAccess().getRule();
	}

	//NameResolutionSect:
	//	{NameResolutionSect}
	//	'name-resolution' '{'
	//	targetsDef=Targets
	//	inputsDef=Inputs
	//	providersDef=Providers
	//	'}';
	public NameResolutionSectElements getNameResolutionSectAccess() {
		return pNameResolutionSect;
	}
	
	public ParserRule getNameResolutionSectRule() {
		return getNameResolutionSectAccess().getRule();
	}

	//Targets:
	//	{Targets}
	//	'targets' '{'
	//	targets+=Target*
	//	'}';
	public TargetsElements getTargetsAccess() {
		return pTargets;
	}
	
	public ParserRule getTargetsRule() {
		return getTargetsAccess().getRule();
	}

	//Target:
	//	classRef=ClassRef ('using' propRef=PathNameCS)?
	//	filter=FilterDef? ('qualifies' qualifications+=QualificationDef (',' qualifications+=QualificationDef)*)?
	//	';';
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	//Inputs:
	//	{Inputs}
	//	'inputs' '{'
	//	inputs+=Input*
	//	'}';
	public InputsElements getInputsAccess() {
		return pInputs;
	}
	
	public ParserRule getInputsRule() {
		return getInputsAccess().getRule();
	}

	//Input:
	//	qualifier?='qualifier'?
	//	classRef=ClassRef ('using' propRef=PathNameCS)? ';';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Providers:
	//	{Providers}
	//	'providers' '{'
	//	providers+=Provider*
	//	'}';
	public ProvidersElements getProvidersAccess() {
		return pProviders;
	}
	
	public ParserRule getProvidersRule() {
		return getProvidersAccess().getRule();
	}

	//Provider:
	//	classRef=PathNameCS '{'
	//	varsDecl=ProviderVars?
	//	statements+=ProviderStmnt*
	//	'}';
	public ProviderElements getProviderAccess() {
		return pProvider;
	}
	
	public ParserRule getProviderRule() {
		return getProviderAccess().getRule();
	}

	//ProviderVars:
	//	'vars' varDecl+=LetVariableCS (',' varDecl+=LetVariableCS)* ';';
	public ProviderVarsElements getProviderVarsAccess() {
		return pProviderVars;
	}
	
	public ParserRule getProviderVarsRule() {
		return getProviderVarsAccess().getRule();
	}

	//ProviderStmnt:
	//	(ScopeDef | ExportDef) ';';
	public ProviderStmntElements getProviderStmntAccess() {
		return pProviderStmnt;
	}
	
	public ParserRule getProviderStmntRule() {
		return getProviderStmntAccess().getRule();
	}

	//FilterDef:
	//	'filtered' ('by' params+=ParameterDef (',' params+=ParameterDef)*)? 'when' expression=ExpCS;
	public FilterDefElements getFilterDefAccess() {
		return pFilterDef;
	}
	
	public ParserRule getFilterDefRule() {
		return getFilterDefAccess().getRule();
	}

	//QualificationDef:
	//	targetsDef=MultipleClassRef
	//	'using' contribution+=ElementsContribExp;
	public QualificationDefElements getQualificationDefAccess() {
		return pQualificationDef;
	}
	
	public ParserRule getQualificationDefRule() {
		return getQualificationDefAccess().getRule();
	}

	//ElementsContribExp:
	//	(isPreceding?='preceding' | isImported?='imported'?)? expression=ExpCS;
	public ElementsContribExpElements getElementsContribExpAccess() {
		return pElementsContribExp;
	}
	
	public ParserRule getElementsContribExpRule() {
		return getElementsContribExpAccess().getRule();
	}

	//ScopeDef:
	//	selectionDef=SelectionDef?
	//	'in' 'current-scope' ('and' alsoExports?='exported-scope')? 'provides' ('occluding' | sameScope?='adding' |
	//	emptyScope?='resetting')?
	//	provisionDefs+=ProvisionDef+;
	public ScopeDefElements getScopeDefAccess() {
		return pScopeDef;
	}
	
	public ParserRule getScopeDefRule() {
		return getScopeDefAccess().getRule();
	}

	//SelectionDef:
	//	'for' ({SelectionAll} 'all' ('excepting' exceptionProperties+=ExpCS (',' exceptionProperties+=ExpCS)*)?
	//	| {SelectionSpecific} (selectedProperties+=ExpCS (',' selectedProperties+=ExpCS)*));
	public SelectionDefElements getSelectionDefAccess() {
		return pSelectionDef;
	}
	
	public ParserRule getSelectionDefRule() {
		return getSelectionDefAccess().getRule();
	}

	//ProvisionDef:
	//	targetsDef=MultipleClassRef
	//	'using' contribution=ContributionDef
	//	occludingDefs+=OccludingDef*;
	public ProvisionDefElements getProvisionDefAccess() {
		return pProvisionDef;
	}
	
	public ParserRule getProvisionDefRule() {
		return getProvisionDefAccess().getRule();
	}

	//ClassRef:
	//	className=PathNameCS;
	public ClassRefElements getClassRefAccess() {
		return pClassRef;
	}
	
	public ParserRule getClassRefRule() {
		return getClassRefAccess().getRule();
	}

	//MultipleClassRef:
	//	classNames+=PathNameCS (',' classNames+=PathNameCS)*;
	public MultipleClassRefElements getMultipleClassRefAccess() {
		return pMultipleClassRef;
	}
	
	public ParserRule getMultipleClassRefRule() {
		return getMultipleClassRefAccess().getRule();
	}

	//OccludingDef:
	//	'occluding' contribution=ContributionDef;
	public OccludingDefElements getOccludingDefAccess() {
		return pOccludingDef;
	}
	
	public ParserRule getOccludingDefRule() {
		return getOccludingDefAccess().getRule();
	}

	//ContributionDef:
	//	contributions+=ElementsContribExp (',' contributions+=ElementsContribExp)*;
	public ContributionDefElements getContributionDefAccess() {
		return pContributionDef;
	}
	
	public ParserRule getContributionDefRule() {
		return getContributionDefAccess().getRule();
	}

	//ExportDef:
	//	selectionDef=SelectionDef?
	//	'in' 'exported-scope' 'provides'
	//	provisionDefs+=ProvisionDef+;
	public ExportDefElements getExportDefAccess() {
		return pExportDef;
	}
	
	public ParserRule getExportDefRule() {
		return getExportDefAccess().getRule();
	}

	//HelpersSect:
	//	{HelpersSect}
	//	'helpers' '{'
	//	classHelpers+=ClassHelper*
	//	'}';
	public HelpersSectElements getHelpersSectAccess() {
		return pHelpersSect;
	}
	
	public ParserRule getHelpersSectRule() {
		return getHelpersSectAccess().getRule();
	}

	//ClassHelper:
	//	context=PathNameCS '{'
	//	helpers+=HelperDef*
	//	'}';
	public ClassHelperElements getClassHelperAccess() {
		return pClassHelper;
	}
	
	public ParserRule getClassHelperRule() {
		return getClassHelperAccess().getRule();
	}

	//// Similar to Complete OCL definitions
	//HelperDef:
	//	ownedSignature=TemplateSignatureCS?
	//	name=UnrestrictedName
	//	'(' (params+=ParameterDef (',' params+=ParameterDef)*)? ')' (':' ownedType=TypeExpCS)?
	//	':=' helperBody=ExpCS
	//	';';
	public HelperDefElements getHelperDefAccess() {
		return pHelperDef;
	}
	
	public ParserRule getHelperDefRule() {
		return getHelperDefAccess().getRule();
	}

	//ParameterDef base::ParameterCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS
	public ParameterDefElements getParameterDefAccess() {
		return pParameterDef;
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}

	/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
	//PrimaryExpCS essentialocl::ExpCS:
	//	NestedExpCS
	//	| IfExpCS
	//	| SelfExpCS
	//	| PrimitiveLiteralExpCS
	//	| TupleLiteralExpCS
	//	| MapLiteralExpCS
	//	| CollectionLiteralExpCS
	//	| LambdaLiteralExpCS
	//	| TypeLiteralExpCS
	//	| NameExpCS
	//	| TraceExpCS // DSL addition
	//	| LookupExpCS
	public PrimaryExpCSElements getPrimaryExpCSAccess() {
		return pPrimaryExpCS;
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//// DSL addition
	//TraceExpCS:
	//	{TraceExpCS}
	//	'trace';
	public TraceExpCSElements getTraceExpCSAccess() {
		return pTraceExpCS;
	}
	
	public ParserRule getTraceExpCSRule() {
		return getTraceExpCSAccess().getRule();
	}

	//LookupExpCS:
	//	('lookup' | fromExp?='lookupFrom') '(' args+=NavigatingArgExpCS (',' args+=NavigatingArgExpCS)* ')';
	public LookupExpCSElements getLookupExpCSAccess() {
		return pLookupExpCS;
	}
	
	public ParserRule getLookupExpCSRule() {
		return getLookupExpCSAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLReservedKeyword:
	//	'and'
	//	| 'else'
	//	| 'endif'
	//	| 'if'
	//	| 'implies'
	//	| 'in'
	//	| 'let'
	//	| 'not'
	//	| 'or'
	//	| 'then'
	//	| 'xor';
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnaryOperatorName:
	//	'-' | 'not';
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLInfixOperatorName:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'or' | 'xor' | 'implies';
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLNavigationOperatorName:
	//	'.' | '->' | '?.' | '?->';
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}

	//BinaryOperatorName:
	//	InfixOperatorName | NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaEssentialOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}

	//InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaEssentialOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}

	//NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName;
	public EssentialOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaEssentialOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}

	//UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaEssentialOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Names
	////---------------------------------------------------------------------
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnrestrictedName:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaEssentialOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnreservedName:
	//	UnrestrictedName
	//	| CollectionTypeIdentifier
	//	| PrimitiveTypeIdentifier
	//	| 'Map'
	//	| 'Tuple';
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//URIPathNameCS base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS base::PathElementCS:
	//	name=UnrestrictedName | {base::PathElementWithURICS} uri=URI
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Types
	////---------------------------------------------------------------------
	//PrimitiveTypeIdentifier:
	//	'Boolean'
	//	| 'Integer'
	//	| 'Real'
	//	| 'String'
	//	| 'UnlimitedNatural'
	//	| 'OclAny'
	//	| 'OclInvalid'
	//	| 'OclVoid';
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaEssentialOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//PrimitiveTypeCS base::PrimitiveTypeRefCS:
	//	name=PrimitiveTypeIdentifier
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier:
	//	'Set'
	//	| 'Bag'
	//	| 'Sequence'
	//	| 'Collection'
	//	| 'OrderedSet';
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MapTypeCS:
	//	name='Map' ('(' ownedKeyType=TypeExpCS ',' ownedValueType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaEssentialOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}

	//TupleTypeCS base::TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=TuplePartCS (',' ownedParts+=TuplePartCS)*)? ')')?
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS base::TuplePartCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Literals
	////---------------------------------------------------------------------
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	ownedExpression=ExpCS ('..' ownedLastExpression=ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=PatternExpCS (',' ownedParts+=PatternExpCS)* ('++' restVariableName=Identifier))?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaEssentialOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}

	//ShadowPartCS:
	//	referredProperty=[pivot::Property|UnrestrictedName] '=' ownedInitExpression=(ExpCS | PatternExpCS);
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaEssentialOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}

	//PatternExpCS:
	//	patternVariableName=UnrestrictedName? ':' ownedPatternType=TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaEssentialOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}

	//LambdaLiteralExpCS:
	//	'Lambda' '{' ownedExpressionCS=ExpCS '}';
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaEssentialOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}

	//MapLiteralExpCS:
	//	ownedType=MapTypeCS '{' (ownedParts+=MapLiteralPartCS (',' ownedParts+=MapLiteralPartCS)*)? '}';
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaEssentialOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}

	//MapLiteralPartCS:
	//	ownedKey=ExpCS '<-' ownedValue=ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaEssentialOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS
	//	| StringLiteralExpCS
	//	| BooleanLiteralExpCS
	//	| UnlimitedNaturalLiteralExpCS
	//	| InvalidLiteralExpCS
	//	| NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}';
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	symbol='true'
	//	| symbol='false';
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralCS base::TypedRefCS:
	//	PrimitiveTypeCS
	//	| CollectionTypeCS
	//	| MapTypeCS
	//	| TupleTypeCS
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ('{' ownedPatternGuard=ExpCS '}')?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS base::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS) ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Expressions
	////---------------------------------------------------------------------
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	////  that let is right associative, whereas infix operators are left associative.
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	//// is
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	/// * An expression elaborates a prefixed expression with zero or more binary operator and expression suffixes.
	// * An optionally prefixed let expression is permitted except when suffixed with further expressions.* / ExpCS:
	//	PrefixedPrimaryExpCS ({InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	/// * A prefixed let expression elaborates a let expression with zero or more unary prefix operators. * / PrefixedLetExpCS
	//ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaEssentialOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}

	/// * A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. * /
	//PrefixedPrimaryExpCS ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | super::PrimaryExpCS
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}

	/// * A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.* / NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?='@'
	//	'pre')?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.* /
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} '{' ((ownedParts+=ShadowPartCS (',' ownedParts+=ShadowPartCS)*)?
	//	| value=StringLiteral) '}';
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaEssentialOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for template specialisations and operations arguments.* /
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} '(' (ownedArguments+=NavigatingArgCS ownedArguments+=NavigatingCommaArgCS*
	//	(ownedArguments+=NavigatingSemiArgCS ownedArguments+=NavigatingCommaArgCS*)? (ownedArguments+=NavigatingBarArgCS
	//	ownedArguments+=NavigatingCommaArgCS*)*)? ')';
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaEssentialOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}

	/// * A square bracket clause is a generalized rule for association class qualifiers and roles.* / SquareBracketedClauseCS:
	//	'[' ownedTerms+=ExpCS (',' ownedTerms+=ExpCS)* ']';
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaEssentialOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}

	/// * A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. * / NavigatingArgCS:
	//	ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? | 'in'
	//	ownedInitExpression=ExpCS)? | ':' ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. * /
	//NavigatingBarArgCS NavigatingArgCS:
	//	prefix='|' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. * / NavigatingCommaArgCS NavigatingArgCS:
	//	prefix=',' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? | 'in'
	//	ownedInitExpression=ExpCS)?
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. * /
	//NavigatingSemiArgCS NavigatingArgCS:
	//	prefix=';' ownedNameExpression=NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	//NavigatingArgExpCS ExpCS:
	//	ExpCS
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaEssentialOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//IfExpCS:
	//	'if' ownedCondition=(ExpCS | PatternExpCS)
	//	'then' ownedThenExpression=ExpCS
	//	//	ifThenExpressions+=IfThenExpCS
	//	ownedIfThenExpressions+=ElseIfThenExpCS*
	//	'else' ownedElseExpression=ExpCS
	//	'endif';
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	////IfThenExpCS returns IfThenExpCS:
	////	'if' condition=ExpCS
	////	'then' thenExpression=ExpCS
	////;
	//ElseIfThenExpCS IfThenExpCS:
	//	'elseif' ownedCondition=ExpCS
	//	'then' ownedThenExpression=ExpCS
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaEssentialOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}

	//LetExpCS:
	//	'let' ownedVariables+=LetVariableCS (',' ownedVariables+=LetVariableCS)*
	//	'in' ownedInExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (':' ownedType=TypeExpCS)? '='
	//	ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	'(' ownedExpression=ExpCS ')';
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}

	//MultiplicityBoundsCS:
	//	lowerBound=LOWER ('..' upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaBase.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityCS:
	//	'[' (MultiplicityBoundsCS | MultiplicityStringCS) ('|?' | isNullFree?='|1')? ']';
	public BaseGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaBase.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//MultiplicityStringCS:
	//	stringBounds=('*' | '+' | '?');
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaBase.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaBase.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS PathElementCS:
	//	name=super::UnrestrictedName
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaBase.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS PathElementCS:
	//	name=super::UnreservedName
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaBase.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS (',' ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaBase.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}

	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaBase.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}

	//TemplateSignatureCS:
	//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')';
	public BaseGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaBase.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}

	//TypeParameterCS:
	//	name=super::UnrestrictedName ('extends' ownedExtends+=TypedRefCS ('&&' ownedExtends+=TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaBase.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}

	//TypeRefCS:
	//	TypedRefCS | WildcardTypeRefCS;
	public BaseGrammarAccess.TypeRefCSElements getTypeRefCSAccess() {
		return gaBase.getTypeRefCSAccess();
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}

	//TypedRefCS:
	//	TypedTypeRefCS;
	public BaseGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaBase.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}

	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ('(' ownedBinding=TemplateBindingCS ')')?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaBase.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}

	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} '?' ('extends' ownedExtends=TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaBase.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaBase.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaBase.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	/// * A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. * /
	//LOWER ecore::EInt:
	//	INT
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaBase.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	/// * A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// * / NUMBER_LITERAL BigNumber:
	//	INT
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaBase.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	/// * An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. * /
	//UPPER ecore::EInt:
	//	INT | '*'
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaBase.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaBase.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaBase.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaBase.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//	'"' (ESCAPED_CHARACTER | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaBase.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"'" (ESCAPED_CHARACTER | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaBase.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaBase.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaBase.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaBase.getESCAPED_IDRule();
	} 

	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaBase.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaBase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaBase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaBase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBase.getANY_OTHERRule();
	} 
}
