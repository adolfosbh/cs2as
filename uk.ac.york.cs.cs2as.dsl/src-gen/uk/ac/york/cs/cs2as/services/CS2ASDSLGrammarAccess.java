/*
 * generated by Xtext
 */
package uk.ac.york.cs.cs2as.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.emf.ecore.xcore.services.XcoreGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CS2ASDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCsDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCsDeclCSDeclParserRuleCall_0_0 = (RuleCall)cCsDeclAssignment_0.eContents().get(0);
		private final Assignment cAsDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsDeclASDeclParserRuleCall_1_0 = (RuleCall)cAsDeclAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cMappingSectAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cMappingSectMappingSectParserRuleCall_2_0_0 = (RuleCall)cMappingSectAssignment_2_0.eContents().get(0);
		private final Assignment cDisambiguationSectAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0 = (RuleCall)cDisambiguationSectAssignment_2_1.eContents().get(0);
		private final Assignment cNameresoSectAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cNameresoSectNameResolutionSectParserRuleCall_2_2_0 = (RuleCall)cNameresoSectAssignment_2_2.eContents().get(0);
		private final Assignment cHelpersSectAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cHelpersSectHelpersSectParserRuleCall_2_3_0 = (RuleCall)cHelpersSectAssignment_2_3.eContents().get(0);
		
		//Model:
		//	csDecl=CSDecl asDecl=ASDecl (mappingSect=MappingSect & disambiguationSect=DisambiguationSect? &
		//	nameresoSect=NameResolutionSect? & helpersSect=HelpersSect?);
		@Override public ParserRule getRule() { return rule; }

		//csDecl=CSDecl asDecl=ASDecl (mappingSect=MappingSect & disambiguationSect=DisambiguationSect? &
		//nameresoSect=NameResolutionSect? & helpersSect=HelpersSect?)
		public Group getGroup() { return cGroup; }

		//csDecl=CSDecl
		public Assignment getCsDeclAssignment_0() { return cCsDeclAssignment_0; }

		//CSDecl
		public RuleCall getCsDeclCSDeclParserRuleCall_0_0() { return cCsDeclCSDeclParserRuleCall_0_0; }

		//asDecl=ASDecl
		public Assignment getAsDeclAssignment_1() { return cAsDeclAssignment_1; }

		//ASDecl
		public RuleCall getAsDeclASDeclParserRuleCall_1_0() { return cAsDeclASDeclParserRuleCall_1_0; }

		//mappingSect=MappingSect & disambiguationSect=DisambiguationSect? & nameresoSect=NameResolutionSect? &
		//helpersSect=HelpersSect?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//mappingSect=MappingSect
		public Assignment getMappingSectAssignment_2_0() { return cMappingSectAssignment_2_0; }

		//MappingSect
		public RuleCall getMappingSectMappingSectParserRuleCall_2_0_0() { return cMappingSectMappingSectParserRuleCall_2_0_0; }

		//disambiguationSect=DisambiguationSect?
		public Assignment getDisambiguationSectAssignment_2_1() { return cDisambiguationSectAssignment_2_1; }

		//DisambiguationSect
		public RuleCall getDisambiguationSectDisambiguationSectParserRuleCall_2_1_0() { return cDisambiguationSectDisambiguationSectParserRuleCall_2_1_0; }

		//nameresoSect=NameResolutionSect?
		public Assignment getNameresoSectAssignment_2_2() { return cNameresoSectAssignment_2_2; }

		//NameResolutionSect
		public RuleCall getNameresoSectNameResolutionSectParserRuleCall_2_2_0() { return cNameresoSectNameResolutionSectParserRuleCall_2_2_0; }

		//helpersSect=HelpersSect?
		public Assignment getHelpersSectAssignment_2_3() { return cHelpersSectAssignment_2_3; }

		//HelpersSect
		public RuleCall getHelpersSectHelpersSectParserRuleCall_2_3_0() { return cHelpersSectHelpersSectParserRuleCall_2_3_0; }
	}

	public class CSDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0 = (RuleCall)cImportedNamespaceAssignment_1_0.eContents().get(0);
		private final Assignment cImportedObjectAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cImportedObjectEObjectCrossReference_1_1_0 = (CrossReference)cImportedObjectAssignment_1_1.eContents().get(0);
		private final RuleCall cImportedObjectEObjectQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cImportedObjectEObjectCrossReference_1_1_0.eContents().get(1);
		
		//CSDecl:
		//	"source" (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName]);
		@Override public ParserRule getRule() { return rule; }

		//"source" (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName])
		public Group getGroup() { return cGroup; }

		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1_0() { return cImportedNamespaceAssignment_1_0; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0; }

		//importedObject=[ecore::EObject|QualifiedName]
		public Assignment getImportedObjectAssignment_1_1() { return cImportedObjectAssignment_1_1; }

		//[ecore::EObject|QualifiedName]
		public CrossReference getImportedObjectEObjectCrossReference_1_1_0() { return cImportedObjectEObjectCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getImportedObjectEObjectQualifiedNameParserRuleCall_1_1_0_1() { return cImportedObjectEObjectQualifiedNameParserRuleCall_1_1_0_1; }
	}

	public class ASDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0 = (RuleCall)cImportedNamespaceAssignment_1_0.eContents().get(0);
		private final Assignment cImportedObjectAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cImportedObjectEObjectCrossReference_1_1_0 = (CrossReference)cImportedObjectAssignment_1_1.eContents().get(0);
		private final RuleCall cImportedObjectEObjectQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cImportedObjectEObjectCrossReference_1_1_0.eContents().get(1);
		
		//ASDecl:
		//	"target" (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName]);
		@Override public ParserRule getRule() { return rule; }

		//"target" (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName])
		public Group getGroup() { return cGroup; }

		//"target"
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1_0() { return cImportedNamespaceAssignment_1_0; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0; }

		//importedObject=[ecore::EObject|QualifiedName]
		public Assignment getImportedObjectAssignment_1_1() { return cImportedObjectAssignment_1_1; }

		//[ecore::EObject|QualifiedName]
		public CrossReference getImportedObjectEObjectCrossReference_1_1_0() { return cImportedObjectEObjectCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getImportedObjectEObjectQualifiedNameParserRuleCall_1_1_0_1() { return cImportedObjectEObjectQualifiedNameParserRuleCall_1_1_0_1; }
	}

	public class MappingSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMappingsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsClassMapParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////ImportCS returns base::ImportCS:
		////	(name=Identifier ':')? ownedPathName=URIPathNameCS (isAll?='::*')?
		////;
		//MappingSect:
		//	{MappingSect} "mappings" "{" mappings+=ClassMap* "}";
		@Override public ParserRule getRule() { return rule; }

		//{MappingSect} "mappings" "{" mappings+=ClassMap* "}"
		public Group getGroup() { return cGroup; }

		//{MappingSect}
		public Action getMappingSectAction_0() { return cMappingSectAction_0; }

		//"mappings"
		public Keyword getMappingsKeyword_1() { return cMappingsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//mappings+=ClassMap*
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }

		//ClassMap
		public RuleCall getMappingsClassMapParserRuleCall_3_0() { return cMappingsClassMapParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cToXClassCrossReference_1_0 = (CrossReference)cToAssignment_1.eContents().get(0);
		private final RuleCall cToXClassXQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cToXClassCrossReference_1_0.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromXClassCrossReference_3_0 = (CrossReference)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromXClassXQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cFromXClassCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRuleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRuleIDTerminalRuleCall_4_1_0 = (RuleCall)cRuleAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSXQualifiedNametatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSXQualifiedNametatementsClassMapStmntParserRuleCall_6_0 = (RuleCall)cSXQualifiedNametatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClassMap:
		//	"map" to=[xcore::XClass|XQualifiedName] "from" from=[xcore::XClass|XQualifiedName] ("when" rule=ID)? "{"
		//	sXQualifiedNametatements+=ClassMapStmnt* "}";
		@Override public ParserRule getRule() { return rule; }

		//"map" to=[xcore::XClass|XQualifiedName] "from" from=[xcore::XClass|XQualifiedName] ("when" rule=ID)? "{"
		//sXQualifiedNametatements+=ClassMapStmnt* "}"
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//to=[xcore::XClass|XQualifiedName]
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getToXClassCrossReference_1_0() { return cToXClassCrossReference_1_0; }

		//XQualifiedName
		public RuleCall getToXClassXQualifiedNameParserRuleCall_1_0_1() { return cToXClassXQualifiedNameParserRuleCall_1_0_1; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//from=[xcore::XClass|XQualifiedName]
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getFromXClassCrossReference_3_0() { return cFromXClassCrossReference_3_0; }

		//XQualifiedName
		public RuleCall getFromXClassXQualifiedNameParserRuleCall_3_0_1() { return cFromXClassXQualifiedNameParserRuleCall_3_0_1; }

		//("when" rule=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"when"
		public Keyword getWhenKeyword_4_0() { return cWhenKeyword_4_0; }

		//rule=ID
		public Assignment getRuleAssignment_4_1() { return cRuleAssignment_4_1; }

		//ID
		public RuleCall getRuleIDTerminalRuleCall_4_1_0() { return cRuleIDTerminalRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//sXQualifiedNametatements+=ClassMapStmnt*
		public Assignment getSXQualifiedNametatementsAssignment_6() { return cSXQualifiedNametatementsAssignment_6; }

		//ClassMapStmnt
		public RuleCall getSXQualifiedNametatementsClassMapStmntParserRuleCall_6_0() { return cSXQualifiedNametatementsClassMapStmntParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ClassMapStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMapStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyMapParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassMapStmnt:
		//	PropertyMap ";";
		@Override public ParserRule getRule() { return rule; }

		//PropertyMap ";"
		public Group getGroup() { return cGroup; }

		//PropertyMap
		public RuleCall getPropertyMapParserRuleCall_0() { return cPropertyMapParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class PropertyMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedefineAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRedefineRedefineKeyword_0_0 = (Keyword)cRedefineAssignment_0.eContents().get(0);
		private final Assignment cPropNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropNameXStructuralFeatureCrossReference_1_0 = (CrossReference)cPropNameAssignment_1.eContents().get(0);
		private final RuleCall cPropNameXStructuralFeatureXQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cPropNameXStructuralFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropInitXExpressionParserRuleCall_3_0 = (RuleCall)cPropInitAssignment_3.eContents().get(0);
		
		//PropertyMap:
		//	redefine?="redefine"? propName=[xcore::XStructuralFeature|XQualifiedName] ":=" propInit=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//redefine?="redefine"? propName=[xcore::XStructuralFeature|XQualifiedName] ":=" propInit=XExpression
		public Group getGroup() { return cGroup; }

		//redefine?="redefine"?
		public Assignment getRedefineAssignment_0() { return cRedefineAssignment_0; }

		//"redefine"
		public Keyword getRedefineRedefineKeyword_0_0() { return cRedefineRedefineKeyword_0_0; }

		//propName=[xcore::XStructuralFeature|XQualifiedName]
		public Assignment getPropNameAssignment_1() { return cPropNameAssignment_1; }

		//[xcore::XStructuralFeature|XQualifiedName]
		public CrossReference getPropNameXStructuralFeatureCrossReference_1_0() { return cPropNameXStructuralFeatureCrossReference_1_0; }

		//XQualifiedName
		public RuleCall getPropNameXStructuralFeatureXQualifiedNameParserRuleCall_1_0_1() { return cPropNameXStructuralFeatureXQualifiedNameParserRuleCall_1_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//propInit=XExpression
		public Assignment getPropInitAssignment_3() { return cPropInitAssignment_3; }

		//XExpression
		public RuleCall getPropInitXExpressionParserRuleCall_3_0() { return cPropInitXExpressionParserRuleCall_3_0; }
	}

	public class DisambiguationSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisambiguationSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisambiguationSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDisambiguationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisambiguationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisambiguationsClassDisambiguationParserRuleCall_3_0 = (RuleCall)cDisambiguationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DisambiguationSect:
		//	{DisambiguationSect} "disambiguation" "{" disambiguations+=ClassDisambiguation* "}";
		@Override public ParserRule getRule() { return rule; }

		//{DisambiguationSect} "disambiguation" "{" disambiguations+=ClassDisambiguation* "}"
		public Group getGroup() { return cGroup; }

		//{DisambiguationSect}
		public Action getDisambiguationSectAction_0() { return cDisambiguationSectAction_0; }

		//"disambiguation"
		public Keyword getDisambiguationKeyword_1() { return cDisambiguationKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//disambiguations+=ClassDisambiguation*
		public Assignment getDisambiguationsAssignment_3() { return cDisambiguationsAssignment_3; }

		//ClassDisambiguation
		public RuleCall getDisambiguationsClassDisambiguationParserRuleCall_3_0() { return cDisambiguationsClassDisambiguationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassDisambiguationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDisambiguation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClassXClassCrossReference_0_0 = (CrossReference)cClassAssignment_0.eContents().get(0);
		private final RuleCall cClassXClassXQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cClassXClassCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsClassDisambiguationStmntParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassDisambiguation:
		//	class=[xcore::XClass|XQualifiedName] "{" statements+=ClassDisambiguationStmnt* "}";
		@Override public ParserRule getRule() { return rule; }

		//class=[xcore::XClass|XQualifiedName] "{" statements+=ClassDisambiguationStmnt* "}"
		public Group getGroup() { return cGroup; }

		//class=[xcore::XClass|XQualifiedName]
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getClassXClassCrossReference_0_0() { return cClassXClassCrossReference_0_0; }

		//XQualifiedName
		public RuleCall getClassXClassXQualifiedNameParserRuleCall_0_0_1() { return cClassXClassXQualifiedNameParserRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=ClassDisambiguationStmnt*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ClassDisambiguationStmnt
		public RuleCall getStatementsClassDisambiguationStmntParserRuleCall_2_0() { return cStatementsClassDisambiguationStmntParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassDisambiguationStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDisambiguationStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDisambiguationDefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassDisambiguationStmnt:
		//	DisambiguationDef ";";
		@Override public ParserRule getRule() { return rule; }

		//DisambiguationDef ";"
		public Group getGroup() { return cGroup; }

		//DisambiguationDef
		public RuleCall getDisambiguationDefParserRuleCall_0() { return cDisambiguationDefParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class DisambiguationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisambiguationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpXExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//DisambiguationDef:
		//	name=ID ":=" exp=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":=" exp=XExpression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//exp=XExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//XExpression
		public RuleCall getExpXExpressionParserRuleCall_2_0() { return cExpXExpressionParserRuleCall_2_0; }
	}

	public class NameResolutionSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameResolutionSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameResolutionSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameresolutionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamedElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamedElementDefaultNamedElementDefParserRuleCall_3_0 = (RuleCall)cNamedElementAssignment_3.eContents().get(0);
		private final Assignment cNameReferencerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameReferencerDefaultNameReferencerDefParserRuleCall_4_0 = (RuleCall)cNameReferencerAssignment_4.eContents().get(0);
		private final Assignment cNameQualifierAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameQualifierNameQualifierDefParserRuleCall_5_0 = (RuleCall)cNameQualifierAssignment_5.eContents().get(0);
		private final Assignment cNameResolutionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameResolutionsClassNameResolutionParserRuleCall_6_0 = (RuleCall)cNameResolutionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NameResolutionSect:
		//	{NameResolutionSect} "nameresolution" "{" namedElement=DefaultNamedElementDef?
		//	nameReferencer=DefaultNameReferencerDef? nameQualifier=NameQualifierDef? nameResolutions+=ClassNameResolution* "}";
		@Override public ParserRule getRule() { return rule; }

		//{NameResolutionSect} "nameresolution" "{" namedElement=DefaultNamedElementDef? nameReferencer=DefaultNameReferencerDef?
		//nameQualifier=NameQualifierDef? nameResolutions+=ClassNameResolution* "}"
		public Group getGroup() { return cGroup; }

		//{NameResolutionSect}
		public Action getNameResolutionSectAction_0() { return cNameResolutionSectAction_0; }

		//"nameresolution"
		public Keyword getNameresolutionKeyword_1() { return cNameresolutionKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//namedElement=DefaultNamedElementDef?
		public Assignment getNamedElementAssignment_3() { return cNamedElementAssignment_3; }

		//DefaultNamedElementDef
		public RuleCall getNamedElementDefaultNamedElementDefParserRuleCall_3_0() { return cNamedElementDefaultNamedElementDefParserRuleCall_3_0; }

		//nameReferencer=DefaultNameReferencerDef?
		public Assignment getNameReferencerAssignment_4() { return cNameReferencerAssignment_4; }

		//DefaultNameReferencerDef
		public RuleCall getNameReferencerDefaultNameReferencerDefParserRuleCall_4_0() { return cNameReferencerDefaultNameReferencerDefParserRuleCall_4_0; }

		//nameQualifier=NameQualifierDef?
		public Assignment getNameQualifierAssignment_5() { return cNameQualifierAssignment_5; }

		//NameQualifierDef
		public RuleCall getNameQualifierNameQualifierDefParserRuleCall_5_0() { return cNameQualifierNameQualifierDefParserRuleCall_5_0; }

		//nameResolutions+=ClassNameResolution*
		public Assignment getNameResolutionsAssignment_6() { return cNameResolutionsAssignment_6; }

		//ClassNameResolution
		public RuleCall getNameResolutionsClassNameResolutionParserRuleCall_6_0() { return cNameResolutionsClassNameResolutionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DefaultNamedElementDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultNamedElementDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamedElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameElementIDTerminalRuleCall_1_0 = (RuleCall)cNameElementAssignment_1.eContents().get(0);
		private final Keyword cNamePropertyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamePropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNamePropertyXAttributeCrossReference_3_0 = (CrossReference)cNamePropertyAssignment_3.eContents().get(0);
		private final RuleCall cNamePropertyXAttributeXQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cNamePropertyXAttributeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefaultNamedElementDef:
		//	"named-element" nameElement=ID "name-property" nameProperty=[xcore::XAttribute|XQualifiedName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"named-element" nameElement=ID "name-property" nameProperty=[xcore::XAttribute|XQualifiedName] ";"
		public Group getGroup() { return cGroup; }

		//"named-element"
		public Keyword getNamedElementKeyword_0() { return cNamedElementKeyword_0; }

		//nameElement=ID
		public Assignment getNameElementAssignment_1() { return cNameElementAssignment_1; }

		//ID
		public RuleCall getNameElementIDTerminalRuleCall_1_0() { return cNameElementIDTerminalRuleCall_1_0; }

		//"name-property"
		public Keyword getNamePropertyKeyword_2() { return cNamePropertyKeyword_2; }

		//nameProperty=[xcore::XAttribute|XQualifiedName]
		public Assignment getNamePropertyAssignment_3() { return cNamePropertyAssignment_3; }

		//[xcore::XAttribute|XQualifiedName]
		public CrossReference getNamePropertyXAttributeCrossReference_3_0() { return cNamePropertyXAttributeCrossReference_3_0; }

		//XQualifiedName
		public RuleCall getNamePropertyXAttributeXQualifiedNameParserRuleCall_3_0_1() { return cNamePropertyXAttributeXQualifiedNameParserRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DefaultNameReferencerDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultNameReferencerDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameReferencerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameReferencerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameReferencerIDTerminalRuleCall_1_0 = (RuleCall)cNameReferencerAssignment_1.eContents().get(0);
		private final Keyword cNamePropertyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamePropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNamePropertyXAttributeCrossReference_3_0 = (CrossReference)cNamePropertyAssignment_3.eContents().get(0);
		private final RuleCall cNamePropertyXAttributeXQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cNamePropertyXAttributeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefaultNameReferencerDef:
		//	"name-referencer" nameReferencer=ID "name-property" nameProperty=[xcore::XAttribute|XQualifiedName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"name-referencer" nameReferencer=ID "name-property" nameProperty=[xcore::XAttribute|XQualifiedName] ";"
		public Group getGroup() { return cGroup; }

		//"name-referencer"
		public Keyword getNameReferencerKeyword_0() { return cNameReferencerKeyword_0; }

		//nameReferencer=ID
		public Assignment getNameReferencerAssignment_1() { return cNameReferencerAssignment_1; }

		//ID
		public RuleCall getNameReferencerIDTerminalRuleCall_1_0() { return cNameReferencerIDTerminalRuleCall_1_0; }

		//"name-property"
		public Keyword getNamePropertyKeyword_2() { return cNamePropertyKeyword_2; }

		//nameProperty=[xcore::XAttribute|XQualifiedName]
		public Assignment getNamePropertyAssignment_3() { return cNamePropertyAssignment_3; }

		//[xcore::XAttribute|XQualifiedName]
		public CrossReference getNamePropertyXAttributeCrossReference_3_0() { return cNamePropertyXAttributeCrossReference_3_0; }

		//XQualifiedName
		public RuleCall getNamePropertyXAttributeXQualifiedNameParserRuleCall_3_0_1() { return cNamePropertyXAttributeXQualifiedNameParserRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NameQualifierDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameQualifierDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameQualifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifierIDTerminalRuleCall_1_0 = (RuleCall)cNameQualifierAssignment_1.eContents().get(0);
		private final Keyword cNameSegmentsPropertyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSegmentsPropAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSegmentsPropXReferenceCrossReference_3_0 = (CrossReference)cSegmentsPropAssignment_3.eContents().get(0);
		private final RuleCall cSegmentsPropXReferenceXQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cSegmentsPropXReferenceCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NameQualifierDef:
		//	"name-qualifier" nameQualifier=ID "name-segments-property" segmentsProp=[xcore::XReference|XQualifiedName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"name-qualifier" nameQualifier=ID "name-segments-property" segmentsProp=[xcore::XReference|XQualifiedName] ";"
		public Group getGroup() { return cGroup; }

		//"name-qualifier"
		public Keyword getNameQualifierKeyword_0() { return cNameQualifierKeyword_0; }

		//nameQualifier=ID
		public Assignment getNameQualifierAssignment_1() { return cNameQualifierAssignment_1; }

		//ID
		public RuleCall getNameQualifierIDTerminalRuleCall_1_0() { return cNameQualifierIDTerminalRuleCall_1_0; }

		//"name-segments-property"
		public Keyword getNameSegmentsPropertyKeyword_2() { return cNameSegmentsPropertyKeyword_2; }

		//segmentsProp=[xcore::XReference|XQualifiedName]
		public Assignment getSegmentsPropAssignment_3() { return cSegmentsPropAssignment_3; }

		//[xcore::XReference|XQualifiedName]
		public CrossReference getSegmentsPropXReferenceCrossReference_3_0() { return cSegmentsPropXReferenceCrossReference_3_0; }

		//XQualifiedName
		public RuleCall getSegmentsPropXReferenceXQualifiedNameParserRuleCall_3_0_1() { return cSegmentsPropXReferenceXQualifiedNameParserRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ClassNameResolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassNameResolution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClassXClassCrossReference_0_0 = (CrossReference)cClassAssignment_0.eContents().get(0);
		private final RuleCall cClassXClassXQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cClassXClassCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsClassNameResolutionStmntParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassNameResolution:
		//	class=[xcore::XClass|XQualifiedName] "{" statements+=ClassNameResolutionStmnt* "}";
		@Override public ParserRule getRule() { return rule; }

		//class=[xcore::XClass|XQualifiedName] "{" statements+=ClassNameResolutionStmnt* "}"
		public Group getGroup() { return cGroup; }

		//class=[xcore::XClass|XQualifiedName]
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getClassXClassCrossReference_0_0() { return cClassXClassCrossReference_0_0; }

		//XQualifiedName
		public RuleCall getClassXClassXQualifiedNameParserRuleCall_0_0_1() { return cClassXClassXQualifiedNameParserRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=ClassNameResolutionStmnt*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ClassNameResolutionStmnt
		public RuleCall getStatementsClassNameResolutionStmntParserRuleCall_2_0() { return cStatementsClassNameResolutionStmntParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassNameResolutionStmntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassNameResolutionStmnt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNamedElementDefParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cScopeDefParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cExportDefParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClassNameResolutionStmnt:
		//	(NamedElementDef | ScopeDef | ExportDef) ";";
		@Override public ParserRule getRule() { return rule; }

		//(NamedElementDef | ScopeDef | ExportDef) ";"
		public Group getGroup() { return cGroup; }

		//NamedElementDef | ScopeDef | ExportDef
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//NamedElementDef
		public RuleCall getNamedElementDefParserRuleCall_0_0() { return cNamedElementDefParserRuleCall_0_0; }

		//ScopeDef
		public RuleCall getScopeDefParserRuleCall_0_1() { return cScopeDefParserRuleCall_0_1; }

		//ExportDef
		public RuleCall getExportDefParserRuleCall_0_2() { return cExportDefParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class NamedElementDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedElementDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamedElementDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNamedElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNamePropertyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamePopertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNamePopertyXAttributeCrossReference_2_1_0 = (CrossReference)cNamePopertyAssignment_2_1.eContents().get(0);
		private final RuleCall cNamePopertyXAttributeXQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cNamePopertyXAttributeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cFilterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilterFilterDefParserRuleCall_3_0 = (RuleCall)cFilterAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cQualifiesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQualificationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQualificationsQualificationDefParserRuleCall_4_1_0 = (RuleCall)cQualificationsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cQualificationsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cQualificationsQualificationDefParserRuleCall_4_2_1_0 = (RuleCall)cQualificationsAssignment_4_2_1.eContents().get(0);
		
		//NamedElementDef:
		//	{NamedElementDef} "named-element" ("name-property" namePoperty=[xcore::XAttribute|XQualifiedName])? filter=FilterDef?
		//	("qualifies" qualifications+=QualificationDef ("," qualifications+=QualificationDef)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{NamedElementDef} "named-element" ("name-property" namePoperty=[xcore::XAttribute|XQualifiedName])? filter=FilterDef?
		//("qualifies" qualifications+=QualificationDef ("," qualifications+=QualificationDef)*)?
		public Group getGroup() { return cGroup; }

		//{NamedElementDef}
		public Action getNamedElementDefAction_0() { return cNamedElementDefAction_0; }

		//"named-element"
		public Keyword getNamedElementKeyword_1() { return cNamedElementKeyword_1; }

		//("name-property" namePoperty=[xcore::XAttribute|XQualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"name-property"
		public Keyword getNamePropertyKeyword_2_0() { return cNamePropertyKeyword_2_0; }

		//namePoperty=[xcore::XAttribute|XQualifiedName]
		public Assignment getNamePopertyAssignment_2_1() { return cNamePopertyAssignment_2_1; }

		//[xcore::XAttribute|XQualifiedName]
		public CrossReference getNamePopertyXAttributeCrossReference_2_1_0() { return cNamePopertyXAttributeCrossReference_2_1_0; }

		//XQualifiedName
		public RuleCall getNamePopertyXAttributeXQualifiedNameParserRuleCall_2_1_0_1() { return cNamePopertyXAttributeXQualifiedNameParserRuleCall_2_1_0_1; }

		//filter=FilterDef?
		public Assignment getFilterAssignment_3() { return cFilterAssignment_3; }

		//FilterDef
		public RuleCall getFilterFilterDefParserRuleCall_3_0() { return cFilterFilterDefParserRuleCall_3_0; }

		//("qualifies" qualifications+=QualificationDef ("," qualifications+=QualificationDef)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"qualifies"
		public Keyword getQualifiesKeyword_4_0() { return cQualifiesKeyword_4_0; }

		//qualifications+=QualificationDef
		public Assignment getQualificationsAssignment_4_1() { return cQualificationsAssignment_4_1; }

		//QualificationDef
		public RuleCall getQualificationsQualificationDefParserRuleCall_4_1_0() { return cQualificationsQualificationDefParserRuleCall_4_1_0; }

		//("," qualifications+=QualificationDef)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//qualifications+=QualificationDef
		public Assignment getQualificationsAssignment_4_2_1() { return cQualificationsAssignment_4_2_1; }

		//QualificationDef
		public RuleCall getQualificationsQualificationDefParserRuleCall_4_2_1_0() { return cQualificationsQualificationDefParserRuleCall_4_2_1_0; }
	}

	public class FilterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilteredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cByKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//FilterDef:
		//	"filtered" ("by" params+=ParameterDef ("," params+=ParameterDef)*)? "when" expression=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//"filtered" ("by" params+=ParameterDef ("," params+=ParameterDef)*)? "when" expression=XExpression
		public Group getGroup() { return cGroup; }

		//"filtered"
		public Keyword getFilteredKeyword_0() { return cFilteredKeyword_0; }

		//("by" params+=ParameterDef ("," params+=ParameterDef)*)?
		public Group getGroup_1() { return cGroup_1; }

		//"by"
		public Keyword getByKeyword_1_0() { return cByKeyword_1_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_1_1_0() { return cParamsParameterDefParserRuleCall_1_1_0; }

		//("," params+=ParameterDef)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_1_2_1_0() { return cParamsParameterDefParserRuleCall_1_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//expression=XExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_3_0() { return cExpressionXExpressionParserRuleCall_3_0; }
	}

	public class QualificationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualificationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetsDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetsDefTargetsDefParserRuleCall_0_0 = (RuleCall)cTargetsDefAssignment_0.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContributionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContributionElementsContribExpParserRuleCall_2_0 = (RuleCall)cContributionAssignment_2.eContents().get(0);
		
		//QualificationDef:
		//	targetsDef=TargetsDef "using" contribution+=ElementsContribExp;
		@Override public ParserRule getRule() { return rule; }

		//targetsDef=TargetsDef "using" contribution+=ElementsContribExp
		public Group getGroup() { return cGroup; }

		//targetsDef=TargetsDef
		public Assignment getTargetsDefAssignment_0() { return cTargetsDefAssignment_0; }

		//TargetsDef
		public RuleCall getTargetsDefTargetsDefParserRuleCall_0_0() { return cTargetsDefTargetsDefParserRuleCall_0_0; }

		//"using"
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//contribution+=ElementsContribExp
		public Assignment getContributionAssignment_2() { return cContributionAssignment_2; }

		//ElementsContribExp
		public RuleCall getContributionElementsContribExpParserRuleCall_2_0() { return cContributionElementsContribExpParserRuleCall_2_0; }
	}

	public class ElementsContribExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementsContribExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsPrecedingAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsPrecedingPrecedingKeyword_0_0_0 = (Keyword)cIsPrecedingAssignment_0_0.eContents().get(0);
		private final Assignment cIsImportedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsImportedImportedKeyword_0_1_0 = (Keyword)cIsImportedAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ElementsContribExp:
		//	(isPreceding?="preceding" | isImported?="imported"?)? expression=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//(isPreceding?="preceding" | isImported?="imported"?)? expression=XExpression
		public Group getGroup() { return cGroup; }

		//(isPreceding?="preceding" | isImported?="imported"?)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isPreceding?="preceding"
		public Assignment getIsPrecedingAssignment_0_0() { return cIsPrecedingAssignment_0_0; }

		//"preceding"
		public Keyword getIsPrecedingPrecedingKeyword_0_0_0() { return cIsPrecedingPrecedingKeyword_0_0_0; }

		//isImported?="imported"?
		public Assignment getIsImportedAssignment_0_1() { return cIsImportedAssignment_0_1; }

		//"imported"
		public Keyword getIsImportedImportedKeyword_0_1_0() { return cIsImportedImportedKeyword_0_1_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_1_0() { return cExpressionXExpressionParserRuleCall_1_0; }
	}

	public class ScopeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionDefSelectionDefParserRuleCall_0_0 = (RuleCall)cSelectionDefAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cScopesKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cScopesOccludingKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cSameScopeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cSameScopeScopesAddingKeyword_1_2_0 = (Keyword)cSameScopeAssignment_1_2.eContents().get(0);
		private final Assignment cEmptyScopeAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cEmptyScopeScopesResettingKeyword_1_3_0 = (Keyword)cEmptyScopeAssignment_1_3.eContents().get(0);
		private final Assignment cAlsoExportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAlsoExportsAlsoExportsKeyword_2_0 = (Keyword)cAlsoExportsAssignment_2.eContents().get(0);
		private final Assignment cProvisionDefsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvisionDefsProvisionDefParserRuleCall_3_0 = (RuleCall)cProvisionDefsAssignment_3.eContents().get(0);
		
		//ScopeDef:
		//	selectionDef=SelectionDef? ("scopes" | "scopes-occluding" | sameScope?="scopes-adding" |
		//	emptyScope?="scopes-resetting") alsoExports?="also-exports"? provisionDefs+=ProvisionDef+;
		@Override public ParserRule getRule() { return rule; }

		//selectionDef=SelectionDef? ("scopes" | "scopes-occluding" | sameScope?="scopes-adding" | emptyScope?="scopes-resetting")
		//alsoExports?="also-exports"? provisionDefs+=ProvisionDef+
		public Group getGroup() { return cGroup; }

		//selectionDef=SelectionDef?
		public Assignment getSelectionDefAssignment_0() { return cSelectionDefAssignment_0; }

		//SelectionDef
		public RuleCall getSelectionDefSelectionDefParserRuleCall_0_0() { return cSelectionDefSelectionDefParserRuleCall_0_0; }

		//"scopes" | "scopes-occluding" | sameScope?="scopes-adding" | emptyScope?="scopes-resetting"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"scopes"
		public Keyword getScopesKeyword_1_0() { return cScopesKeyword_1_0; }

		//"scopes-occluding"
		public Keyword getScopesOccludingKeyword_1_1() { return cScopesOccludingKeyword_1_1; }

		//sameScope?="scopes-adding"
		public Assignment getSameScopeAssignment_1_2() { return cSameScopeAssignment_1_2; }

		//"scopes-adding"
		public Keyword getSameScopeScopesAddingKeyword_1_2_0() { return cSameScopeScopesAddingKeyword_1_2_0; }

		//emptyScope?="scopes-resetting"
		public Assignment getEmptyScopeAssignment_1_3() { return cEmptyScopeAssignment_1_3; }

		//"scopes-resetting"
		public Keyword getEmptyScopeScopesResettingKeyword_1_3_0() { return cEmptyScopeScopesResettingKeyword_1_3_0; }

		//alsoExports?="also-exports"?
		public Assignment getAlsoExportsAssignment_2() { return cAlsoExportsAssignment_2; }

		//"also-exports"
		public Keyword getAlsoExportsAlsoExportsKeyword_2_0() { return cAlsoExportsAlsoExportsKeyword_2_0; }

		//provisionDefs+=ProvisionDef+
		public Assignment getProvisionDefsAssignment_3() { return cProvisionDefsAssignment_3; }

		//ProvisionDef
		public RuleCall getProvisionDefsProvisionDefParserRuleCall_3_0() { return cProvisionDefsProvisionDefParserRuleCall_3_0; }
	}

	public class ProvisionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvisionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetsDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetsDefTargetsDefParserRuleCall_0_0 = (RuleCall)cTargetsDefAssignment_0.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContributionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContributionContributionDefParserRuleCall_2_0 = (RuleCall)cContributionAssignment_2.eContents().get(0);
		private final Assignment cOccludingDefsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOccludingDefsOccludingDefParserRuleCall_3_0 = (RuleCall)cOccludingDefsAssignment_3.eContents().get(0);
		
		//ProvisionDef:
		//	targetsDef=TargetsDef "using" contribution=ContributionDef occludingDefs+=OccludingDef*;
		@Override public ParserRule getRule() { return rule; }

		//targetsDef=TargetsDef "using" contribution=ContributionDef occludingDefs+=OccludingDef*
		public Group getGroup() { return cGroup; }

		//targetsDef=TargetsDef
		public Assignment getTargetsDefAssignment_0() { return cTargetsDefAssignment_0; }

		//TargetsDef
		public RuleCall getTargetsDefTargetsDefParserRuleCall_0_0() { return cTargetsDefTargetsDefParserRuleCall_0_0; }

		//"using"
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//contribution=ContributionDef
		public Assignment getContributionAssignment_2() { return cContributionAssignment_2; }

		//ContributionDef
		public RuleCall getContributionContributionDefParserRuleCall_2_0() { return cContributionContributionDefParserRuleCall_2_0; }

		//occludingDefs+=OccludingDef*
		public Assignment getOccludingDefsAssignment_3() { return cOccludingDefsAssignment_3; }

		//OccludingDef
		public RuleCall getOccludingDefsOccludingDefParserRuleCall_3_0() { return cOccludingDefsOccludingDefParserRuleCall_3_0; }
	}

	public class TargetsDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetsDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetClassesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetClassesXClassCrossReference_0_0 = (CrossReference)cTargetClassesAssignment_0.eContents().get(0);
		private final RuleCall cTargetClassesXClassXQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTargetClassesXClassCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetClassesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTargetClassesXClassCrossReference_1_1_0 = (CrossReference)cTargetClassesAssignment_1_1.eContents().get(0);
		private final RuleCall cTargetClassesXClassXQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cTargetClassesXClassCrossReference_1_1_0.eContents().get(1);
		
		//TargetsDef:
		//	targetClasses+=[xcore::XClass|XQualifiedName] ("," targetClasses+=[xcore::XClass|XQualifiedName])*;
		@Override public ParserRule getRule() { return rule; }

		//targetClasses+=[xcore::XClass|XQualifiedName] ("," targetClasses+=[xcore::XClass|XQualifiedName])*
		public Group getGroup() { return cGroup; }

		//targetClasses+=[xcore::XClass|XQualifiedName]
		public Assignment getTargetClassesAssignment_0() { return cTargetClassesAssignment_0; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getTargetClassesXClassCrossReference_0_0() { return cTargetClassesXClassCrossReference_0_0; }

		//XQualifiedName
		public RuleCall getTargetClassesXClassXQualifiedNameParserRuleCall_0_0_1() { return cTargetClassesXClassXQualifiedNameParserRuleCall_0_0_1; }

		//("," targetClasses+=[xcore::XClass|XQualifiedName])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//targetClasses+=[xcore::XClass|XQualifiedName]
		public Assignment getTargetClassesAssignment_1_1() { return cTargetClassesAssignment_1_1; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getTargetClassesXClassCrossReference_1_1_0() { return cTargetClassesXClassCrossReference_1_1_0; }

		//XQualifiedName
		public RuleCall getTargetClassesXClassXQualifiedNameParserRuleCall_1_1_0_1() { return cTargetClassesXClassXQualifiedNameParserRuleCall_1_1_0_1; }
	}

	public class OccludingDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OccludingDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOccludingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContributionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContributionContributionDefParserRuleCall_1_0 = (RuleCall)cContributionAssignment_1.eContents().get(0);
		
		//OccludingDef:
		//	"occluding" contribution=ContributionDef;
		@Override public ParserRule getRule() { return rule; }

		//"occluding" contribution=ContributionDef
		public Group getGroup() { return cGroup; }

		//"occluding"
		public Keyword getOccludingKeyword_0() { return cOccludingKeyword_0; }

		//contribution=ContributionDef
		public Assignment getContributionAssignment_1() { return cContributionAssignment_1; }

		//ContributionDef
		public RuleCall getContributionContributionDefParserRuleCall_1_0() { return cContributionContributionDefParserRuleCall_1_0; }
	}

	public class ContributionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContributionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContributionsElementsContribExpParserRuleCall_0_0 = (RuleCall)cContributionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContributionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContributionsElementsContribExpParserRuleCall_1_1_0 = (RuleCall)cContributionsAssignment_1_1.eContents().get(0);
		
		//ContributionDef:
		//	contributions+=ElementsContribExp ("," contributions+=ElementsContribExp)*;
		@Override public ParserRule getRule() { return rule; }

		//contributions+=ElementsContribExp ("," contributions+=ElementsContribExp)*
		public Group getGroup() { return cGroup; }

		//contributions+=ElementsContribExp
		public Assignment getContributionsAssignment_0() { return cContributionsAssignment_0; }

		//ElementsContribExp
		public RuleCall getContributionsElementsContribExpParserRuleCall_0_0() { return cContributionsElementsContribExpParserRuleCall_0_0; }

		//("," contributions+=ElementsContribExp)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//contributions+=ElementsContribExp
		public Assignment getContributionsAssignment_1_1() { return cContributionsAssignment_1_1; }

		//ElementsContribExp
		public RuleCall getContributionsElementsContribExpParserRuleCall_1_1_0() { return cContributionsElementsContribExpParserRuleCall_1_1_0; }
	}

	public class SelectionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSelectionAllAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAllKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cExceptingKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExceptionPropertiesAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExceptionPropertiesXExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cExceptionPropertiesAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_2_2 = (Group)cGroup_1_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_2_0 = (Keyword)cGroup_1_0_2_2.eContents().get(0);
		private final Assignment cExceptionPropertiesAssignment_1_0_2_2_1 = (Assignment)cGroup_1_0_2_2.eContents().get(1);
		private final RuleCall cExceptionPropertiesXExpressionParserRuleCall_1_0_2_2_1_0 = (RuleCall)cExceptionPropertiesAssignment_1_0_2_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSelectionSpecificAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSelectedPropertiesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSelectedPropertiesXExpressionParserRuleCall_1_1_1_0_0 = (RuleCall)cSelectedPropertiesAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cSelectedPropertiesAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cSelectedPropertiesXExpressionParserRuleCall_1_1_1_1_1_0 = (RuleCall)cSelectedPropertiesAssignment_1_1_1_1_1.eContents().get(0);
		
		//SelectionDef:
		//	"for" ({SelectionAll} "all" ("excepting" exceptionProperties+=XExpression ("," exceptionProperties+=XExpression)*)? |
		//	{SelectionSpecific} (selectedProperties+=XExpression ("," selectedProperties+=XExpression)*));
		@Override public ParserRule getRule() { return rule; }

		//"for" ({SelectionAll} "all" ("excepting" exceptionProperties+=XExpression ("," exceptionProperties+=XExpression)*)? |
		//{SelectionSpecific} (selectedProperties+=XExpression ("," selectedProperties+=XExpression)*))
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//{SelectionAll} "all" ("excepting" exceptionProperties+=XExpression ("," exceptionProperties+=XExpression)*)? |
		//{SelectionSpecific} (selectedProperties+=XExpression ("," selectedProperties+=XExpression)*)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{SelectionAll} "all" ("excepting" exceptionProperties+=XExpression ("," exceptionProperties+=XExpression)*)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{SelectionAll}
		public Action getSelectionAllAction_1_0_0() { return cSelectionAllAction_1_0_0; }

		//"all"
		public Keyword getAllKeyword_1_0_1() { return cAllKeyword_1_0_1; }

		//("excepting" exceptionProperties+=XExpression ("," exceptionProperties+=XExpression)*)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"excepting"
		public Keyword getExceptingKeyword_1_0_2_0() { return cExceptingKeyword_1_0_2_0; }

		//exceptionProperties+=XExpression
		public Assignment getExceptionPropertiesAssignment_1_0_2_1() { return cExceptionPropertiesAssignment_1_0_2_1; }

		//XExpression
		public RuleCall getExceptionPropertiesXExpressionParserRuleCall_1_0_2_1_0() { return cExceptionPropertiesXExpressionParserRuleCall_1_0_2_1_0; }

		//("," exceptionProperties+=XExpression)*
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_2_0() { return cCommaKeyword_1_0_2_2_0; }

		//exceptionProperties+=XExpression
		public Assignment getExceptionPropertiesAssignment_1_0_2_2_1() { return cExceptionPropertiesAssignment_1_0_2_2_1; }

		//XExpression
		public RuleCall getExceptionPropertiesXExpressionParserRuleCall_1_0_2_2_1_0() { return cExceptionPropertiesXExpressionParserRuleCall_1_0_2_2_1_0; }

		//{SelectionSpecific} (selectedProperties+=XExpression ("," selectedProperties+=XExpression)*)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{SelectionSpecific}
		public Action getSelectionSpecificAction_1_1_0() { return cSelectionSpecificAction_1_1_0; }

		//selectedProperties+=XExpression ("," selectedProperties+=XExpression)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//selectedProperties+=XExpression
		public Assignment getSelectedPropertiesAssignment_1_1_1_0() { return cSelectedPropertiesAssignment_1_1_1_0; }

		//XExpression
		public RuleCall getSelectedPropertiesXExpressionParserRuleCall_1_1_1_0_0() { return cSelectedPropertiesXExpressionParserRuleCall_1_1_1_0_0; }

		//("," selectedProperties+=XExpression)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//selectedProperties+=XExpression
		public Assignment getSelectedPropertiesAssignment_1_1_1_1_1() { return cSelectedPropertiesAssignment_1_1_1_1_1; }

		//XExpression
		public RuleCall getSelectedPropertiesXExpressionParserRuleCall_1_1_1_1_1_0() { return cSelectedPropertiesXExpressionParserRuleCall_1_1_1_1_1_0; }
	}

	public class ExportDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExportDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionDefSelectionDefParserRuleCall_0_0 = (RuleCall)cSelectionDefAssignment_0.eContents().get(0);
		private final Keyword cExportsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProvisionDefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProvisionDefsProvisionDefParserRuleCall_2_0 = (RuleCall)cProvisionDefsAssignment_2.eContents().get(0);
		
		//ExportDef:
		//	selectionDef=SelectionDef? "exports" provisionDefs+=ProvisionDef+;
		@Override public ParserRule getRule() { return rule; }

		//selectionDef=SelectionDef? "exports" provisionDefs+=ProvisionDef+
		public Group getGroup() { return cGroup; }

		//selectionDef=SelectionDef?
		public Assignment getSelectionDefAssignment_0() { return cSelectionDefAssignment_0; }

		//SelectionDef
		public RuleCall getSelectionDefSelectionDefParserRuleCall_0_0() { return cSelectionDefSelectionDefParserRuleCall_0_0; }

		//"exports"
		public Keyword getExportsKeyword_1() { return cExportsKeyword_1; }

		//provisionDefs+=ProvisionDef+
		public Assignment getProvisionDefsAssignment_2() { return cProvisionDefsAssignment_2; }

		//ProvisionDef
		public RuleCall getProvisionDefsProvisionDefParserRuleCall_2_0() { return cProvisionDefsProvisionDefParserRuleCall_2_0; }
	}

	public class HelpersSectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelpersSect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHelpersSectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHelpersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassHelpersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassHelpersClassHelperParserRuleCall_3_0 = (RuleCall)cClassHelpersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HelpersSect:
		//	{HelpersSect} "helpers" "{" classHelpers+=ClassHelper* "}";
		@Override public ParserRule getRule() { return rule; }

		//{HelpersSect} "helpers" "{" classHelpers+=ClassHelper* "}"
		public Group getGroup() { return cGroup; }

		//{HelpersSect}
		public Action getHelpersSectAction_0() { return cHelpersSectAction_0; }

		//"helpers"
		public Keyword getHelpersKeyword_1() { return cHelpersKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//classHelpers+=ClassHelper*
		public Assignment getClassHelpersAssignment_3() { return cClassHelpersAssignment_3; }

		//ClassHelper
		public RuleCall getClassHelpersClassHelperParserRuleCall_3_0() { return cClassHelpersClassHelperParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassHelperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassHelper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cContextXClassCrossReference_0_0 = (CrossReference)cContextAssignment_0.eContents().get(0);
		private final RuleCall cContextXClassXQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cContextXClassCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHelpersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHelpersHelperDefParserRuleCall_2_0 = (RuleCall)cHelpersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassHelper:
		//	context=[xcore::XClass|XQualifiedName] "{" helpers+=HelperDef* "}";
		@Override public ParserRule getRule() { return rule; }

		//context=[xcore::XClass|XQualifiedName] "{" helpers+=HelperDef* "}"
		public Group getGroup() { return cGroup; }

		//context=[xcore::XClass|XQualifiedName]
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getContextXClassCrossReference_0_0() { return cContextXClassCrossReference_0_0; }

		//XQualifiedName
		public RuleCall getContextXClassXQualifiedNameParserRuleCall_0_0_1() { return cContextXClassXQualifiedNameParserRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//helpers+=HelperDef*
		public Assignment getHelpersAssignment_2() { return cHelpersAssignment_2; }

		//HelperDef
		public RuleCall getHelpersHelperDefParserRuleCall_2_0() { return cHelpersHelperDefParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class HelperDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelperDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsParameterDefParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsParameterDefParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOwnedTypeXClassCrossReference_4_1_0 = (CrossReference)cOwnedTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cOwnedTypeXClassXQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cOwnedTypeXClassCrossReference_4_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHelperBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHelperBodyXExpressionParserRuleCall_6_0 = (RuleCall)cHelperBodyAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Similar to Complete OCL definitions
		//HelperDef: //(ownedSignature=TemplateSignatureCS)?
		//	name=ID "(" (params+=ParameterDef ("," params+=ParameterDef)*)? ")" (":" ownedType=[xcore::XClass|XQualifiedName])?
		//	":=" helperBody=XExpression ";";
		@Override public ParserRule getRule() { return rule; }

		////(ownedSignature=TemplateSignatureCS)?
		//name=ID "(" (params+=ParameterDef ("," params+=ParameterDef)*)? ")" (":" ownedType=[xcore::XClass|XQualifiedName])? ":="
		//helperBody=XExpression ";"
		public Group getGroup() { return cGroup; }

		////(ownedSignature=TemplateSignatureCS)?
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=ParameterDef ("," params+=ParameterDef)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_2_0_0() { return cParamsParameterDefParserRuleCall_2_0_0; }

		//("," params+=ParameterDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=ParameterDef
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//ParameterDef
		public RuleCall getParamsParameterDefParserRuleCall_2_1_1_0() { return cParamsParameterDefParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(":" ownedType=[xcore::XClass|XQualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//ownedType=[xcore::XClass|XQualifiedName]
		public Assignment getOwnedTypeAssignment_4_1() { return cOwnedTypeAssignment_4_1; }

		//[xcore::XClass|XQualifiedName]
		public CrossReference getOwnedTypeXClassCrossReference_4_1_0() { return cOwnedTypeXClassCrossReference_4_1_0; }

		//XQualifiedName
		public RuleCall getOwnedTypeXClassXQualifiedNameParserRuleCall_4_1_0_1() { return cOwnedTypeXClassXQualifiedNameParserRuleCall_4_1_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_5() { return cColonEqualsSignKeyword_5; }

		//helperBody=XExpression
		public Assignment getHelperBodyAssignment_6() { return cHelperBodyAssignment_6; }

		//XExpression
		public RuleCall getHelperBodyXExpressionParserRuleCall_6_0() { return cHelperBodyXExpressionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXQualifiedNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ParameterDef returns xcore::XParameter:
		//	name=ID ":" XQualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" XQualifiedName
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//XQualifiedName
		public RuleCall getXQualifiedNameParserRuleCall_2() { return cXQualifiedNameParserRuleCall_2; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXFeatureCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXForLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXDoWhileExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXReturnExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cTraceExpCSParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cLookupExpCSParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * / // DSL addition
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | // DSL addition
		//	TraceExpCS | LookupExpCS;
		@Override public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | // DSL addition
		//TraceExpCS | LookupExpCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_3() { return cXSynchronizedExpressionParserRuleCall_3; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_4() { return cXFeatureCallParserRuleCall_4; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_5() { return cXLiteralParserRuleCall_5; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_6() { return cXIfExpressionParserRuleCall_6; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_7() { return cXForLoopExpressionParserRuleCall_7; }

		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_8() { return cXBasicForLoopExpressionParserRuleCall_8; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_9() { return cXWhileExpressionParserRuleCall_9; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_10() { return cXDoWhileExpressionParserRuleCall_10; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_11() { return cXThrowExpressionParserRuleCall_11; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_12() { return cXReturnExpressionParserRuleCall_12; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_13() { return cXTryCatchFinallyExpressionParserRuleCall_13; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_14() { return cXParenthesizedExpressionParserRuleCall_14; }

		//// DSL addition
		//TraceExpCS
		public RuleCall getTraceExpCSParserRuleCall_15() { return cTraceExpCSParserRuleCall_15; }

		//LookupExpCS
		public RuleCall getLookupExpCSParserRuleCall_16() { return cLookupExpCSParserRuleCall_16; }
	}

	public class TraceExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraceExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTraceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TraceExpCS:
		//	{TraceExpCS} "trace";
		@Override public ParserRule getRule() { return rule; }

		//{TraceExpCS} "trace"
		public Group getGroup() { return cGroup; }

		//{TraceExpCS}
		public Action getTraceExpCSAction_0() { return cTraceExpCSAction_0; }

		//"trace"
		public Keyword getTraceKeyword_1() { return cTraceKeyword_1; }
	}

	public class LookupExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookupExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLookupKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cFromExpAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cFromExpLookupFromKeyword_0_1_0 = (Keyword)cFromExpAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsXExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsXExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LookupExpCS:
		//	("lookup" | fromExp?="lookupFrom") "(" args+=XExpression ("," args+=XExpression)* ")";
		@Override public ParserRule getRule() { return rule; }

		//("lookup" | fromExp?="lookupFrom") "(" args+=XExpression ("," args+=XExpression)* ")"
		public Group getGroup() { return cGroup; }

		//"lookup" | fromExp?="lookupFrom"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"lookup"
		public Keyword getLookupKeyword_0_0() { return cLookupKeyword_0_0; }

		//fromExp?="lookupFrom"
		public Assignment getFromExpAssignment_0_1() { return cFromExpAssignment_0_1; }

		//"lookupFrom"
		public Keyword getFromExpLookupFromKeyword_0_1_0() { return cFromExpLookupFromKeyword_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args+=XExpression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//XExpression
		public RuleCall getArgsXExpressionParserRuleCall_2_0() { return cArgsXExpressionParserRuleCall_2_0; }

		//("," args+=XExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//args+=XExpression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//XExpression
		public RuleCall getArgsXExpressionParserRuleCall_3_1_0() { return cArgsXExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final CSDeclElements pCSDecl;
	private final ASDeclElements pASDecl;
	private final MappingSectElements pMappingSect;
	private final ClassMapElements pClassMap;
	private final ClassMapStmntElements pClassMapStmnt;
	private final PropertyMapElements pPropertyMap;
	private final DisambiguationSectElements pDisambiguationSect;
	private final ClassDisambiguationElements pClassDisambiguation;
	private final ClassDisambiguationStmntElements pClassDisambiguationStmnt;
	private final DisambiguationDefElements pDisambiguationDef;
	private final NameResolutionSectElements pNameResolutionSect;
	private final DefaultNamedElementDefElements pDefaultNamedElementDef;
	private final DefaultNameReferencerDefElements pDefaultNameReferencerDef;
	private final NameQualifierDefElements pNameQualifierDef;
	private final ClassNameResolutionElements pClassNameResolution;
	private final ClassNameResolutionStmntElements pClassNameResolutionStmnt;
	private final NamedElementDefElements pNamedElementDef;
	private final FilterDefElements pFilterDef;
	private final QualificationDefElements pQualificationDef;
	private final ElementsContribExpElements pElementsContribExp;
	private final ScopeDefElements pScopeDef;
	private final ProvisionDefElements pProvisionDef;
	private final TargetsDefElements pTargetsDef;
	private final OccludingDefElements pOccludingDef;
	private final ContributionDefElements pContributionDef;
	private final SelectionDefElements pSelectionDef;
	private final ExportDefElements pExportDef;
	private final HelpersSectElements pHelpersSect;
	private final ClassHelperElements pClassHelper;
	private final HelperDefElements pHelperDef;
	private final ParameterDefElements pParameterDef;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final TraceExpCSElements pTraceExpCS;
	private final LookupExpCSElements pLookupExpCS;
	
	private final Grammar grammar;

	private final XcoreGrammarAccess gaXcore;

	@Inject
	public CS2ASDSLGrammarAccess(GrammarProvider grammarProvider,
		XcoreGrammarAccess gaXcore) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXcore = gaXcore;
		this.pModel = new ModelElements();
		this.pCSDecl = new CSDeclElements();
		this.pASDecl = new ASDeclElements();
		this.pMappingSect = new MappingSectElements();
		this.pClassMap = new ClassMapElements();
		this.pClassMapStmnt = new ClassMapStmntElements();
		this.pPropertyMap = new PropertyMapElements();
		this.pDisambiguationSect = new DisambiguationSectElements();
		this.pClassDisambiguation = new ClassDisambiguationElements();
		this.pClassDisambiguationStmnt = new ClassDisambiguationStmntElements();
		this.pDisambiguationDef = new DisambiguationDefElements();
		this.pNameResolutionSect = new NameResolutionSectElements();
		this.pDefaultNamedElementDef = new DefaultNamedElementDefElements();
		this.pDefaultNameReferencerDef = new DefaultNameReferencerDefElements();
		this.pNameQualifierDef = new NameQualifierDefElements();
		this.pClassNameResolution = new ClassNameResolutionElements();
		this.pClassNameResolutionStmnt = new ClassNameResolutionStmntElements();
		this.pNamedElementDef = new NamedElementDefElements();
		this.pFilterDef = new FilterDefElements();
		this.pQualificationDef = new QualificationDefElements();
		this.pElementsContribExp = new ElementsContribExpElements();
		this.pScopeDef = new ScopeDefElements();
		this.pProvisionDef = new ProvisionDefElements();
		this.pTargetsDef = new TargetsDefElements();
		this.pOccludingDef = new OccludingDefElements();
		this.pContributionDef = new ContributionDefElements();
		this.pSelectionDef = new SelectionDefElements();
		this.pExportDef = new ExportDefElements();
		this.pHelpersSect = new HelpersSectElements();
		this.pClassHelper = new ClassHelperElements();
		this.pHelperDef = new HelperDefElements();
		this.pParameterDef = new ParameterDefElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pTraceExpCS = new TraceExpCSElements();
		this.pLookupExpCS = new LookupExpCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.york.cs.cs2as.CS2ASDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XcoreGrammarAccess getXcoreGrammarAccess() {
		return gaXcore;
	}

	
	//Model:
	//	csDecl=CSDecl asDecl=ASDecl (mappingSect=MappingSect & disambiguationSect=DisambiguationSect? &
	//	nameresoSect=NameResolutionSect? & helpersSect=HelpersSect?);
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//CSDecl:
	//	"source" (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName]);
	public CSDeclElements getCSDeclAccess() {
		return pCSDecl;
	}
	
	public ParserRule getCSDeclRule() {
		return getCSDeclAccess().getRule();
	}

	//ASDecl:
	//	"target" (importedNamespace=QualifiedNameWithWildcard | importedObject=[ecore::EObject|QualifiedName]);
	public ASDeclElements getASDeclAccess() {
		return pASDecl;
	}
	
	public ParserRule getASDeclRule() {
		return getASDeclAccess().getRule();
	}

	////ImportCS returns base::ImportCS:
	////	(name=Identifier ':')? ownedPathName=URIPathNameCS (isAll?='::*')?
	////;
	//MappingSect:
	//	{MappingSect} "mappings" "{" mappings+=ClassMap* "}";
	public MappingSectElements getMappingSectAccess() {
		return pMappingSect;
	}
	
	public ParserRule getMappingSectRule() {
		return getMappingSectAccess().getRule();
	}

	//ClassMap:
	//	"map" to=[xcore::XClass|XQualifiedName] "from" from=[xcore::XClass|XQualifiedName] ("when" rule=ID)? "{"
	//	sXQualifiedNametatements+=ClassMapStmnt* "}";
	public ClassMapElements getClassMapAccess() {
		return pClassMap;
	}
	
	public ParserRule getClassMapRule() {
		return getClassMapAccess().getRule();
	}

	//ClassMapStmnt:
	//	PropertyMap ";";
	public ClassMapStmntElements getClassMapStmntAccess() {
		return pClassMapStmnt;
	}
	
	public ParserRule getClassMapStmntRule() {
		return getClassMapStmntAccess().getRule();
	}

	//PropertyMap:
	//	redefine?="redefine"? propName=[xcore::XStructuralFeature|XQualifiedName] ":=" propInit=XExpression;
	public PropertyMapElements getPropertyMapAccess() {
		return pPropertyMap;
	}
	
	public ParserRule getPropertyMapRule() {
		return getPropertyMapAccess().getRule();
	}

	//DisambiguationSect:
	//	{DisambiguationSect} "disambiguation" "{" disambiguations+=ClassDisambiguation* "}";
	public DisambiguationSectElements getDisambiguationSectAccess() {
		return pDisambiguationSect;
	}
	
	public ParserRule getDisambiguationSectRule() {
		return getDisambiguationSectAccess().getRule();
	}

	//ClassDisambiguation:
	//	class=[xcore::XClass|XQualifiedName] "{" statements+=ClassDisambiguationStmnt* "}";
	public ClassDisambiguationElements getClassDisambiguationAccess() {
		return pClassDisambiguation;
	}
	
	public ParserRule getClassDisambiguationRule() {
		return getClassDisambiguationAccess().getRule();
	}

	//ClassDisambiguationStmnt:
	//	DisambiguationDef ";";
	public ClassDisambiguationStmntElements getClassDisambiguationStmntAccess() {
		return pClassDisambiguationStmnt;
	}
	
	public ParserRule getClassDisambiguationStmntRule() {
		return getClassDisambiguationStmntAccess().getRule();
	}

	//DisambiguationDef:
	//	name=ID ":=" exp=XExpression;
	public DisambiguationDefElements getDisambiguationDefAccess() {
		return pDisambiguationDef;
	}
	
	public ParserRule getDisambiguationDefRule() {
		return getDisambiguationDefAccess().getRule();
	}

	//NameResolutionSect:
	//	{NameResolutionSect} "nameresolution" "{" namedElement=DefaultNamedElementDef?
	//	nameReferencer=DefaultNameReferencerDef? nameQualifier=NameQualifierDef? nameResolutions+=ClassNameResolution* "}";
	public NameResolutionSectElements getNameResolutionSectAccess() {
		return pNameResolutionSect;
	}
	
	public ParserRule getNameResolutionSectRule() {
		return getNameResolutionSectAccess().getRule();
	}

	//DefaultNamedElementDef:
	//	"named-element" nameElement=ID "name-property" nameProperty=[xcore::XAttribute|XQualifiedName] ";";
	public DefaultNamedElementDefElements getDefaultNamedElementDefAccess() {
		return pDefaultNamedElementDef;
	}
	
	public ParserRule getDefaultNamedElementDefRule() {
		return getDefaultNamedElementDefAccess().getRule();
	}

	//DefaultNameReferencerDef:
	//	"name-referencer" nameReferencer=ID "name-property" nameProperty=[xcore::XAttribute|XQualifiedName] ";";
	public DefaultNameReferencerDefElements getDefaultNameReferencerDefAccess() {
		return pDefaultNameReferencerDef;
	}
	
	public ParserRule getDefaultNameReferencerDefRule() {
		return getDefaultNameReferencerDefAccess().getRule();
	}

	//NameQualifierDef:
	//	"name-qualifier" nameQualifier=ID "name-segments-property" segmentsProp=[xcore::XReference|XQualifiedName] ";";
	public NameQualifierDefElements getNameQualifierDefAccess() {
		return pNameQualifierDef;
	}
	
	public ParserRule getNameQualifierDefRule() {
		return getNameQualifierDefAccess().getRule();
	}

	//ClassNameResolution:
	//	class=[xcore::XClass|XQualifiedName] "{" statements+=ClassNameResolutionStmnt* "}";
	public ClassNameResolutionElements getClassNameResolutionAccess() {
		return pClassNameResolution;
	}
	
	public ParserRule getClassNameResolutionRule() {
		return getClassNameResolutionAccess().getRule();
	}

	//ClassNameResolutionStmnt:
	//	(NamedElementDef | ScopeDef | ExportDef) ";";
	public ClassNameResolutionStmntElements getClassNameResolutionStmntAccess() {
		return pClassNameResolutionStmnt;
	}
	
	public ParserRule getClassNameResolutionStmntRule() {
		return getClassNameResolutionStmntAccess().getRule();
	}

	//NamedElementDef:
	//	{NamedElementDef} "named-element" ("name-property" namePoperty=[xcore::XAttribute|XQualifiedName])? filter=FilterDef?
	//	("qualifies" qualifications+=QualificationDef ("," qualifications+=QualificationDef)*)?;
	public NamedElementDefElements getNamedElementDefAccess() {
		return pNamedElementDef;
	}
	
	public ParserRule getNamedElementDefRule() {
		return getNamedElementDefAccess().getRule();
	}

	//FilterDef:
	//	"filtered" ("by" params+=ParameterDef ("," params+=ParameterDef)*)? "when" expression=XExpression;
	public FilterDefElements getFilterDefAccess() {
		return pFilterDef;
	}
	
	public ParserRule getFilterDefRule() {
		return getFilterDefAccess().getRule();
	}

	//QualificationDef:
	//	targetsDef=TargetsDef "using" contribution+=ElementsContribExp;
	public QualificationDefElements getQualificationDefAccess() {
		return pQualificationDef;
	}
	
	public ParserRule getQualificationDefRule() {
		return getQualificationDefAccess().getRule();
	}

	//ElementsContribExp:
	//	(isPreceding?="preceding" | isImported?="imported"?)? expression=XExpression;
	public ElementsContribExpElements getElementsContribExpAccess() {
		return pElementsContribExp;
	}
	
	public ParserRule getElementsContribExpRule() {
		return getElementsContribExpAccess().getRule();
	}

	//ScopeDef:
	//	selectionDef=SelectionDef? ("scopes" | "scopes-occluding" | sameScope?="scopes-adding" |
	//	emptyScope?="scopes-resetting") alsoExports?="also-exports"? provisionDefs+=ProvisionDef+;
	public ScopeDefElements getScopeDefAccess() {
		return pScopeDef;
	}
	
	public ParserRule getScopeDefRule() {
		return getScopeDefAccess().getRule();
	}

	//ProvisionDef:
	//	targetsDef=TargetsDef "using" contribution=ContributionDef occludingDefs+=OccludingDef*;
	public ProvisionDefElements getProvisionDefAccess() {
		return pProvisionDef;
	}
	
	public ParserRule getProvisionDefRule() {
		return getProvisionDefAccess().getRule();
	}

	//TargetsDef:
	//	targetClasses+=[xcore::XClass|XQualifiedName] ("," targetClasses+=[xcore::XClass|XQualifiedName])*;
	public TargetsDefElements getTargetsDefAccess() {
		return pTargetsDef;
	}
	
	public ParserRule getTargetsDefRule() {
		return getTargetsDefAccess().getRule();
	}

	//OccludingDef:
	//	"occluding" contribution=ContributionDef;
	public OccludingDefElements getOccludingDefAccess() {
		return pOccludingDef;
	}
	
	public ParserRule getOccludingDefRule() {
		return getOccludingDefAccess().getRule();
	}

	//ContributionDef:
	//	contributions+=ElementsContribExp ("," contributions+=ElementsContribExp)*;
	public ContributionDefElements getContributionDefAccess() {
		return pContributionDef;
	}
	
	public ParserRule getContributionDefRule() {
		return getContributionDefAccess().getRule();
	}

	//SelectionDef:
	//	"for" ({SelectionAll} "all" ("excepting" exceptionProperties+=XExpression ("," exceptionProperties+=XExpression)*)? |
	//	{SelectionSpecific} (selectedProperties+=XExpression ("," selectedProperties+=XExpression)*));
	public SelectionDefElements getSelectionDefAccess() {
		return pSelectionDef;
	}
	
	public ParserRule getSelectionDefRule() {
		return getSelectionDefAccess().getRule();
	}

	//ExportDef:
	//	selectionDef=SelectionDef? "exports" provisionDefs+=ProvisionDef+;
	public ExportDefElements getExportDefAccess() {
		return pExportDef;
	}
	
	public ParserRule getExportDefRule() {
		return getExportDefAccess().getRule();
	}

	//HelpersSect:
	//	{HelpersSect} "helpers" "{" classHelpers+=ClassHelper* "}";
	public HelpersSectElements getHelpersSectAccess() {
		return pHelpersSect;
	}
	
	public ParserRule getHelpersSectRule() {
		return getHelpersSectAccess().getRule();
	}

	//ClassHelper:
	//	context=[xcore::XClass|XQualifiedName] "{" helpers+=HelperDef* "}";
	public ClassHelperElements getClassHelperAccess() {
		return pClassHelper;
	}
	
	public ParserRule getClassHelperRule() {
		return getClassHelperAccess().getRule();
	}

	//// Similar to Complete OCL definitions
	//HelperDef: //(ownedSignature=TemplateSignatureCS)?
	//	name=ID "(" (params+=ParameterDef ("," params+=ParameterDef)*)? ")" (":" ownedType=[xcore::XClass|XQualifiedName])?
	//	":=" helperBody=XExpression ";";
	public HelperDefElements getHelperDefAccess() {
		return pHelperDef;
	}
	
	public ParserRule getHelperDefRule() {
		return getHelperDefAccess().getRule();
	}

	//ParameterDef returns xcore::XParameter:
	//	name=ID ":" XQualifiedName;
	public ParameterDefElements getParameterDefAccess() {
		return pParameterDef;
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}

	/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * / // DSL addition
	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | // DSL addition
	//	TraceExpCS | LookupExpCS;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//TraceExpCS:
	//	{TraceExpCS} "trace";
	public TraceExpCSElements getTraceExpCSAccess() {
		return pTraceExpCS;
	}
	
	public ParserRule getTraceExpCSRule() {
		return getTraceExpCSAccess().getRule();
	}

	//LookupExpCS:
	//	("lookup" | fromExp?="lookupFrom") "(" args+=XExpression ("," args+=XExpression)* ")";
	public LookupExpCSElements getLookupExpCSAccess() {
		return pLookupExpCS;
	}
	
	public ParserRule getLookupExpCSRule() {
		return getLookupExpCSAccess().getRule();
	}

	//XPackage:
	//	{XPackage} annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
	//	annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*;
	public XcoreGrammarAccess.XPackageElements getXPackageAccess() {
		return gaXcore.getXPackageAccess();
	}
	
	public ParserRule getXPackageRule() {
		return getXPackageAccess().getRule();
	}

	//XAnnotation:
	//	"@" source=[XAnnotationDirective|XQualifiedName] ("(" details+=XStringToStringMapEntry (","
	//	details+=XStringToStringMapEntry)* ")")?;
	public XcoreGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXcore.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XStringToStringMapEntry:
	//	key=QualifiedName "=" value=STRING;
	public XcoreGrammarAccess.XStringToStringMapEntryElements getXStringToStringMapEntryAccess() {
		return gaXcore.getXStringToStringMapEntryAccess();
	}
	
	public ParserRule getXStringToStringMapEntryRule() {
		return getXStringToStringMapEntryAccess().getRule();
	}

	//XImportDirective:
	//	"import" (importedNamespace=QualifiedNameWithWildcard | importedObject=[EObject|QualifiedName]);
	public XcoreGrammarAccess.XImportDirectiveElements getXImportDirectiveAccess() {
		return gaXcore.getXImportDirectiveAccess();
	}
	
	public ParserRule getXImportDirectiveRule() {
		return getXImportDirectiveAccess().getRule();
	}

	//XAnnotationDirective:
	//	=> ("annotation" sourceURI=STRING) "as" name=ValidID;
	public XcoreGrammarAccess.XAnnotationDirectiveElements getXAnnotationDirectiveAccess() {
		return gaXcore.getXAnnotationDirectiveAccess();
	}
	
	public ParserRule getXAnnotationDirectiveRule() {
		return getXAnnotationDirectiveAccess().getRule();
	}

	//XClassifier:
	//	XClass | XDataType | XEnum;
	public XcoreGrammarAccess.XClassifierElements getXClassifierAccess() {
		return gaXcore.getXClassifierAccess();
	}
	
	public ParserRule getXClassifierRule() {
		return getXClassifierAccess().getRule();
	}

	//XDataType:
	//	annotations+=XAnnotation* "type" name=ID ("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)*
	//	">")? "wraps" instanceType=JvmTypeReference ((serializable?="create" createBody=XBlockExpression)? / *
	//	   * In scope for create should be what's visible in XyzFactoryImpl and 'this' will denote the literal value.
	//	   * The block expression must yield null or an instance of the wrapped type.
	//	   * / / *
	//	   * In scope for create should be what's visible in XyzFactoryImpl
	//	   * and 'this' will denote an instance of the wrapped type.
	//	   * The block expression must yield a java.lang.String.
	//	   * / & ("convert" convertBody=XBlockExpression)?);
	public XcoreGrammarAccess.XDataTypeElements getXDataTypeAccess() {
		return gaXcore.getXDataTypeAccess();
	}
	
	public ParserRule getXDataTypeRule() {
		return getXDataTypeAccess().getRule();
	}

	//XEnum:
	//	annotations+=XAnnotation* "enum" name=ID "{" (literals+=XEnumLiteral (","? literals+=XEnumLiteral)*)? "}";
	public XcoreGrammarAccess.XEnumElements getXEnumAccess() {
		return gaXcore.getXEnumAccess();
	}
	
	public ParserRule getXEnumRule() {
		return getXEnumAccess().getRule();
	}

	//XEnumLiteral:
	//	annotations+=XAnnotation* name=ID ("as" literal=STRING)? ("=" value=SignedInt)?;
	public XcoreGrammarAccess.XEnumLiteralElements getXEnumLiteralAccess() {
		return gaXcore.getXEnumLiteralAccess();
	}
	
	public ParserRule getXEnumLiteralRule() {
		return getXEnumLiteralAccess().getRule();
	}

	//SignedInt returns EInt:
	//	"-"? INT;
	public XcoreGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaXcore.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//XClass:
	//	{XClass} annotations+=XAnnotation* (abstract?="abstract"? "class" | interface?="interface") name=ID ("<"
	//	typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? ("extends" superTypes+=XGenericType (","
	//	superTypes+=XGenericType)*)? ("wraps" instanceType=JvmTypeReference)? "{" members+=XMember* "}";
	public XcoreGrammarAccess.XClassElements getXClassAccess() {
		return gaXcore.getXClassAccess();
	}
	
	public ParserRule getXClassRule() {
		return getXClassAccess().getRule();
	}

	//XMember:
	//	XOperation | XAttribute | XReference;
	public XcoreGrammarAccess.XMemberElements getXMemberAccess() {
		return gaXcore.getXMemberAccess();
	}
	
	public ParserRule getXMemberRule() {
		return getXMemberAccess().getRule();
	}

	//XAttribute:
	//	{XAttribute} annotations+=XAnnotation* (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? &
	//	transient?="transient"? & volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"? & iD?="id"?)
	//	type=XGenericType multiplicity=XMultiplicity? name=ID ("=" defaultValueLiteral=STRING)? / *
	//	 * In scope for getBody should be what's visible in AbcImpl
	//	 * and 'this' will denote an instance of the feature's type.
	//	 * The block expression must yield a value of the feature's type.
	//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
	//	("unset" unsetBody=XBlockExpression)?);
	public XcoreGrammarAccess.XAttributeElements getXAttributeAccess() {
		return gaXcore.getXAttributeAccess();
	}
	
	public ParserRule getXAttributeRule() {
		return getXAttributeAccess().getRule();
	}

	//XReference:
	//	{XReference} annotations+=XAnnotation* (containment?="contains" resolveProxies?="resolving"? |
	//	resolveProxies?="resolving" containment?="contains" | container?="container" resolveProxies?="resolving"? |
	//	resolveProxies?="resolving" container?="container" | "refers" local?="local"? | local?="local" "refers")
	//	(unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? & transient?="transient"? &
	//	volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"?) type=XGenericType
	//	multiplicity=XMultiplicity? name=ID ("opposite" opposite=[genmodel::GenFeature|ValidID])? ("keys"
	//	keys+=[genmodel::GenFeature|ValidID] ("," keys+=[genmodel::GenFeature|ValidID])*)? / *
	//	 * In scope for getBody should be what's visible in AbcImpl
	//	 * and 'this' will denote an instance of the feature's type.
	//	 * The block expression must yield a value of the feature's type.
	//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
	//	("unset" unsetBody=XBlockExpression)?);
	public XcoreGrammarAccess.XReferenceElements getXReferenceAccess() {
		return gaXcore.getXReferenceAccess();
	}
	
	public ParserRule getXReferenceRule() {
		return getXReferenceAccess().getRule();
	}

	//XOperation:
	//	{XOperation} annotations+=XAnnotation* "op" (unordered?="unordered" unique?="unique"? | unique?="unique"
	//	unordered?="unordered"?)? ("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")?
	//	(type=XGenericType | "void") multiplicity=XMultiplicity? name=ID "(" (parameters+=XParameter (","
	//	parameters+=XParameter)*)? ")" ("throws" exceptions+=XGenericType ("," exceptions+=XGenericType)*)? / *
	//	 * This is the logic for the operation.
	//	 * How are we going to resolve all references that are in scope for Xbase language?
	//	 * Will things like variables that are actually there in generated in the Impl class be accessible directly?
	//	 * / body=XBlockExpression?;
	public XcoreGrammarAccess.XOperationElements getXOperationAccess() {
		return gaXcore.getXOperationAccess();
	}
	
	public ParserRule getXOperationRule() {
		return getXOperationAccess().getRule();
	}

	//XParameter:
	//	annotations+=XAnnotation* (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
	//	type=XGenericType multiplicity=XMultiplicity? name=ID;
	public XcoreGrammarAccess.XParameterElements getXParameterAccess() {
		return gaXcore.getXParameterAccess();
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}

	//XTypeParameter:
	//	annotations+=XAnnotation* name=ID ("extends" bounds+=XGenericType ("&" bounds+=XGenericType)*)?;
	public XcoreGrammarAccess.XTypeParameterElements getXTypeParameterAccess() {
		return gaXcore.getXTypeParameterAccess();
	}
	
	public ParserRule getXTypeParameterRule() {
		return getXTypeParameterAccess().getRule();
	}

	//XMultiplicity:
	//	"[" ("?" | "*" | "+" | INT (".." (INT | "?" | "*"))?)? "]";
	public XcoreGrammarAccess.XMultiplicityElements getXMultiplicityAccess() {
		return gaXcore.getXMultiplicityAccess();
	}
	
	public ParserRule getXMultiplicityRule() {
		return getXMultiplicityAccess().getRule();
	}

	//XBlockExpression returns xbase::XBlockExpression:
	//	{xbase::XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XcoreGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXcore.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XGenericType:
	//	type=[genmodel::GenBase|XQualifiedName] ("<" typeArguments+=XGenericTypeArgument (","
	//	typeArguments+=XGenericTypeArgument)* ">")?;
	public XcoreGrammarAccess.XGenericTypeElements getXGenericTypeAccess() {
		return gaXcore.getXGenericTypeAccess();
	}
	
	public ParserRule getXGenericTypeRule() {
		return getXGenericTypeAccess().getRule();
	}

	//XGenericTypeArgument returns XGenericType:
	//	XGenericType | XGenericWildcardTypeArgument;
	public XcoreGrammarAccess.XGenericTypeArgumentElements getXGenericTypeArgumentAccess() {
		return gaXcore.getXGenericTypeArgumentAccess();
	}
	
	public ParserRule getXGenericTypeArgumentRule() {
		return getXGenericTypeArgumentAccess().getRule();
	}

	//XGenericWildcardTypeArgument returns XGenericType:
	//	{XGenericType} "?" ("extends" upperBound=XGenericType | "super" lowerBound=XGenericType)?;
	public XcoreGrammarAccess.XGenericWildcardTypeArgumentElements getXGenericWildcardTypeArgumentAccess() {
		return gaXcore.getXGenericWildcardTypeArgumentAccess();
	}
	
	public ParserRule getXGenericWildcardTypeArgumentRule() {
		return getXGenericWildcardTypeArgumentAccess().getRule();
	}

	//XQualifiedName:
	//	XID ("." XID)*;
	public XcoreGrammarAccess.XQualifiedNameElements getXQualifiedNameAccess() {
		return gaXcore.getXQualifiedNameAccess();
	}
	
	public ParserRule getXQualifiedNameRule() {
		return getXQualifiedNameAccess().getRule();
	}

	//XID:
	//	ID | "get" | "isSet" | "set" | "unset";
	public XcoreGrammarAccess.XIDElements getXIDAccess() {
		return gaXcore.getXIDAccess();
	}
	
	public ParserRule getXIDRule() {
		return getXIDAccess().getRule();
	}

	//ValidID:
	//	XID | "void";
	public XcoreGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXcore.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "abstract" | "annotation" | "as" | "class" | "container" | "contains" | "convert" | "create" | "derived" |
	//	"enum" | "extends" | "extension" | "id" | "import" | "keys" | "interface" | "local" | "op" | "opposite" | "package" |
	//	"readonly" | "refers" | "resolving" | "static" | "throws" | "transient" | "unique" | "unordered" | "unsettable" |
	//	"volatile" | "wraps";
	public XcoreGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXcore.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXcore.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXcore.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXcore.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXcore.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXcore.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXcore.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXcore.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXcore.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXcore.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXcore.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXcore.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXcore.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXcore.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXcore.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXcore.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXcore.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXcore.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXcore.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXcore.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXcore.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXcore.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXcore.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXcore.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXcore.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXcore.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXcore.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXcore.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXcore.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXcore.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXcore.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXcore.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXcore.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXcore.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXcore.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXcore.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXcore.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXcore.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXcore.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXcore.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXcore.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXcore.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXcore.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXcore.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXcore.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXcore.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXcore.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXcore.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXcore.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXcore.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXcore.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXcore.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXcore.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXcore.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXcore.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXcore.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXcore.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXcore.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXcore.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXcore.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXcore.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXcore.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXcore.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXcore.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXcore.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXcore.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXcore.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXcore.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXcore.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXcore.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXcore.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXcore.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXcore.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXcore.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXcore.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXcore.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXcore.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXcore.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXcore.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXcore.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXcore.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXcore.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXcore.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXcore.getANY_OTHERRule();
	} 
}
