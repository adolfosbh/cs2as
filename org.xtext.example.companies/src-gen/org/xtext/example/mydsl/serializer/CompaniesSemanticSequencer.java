/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.companies.CompaniesPackage;
import org.xtext.example.mydsl.companies.company;
import org.xtext.example.mydsl.companies.department;
import org.xtext.example.mydsl.companies.department_employees;
import org.xtext.example.mydsl.companies.department_manager;
import org.xtext.example.mydsl.companies.employee;
import org.xtext.example.mydsl.services.CompaniesGrammarAccess;

@SuppressWarnings("all")
public class CompaniesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CompaniesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CompaniesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CompaniesPackage.COMPANY:
				sequence_company(context, (company) semanticObject); 
				return; 
			case CompaniesPackage.DEPARTMENT:
				sequence_department(context, (department) semanticObject); 
				return; 
			case CompaniesPackage.DEPARTMENT_EMPLOYEES:
				sequence_department_employees(context, (department_employees) semanticObject); 
				return; 
			case CompaniesPackage.DEPARTMENT_MANAGER:
				sequence_department_manager(context, (department_manager) semanticObject); 
				return; 
			case CompaniesPackage.EMPLOYEE:
				sequence_employee(context, (employee) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     company returns company
	 *
	 * Constraint:
	 *     (name=STRING deparment+=department*)
	 */
	protected void sequence_company(ISerializationContext context, company semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     department returns department
	 *
	 * Constraint:
	 *     (name=STRING department_manager=department_manager department_employees=department_employees deparment+=department*)
	 */
	protected void sequence_department(ISerializationContext context, department semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     department_employees returns department_employees
	 *
	 * Constraint:
	 *     employee+=employee*
	 */
	protected void sequence_department_employees(ISerializationContext context, department_employees semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     department_manager returns department_manager
	 *
	 * Constraint:
	 *     employee=employee
	 */
	protected void sequence_department_manager(ISerializationContext context, department_manager semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CompaniesPackage.Literals.DEPARTMENT_MANAGER__EMPLOYEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CompaniesPackage.Literals.DEPARTMENT_MANAGER__EMPLOYEE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDepartment_managerAccess().getEmployeeEmployeeParserRuleCall_1_0(), semanticObject.getEmployee());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     employee returns employee
	 *
	 * Constraint:
	 *     (name=STRING address=STRING salary=FLOAT mentor=STRING?)
	 */
	protected void sequence_employee(ISerializationContext context, employee semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
