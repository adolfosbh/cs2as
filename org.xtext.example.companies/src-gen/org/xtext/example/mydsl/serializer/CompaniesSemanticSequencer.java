/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.companies.CompaniesPackage;
import org.xtext.example.mydsl.companies.company;
import org.xtext.example.mydsl.companies.department;
import org.xtext.example.mydsl.companies.department_employees;
import org.xtext.example.mydsl.companies.department_manager;
import org.xtext.example.mydsl.companies.employee;
import org.xtext.example.mydsl.services.CompaniesGrammarAccess;

@SuppressWarnings("all")
public class CompaniesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CompaniesGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == CompaniesPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CompaniesPackage.COMPANY:
				sequence_company(context, (company) semanticObject); 
				return; 
			case CompaniesPackage.DEPARTMENT:
				sequence_department(context, (department) semanticObject); 
				return; 
			case CompaniesPackage.DEPARTMENT_EMPLOYEES:
				sequence_department_employees(context, (department_employees) semanticObject); 
				return; 
			case CompaniesPackage.DEPARTMENT_MANAGER:
				sequence_department_manager(context, (department_manager) semanticObject); 
				return; 
			case CompaniesPackage.EMPLOYEE:
				sequence_employee(context, (employee) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=STRING deparment+=department*)
	 */
	protected void sequence_company(EObject context, company semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=STRING department_manager=department_manager department_employees=department_employees deparment+=department*)
	 */
	protected void sequence_department(EObject context, department semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (employee+=employee*)
	 */
	protected void sequence_department_employees(EObject context, department_employees semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     employee=employee
	 */
	protected void sequence_department_manager(EObject context, department_manager semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CompaniesPackage.Literals.DEPARTMENT_MANAGER__EMPLOYEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CompaniesPackage.Literals.DEPARTMENT_MANAGER__EMPLOYEE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDepartment_managerAccess().getEmployeeEmployeeParserRuleCall_1_0(), semanticObject.getEmployee());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=STRING address=STRING salary=FLOAT mentor=STRING?)
	 */
	protected void sequence_employee(EObject context, employee semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
