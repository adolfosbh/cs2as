/**
 * generated by Xtext
 */
package uk.ac.york.cs.asbh.ui.contentassist;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import uk.ac.york.cs.asbh.lang.cs2as.source.SElement;
import uk.ac.york.cs.asbh.lang.cs2as.target.NamedElement;
import uk.ac.york.cs.asbh.lang.cs2as.target.lookup.LookupEnvironment;
import uk.ac.york.cs.asbh.lang.cs2as.target.lookup.util.TargetDefaultLookupVisitor;
import uk.ac.york.cs.asbh.lang.cs2as.target.util.Visitable;
import uk.ac.york.cs.asbh.ui.contentassist.AbstractASBHLangProposalProvider;
import uk.ac.york.cs.asbh.ui.contentassist.ContentAssitLookupEnvironment;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class ASBHLangProposalProvider extends AbstractASBHLangProposalProvider {
  @Override
  public void completePathElementCS_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    Visitable asElement = this.getVisitableElement(model);
    boolean _notEquals = (!Objects.equal(asElement, null));
    if (_notEquals) {
      ContentAssitLookupEnvironment lookupEnv = new ContentAssitLookupEnvironment(((EObject) asElement));
      TargetDefaultLookupVisitor visitor = new TargetDefaultLookupVisitor(lookupEnv);
      LookupEnvironment _accept = asElement.<LookupEnvironment>accept(visitor);
      this.createProposals(_accept, context, acceptor);
    }
    super.completePathElementCS_Name(model, assignment, context, acceptor);
  }
  
  public Visitable getVisitableElement(final EObject model) {
    EObject sElement = model;
    while ((!Objects.equal(sElement, null))) {
      {
        if ((sElement instanceof SElement)) {
          EObject asElement = ((SElement)sElement).getAst();
          if ((asElement instanceof Visitable)) {
            return ((Visitable)asElement);
          }
        }
        EObject _eContainer = sElement.eContainer();
        sElement = _eContainer;
      }
    }
    return null;
  }
  
  public void createProposals(final LookupEnvironment lookupEnv, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EList<NamedElement> _namedElements = lookupEnv.getNamedElements();
    for (final NamedElement namedElement : _namedElements) {
      String _name = namedElement.getName();
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_name, context);
      acceptor.accept(_createCompletionProposal);
    }
  }
}
