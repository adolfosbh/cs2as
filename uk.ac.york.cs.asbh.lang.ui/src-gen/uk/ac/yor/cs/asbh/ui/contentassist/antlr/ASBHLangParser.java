/*
 * generated by Xtext
 */
package uk.ac.yor.cs.asbh.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.yor.cs.asbh.services.ASBHLangGrammarAccess;

public class ASBHLangParser extends AbstractContentAssistParser {
	
	@Inject
	private ASBHLangGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.yor.cs.asbh.ui.contentassist.antlr.internal.InternalASBHLangParser createParser() {
		uk.ac.yor.cs.asbh.ui.contentassist.antlr.internal.InternalASBHLangParser result = new uk.ac.yor.cs.asbh.ui.contentassist.antlr.internal.InternalASBHLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getYAccess().getAlternatives(), "rule__Y__Alternatives");
					put(grammarAccess.getXAccess().getAlternatives_3(), "rule__X__Alternatives_3");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getXAccess().getGroup(), "rule__X__Group__0");
					put(grammarAccess.getZAccess().getGroup(), "rule__Z__Group__0");
					put(grammarAccess.getY1Access().getGroup(), "rule__Y1__Group__0");
					put(grammarAccess.getY2Access().getGroup(), "rule__Y2__Group__0");
					put(grammarAccess.getPathNameCSAccess().getGroup(), "rule__PathNameCS__Group__0");
					put(grammarAccess.getPathNameCSAccess().getGroup_1(), "rule__PathNameCS__Group_1__0");
					put(grammarAccess.getRootAccess().getOwnedXAssignment_3(), "rule__Root__OwnedXAssignment_3");
					put(grammarAccess.getXAccess().getNameAssignment_2(), "rule__X__NameAssignment_2");
					put(grammarAccess.getXAccess().getIsA1Assignment_3_0(), "rule__X__IsA1Assignment_3_0");
					put(grammarAccess.getXAccess().getIsA2Assignment_3_1(), "rule__X__IsA2Assignment_3_1");
					put(grammarAccess.getXAccess().getOwnsYAssignment_5(), "rule__X__OwnsYAssignment_5");
					put(grammarAccess.getZAccess().getRefersAssignment_2(), "rule__Z__RefersAssignment_2");
					put(grammarAccess.getY1Access().getNameAssignment_1(), "rule__Y1__NameAssignment_1");
					put(grammarAccess.getY1Access().getOwnsZAssignment_3(), "rule__Y1__OwnsZAssignment_3");
					put(grammarAccess.getY2Access().getNameAssignment_1(), "rule__Y2__NameAssignment_1");
					put(grammarAccess.getY2Access().getOwnsZAssignment_3(), "rule__Y2__OwnsZAssignment_3");
					put(grammarAccess.getPathNameCSAccess().getPathAssignment_0(), "rule__PathNameCS__PathAssignment_0");
					put(grammarAccess.getPathNameCSAccess().getPathAssignment_1_1(), "rule__PathNameCS__PathAssignment_1_1");
					put(grammarAccess.getPathElementCSAccess().getNameAssignment(), "rule__PathElementCS__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.yor.cs.asbh.ui.contentassist.antlr.internal.InternalASBHLangParser typedParser = (uk.ac.yor.cs.asbh.ui.contentassist.antlr.internal.InternalASBHLangParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ASBHLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ASBHLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
