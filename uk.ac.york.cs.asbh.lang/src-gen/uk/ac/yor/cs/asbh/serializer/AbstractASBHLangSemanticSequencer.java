/*
 * generated by Xtext
 */
package uk.ac.yor.cs.asbh.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import uk.ac.yor.cs.asbh.services.ASBHLangGrammarAccess;
import uk.ac.york.cs.asbh.lang.cs2as.source.PathElementCS;
import uk.ac.york.cs.asbh.lang.cs2as.source.PathNameCS;
import uk.ac.york.cs.asbh.lang.cs2as.source.SRoot;
import uk.ac.york.cs.asbh.lang.cs2as.source.SourcePackage;
import uk.ac.york.cs.asbh.lang.cs2as.source.X;
import uk.ac.york.cs.asbh.lang.cs2as.source.Y1;
import uk.ac.york.cs.asbh.lang.cs2as.source.Y2;
import uk.ac.york.cs.asbh.lang.cs2as.source.Z;

@SuppressWarnings("all")
public abstract class AbstractASBHLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ASBHLangGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == SourcePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SourcePackage.PATH_ELEMENT_CS:
				sequence_PathElementCS(context, (PathElementCS) semanticObject); 
				return; 
			case SourcePackage.PATH_NAME_CS:
				sequence_PathNameCS(context, (PathNameCS) semanticObject); 
				return; 
			case SourcePackage.SROOT:
				sequence_Root(context, (SRoot) semanticObject); 
				return; 
			case SourcePackage.X:
				sequence_X(context, (X) semanticObject); 
				return; 
			case SourcePackage.Y1:
				sequence_Y1(context, (Y1) semanticObject); 
				return; 
			case SourcePackage.Y2:
				sequence_Y2(context, (Y2) semanticObject); 
				return; 
			case SourcePackage.Z:
				sequence_Z(context, (Z) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PathElementCS(EObject context, PathElementCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (path+=PathElementCS path+=PathElementCS*)
	 */
	protected void sequence_PathNameCS(EObject context, PathNameCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ownedX+=X*)
	 */
	protected void sequence_Root(EObject context, SRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID (isA1?='isA1' | isA2?='isA2')? ownsY+=Y*)
	 */
	protected void sequence_X(EObject context, X semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID ownsZ=Z?)
	 */
	protected void sequence_Y1(EObject context, Y1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID ownsZ=Z?)
	 */
	protected void sequence_Y2(EObject context, Y2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refers=PathNameCS?)
	 */
	protected void sequence_Z(EObject context, Z semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
