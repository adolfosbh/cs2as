/*
 * generated by Xtext
 */
package uk.ac.yor.cs.asbh.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ASBHLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSRootAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedXXParserRuleCall_3_0 = (RuleCall)cOwnedXAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Root returns SRoot:
		//	{SRoot} "Root" "{" ownedX+=X* "}";
		@Override public ParserRule getRule() { return rule; }

		//{SRoot} "Root" "{" ownedX+=X* "}"
		public Group getGroup() { return cGroup; }

		//{SRoot}
		public Action getSRootAction_0() { return cSRootAction_0; }

		//"Root"
		public Keyword getRootKeyword_1() { return cRootKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ownedX+=X*
		public Assignment getOwnedXAssignment_3() { return cOwnedXAssignment_3; }

		//X
		public RuleCall getOwnedXXParserRuleCall_3_0() { return cOwnedXXParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class YElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Y");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cY1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cY2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Y:
		//	Y1 | Y2;
		@Override public ParserRule getRule() { return rule; }

		//Y1 | Y2
		public Alternatives getAlternatives() { return cAlternatives; }

		//Y1
		public RuleCall getY1ParserRuleCall_0() { return cY1ParserRuleCall_0; }

		//Y2
		public RuleCall getY2ParserRuleCall_1() { return cY2ParserRuleCall_1; }
	}

	public class XElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "X");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIsA1Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cIsA1IsA1Keyword_2_0_0 = (Keyword)cIsA1Assignment_2_0.eContents().get(0);
		private final Assignment cIsA2Assignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsA2IsA2Keyword_2_1_0 = (Keyword)cIsA2Assignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnsYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnsYYParserRuleCall_4_0 = (RuleCall)cOwnsYAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//X:
		//	{X} "X" (isA1?="isA1" | isA2?="isA2")? "{" ownsY+=Y* "}";
		@Override public ParserRule getRule() { return rule; }

		//{X} "X" (isA1?="isA1" | isA2?="isA2")? "{" ownsY+=Y* "}"
		public Group getGroup() { return cGroup; }

		//{X}
		public Action getXAction_0() { return cXAction_0; }

		//"X"
		public Keyword getXKeyword_1() { return cXKeyword_1; }

		//(isA1?="isA1" | isA2?="isA2")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//isA1?="isA1"
		public Assignment getIsA1Assignment_2_0() { return cIsA1Assignment_2_0; }

		//"isA1"
		public Keyword getIsA1IsA1Keyword_2_0_0() { return cIsA1IsA1Keyword_2_0_0; }

		//isA2?="isA2"
		public Assignment getIsA2Assignment_2_1() { return cIsA2Assignment_2_1; }

		//"isA2"
		public Keyword getIsA2IsA2Keyword_2_1_0() { return cIsA2IsA2Keyword_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//ownsY+=Y*
		public Assignment getOwnsYAssignment_4() { return cOwnsYAssignment_4; }

		//Y
		public RuleCall getOwnsYYParserRuleCall_4_0() { return cOwnsYYParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Z");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cZAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cZKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////EBoolean returns ecore::EBoolean:
		////	'true' | 'false';
		//Z:
		//	{Z} "Z" name=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//{Z} "Z" name=STRING?
		public Group getGroup() { return cGroup; }

		//{Z}
		public Action getZAction_0() { return cZAction_0; }

		//"Z"
		public Keyword getZKeyword_1() { return cZKeyword_1; }

		//name=STRING?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class Y1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Y1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cY1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnsZAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnsZZParserRuleCall_3_0 = (RuleCall)cOwnsZAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Y1:
		//	"Y1" name=STRING "{" ownsZ=Z? "}";
		@Override public ParserRule getRule() { return rule; }

		//"Y1" name=STRING "{" ownsZ=Z? "}"
		public Group getGroup() { return cGroup; }

		//"Y1"
		public Keyword getY1Keyword_0() { return cY1Keyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ownsZ=Z?
		public Assignment getOwnsZAssignment_3() { return cOwnsZAssignment_3; }

		//Z
		public RuleCall getOwnsZZParserRuleCall_3_0() { return cOwnsZZParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Y2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Y2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cY2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnsZAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnsZZParserRuleCall_3_0 = (RuleCall)cOwnsZAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Y2:
		//	"Y2" name=STRING "{" ownsZ=Z? "}";
		@Override public ParserRule getRule() { return rule; }

		//"Y2" name=STRING "{" ownsZ=Z? "}"
		public Group getGroup() { return cGroup; }

		//"Y2"
		public Keyword getY2Keyword_0() { return cY2Keyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ownsZ=Z?
		public Assignment getOwnsZAssignment_3() { return cOwnsZAssignment_3; }

		//Z
		public RuleCall getOwnsZZParserRuleCall_3_0() { return cOwnsZZParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final RootElements pRoot;
	private final YElements pY;
	private final XElements pX;
	private final ZElements pZ;
	private final Y1Elements pY1;
	private final Y2Elements pY2;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ASBHLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pY = new YElements();
		this.pX = new XElements();
		this.pZ = new ZElements();
		this.pY1 = new Y1Elements();
		this.pY2 = new Y2Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.yor.cs.asbh.ASBHLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root returns SRoot:
	//	{SRoot} "Root" "{" ownedX+=X* "}";
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Y:
	//	Y1 | Y2;
	public YElements getYAccess() {
		return pY;
	}
	
	public ParserRule getYRule() {
		return getYAccess().getRule();
	}

	//X:
	//	{X} "X" (isA1?="isA1" | isA2?="isA2")? "{" ownsY+=Y* "}";
	public XElements getXAccess() {
		return pX;
	}
	
	public ParserRule getXRule() {
		return getXAccess().getRule();
	}

	////EBoolean returns ecore::EBoolean:
	////	'true' | 'false';
	//Z:
	//	{Z} "Z" name=STRING?;
	public ZElements getZAccess() {
		return pZ;
	}
	
	public ParserRule getZRule() {
		return getZAccess().getRule();
	}

	//Y1:
	//	"Y1" name=STRING "{" ownsZ=Z? "}";
	public Y1Elements getY1Access() {
		return pY1;
	}
	
	public ParserRule getY1Rule() {
		return getY1Access().getRule();
	}

	//Y2:
	//	"Y2" name=STRING "{" ownsZ=Z? "}";
	public Y2Elements getY2Access() {
		return pY2;
	}
	
	public ParserRule getY2Rule() {
		return getY2Access().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
