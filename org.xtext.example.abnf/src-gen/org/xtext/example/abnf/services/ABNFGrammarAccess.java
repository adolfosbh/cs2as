/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.abnf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ABNFGrammarAccess extends AbstractGrammarElementFinder {
	
	public class Abnf_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.abnf_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbnf_definitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//abnf_definition:
		//	{abnf_definition} rules+=rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//{abnf_definition} rules+=rule*
		public Group getGroup() { return cGroup; }
		
		//{abnf_definition}
		public Action getAbnf_definitionAction_0() { return cAbnf_definitionAction_0; }
		
		//rules+=rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHierarchy_ruleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecification_ruleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rule:
		//	hierarchy_rule
		//	| specification_rule;
		@Override public ParserRule getRule() { return rule; }
		
		//hierarchy_rule | specification_rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//hierarchy_rule
		public RuleCall getHierarchy_ruleParserRuleCall_0() { return cHierarchy_ruleParserRuleCall_0; }
		
		//specification_rule
		public RuleCall getSpecification_ruleParserRuleCall_1() { return cSpecification_ruleParserRuleCall_1; }
	}
	public class Hierarchy_ruleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.hierarchy_rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassIdClassIdParserRuleCall_0_0 = (RuleCall)cClassIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOUBLEARROWTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSubclassIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubclassIdSubclassIdParserRuleCall_1_1_0 = (RuleCall)cSubclassIdAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//hierarchy_rule:
		//	classId=classId (DOUBLEARROW subclassId+=subclassId)+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//classId=classId (DOUBLEARROW subclassId+=subclassId)+ ';'
		public Group getGroup() { return cGroup; }
		
		//classId=classId
		public Assignment getClassIdAssignment_0() { return cClassIdAssignment_0; }
		
		//classId
		public RuleCall getClassIdClassIdParserRuleCall_0_0() { return cClassIdClassIdParserRuleCall_0_0; }
		
		//(DOUBLEARROW subclassId+=subclassId)+
		public Group getGroup_1() { return cGroup_1; }
		
		//DOUBLEARROW
		public RuleCall getDOUBLEARROWTerminalRuleCall_1_0() { return cDOUBLEARROWTerminalRuleCall_1_0; }
		
		//subclassId+=subclassId
		public Assignment getSubclassIdAssignment_1_1() { return cSubclassIdAssignment_1_1; }
		
		//subclassId
		public RuleCall getSubclassIdSubclassIdParserRuleCall_1_1_0() { return cSubclassIdSubclassIdParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class Specification_ruleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.specification_rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassIdClassIdParserRuleCall_0_0 = (RuleCall)cClassIdAssignment_0.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeAttributeParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//specification_rule:
		//	classId=classId ARROW attribute+=attribute* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//classId=classId ARROW attribute+=attribute* ';'
		public Group getGroup() { return cGroup; }
		
		//classId=classId
		public Assignment getClassIdAssignment_0() { return cClassIdAssignment_0; }
		
		//classId
		public RuleCall getClassIdClassIdParserRuleCall_0_0() { return cClassIdClassIdParserRuleCall_0_0; }
		
		//ARROW
		public RuleCall getARROWTerminalRuleCall_1() { return cARROWTerminalRuleCall_1; }
		
		//attribute+=attribute*
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//attribute
		public RuleCall getAttributeAttributeParserRuleCall_2_0() { return cAttributeAttributeParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ClassIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.classId");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//classId:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class SubclassIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.subclassId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsAbstractAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIsAbstractABSTRACTTerminalRuleCall_1_0_0 = (RuleCall)cIsAbstractAssignment_1_0.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		
		//subclassId:
		//	id=ID
		//	| isAbstract?=ABSTRACT id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID | isAbstract?=ABSTRACT id=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//isAbstract?=ABSTRACT id=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//isAbstract?=ABSTRACT
		public Assignment getIsAbstractAssignment_1_0() { return cIsAbstractAssignment_1_0; }
		
		//ABSTRACT
		public RuleCall getIsAbstractABSTRACTTerminalRuleCall_1_0_0() { return cIsAbstractABSTRACTTerminalRuleCall_1_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_0() { return cIdIDTerminalRuleCall_1_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOPTAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOPTALeftSquareBracketKeyword_0_0 = (Keyword)cOPTAAssignment_0.eContents().get(0);
		private final Assignment cSEMAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSEMLessThanSignKeyword_1_0 = (Keyword)cSEMAssignment_1.eContents().get(0);
		private final Assignment cNAMEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNAMEIDTerminalRuleCall_2_0 = (RuleCall)cNAMEAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTYPEAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTYPEIDTerminalRuleCall_4_0 = (RuleCall)cTYPEAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cMULTAAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final Keyword cMULTAAsteriskKeyword_6_0_0 = (Keyword)cMULTAAssignment_6_0.eContents().get(0);
		private final Assignment cMULTBAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final Keyword cMULTBPlusSignKeyword_6_1_0 = (Keyword)cMULTBAssignment_6_1.eContents().get(0);
		private final Assignment cOPTBAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final Keyword cOPTBQuestionMarkKeyword_6_2_0 = (Keyword)cOPTBAssignment_6_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//attribute:
		//	OPTA='['? SEM='<'? NAME=ID ':' TYPE=ID '>'? (MULTA='*' | MULTB='+' | OPTB='?')? ']'?;
		@Override public ParserRule getRule() { return rule; }
		
		//OPTA='['? SEM='<'? NAME=ID ':' TYPE=ID '>'? (MULTA='*' | MULTB='+' | OPTB='?')? ']'?
		public Group getGroup() { return cGroup; }
		
		//OPTA='['?
		public Assignment getOPTAAssignment_0() { return cOPTAAssignment_0; }
		
		//'['
		public Keyword getOPTALeftSquareBracketKeyword_0_0() { return cOPTALeftSquareBracketKeyword_0_0; }
		
		//SEM='<'?
		public Assignment getSEMAssignment_1() { return cSEMAssignment_1; }
		
		//'<'
		public Keyword getSEMLessThanSignKeyword_1_0() { return cSEMLessThanSignKeyword_1_0; }
		
		//NAME=ID
		public Assignment getNAMEAssignment_2() { return cNAMEAssignment_2; }
		
		//ID
		public RuleCall getNAMEIDTerminalRuleCall_2_0() { return cNAMEIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//TYPE=ID
		public Assignment getTYPEAssignment_4() { return cTYPEAssignment_4; }
		
		//ID
		public RuleCall getTYPEIDTerminalRuleCall_4_0() { return cTYPEIDTerminalRuleCall_4_0; }
		
		//'>'?
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//(MULTA='*' | MULTB='+' | OPTB='?')?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//MULTA='*'
		public Assignment getMULTAAssignment_6_0() { return cMULTAAssignment_6_0; }
		
		//'*'
		public Keyword getMULTAAsteriskKeyword_6_0_0() { return cMULTAAsteriskKeyword_6_0_0; }
		
		//MULTB='+'
		public Assignment getMULTBAssignment_6_1() { return cMULTBAssignment_6_1; }
		
		//'+'
		public Keyword getMULTBPlusSignKeyword_6_1_0() { return cMULTBPlusSignKeyword_6_1_0; }
		
		//OPTB='?'
		public Assignment getOPTBAssignment_6_2() { return cOPTBAssignment_6_2; }
		
		//'?'
		public Keyword getOPTBQuestionMarkKeyword_6_2_0() { return cOPTBQuestionMarkKeyword_6_2_0; }
		
		//']'?
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	
	
	private final Abnf_definitionElements pAbnf_definition;
	private final RuleElements pRule;
	private final Hierarchy_ruleElements pHierarchy_rule;
	private final Specification_ruleElements pSpecification_rule;
	private final ClassIdElements pClassId;
	private final SubclassIdElements pSubclassId;
	private final AttributeElements pAttribute;
	private final TerminalRule tABSTRACT;
	private final TerminalRule tARROW;
	private final TerminalRule tDOUBLEARROW;
	private final TerminalRule tID;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public ABNFGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pAbnf_definition = new Abnf_definitionElements();
		this.pRule = new RuleElements();
		this.pHierarchy_rule = new Hierarchy_ruleElements();
		this.pSpecification_rule = new Specification_ruleElements();
		this.pClassId = new ClassIdElements();
		this.pSubclassId = new SubclassIdElements();
		this.pAttribute = new AttributeElements();
		this.tABSTRACT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.ABSTRACT");
		this.tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.ARROW");
		this.tDOUBLEARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.DOUBLEARROW");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.ID");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.abnf.ABNF.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.abnf.ABNF".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//abnf_definition:
	//	{abnf_definition} rules+=rule*;
	public Abnf_definitionElements getAbnf_definitionAccess() {
		return pAbnf_definition;
	}
	
	public ParserRule getAbnf_definitionRule() {
		return getAbnf_definitionAccess().getRule();
	}
	
	//rule:
	//	hierarchy_rule
	//	| specification_rule;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//hierarchy_rule:
	//	classId=classId (DOUBLEARROW subclassId+=subclassId)+ ';';
	public Hierarchy_ruleElements getHierarchy_ruleAccess() {
		return pHierarchy_rule;
	}
	
	public ParserRule getHierarchy_ruleRule() {
		return getHierarchy_ruleAccess().getRule();
	}
	
	//specification_rule:
	//	classId=classId ARROW attribute+=attribute* ';';
	public Specification_ruleElements getSpecification_ruleAccess() {
		return pSpecification_rule;
	}
	
	public ParserRule getSpecification_ruleRule() {
		return getSpecification_ruleAccess().getRule();
	}
	
	//classId:
	//	id=ID;
	public ClassIdElements getClassIdAccess() {
		return pClassId;
	}
	
	public ParserRule getClassIdRule() {
		return getClassIdAccess().getRule();
	}
	
	//subclassId:
	//	id=ID
	//	| isAbstract?=ABSTRACT id=ID;
	public SubclassIdElements getSubclassIdAccess() {
		return pSubclassId;
	}
	
	public ParserRule getSubclassIdRule() {
		return getSubclassIdAccess().getRule();
	}
	
	//attribute:
	//	OPTA='['? SEM='<'? NAME=ID ':' TYPE=ID '>'? (MULTA='*' | MULTB='+' | OPTB='?')? ']'?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//terminal ABSTRACT:
	//	'!';
	public TerminalRule getABSTRACTRule() {
		return tABSTRACT;
	}
	
	//terminal ARROW:
	//	'->';
	public TerminalRule getARROWRule() {
		return tARROW;
	}
	
	//terminal DOUBLEARROW:
	//	'=>';
	public TerminalRule getDOUBLEARROWRule() {
		return tDOUBLEARROW;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$' | '#' | '-')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\n' | '\r'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
