/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.abnf.aBNF.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.abnf.aBNF.ABNFPackage;
import org.xtext.example.abnf.aBNF.classId;
import org.xtext.example.abnf.aBNF.rule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.abnf.aBNF.impl.ruleImpl#getClassId <em>Class Id</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ruleImpl extends MinimalEObjectImpl.Container implements rule
{
  /**
   * The cached value of the '{@link #getClassId() <em>Class Id</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassId()
   * @generated
   * @ordered
   */
  protected classId classId;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ruleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ABNFPackage.Literals.RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public classId getClassId()
  {
    return classId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassId(classId newClassId, NotificationChain msgs)
  {
    classId oldClassId = classId;
    classId = newClassId;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ABNFPackage.RULE__CLASS_ID, oldClassId, newClassId);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClassId(classId newClassId)
  {
    if (newClassId != classId)
    {
      NotificationChain msgs = null;
      if (classId != null)
        msgs = ((InternalEObject)classId).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ABNFPackage.RULE__CLASS_ID, null, msgs);
      if (newClassId != null)
        msgs = ((InternalEObject)newClassId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ABNFPackage.RULE__CLASS_ID, null, msgs);
      msgs = basicSetClassId(newClassId, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ABNFPackage.RULE__CLASS_ID, newClassId, newClassId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ABNFPackage.RULE__CLASS_ID:
        return basicSetClassId(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ABNFPackage.RULE__CLASS_ID:
        return getClassId();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ABNFPackage.RULE__CLASS_ID:
        setClassId((classId)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ABNFPackage.RULE__CLASS_ID:
        setClassId((classId)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ABNFPackage.RULE__CLASS_ID:
        return classId != null;
    }
    return super.eIsSet(featureID);
  }

} //ruleImpl
