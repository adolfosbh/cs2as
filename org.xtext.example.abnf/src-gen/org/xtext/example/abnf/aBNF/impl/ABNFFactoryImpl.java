/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.abnf.aBNF.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.abnf.aBNF.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ABNFFactoryImpl extends EFactoryImpl implements ABNFFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ABNFFactory init()
  {
    try
    {
      ABNFFactory theABNFFactory = (ABNFFactory)EPackage.Registry.INSTANCE.getEFactory(ABNFPackage.eNS_URI);
      if (theABNFFactory != null)
      {
        return theABNFFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ABNFFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ABNFFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ABNFPackage.ABNF_DEFINITION: return createabnf_definition();
      case ABNFPackage.RULE: return createrule();
      case ABNFPackage.HIERARCHY_RULE: return createhierarchy_rule();
      case ABNFPackage.SPECIFICATION_RULE: return createspecification_rule();
      case ABNFPackage.CLASS_ID: return createclassId();
      case ABNFPackage.SUBCLASS_ID: return createsubclassId();
      case ABNFPackage.ATTRIBUTE: return createattribute();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public abnf_definition createabnf_definition()
  {
    abnf_definitionImpl abnf_definition = new abnf_definitionImpl();
    return abnf_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rule createrule()
  {
    ruleImpl rule = new ruleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public hierarchy_rule createhierarchy_rule()
  {
    hierarchy_ruleImpl hierarchy_rule = new hierarchy_ruleImpl();
    return hierarchy_rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public specification_rule createspecification_rule()
  {
    specification_ruleImpl specification_rule = new specification_ruleImpl();
    return specification_rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public classId createclassId()
  {
    classIdImpl classId = new classIdImpl();
    return classId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public subclassId createsubclassId()
  {
    subclassIdImpl subclassId = new subclassIdImpl();
    return subclassId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public attribute createattribute()
  {
    attributeImpl attribute = new attributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ABNFPackage getABNFPackage()
  {
    return (ABNFPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ABNFPackage getPackage()
  {
    return ABNFPackage.eINSTANCE;
  }

} //ABNFFactoryImpl
