/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.abnf.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.abnf.services.ABNFGrammarAccess;

@SuppressWarnings("all")
public class ABNFSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ABNFGrammarAccess grammarAccess;
	protected AbstractElementAlias match_attribute_GreaterThanSignKeyword_5_q;
	protected AbstractElementAlias match_attribute_RightSquareBracketKeyword_7_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ABNFGrammarAccess) access;
		match_attribute_GreaterThanSignKeyword_5_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getGreaterThanSignKeyword_5());
		match_attribute_RightSquareBracketKeyword_7_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getRightSquareBracketKeyword_7());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getABSTRACTRule())
			return getABSTRACTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getARROWRule())
			return getARROWToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOUBLEARROWRule())
			return getDOUBLEARROWToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ABSTRACT	: '!';
	 */
	protected String getABSTRACTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!";
	}
	
	/**
	 * terminal ARROW		: '->';
	 */
	protected String getARROWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	/**
	 * terminal DOUBLEARROW	: '=>';
	 */
	protected String getDOUBLEARROWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=>";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_attribute_GreaterThanSignKeyword_5_q.equals(syntax))
				emit_attribute_GreaterThanSignKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_attribute_RightSquareBracketKeyword_7_q.equals(syntax))
				emit_attribute_RightSquareBracketKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '>'?
	 *
	 * This ambiguous syntax occurs at:
	 *     TYPE=ID (ambiguity) ']'? (rule end)
	 *     TYPE=ID (ambiguity) MULTA='*'
	 *     TYPE=ID (ambiguity) MULTB='+'
	 *     TYPE=ID (ambiguity) OPTB='?'
	 */
	protected void emit_attribute_GreaterThanSignKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ']'?
	 *
	 * This ambiguous syntax occurs at:
	 *     MULTA='*' (ambiguity) (rule end)
	 *     MULTB='+' (ambiguity) (rule end)
	 *     OPTB='?' (ambiguity) (rule end)
	 *     TYPE=ID '>'? (ambiguity) (rule end)
	 */
	protected void emit_attribute_RightSquareBracketKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
