import 'Environment.ecore'
--import 'Environment.ocl' FIXME imported OCL doesn't work
import 'TargetMM1.ecore'

package env

context Environment
def : getBs(bName : String) : OrderedSet(target::B) =
	namedElements->selectByKind(target::B)->select(name = bName)

def : getCs(cName : String) : OrderedSet(target::C) =
	namedElements->selectByKind(target::C)->select(name = cName)
endpackage

package ocl

context OclElement
def: parentEnv() : env::Environment =
	let parent = oclContainer() in if parent = null then env::Environment { } else parent._env(self) endif

def: _env(child : OclElement) : env::Environment =
	parentEnv()

def: lookupB(name : String) : target::B =
	lookupBs(name)->first()
	
def: lookupC(name : String) : target::C =
	lookupCs(name)->first()

def: lookupBs(name : String) : OrderedSet(target::B) =
	self._env(null).getBs(name)

def: lookupCs(name : String) : OrderedSet(target::C) =
	self._env(null).getCs(name)
endpackage

package target

context TRoot
def : _env(child : ocl::OclElement) : env::Environment =
	parentEnv()
	
context A1
def : _env(child : ocl::OclElement) : env::Environment =
	_env_B(child)
	
def : _env_B(child : ocl::OclElement) : env::Environment =
	let ownedBs = self.ownsB
	in parentEnv().nestedEnv()
		.addElements(ownedBs->select(x | ownedBs->indexOf(x) < ownedBs->indexOf(child)))

context A2
def : _env(child : ocl::OclElement) : env::Environment =
	_env_C(child)
	
def : _env_C(child : ocl::OclElement) : env::Environment =
	let ownedCs = self.ownsC
	in parentEnv().nestedEnv()
		.addElements(ownedCs->select(x| ownedCs->indexOf(x) < ownedCs->indexOf(child)))

context B
def : _env(child : ocl::OclElement) : env::Environment =
	parentEnv()
	
context C
def : _env(child : ocl:: OclElement) : env::Environment =
	parentEnv()

context D
def : _env(child : ocl::OclElement) : env::Environment =
	parentEnv()
	
endpackage
