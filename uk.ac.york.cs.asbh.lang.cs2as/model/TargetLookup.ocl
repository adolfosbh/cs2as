import 'Environment.ecore'
--import 'Environment.ocl' FIXME imported OCL doesn't work
import 'TargetMM1.ecore'

--package env
-- FIXME this description should describe which property name should be used
--context Environment::addElement(namedElement : target::NamedElement)
--pre : not self.namedElements->exists(x | x.name = namedElement.name)
--endpackage

package ocl

context OclElement
def: parentEnv() : env::Environment =
	let parent = oclContainer() in if parent = null then env::Environment { } else parent._env(self) endif

context OclElement
def: _env(child : OclElement) : env::Environment =
	parentEnv()
	
endpackage

package target

context TRoot
def : _env(child : ocl::OclElement) : env::Environment =
	parentEnv()
	
context A1
def : _env(child : ocl::OclElement) : env::Environment =
	let ownedBs = self.ownsB
	in parentEnv().nestedEnv()
		.addElements(ownedBs->select(x | ownedBs->indexOf(x) < ownedBs->indexOf(child)))

context A2
def : _env(child : ocl::OclElement) : env::Environment =
	let ownedCs = self.ownsC
	in parentEnv().nestedEnv()
		.addElements(ownedCs->select(x| ownedCs->indexOf(x) < ownedCs->indexOf(child)))

context B
def : _env(child : ocl::OclElement) : env::Environment =
	parentEnv()
	
context C
def : _env(child : ocl:: OclElement) : env::Environment =
	parentEnv()

context D
def : _env(child : ocl::OclElement) : env::Environment =
	parentEnv()
	
endpackage
