import 'SourceMM1.ecore'
import 'TargetMM1.ecore'
import 'SourceDisambiguation.ocl'
import 'TargetLookup.ocl'

package source

context SRoot
def : ast() : target::TRoot =
	target::TRoot {
		ownedA = ownedX.ast()
	}

context X
def : ast() : target::A =
	if disambiguatesToA1()
	then target::A1 {
		name = name,
		ownsB = ownsY.oclAsType(Y1).ast()
	}
	else if disambiguatesToA2() 
		then  target::A2 {
			name = name,
			ownsC = ownsY.oclAsType(Y2).ast()
		}
		else target::A3 {
			name = name,
			ownsC = ownsY.oclAsType(Y2).ast()
		}
	endif endif

context Y1	
def : ast() : target::B =
	target::B {
		name = name,
		ownsD = ownsZ.ast()
	}
	
context Y2	
def : ast() : target::C =
	target::C {
		name = name,
		ownsD = ownsZ.ast()
	}

context Z
def : ast() : target::D =
	if toY.oclIsKindOf(source::Y1)
	then target::D {
		toA = toY.oclAsType(source::Y1).ast().toA1,
		refsB = if refers = null
				then null
				else ast().lookupB(refers)
				endif
	}
	else target::D {
		toA = toY.oclAsType(source::Y2).ast().toA2,
		refsC = if refers = null
				then null
				else ast().lookupC(refers)
				endif
	}
	endif

endpackage

