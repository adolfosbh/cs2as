/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.plsql.dDL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.plsql.dDL.DDLPackage;
import org.xtext.example.plsql.dDL.Foreign_key;
import org.xtext.example.plsql.dDL.Tabname;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Foreign key</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.plsql.dDL.impl.Foreign_keyImpl#getTabname <em>Tabname</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Foreign_keyImpl extends KeyImpl implements Foreign_key
{
  /**
   * The cached value of the '{@link #getTabname() <em>Tabname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTabname()
   * @generated
   * @ordered
   */
  protected Tabname tabname;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Foreign_keyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DDLPackage.Literals.FOREIGN_KEY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tabname getTabname()
  {
    return tabname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTabname(Tabname newTabname, NotificationChain msgs)
  {
    Tabname oldTabname = tabname;
    tabname = newTabname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DDLPackage.FOREIGN_KEY__TABNAME, oldTabname, newTabname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTabname(Tabname newTabname)
  {
    if (newTabname != tabname)
    {
      NotificationChain msgs = null;
      if (tabname != null)
        msgs = ((InternalEObject)tabname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DDLPackage.FOREIGN_KEY__TABNAME, null, msgs);
      if (newTabname != null)
        msgs = ((InternalEObject)newTabname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DDLPackage.FOREIGN_KEY__TABNAME, null, msgs);
      msgs = basicSetTabname(newTabname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DDLPackage.FOREIGN_KEY__TABNAME, newTabname, newTabname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DDLPackage.FOREIGN_KEY__TABNAME:
        return basicSetTabname(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DDLPackage.FOREIGN_KEY__TABNAME:
        return getTabname();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DDLPackage.FOREIGN_KEY__TABNAME:
        setTabname((Tabname)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DDLPackage.FOREIGN_KEY__TABNAME:
        setTabname((Tabname)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DDLPackage.FOREIGN_KEY__TABNAME:
        return tabname != null;
    }
    return super.eIsSet(featureID);
  }

} //Foreign_keyImpl
