/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.plsql.dDL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.plsql.dDL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DDLFactoryImpl extends EFactoryImpl implements DDLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DDLFactory init()
  {
    try
    {
      DDLFactory theDDLFactory = (DDLFactory)EPackage.Registry.INSTANCE.getEFactory(DDLPackage.eNS_URI);
      if (theDDLFactory != null)
      {
        return theDDLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DDLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DDLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DDLPackage.DATA_DEFINITION: return createData_definition();
      case DDLPackage.DEFINITION: return createDefinition();
      case DDLPackage.CREATE_TABLE: return createCreate_table();
      case DDLPackage.COLUMN: return createColumn();
      case DDLPackage.ALTER_TABLE: return createAlter_table();
      case DDLPackage.COMMENT: return createComment();
      case DDLPackage.CREATE_SEQUENCE: return createCreate_sequence();
      case DDLPackage.SEQUENCE_OPTIONS: return createSequence_options();
      case DDLPackage.CONSTRAINT: return createConstraint();
      case DDLPackage.KEY: return createKey();
      case DDLPackage.PRIMARY_KEY: return createPrimary_key();
      case DDLPackage.UNIQUE_KEY: return createUnique_key();
      case DDLPackage.FOREIGN_KEY: return createForeign_key();
      case DDLPackage.COLNAME: return createColname();
      case DDLPackage.TABNAME: return createTabname();
      case DDLPackage.ISNULL: return createISNULL();
      case DDLPackage.TYPE: return createTYPE();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Data_definition createData_definition()
  {
    Data_definitionImpl data_definition = new Data_definitionImpl();
    return data_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Create_table createCreate_table()
  {
    Create_tableImpl create_table = new Create_tableImpl();
    return create_table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Column createColumn()
  {
    ColumnImpl column = new ColumnImpl();
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alter_table createAlter_table()
  {
    Alter_tableImpl alter_table = new Alter_tableImpl();
    return alter_table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comment createComment()
  {
    CommentImpl comment = new CommentImpl();
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Create_sequence createCreate_sequence()
  {
    Create_sequenceImpl create_sequence = new Create_sequenceImpl();
    return create_sequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sequence_options createSequence_options()
  {
    Sequence_optionsImpl sequence_options = new Sequence_optionsImpl();
    return sequence_options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Key createKey()
  {
    KeyImpl key = new KeyImpl();
    return key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Primary_key createPrimary_key()
  {
    Primary_keyImpl primary_key = new Primary_keyImpl();
    return primary_key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Unique_key createUnique_key()
  {
    Unique_keyImpl unique_key = new Unique_keyImpl();
    return unique_key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Foreign_key createForeign_key()
  {
    Foreign_keyImpl foreign_key = new Foreign_keyImpl();
    return foreign_key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Colname createColname()
  {
    ColnameImpl colname = new ColnameImpl();
    return colname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tabname createTabname()
  {
    TabnameImpl tabname = new TabnameImpl();
    return tabname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ISNULL createISNULL()
  {
    ISNULLImpl isnull = new ISNULLImpl();
    return isnull;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TYPE createTYPE()
  {
    TYPEImpl type = new TYPEImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DDLPackage getDDLPackage()
  {
    return (DDLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DDLPackage getPackage()
  {
    return DDLPackage.eINSTANCE;
  }

} //DDLFactoryImpl
