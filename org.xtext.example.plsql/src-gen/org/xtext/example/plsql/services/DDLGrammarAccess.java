/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.plsql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DDLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class Data_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Data_definition");
		private final Assignment cDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_0 = (RuleCall)cDefinitionsAssignment.eContents().get(0);
		
		//Data_definition:
		//	definitions+=Definition+;
		@Override public ParserRule getRule() { return rule; }
		
		//definitions+=Definition+
		public Assignment getDefinitionsAssignment() { return cDefinitionsAssignment; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_0() { return cDefinitionsDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreate_tableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlter_tableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCreate_sequenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Definition:
		//	Create_table | Alter_table | Create_sequence | Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//Create_table | Alter_table | Create_sequence | Comment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Create_table
		public RuleCall getCreate_tableParserRuleCall_0() { return cCreate_tableParserRuleCall_0; }
		
		//Alter_table
		public RuleCall getAlter_tableParserRuleCall_1() { return cAlter_tableParserRuleCall_1; }
		
		//Create_sequence
		public RuleCall getCreate_sequenceParserRuleCall_2() { return cCreate_sequenceParserRuleCall_2; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_3() { return cCommentParserRuleCall_3; }
	}
	public class Create_tableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Create_table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnsColumnParserRuleCall_4_0 = (RuleCall)cColumnsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cColumnsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_5_1_0 = (RuleCall)cColumnsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConstraintsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_6_1_0 = (RuleCall)cConstraintsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Create_table:
		//	'CREATE' 'TABLE' id=ID
		//	'('
		//	columns+=Column (',' columns+=Column)* (',' constraints+=Constraint)*
		//	')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'CREATE' 'TABLE' id=ID '(' columns+=Column (',' columns+=Column)* (',' constraints+=Constraint)* ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//'TABLE'
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_4() { return cColumnsAssignment_4; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_4_0() { return cColumnsColumnParserRuleCall_4_0; }
		
		//(',' columns+=Column)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_1() { return cColumnsAssignment_5_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_1_0() { return cColumnsColumnParserRuleCall_5_1_0; }
		
		//(',' constraints+=Constraint)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//constraints+=Constraint
		public Assignment getConstraintsAssignment_6_1() { return cConstraintsAssignment_6_1; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_6_1_0() { return cConstraintsConstraintParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPEParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNumberAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_2_1_0 = (RuleCall)cNumberAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cIsNullAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIsNullISNULLParserRuleCall_3_0 = (RuleCall)cIsNullAssignment_3.eContents().get(0);
		
		//Column:
		//	id=ID type=TYPE ('(' number=INT ')')? isNull=ISNULL?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID type=TYPE ('(' number=INT ')')? isNull=ISNULL?
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//type=TYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE
		public RuleCall getTypeTYPEParserRuleCall_1_0() { return cTypeTYPEParserRuleCall_1_0; }
		
		//('(' number=INT ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//number=INT
		public Assignment getNumberAssignment_2_1() { return cNumberAssignment_2_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_2_1_0() { return cNumberINTTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//isNull=ISNULL?
		public Assignment getIsNullAssignment_3() { return cIsNullAssignment_3; }
		
		//ISNULL
		public RuleCall getIsNullISNULLParserRuleCall_3_0() { return cIsNullISNULLParserRuleCall_3_0; }
	}
	public class Alter_tableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Alter_table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cALTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTabnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTabnameTabnameParserRuleCall_2_0 = (RuleCall)cTabnameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cAddAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cAddADDKeyword_3_0_0_0 = (Keyword)cAddAssignment_3_0_0.eContents().get(0);
		private final Assignment cConstraintAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cConstraintConstraintParserRuleCall_3_0_1_0 = (RuleCall)cConstraintAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Assignment cEnableAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final Keyword cEnableENABLEKeyword_3_1_0_0_0 = (Keyword)cEnableAssignment_3_1_0_0.eContents().get(0);
		private final Keyword cCONSTRAINTKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cIdAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_3_1_1_0 = (RuleCall)cIdAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Alter_table:
		//	'ALTER' 'TABLE' tabname=Tabname (add='ADD' constraint=Constraint | (enable='ENABLE' 'CONSTRAINT') id=ID)
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ALTER' 'TABLE' tabname=Tabname (add='ADD' constraint=Constraint | (enable='ENABLE' 'CONSTRAINT') id=ID) ';'
		public Group getGroup() { return cGroup; }
		
		//'ALTER'
		public Keyword getALTERKeyword_0() { return cALTERKeyword_0; }
		
		//'TABLE'
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//tabname=Tabname
		public Assignment getTabnameAssignment_2() { return cTabnameAssignment_2; }
		
		//Tabname
		public RuleCall getTabnameTabnameParserRuleCall_2_0() { return cTabnameTabnameParserRuleCall_2_0; }
		
		//(add='ADD' constraint=Constraint | (enable='ENABLE' 'CONSTRAINT') id=ID)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//add='ADD' constraint=Constraint
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//add='ADD'
		public Assignment getAddAssignment_3_0_0() { return cAddAssignment_3_0_0; }
		
		//'ADD'
		public Keyword getAddADDKeyword_3_0_0_0() { return cAddADDKeyword_3_0_0_0; }
		
		//constraint=Constraint
		public Assignment getConstraintAssignment_3_0_1() { return cConstraintAssignment_3_0_1; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_3_0_1_0() { return cConstraintConstraintParserRuleCall_3_0_1_0; }
		
		//(enable='ENABLE' 'CONSTRAINT') id=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//(enable='ENABLE' 'CONSTRAINT')
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//enable='ENABLE'
		public Assignment getEnableAssignment_3_1_0_0() { return cEnableAssignment_3_1_0_0; }
		
		//'ENABLE'
		public Keyword getEnableENABLEKeyword_3_1_0_0_0() { return cEnableENABLEKeyword_3_1_0_0_0; }
		
		//'CONSTRAINT'
		public Keyword getCONSTRAINTKeyword_3_1_0_1() { return cCONSTRAINTKeyword_3_1_0_1; }
		
		//id=ID
		public Assignment getIdAssignment_3_1_1() { return cIdAssignment_3_1_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_1_1_0() { return cIdIDTerminalRuleCall_3_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOMMENTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cTABLEKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTabnameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTabnameTabnameParserRuleCall_2_0_1_0 = (RuleCall)cTabnameAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCOLUMNKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cColumnIdAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cColumnIdIDTerminalRuleCall_2_1_1_0 = (RuleCall)cColumnIdAssignment_2_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cColnameAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cColnameColnameParserRuleCall_2_1_3_0 = (RuleCall)cColnameAssignment_2_1_3.eContents().get(0);
		private final Keyword cISKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStringAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Comment:
		//	'COMMENT' 'ON' ('TABLE' tabname=Tabname | 'COLUMN' columnId=ID '.' colname=Colname) 'IS' string=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'COMMENT' 'ON' ('TABLE' tabname=Tabname | 'COLUMN' columnId=ID '.' colname=Colname) 'IS' string=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'COMMENT'
		public Keyword getCOMMENTKeyword_0() { return cCOMMENTKeyword_0; }
		
		//'ON'
		public Keyword getONKeyword_1() { return cONKeyword_1; }
		
		//('TABLE' tabname=Tabname | 'COLUMN' columnId=ID '.' colname=Colname)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'TABLE' tabname=Tabname
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'TABLE'
		public Keyword getTABLEKeyword_2_0_0() { return cTABLEKeyword_2_0_0; }
		
		//tabname=Tabname
		public Assignment getTabnameAssignment_2_0_1() { return cTabnameAssignment_2_0_1; }
		
		//Tabname
		public RuleCall getTabnameTabnameParserRuleCall_2_0_1_0() { return cTabnameTabnameParserRuleCall_2_0_1_0; }
		
		//'COLUMN' columnId=ID '.' colname=Colname
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'COLUMN'
		public Keyword getCOLUMNKeyword_2_1_0() { return cCOLUMNKeyword_2_1_0; }
		
		//columnId=ID
		public Assignment getColumnIdAssignment_2_1_1() { return cColumnIdAssignment_2_1_1; }
		
		//ID
		public RuleCall getColumnIdIDTerminalRuleCall_2_1_1_0() { return cColumnIdIDTerminalRuleCall_2_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_2() { return cFullStopKeyword_2_1_2; }
		
		//colname=Colname
		public Assignment getColnameAssignment_2_1_3() { return cColnameAssignment_2_1_3; }
		
		//Colname
		public RuleCall getColnameColnameParserRuleCall_2_1_3_0() { return cColnameColnameParserRuleCall_2_1_3_0; }
		
		//'IS'
		public Keyword getISKeyword_3() { return cISKeyword_3; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Create_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Create_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSEQUENCEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cSequence_optionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSequence_optionsSequence_optionsParserRuleCall_3_0 = (RuleCall)cSequence_optionsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Create_sequence:
		//	'CREATE' 'SEQUENCE' id=ID sequence_options+=Sequence_options* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'CREATE' 'SEQUENCE' id=ID sequence_options+=Sequence_options* ';'
		public Group getGroup() { return cGroup; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//'SEQUENCE'
		public Keyword getSEQUENCEKeyword_1() { return cSEQUENCEKeyword_1; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//sequence_options+=Sequence_options*
		public Assignment getSequence_optionsAssignment_3() { return cSequence_optionsAssignment_3; }
		
		//Sequence_options
		public RuleCall getSequence_optionsSequence_optionsParserRuleCall_3_0() { return cSequence_optionsSequence_optionsParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class Sequence_optionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Sequence_options");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIncrementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIncrementINCREMENTKeyword_0_0_0 = (Keyword)cIncrementAssignment_0_0.eContents().get(0);
		private final Keyword cBYKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStartAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStartSTARTKeyword_1_0_0 = (Keyword)cStartAssignment_1_0.eContents().get(0);
		private final Keyword cWITHKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMaxvalueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cMaxvalueMAXVALUEKeyword_2_0_0 = (Keyword)cMaxvalueAssignment_2_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cNomaxvalueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNomaxvalueNOMAXVALUEKeyword_3_0 = (Keyword)cNomaxvalueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cMinvalueAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cMinvalueMINVALUEKeyword_4_0_0 = (Keyword)cMinvalueAssignment_4_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cNominvalueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNominvalueNOMINVALUEKeyword_5_0 = (Keyword)cNominvalueAssignment_5.eContents().get(0);
		private final Assignment cCycleAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cCycleCYCLEKeyword_6_0 = (Keyword)cCycleAssignment_6.eContents().get(0);
		private final Assignment cNocycleAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cNocycleNOCYCLEKeyword_7_0 = (Keyword)cNocycleAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cCacheAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cCacheCACHEKeyword_8_0_0 = (Keyword)cCacheAssignment_8_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cNocacheAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cNocacheNOCACHEKeyword_9_0 = (Keyword)cNocacheAssignment_9.eContents().get(0);
		private final Assignment cOrderAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cOrderORDERKeyword_10_0 = (Keyword)cOrderAssignment_10.eContents().get(0);
		private final Assignment cNoorderAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cNoorderNOORDERKeyword_11_0 = (Keyword)cNoorderAssignment_11.eContents().get(0);
		
		//Sequence_options:
		//	increment='INCREMENT' 'BY' INT | start='START' 'WITH' INT | maxvalue='MAXVALUE' INT | nomaxvalue='NOMAXVALUE' |
		//	minvalue='MINVALUE' INT | nominvalue='NOMINVALUE' | cycle='CYCLE' | nocycle='NOCYCLE' | cache='CACHE' INT |
		//	nocache='NOCACHE' | order='ORDER' | noorder='NOORDER';
		@Override public ParserRule getRule() { return rule; }
		
		//increment='INCREMENT' 'BY' INT | start='START' 'WITH' INT | maxvalue='MAXVALUE' INT | nomaxvalue='NOMAXVALUE' |
		//minvalue='MINVALUE' INT | nominvalue='NOMINVALUE' | cycle='CYCLE' | nocycle='NOCYCLE' | cache='CACHE' INT |
		//nocache='NOCACHE' | order='ORDER' | noorder='NOORDER'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//increment='INCREMENT' 'BY' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//increment='INCREMENT'
		public Assignment getIncrementAssignment_0_0() { return cIncrementAssignment_0_0; }
		
		//'INCREMENT'
		public Keyword getIncrementINCREMENTKeyword_0_0_0() { return cIncrementINCREMENTKeyword_0_0_0; }
		
		//'BY'
		public Keyword getBYKeyword_0_1() { return cBYKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//start='START' 'WITH' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//start='START'
		public Assignment getStartAssignment_1_0() { return cStartAssignment_1_0; }
		
		//'START'
		public Keyword getStartSTARTKeyword_1_0_0() { return cStartSTARTKeyword_1_0_0; }
		
		//'WITH'
		public Keyword getWITHKeyword_1_1() { return cWITHKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
		
		//maxvalue='MAXVALUE' INT
		public Group getGroup_2() { return cGroup_2; }
		
		//maxvalue='MAXVALUE'
		public Assignment getMaxvalueAssignment_2_0() { return cMaxvalueAssignment_2_0; }
		
		//'MAXVALUE'
		public Keyword getMaxvalueMAXVALUEKeyword_2_0_0() { return cMaxvalueMAXVALUEKeyword_2_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//nomaxvalue='NOMAXVALUE'
		public Assignment getNomaxvalueAssignment_3() { return cNomaxvalueAssignment_3; }
		
		//'NOMAXVALUE'
		public Keyword getNomaxvalueNOMAXVALUEKeyword_3_0() { return cNomaxvalueNOMAXVALUEKeyword_3_0; }
		
		//minvalue='MINVALUE' INT
		public Group getGroup_4() { return cGroup_4; }
		
		//minvalue='MINVALUE'
		public Assignment getMinvalueAssignment_4_0() { return cMinvalueAssignment_4_0; }
		
		//'MINVALUE'
		public Keyword getMinvalueMINVALUEKeyword_4_0_0() { return cMinvalueMINVALUEKeyword_4_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_1() { return cINTTerminalRuleCall_4_1; }
		
		//nominvalue='NOMINVALUE'
		public Assignment getNominvalueAssignment_5() { return cNominvalueAssignment_5; }
		
		//'NOMINVALUE'
		public Keyword getNominvalueNOMINVALUEKeyword_5_0() { return cNominvalueNOMINVALUEKeyword_5_0; }
		
		//cycle='CYCLE'
		public Assignment getCycleAssignment_6() { return cCycleAssignment_6; }
		
		//'CYCLE'
		public Keyword getCycleCYCLEKeyword_6_0() { return cCycleCYCLEKeyword_6_0; }
		
		//nocycle='NOCYCLE'
		public Assignment getNocycleAssignment_7() { return cNocycleAssignment_7; }
		
		//'NOCYCLE'
		public Keyword getNocycleNOCYCLEKeyword_7_0() { return cNocycleNOCYCLEKeyword_7_0; }
		
		//cache='CACHE' INT
		public Group getGroup_8() { return cGroup_8; }
		
		//cache='CACHE'
		public Assignment getCacheAssignment_8_0() { return cCacheAssignment_8_0; }
		
		//'CACHE'
		public Keyword getCacheCACHEKeyword_8_0_0() { return cCacheCACHEKeyword_8_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_8_1() { return cINTTerminalRuleCall_8_1; }
		
		//nocache='NOCACHE'
		public Assignment getNocacheAssignment_9() { return cNocacheAssignment_9; }
		
		//'NOCACHE'
		public Keyword getNocacheNOCACHEKeyword_9_0() { return cNocacheNOCACHEKeyword_9_0; }
		
		//order='ORDER'
		public Assignment getOrderAssignment_10() { return cOrderAssignment_10; }
		
		//'ORDER'
		public Keyword getOrderORDERKeyword_10_0() { return cOrderORDERKeyword_10_0; }
		
		//noorder='NOORDER'
		public Assignment getNoorderAssignment_11() { return cNoorderAssignment_11; }
		
		//'NOORDER'
		public Keyword getNoorderNOORDERKeyword_11_0() { return cNoorderNOORDERKeyword_11_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTRAINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyKeyParserRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		
		//Constraint:
		//	'CONSTRAINT' id=ID key=Key;
		@Override public ParserRule getRule() { return rule; }
		
		//'CONSTRAINT' id=ID key=Key
		public Group getGroup() { return cGroup; }
		
		//'CONSTRAINT'
		public Keyword getCONSTRAINTKeyword_0() { return cCONSTRAINTKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//key=Key
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//Key
		public RuleCall getKeyKeyParserRuleCall_2_0() { return cKeyKeyParserRuleCall_2_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimary_keyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnique_keyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForeign_keyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Key:
		//	Primary_key | Unique_key | Foreign_key;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary_key | Unique_key | Foreign_key
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary_key
		public RuleCall getPrimary_keyParserRuleCall_0() { return cPrimary_keyParserRuleCall_0; }
		
		//Unique_key
		public RuleCall getUnique_keyParserRuleCall_1() { return cUnique_keyParserRuleCall_1; }
		
		//Foreign_key
		public RuleCall getForeign_keyParserRuleCall_2() { return cForeign_keyParserRuleCall_2; }
	}
	public class Primary_keyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Primary_key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRIMARYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKEYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColNamesColnameParserRuleCall_3_0 = (RuleCall)cColNamesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColNamesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColNamesColnameParserRuleCall_4_1_0 = (RuleCall)cColNamesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Primary_key:
		//	'PRIMARY' 'KEY' '(' colNames+=Colname (',' colNames+=Colname)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'PRIMARY' 'KEY' '(' colNames+=Colname (',' colNames+=Colname)* ')'
		public Group getGroup() { return cGroup; }
		
		//'PRIMARY'
		public Keyword getPRIMARYKeyword_0() { return cPRIMARYKeyword_0; }
		
		//'KEY'
		public Keyword getKEYKeyword_1() { return cKEYKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//colNames+=Colname
		public Assignment getColNamesAssignment_3() { return cColNamesAssignment_3; }
		
		//Colname
		public RuleCall getColNamesColnameParserRuleCall_3_0() { return cColNamesColnameParserRuleCall_3_0; }
		
		//(',' colNames+=Colname)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//colNames+=Colname
		public Assignment getColNamesAssignment_4_1() { return cColNamesAssignment_4_1; }
		
		//Colname
		public RuleCall getColNamesColnameParserRuleCall_4_1_0() { return cColNamesColnameParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Unique_keyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Unique_key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNIQUEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColNamesColnameParserRuleCall_2_0 = (RuleCall)cColNamesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColNamesColnameParserRuleCall_3_1_0 = (RuleCall)cColNamesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Unique_key:
		//	'UNIQUE' '(' colNames+=Colname (',' colNames+=Colname)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'UNIQUE' '(' colNames+=Colname (',' colNames+=Colname)* ')'
		public Group getGroup() { return cGroup; }
		
		//'UNIQUE'
		public Keyword getUNIQUEKeyword_0() { return cUNIQUEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//colNames+=Colname
		public Assignment getColNamesAssignment_2() { return cColNamesAssignment_2; }
		
		//Colname
		public RuleCall getColNamesColnameParserRuleCall_2_0() { return cColNamesColnameParserRuleCall_2_0; }
		
		//(',' colNames+=Colname)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//colNames+=Colname
		public Assignment getColNamesAssignment_3_1() { return cColNamesAssignment_3_1; }
		
		//Colname
		public RuleCall getColNamesColnameParserRuleCall_3_1_0() { return cColNamesColnameParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class Foreign_keyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Foreign_key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFOREIGNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKEYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColNamesColnameParserRuleCall_3_0 = (RuleCall)cColNamesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cREFERENCESKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTabnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTabnameTabnameParserRuleCall_6_0 = (RuleCall)cTabnameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cColNamesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cColNamesColnameParserRuleCall_8_0 = (RuleCall)cColNamesAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Foreign_key:
		//	'FOREIGN' 'KEY' '(' colNames+=Colname ')'
		//	'REFERENCES' tabname=Tabname '(' colNames+=Colname ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FOREIGN' 'KEY' '(' colNames+=Colname ')' 'REFERENCES' tabname=Tabname '(' colNames+=Colname ')'
		public Group getGroup() { return cGroup; }
		
		//'FOREIGN'
		public Keyword getFOREIGNKeyword_0() { return cFOREIGNKeyword_0; }
		
		//'KEY'
		public Keyword getKEYKeyword_1() { return cKEYKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//colNames+=Colname
		public Assignment getColNamesAssignment_3() { return cColNamesAssignment_3; }
		
		//Colname
		public RuleCall getColNamesColnameParserRuleCall_3_0() { return cColNamesColnameParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'REFERENCES'
		public Keyword getREFERENCESKeyword_5() { return cREFERENCESKeyword_5; }
		
		//tabname=Tabname
		public Assignment getTabnameAssignment_6() { return cTabnameAssignment_6; }
		
		//Tabname
		public RuleCall getTabnameTabnameParserRuleCall_6_0() { return cTabnameTabnameParserRuleCall_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//colNames+=Colname
		public Assignment getColNamesAssignment_8() { return cColNamesAssignment_8; }
		
		//Colname
		public RuleCall getColNamesColnameParserRuleCall_8_0() { return cColNamesColnameParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class ColnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Colname");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Colname:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class TabnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.Tabname");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBasenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasenameIDTerminalRuleCall_1_0 = (RuleCall)cBasenameAssignment_1.eContents().get(0);
		
		//Tabname:
		//	(id=ID '.')? basename=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(id=ID '.')? basename=ID
		public Group getGroup() { return cGroup; }
		
		//(id=ID '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//basename=ID
		public Assignment getBasenameAssignment_1() { return cBasenameAssignment_1; }
		
		//ID
		public RuleCall getBasenameIDTerminalRuleCall_1_0() { return cBasenameIDTerminalRuleCall_1_0; }
	}
	public class ISNULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.ISNULL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNullAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNullNULLKeyword_0_0 = (Keyword)cNullAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNonNullAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNonNullNOTKeyword_1_0_0 = (Keyword)cNonNullAssignment_1_0.eContents().get(0);
		private final Keyword cNULLKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ISNULL:
		//	null?='NULL' | nonNull?='NOT' 'NULL';
		@Override public ParserRule getRule() { return rule; }
		
		//null?='NULL' | nonNull?='NOT' 'NULL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//null?='NULL'
		public Assignment getNullAssignment_0() { return cNullAssignment_0; }
		
		//'NULL'
		public Keyword getNullNULLKeyword_0_0() { return cNullNULLKeyword_0_0; }
		
		//nonNull?='NOT' 'NULL'
		public Group getGroup_1() { return cGroup_1; }
		
		//nonNull?='NOT'
		public Assignment getNonNullAssignment_1_0() { return cNonNullAssignment_1_0; }
		
		//'NOT'
		public Keyword getNonNullNOTKeyword_1_0_0() { return cNonNullNOTKeyword_1_0_0; }
		
		//'NULL'
		public Keyword getNULLKeyword_1_1() { return cNULLKeyword_1_1; }
	}
	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.plsql.DDL.TYPE");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cIdAlternatives_0 = (Alternatives)cIdAssignment.eContents().get(0);
		private final Keyword cIdNUMBERKeyword_0_0 = (Keyword)cIdAlternatives_0.eContents().get(0);
		private final Keyword cIdVARCHAR2Keyword_0_1 = (Keyword)cIdAlternatives_0.eContents().get(1);
		private final Keyword cIdDATEKeyword_0_2 = (Keyword)cIdAlternatives_0.eContents().get(2);
		
		//TYPE:
		//	id=('NUMBER' | 'VARCHAR2' | 'DATE');
		@Override public ParserRule getRule() { return rule; }
		
		//id=('NUMBER' | 'VARCHAR2' | 'DATE')
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//('NUMBER' | 'VARCHAR2' | 'DATE')
		public Alternatives getIdAlternatives_0() { return cIdAlternatives_0; }
		
		//'NUMBER'
		public Keyword getIdNUMBERKeyword_0_0() { return cIdNUMBERKeyword_0_0; }
		
		//'VARCHAR2'
		public Keyword getIdVARCHAR2Keyword_0_1() { return cIdVARCHAR2Keyword_0_1; }
		
		//'DATE'
		public Keyword getIdDATEKeyword_0_2() { return cIdDATEKeyword_0_2; }
	}
	
	
	private final Data_definitionElements pData_definition;
	private final DefinitionElements pDefinition;
	private final Create_tableElements pCreate_table;
	private final ColumnElements pColumn;
	private final Alter_tableElements pAlter_table;
	private final CommentElements pComment;
	private final Create_sequenceElements pCreate_sequence;
	private final Sequence_optionsElements pSequence_options;
	private final ConstraintElements pConstraint;
	private final KeyElements pKey;
	private final Primary_keyElements pPrimary_key;
	private final Unique_keyElements pUnique_key;
	private final Foreign_keyElements pForeign_key;
	private final ColnameElements pColname;
	private final TabnameElements pTabname;
	private final ISNULLElements pISNULL;
	private final TYPEElements pTYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pData_definition = new Data_definitionElements();
		this.pDefinition = new DefinitionElements();
		this.pCreate_table = new Create_tableElements();
		this.pColumn = new ColumnElements();
		this.pAlter_table = new Alter_tableElements();
		this.pComment = new CommentElements();
		this.pCreate_sequence = new Create_sequenceElements();
		this.pSequence_options = new Sequence_optionsElements();
		this.pConstraint = new ConstraintElements();
		this.pKey = new KeyElements();
		this.pPrimary_key = new Primary_keyElements();
		this.pUnique_key = new Unique_keyElements();
		this.pForeign_key = new Foreign_keyElements();
		this.pColname = new ColnameElements();
		this.pTabname = new TabnameElements();
		this.pISNULL = new ISNULLElements();
		this.pTYPE = new TYPEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.plsql.DDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Data_definition:
	//	definitions+=Definition+;
	public Data_definitionElements getData_definitionAccess() {
		return pData_definition;
	}
	
	public ParserRule getData_definitionRule() {
		return getData_definitionAccess().getRule();
	}
	
	//Definition:
	//	Create_table | Alter_table | Create_sequence | Comment;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Create_table:
	//	'CREATE' 'TABLE' id=ID
	//	'('
	//	columns+=Column (',' columns+=Column)* (',' constraints+=Constraint)*
	//	')' ';';
	public Create_tableElements getCreate_tableAccess() {
		return pCreate_table;
	}
	
	public ParserRule getCreate_tableRule() {
		return getCreate_tableAccess().getRule();
	}
	
	//Column:
	//	id=ID type=TYPE ('(' number=INT ')')? isNull=ISNULL?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Alter_table:
	//	'ALTER' 'TABLE' tabname=Tabname (add='ADD' constraint=Constraint | (enable='ENABLE' 'CONSTRAINT') id=ID)
	//	';';
	public Alter_tableElements getAlter_tableAccess() {
		return pAlter_table;
	}
	
	public ParserRule getAlter_tableRule() {
		return getAlter_tableAccess().getRule();
	}
	
	//Comment:
	//	'COMMENT' 'ON' ('TABLE' tabname=Tabname | 'COLUMN' columnId=ID '.' colname=Colname) 'IS' string=STRING ';';
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Create_sequence:
	//	'CREATE' 'SEQUENCE' id=ID sequence_options+=Sequence_options* ';';
	public Create_sequenceElements getCreate_sequenceAccess() {
		return pCreate_sequence;
	}
	
	public ParserRule getCreate_sequenceRule() {
		return getCreate_sequenceAccess().getRule();
	}
	
	//Sequence_options:
	//	increment='INCREMENT' 'BY' INT | start='START' 'WITH' INT | maxvalue='MAXVALUE' INT | nomaxvalue='NOMAXVALUE' |
	//	minvalue='MINVALUE' INT | nominvalue='NOMINVALUE' | cycle='CYCLE' | nocycle='NOCYCLE' | cache='CACHE' INT |
	//	nocache='NOCACHE' | order='ORDER' | noorder='NOORDER';
	public Sequence_optionsElements getSequence_optionsAccess() {
		return pSequence_options;
	}
	
	public ParserRule getSequence_optionsRule() {
		return getSequence_optionsAccess().getRule();
	}
	
	//Constraint:
	//	'CONSTRAINT' id=ID key=Key;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Key:
	//	Primary_key | Unique_key | Foreign_key;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//Primary_key:
	//	'PRIMARY' 'KEY' '(' colNames+=Colname (',' colNames+=Colname)* ')';
	public Primary_keyElements getPrimary_keyAccess() {
		return pPrimary_key;
	}
	
	public ParserRule getPrimary_keyRule() {
		return getPrimary_keyAccess().getRule();
	}
	
	//Unique_key:
	//	'UNIQUE' '(' colNames+=Colname (',' colNames+=Colname)* ')';
	public Unique_keyElements getUnique_keyAccess() {
		return pUnique_key;
	}
	
	public ParserRule getUnique_keyRule() {
		return getUnique_keyAccess().getRule();
	}
	
	//Foreign_key:
	//	'FOREIGN' 'KEY' '(' colNames+=Colname ')'
	//	'REFERENCES' tabname=Tabname '(' colNames+=Colname ')';
	public Foreign_keyElements getForeign_keyAccess() {
		return pForeign_key;
	}
	
	public ParserRule getForeign_keyRule() {
		return getForeign_keyAccess().getRule();
	}
	
	//Colname:
	//	id=ID;
	public ColnameElements getColnameAccess() {
		return pColname;
	}
	
	public ParserRule getColnameRule() {
		return getColnameAccess().getRule();
	}
	
	//Tabname:
	//	(id=ID '.')? basename=ID;
	public TabnameElements getTabnameAccess() {
		return pTabname;
	}
	
	public ParserRule getTabnameRule() {
		return getTabnameAccess().getRule();
	}
	
	//ISNULL:
	//	null?='NULL' | nonNull?='NOT' 'NULL';
	public ISNULLElements getISNULLAccess() {
		return pISNULL;
	}
	
	public ParserRule getISNULLRule() {
		return getISNULLAccess().getRule();
	}
	
	//TYPE:
	//	id=('NUMBER' | 'VARCHAR2' | 'DATE');
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
