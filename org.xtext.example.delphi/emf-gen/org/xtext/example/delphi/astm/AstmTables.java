/*******************************************************************************
 *************************************************************************
 * This code is 100% auto-generated
 * from:
 *   /org.xtext.example.delphi/model/astm.ecore
 * using:
 *   /org.xtext.example.delphi/model/astm.genmodel
 *   org.eclipse.ocl.examples.codegen.oclinecore.OCLinEcoreTables
 *
 * Do not edit it.
 *******************************************************************************/
package org.xtext.example.delphi.astm;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorPackage;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorProperty;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorType;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreLibraryOppositeProperty;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorFragment;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorOperation;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorProperty;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorPropertyWithImplementation;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorStandardLibrary;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorType;
import org.eclipse.ocl.pivot.oclstdlib.OCLstdlibTables;
import org.xtext.example.delphi.astm.AstmTables;

/**
 * AstmTables provides the dispatch tables for the astm for use by the OCL dispatcher.
 *
 * In order to ensure correct static initialization, a top level class element must be accessed
 * before any nested class element. Therefore an access to PACKAGE.getClass() is recommended.
 */
@SuppressWarnings("nls")
public class AstmTables
{
	static {
		Init.initStart();
	}

	/**
	 *	The package descriptor for the package.
	 */
	public static final @NonNull EcoreExecutorPackage PACKAGE = new EcoreExecutorPackage(AstmPackage.eINSTANCE);

	/**
	 *	The library of all packages and types.
	 */
	public static final @NonNull ExecutorStandardLibrary LIBRARY = OCLstdlibTables.LIBRARY;

	/**
	 *	Constants used by auto-generated code.
	 */
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull NsURIPackageId PACKid_http_c_s_s_modelum_es_s_modernization_s_astm = org.eclipse.ocl.pivot.ids.IdManager.getNsURIPackageId("http://modelum.es/modernization/astm", null, org.xtext.example.delphi.astm.AstmPackage.eINSTANCE);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull NsURIPackageId PACKid_http_c_s_s_www_eclipse_org_s_emf_s_2002_s_Ecore = org.eclipse.ocl.pivot.ids.IdManager.getNsURIPackageId("http://www.eclipse.org/emf/2002/Ecore", null, org.eclipse.emf.ecore.EcorePackage.eINSTANCE);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ActualParameter = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ActualParameter", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ActualParameterExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ActualParameterExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AggregateScope = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("AggregateScope", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AggregateType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("AggregateType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AggregateTypeDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("AggregateTypeDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AnnotationExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("AnnotationExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ArrayAccess = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ArrayAccess", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ArrayType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ArrayType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_BinaryExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("BinaryExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_BitFieldDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("BitFieldDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_BlockScope = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("BlockScope", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_BlockStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("BlockStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_BreakStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("BreakStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CaseBlock = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("CaseBlock", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CastExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("CastExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CatchBlock = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("CatchBlock", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ClassType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ClassType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CompilationUnit = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("CompilationUnit", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ConditionalExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ConditionalExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ConstructedType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ConstructedType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ContinueStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ContinueStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DataDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DataDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Declaration = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Declaration", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DeclarationOrDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DeclarationOrDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DeclarationOrDefinitionStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DeclarationOrDefinitionStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Definition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Definition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DefinitionObject = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DefinitionObject", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DeleteStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DeleteStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DelphiBlockStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DelphiBlockStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DelphiFunctionCallExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DelphiFunctionCallExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DelphiImplementationSection = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DelphiImplementationSection", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DelphiInterfaceSection = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DelphiInterfaceSection", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DelphiUnit = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DelphiUnit", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DelphiWithStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DelphiWithStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DerivesFrom = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("DerivesFrom", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Dimension = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Dimension", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_EntryDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("EntryDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_EnumLiteralDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("EnumLiteralDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_EnumType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("EnumType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Expression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Expression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ExpressionStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ExpressionStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ForStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ForStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FormalParameterDeclaration = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FormalParameterDeclaration", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FormalParameterDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FormalParameterDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FormalParameterType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FormalParameterType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FunctionCallExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FunctionCallExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FunctionDeclaration = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FunctionDeclaration", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FunctionDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FunctionDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FunctionMemberAttributes = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FunctionMemberAttributes", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FunctionScope = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FunctionScope", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_FunctionType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("FunctionType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_GASTMSyntaxObject = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("GASTMSyntaxObject", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_GlobalScope = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("GlobalScope", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IdentifierReference = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("IdentifierReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IfStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("IfStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IncludeUnit = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("IncludeUnit", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_JumpStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("JumpStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LabelAccess = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("LabelAccess", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LabelDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("LabelDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LabelType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("LabelType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LabeledStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("LabeledStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LoopStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("LoopStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_MacroCall = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("MacroCall", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_MacroDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("MacroDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Name = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Name", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NameReference = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("NameReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NameSpaceDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("NameSpaceDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NameSpaceType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("NameSpaceType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NamedType = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("NamedType", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NamedTypeDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("NamedTypeDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NamedTypeReference = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("NamedTypeReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NewExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("NewExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_OperatorAssign = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("OperatorAssign", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_OtherSyntaxObject = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("OtherSyntaxObject", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_PreprocessorElement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("PreprocessorElement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ProgramScope = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ProgramScope", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Project = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Project", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_QualifiedIdentifierReference = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("QualifiedIdentifierReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_RangeExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("RangeExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ReturnStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ReturnStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Scope = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Scope", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SourceFile = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("SourceFile", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SourceLocation = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("SourceLocation", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SpecificTriggerDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("SpecificTriggerDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Statement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Statement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SwitchCase = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("SwitchCase", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SwitchStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("SwitchStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ThrowStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("ThrowStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TryStatement = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("TryStatement", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Type = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("Type", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypeDefinition = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("TypeDefinition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypeQualifiedIdentifierReference = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("TypeQualifiedIdentifierReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypeReference = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("TypeReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypesCatchBlock = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("TypesCatchBlock", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_UnaryExpression = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("UnaryExpression", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_UnnamedTypeReference = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("UnnamedTypeReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_VariableCatchBlock = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("VariableCatchBlock", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_VirtualSpecification = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_modelum_es_s_modernization_s_astm.getClassId("VirtualSpecification", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull DataTypeId DATAid_EInt = org.xtext.example.delphi.astm.AstmTables.PACKid_http_c_s_s_www_eclipse_org_s_emf_s_2002_s_Ecore.getDataTypeId("EInt", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId BAG_CLSSid_CastExpression = org.eclipse.ocl.pivot.ids.TypeId.BAG.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_CastExpression);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId BAG_CLSSid_DelphiFunctionCallExpression = org.eclipse.ocl.pivot.ids.TypeId.BAG.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_DelphiFunctionCallExpression);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId BAG_CLSSid_DelphiWithStatement = org.eclipse.ocl.pivot.ids.TypeId.BAG.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_DelphiWithStatement);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId BAG_CLSSid_NameReference = org.eclipse.ocl.pivot.ids.TypeId.BAG.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_NameReference);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId BAG_CLSSid_NamedTypeReference = org.eclipse.ocl.pivot.ids.TypeId.BAG.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_NamedTypeReference);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ActualParameter = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_ActualParameter);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_AnnotationExpression = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_AnnotationExpression);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_CatchBlock = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_CatchBlock);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_CompilationUnit = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_CompilationUnit);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_DefinitionObject = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_DefinitionObject);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_DerivesFrom = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_DerivesFrom);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_Dimension = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_Dimension);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_EnumLiteralDefinition = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_EnumLiteralDefinition);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_Expression = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_Expression);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_FormalParameterDeclaration = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_FormalParameterDeclaration);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_FormalParameterDefinition = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_FormalParameterDefinition);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_FormalParameterType = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_FormalParameterType);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_NamedTypeReference = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_NamedTypeReference);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_OtherSyntaxObject = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_OtherSyntaxObject);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_PreprocessorElement = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_PreprocessorElement);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_Scope = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_Scope);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_Statement = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_Statement);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_SwitchCase = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_SwitchCase);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_Type = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_Type);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_TypeReference = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(org.xtext.example.delphi.astm.AstmTables.CLSSid_TypeReference);

	/**
	 *	The type parameters for templated types and operations.
	 */
	public static class TypeParameters {
		static {
			Init.initStart();
			AstmTables.init();
		}

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::TypeParameters and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The type descriptors for each type.
	 */
	public static class Types {
		static {
			Init.initStart();
			TypeParameters.init();
		}

		public static final @NonNull EcoreExecutorType _AccessKind = new EcoreExecutorType(AstmPackage.Literals.ACCESS_KIND, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ActualParameter = new EcoreExecutorType(AstmPackage.Literals.ACTUAL_PARAMETER, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _ActualParameterExpression = new EcoreExecutorType(AstmPackage.Literals.ACTUAL_PARAMETER_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Add = new EcoreExecutorType(AstmPackage.Literals.ADD, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _AddressOf = new EcoreExecutorType(AstmPackage.Literals.ADDRESS_OF, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _AggregateExpression = new EcoreExecutorType(AstmPackage.Literals.AGGREGATE_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _AggregateScope = new EcoreExecutorType(AstmPackage.Literals.AGGREGATE_SCOPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _AggregateType = new EcoreExecutorType(AstmPackage.Literals.AGGREGATE_TYPE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _AggregateTypeDefinition = new EcoreExecutorType(AstmPackage.Literals.AGGREGATE_TYPE_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _And = new EcoreExecutorType(AstmPackage.Literals.AND, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _AnnotationExpression = new EcoreExecutorType(AstmPackage.Literals.ANNOTATION_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _AnnotationType = new EcoreExecutorType(AstmPackage.Literals.ANNOTATION_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ArrayAccess = new EcoreExecutorType(AstmPackage.Literals.ARRAY_ACCESS, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ArrayType = new EcoreExecutorType(AstmPackage.Literals.ARRAY_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Assign = new EcoreExecutorType(AstmPackage.Literals.ASSIGN, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BinaryExpression = new EcoreExecutorType(AstmPackage.Literals.BINARY_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BinaryOperator = new EcoreExecutorType(AstmPackage.Literals.BINARY_OPERATOR, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _BitAnd = new EcoreExecutorType(AstmPackage.Literals.BIT_AND, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BitFieldDefinition = new EcoreExecutorType(AstmPackage.Literals.BIT_FIELD_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BitLeftShift = new EcoreExecutorType(AstmPackage.Literals.BIT_LEFT_SHIFT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BitLiteral = new EcoreExecutorType(AstmPackage.Literals.BIT_LITERAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BitNot = new EcoreExecutorType(AstmPackage.Literals.BIT_NOT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BitOr = new EcoreExecutorType(AstmPackage.Literals.BIT_OR, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BitRightShift = new EcoreExecutorType(AstmPackage.Literals.BIT_RIGHT_SHIFT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BitXor = new EcoreExecutorType(AstmPackage.Literals.BIT_XOR, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BlockScope = new EcoreExecutorType(AstmPackage.Literals.BLOCK_SCOPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BlockStatement = new EcoreExecutorType(AstmPackage.Literals.BLOCK_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Boolean = new EcoreExecutorType(AstmPackage.Literals.BOOLEAN, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BooleanLiteral = new EcoreExecutorType(AstmPackage.Literals.BOOLEAN_LITERAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _BreakStatement = new EcoreExecutorType(AstmPackage.Literals.BREAK_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ByReferenceActualParameterExpression = new EcoreExecutorType(AstmPackage.Literals.BY_REFERENCE_ACTUAL_PARAMETER_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ByReferenceFormalParameterType = new EcoreExecutorType(AstmPackage.Literals.BY_REFERENCE_FORMAL_PARAMETER_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ByValueActualParameterExpression = new EcoreExecutorType(AstmPackage.Literals.BY_VALUE_ACTUAL_PARAMETER_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ByValueFormalParameterType = new EcoreExecutorType(AstmPackage.Literals.BY_VALUE_FORMAL_PARAMETER_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Byte = new EcoreExecutorType(AstmPackage.Literals.BYTE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _CaseBlock = new EcoreExecutorType(AstmPackage.Literals.CASE_BLOCK, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _CastExpression = new EcoreExecutorType(AstmPackage.Literals.CAST_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _CatchBlock = new EcoreExecutorType(AstmPackage.Literals.CATCH_BLOCK, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _CharLiteral = new EcoreExecutorType(AstmPackage.Literals.CHAR_LITERAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Character = new EcoreExecutorType(AstmPackage.Literals.CHARACTER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ClassType = new EcoreExecutorType(AstmPackage.Literals.CLASS_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _CollectionType = new EcoreExecutorType(AstmPackage.Literals.COLLECTION_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Comment = new EcoreExecutorType(AstmPackage.Literals.COMMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _CompilationUnit = new EcoreExecutorType(AstmPackage.Literals.COMPILATION_UNIT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ConditionalExpression = new EcoreExecutorType(AstmPackage.Literals.CONDITIONAL_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ConstructedType = new EcoreExecutorType(AstmPackage.Literals.CONSTRUCTED_TYPE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _ContinueStatement = new EcoreExecutorType(AstmPackage.Literals.CONTINUE_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DataDefinition = new EcoreExecutorType(AstmPackage.Literals.DATA_DEFINITION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _DataType = new EcoreExecutorType(AstmPackage.Literals.DATA_TYPE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _Declaration = new EcoreExecutorType(AstmPackage.Literals.DECLARATION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _DeclarationOrDefinition = new EcoreExecutorType(AstmPackage.Literals.DECLARATION_OR_DEFINITION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _DeclarationOrDefinitionStatement = new EcoreExecutorType(AstmPackage.Literals.DECLARATION_OR_DEFINITION_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Decrement = new EcoreExecutorType(AstmPackage.Literals.DECREMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DefaultBlock = new EcoreExecutorType(AstmPackage.Literals.DEFAULT_BLOCK, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Definition = new EcoreExecutorType(AstmPackage.Literals.DEFINITION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _DefinitionObject = new EcoreExecutorType(AstmPackage.Literals.DEFINITION_OBJECT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _DeleteStatement = new EcoreExecutorType(AstmPackage.Literals.DELETE_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DelphiBlockStatement = new EcoreExecutorType(AstmPackage.Literals.DELPHI_BLOCK_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DelphiFunctionCallExpression = new EcoreExecutorType(AstmPackage.Literals.DELPHI_FUNCTION_CALL_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DelphiImplementationSection = new EcoreExecutorType(AstmPackage.Literals.DELPHI_IMPLEMENTATION_SECTION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DelphiInterfaceSection = new EcoreExecutorType(AstmPackage.Literals.DELPHI_INTERFACE_SECTION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DelphiUnit = new EcoreExecutorType(AstmPackage.Literals.DELPHI_UNIT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DelphiWithStatement = new EcoreExecutorType(AstmPackage.Literals.DELPHI_WITH_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Deref = new EcoreExecutorType(AstmPackage.Literals.DEREF, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DerivesFrom = new EcoreExecutorType(AstmPackage.Literals.DERIVES_FROM, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Dimension = new EcoreExecutorType(AstmPackage.Literals.DIMENSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Divide = new EcoreExecutorType(AstmPackage.Literals.DIVIDE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _DoWhileStatement = new EcoreExecutorType(AstmPackage.Literals.DO_WHILE_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Double = new EcoreExecutorType(AstmPackage.Literals.DOUBLE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _EmptyStatement = new EcoreExecutorType(AstmPackage.Literals.EMPTY_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _EntryDefinition = new EcoreExecutorType(AstmPackage.Literals.ENTRY_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _EnumLiteralDefinition = new EcoreExecutorType(AstmPackage.Literals.ENUM_LITERAL_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _EnumType = new EcoreExecutorType(AstmPackage.Literals.ENUM_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Equal = new EcoreExecutorType(AstmPackage.Literals.EQUAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ExceptionType = new EcoreExecutorType(AstmPackage.Literals.EXCEPTION_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Exponent = new EcoreExecutorType(AstmPackage.Literals.EXPONENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Expression = new EcoreExecutorType(AstmPackage.Literals.EXPRESSION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _ExpressionStatement = new EcoreExecutorType(AstmPackage.Literals.EXPRESSION_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _External = new EcoreExecutorType(AstmPackage.Literals.EXTERNAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FileLocal = new EcoreExecutorType(AstmPackage.Literals.FILE_LOCAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Float = new EcoreExecutorType(AstmPackage.Literals.FLOAT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ForCheckAfterStatement = new EcoreExecutorType(AstmPackage.Literals.FOR_CHECK_AFTER_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ForCheckBeforeStatement = new EcoreExecutorType(AstmPackage.Literals.FOR_CHECK_BEFORE_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ForStatement = new EcoreExecutorType(AstmPackage.Literals.FOR_STATEMENT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _FormalParameterDeclaration = new EcoreExecutorType(AstmPackage.Literals.FORMAL_PARAMETER_DECLARATION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FormalParameterDefinition = new EcoreExecutorType(AstmPackage.Literals.FORMAL_PARAMETER_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FormalParameterType = new EcoreExecutorType(AstmPackage.Literals.FORMAL_PARAMETER_TYPE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _FunctionCallExpression = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_CALL_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FunctionDeclaration = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_DECLARATION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FunctionDefinition = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FunctionMemberAttribute = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_MEMBER_ATTRIBUTE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FunctionMemberAttributes = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_MEMBER_ATTRIBUTES, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FunctionPersistent = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_PERSISTENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FunctionScope = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_SCOPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _FunctionType = new EcoreExecutorType(AstmPackage.Literals.FUNCTION_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _GASTMObject = new EcoreExecutorType(AstmPackage.Literals.GASTM_OBJECT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _GASTMSemanticObject = new EcoreExecutorType(AstmPackage.Literals.GASTM_SEMANTIC_OBJECT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _GASTMSourceObject = new EcoreExecutorType(AstmPackage.Literals.GASTM_SOURCE_OBJECT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _GASTMSyntaxObject = new EcoreExecutorType(AstmPackage.Literals.GASTM_SYNTAX_OBJECT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _GlobalScope = new EcoreExecutorType(AstmPackage.Literals.GLOBAL_SCOPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Greater = new EcoreExecutorType(AstmPackage.Literals.GREATER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _IdentifierReference = new EcoreExecutorType(AstmPackage.Literals.IDENTIFIER_REFERENCE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _IfStatement = new EcoreExecutorType(AstmPackage.Literals.IF_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _IncludeUnit = new EcoreExecutorType(AstmPackage.Literals.INCLUDE_UNIT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Increment = new EcoreExecutorType(AstmPackage.Literals.INCREMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Integer = new EcoreExecutorType(AstmPackage.Literals.INTEGER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _IntegerLiteral = new EcoreExecutorType(AstmPackage.Literals.INTEGER_LITERAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _JumpStatement = new EcoreExecutorType(AstmPackage.Literals.JUMP_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _LabelAccess = new EcoreExecutorType(AstmPackage.Literals.LABEL_ACCESS, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _LabelDefinition = new EcoreExecutorType(AstmPackage.Literals.LABEL_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _LabelType = new EcoreExecutorType(AstmPackage.Literals.LABEL_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _LabeledStatement = new EcoreExecutorType(AstmPackage.Literals.LABELED_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Less = new EcoreExecutorType(AstmPackage.Literals.LESS, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Literal = new EcoreExecutorType(AstmPackage.Literals.LITERAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _LongDouble = new EcoreExecutorType(AstmPackage.Literals.LONG_DOUBLE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _LongInteger = new EcoreExecutorType(AstmPackage.Literals.LONG_INTEGER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _LoopStatement = new EcoreExecutorType(AstmPackage.Literals.LOOP_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _MacroCall = new EcoreExecutorType(AstmPackage.Literals.MACRO_CALL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _MacroDefinition = new EcoreExecutorType(AstmPackage.Literals.MACRO_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _MissingActualParameter = new EcoreExecutorType(AstmPackage.Literals.MISSING_ACTUAL_PARAMETER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Modulus = new EcoreExecutorType(AstmPackage.Literals.MODULUS, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Multiply = new EcoreExecutorType(AstmPackage.Literals.MULTIPLY, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Name = new EcoreExecutorType(AstmPackage.Literals.NAME, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NameReference = new EcoreExecutorType(AstmPackage.Literals.NAME_REFERENCE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _NameSpaceDefinition = new EcoreExecutorType(AstmPackage.Literals.NAME_SPACE_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NameSpaceType = new EcoreExecutorType(AstmPackage.Literals.NAME_SPACE_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NamedType = new EcoreExecutorType(AstmPackage.Literals.NAMED_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NamedTypeDefinition = new EcoreExecutorType(AstmPackage.Literals.NAMED_TYPE_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NamedTypeReference = new EcoreExecutorType(AstmPackage.Literals.NAMED_TYPE_REFERENCE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Negate = new EcoreExecutorType(AstmPackage.Literals.NEGATE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NewExpression = new EcoreExecutorType(AstmPackage.Literals.NEW_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NoDef = new EcoreExecutorType(AstmPackage.Literals.NO_DEF, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NonVirtual = new EcoreExecutorType(AstmPackage.Literals.NON_VIRTUAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Not = new EcoreExecutorType(AstmPackage.Literals.NOT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NotEqual = new EcoreExecutorType(AstmPackage.Literals.NOT_EQUAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NotGreater = new EcoreExecutorType(AstmPackage.Literals.NOT_GREATER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _NotLess = new EcoreExecutorType(AstmPackage.Literals.NOT_LESS, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Operator = new EcoreExecutorType(AstmPackage.Literals.OPERATOR, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _OperatorAssign = new EcoreExecutorType(AstmPackage.Literals.OPERATOR_ASSIGN, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Or = new EcoreExecutorType(AstmPackage.Literals.OR, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _OtherSyntaxObject = new EcoreExecutorType(AstmPackage.Literals.OTHER_SYNTAX_OBJECT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _PerClassMember = new EcoreExecutorType(AstmPackage.Literals.PER_CLASS_MEMBER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _PointerType = new EcoreExecutorType(AstmPackage.Literals.POINTER_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _PostDecrement = new EcoreExecutorType(AstmPackage.Literals.POST_DECREMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _PostIncrement = new EcoreExecutorType(AstmPackage.Literals.POST_INCREMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _PreprocessorElement = new EcoreExecutorType(AstmPackage.Literals.PREPROCESSOR_ELEMENT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _PrimitiveType = new EcoreExecutorType(AstmPackage.Literals.PRIMITIVE_TYPE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _Private = new EcoreExecutorType(AstmPackage.Literals.PRIVATE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ProgramScope = new EcoreExecutorType(AstmPackage.Literals.PROGRAM_SCOPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Project = new EcoreExecutorType(AstmPackage.Literals.PROJECT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Protected = new EcoreExecutorType(AstmPackage.Literals.PROTECTED, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Public = new EcoreExecutorType(AstmPackage.Literals.PUBLIC, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _PureVirtual = new EcoreExecutorType(AstmPackage.Literals.PURE_VIRTUAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _QualifiedIdentifierReference = new EcoreExecutorType(AstmPackage.Literals.QUALIFIED_IDENTIFIER_REFERENCE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _QualifiedOverData = new EcoreExecutorType(AstmPackage.Literals.QUALIFIED_OVER_DATA, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _QualifiedOverPointer = new EcoreExecutorType(AstmPackage.Literals.QUALIFIED_OVER_POINTER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _RangeExpression = new EcoreExecutorType(AstmPackage.Literals.RANGE_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _RangeType = new EcoreExecutorType(AstmPackage.Literals.RANGE_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _RealLiteral = new EcoreExecutorType(AstmPackage.Literals.REAL_LITERAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ReferenceType = new EcoreExecutorType(AstmPackage.Literals.REFERENCE_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ReturnStatement = new EcoreExecutorType(AstmPackage.Literals.RETURN_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Scope = new EcoreExecutorType(AstmPackage.Literals.SCOPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ShortInteger = new EcoreExecutorType(AstmPackage.Literals.SHORT_INTEGER, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SourceFile = new EcoreExecutorType(AstmPackage.Literals.SOURCE_FILE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SourceLocation = new EcoreExecutorType(AstmPackage.Literals.SOURCE_LOCATION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SpecificConcatString = new EcoreExecutorType(AstmPackage.Literals.SPECIFIC_CONCAT_STRING, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SpecificGreaterEqual = new EcoreExecutorType(AstmPackage.Literals.SPECIFIC_GREATER_EQUAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SpecificIn = new EcoreExecutorType(AstmPackage.Literals.SPECIFIC_IN, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SpecificLessEqual = new EcoreExecutorType(AstmPackage.Literals.SPECIFIC_LESS_EQUAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SpecificLike = new EcoreExecutorType(AstmPackage.Literals.SPECIFIC_LIKE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SpecificSelectStatement = new EcoreExecutorType(AstmPackage.Literals.SPECIFIC_SELECT_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SpecificTriggerDefinition = new EcoreExecutorType(AstmPackage.Literals.SPECIFIC_TRIGGER_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Statement = new EcoreExecutorType(AstmPackage.Literals.STATEMENT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _StorageSpecification = new EcoreExecutorType(AstmPackage.Literals.STORAGE_SPECIFICATION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _String = new EcoreExecutorType(AstmPackage.Literals.STRING, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _StringLiteral = new EcoreExecutorType(AstmPackage.Literals.STRING_LITERAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _StructureType = new EcoreExecutorType(AstmPackage.Literals.STRUCTURE_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Subtract = new EcoreExecutorType(AstmPackage.Literals.SUBTRACT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SwitchCase = new EcoreExecutorType(AstmPackage.Literals.SWITCH_CASE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _SwitchStatement = new EcoreExecutorType(AstmPackage.Literals.SWITCH_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _TerminateStatement = new EcoreExecutorType(AstmPackage.Literals.TERMINATE_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _ThrowStatement = new EcoreExecutorType(AstmPackage.Literals.THROW_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _TryStatement = new EcoreExecutorType(AstmPackage.Literals.TRY_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Type = new EcoreExecutorType(AstmPackage.Literals.TYPE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _TypeDefinition = new EcoreExecutorType(AstmPackage.Literals.TYPE_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _TypeQualifiedIdentifierReference = new EcoreExecutorType(AstmPackage.Literals.TYPE_QUALIFIED_IDENTIFIER_REFERENCE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _TypeReference = new EcoreExecutorType(AstmPackage.Literals.TYPE_REFERENCE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _TypesCatchBlock = new EcoreExecutorType(AstmPackage.Literals.TYPES_CATCH_BLOCK, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _UnaryExpression = new EcoreExecutorType(AstmPackage.Literals.UNARY_EXPRESSION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _UnaryOperator = new EcoreExecutorType(AstmPackage.Literals.UNARY_OPERATOR, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _UnaryPlus = new EcoreExecutorType(AstmPackage.Literals.UNARY_PLUS, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _UnionType = new EcoreExecutorType(AstmPackage.Literals.UNION_TYPE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _UnnamedTypeReference = new EcoreExecutorType(AstmPackage.Literals.UNNAMED_TYPE_REFERENCE, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _VariableCatchBlock = new EcoreExecutorType(AstmPackage.Literals.VARIABLE_CATCH_BLOCK, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _VariableDeclaration = new EcoreExecutorType(AstmPackage.Literals.VARIABLE_DECLARATION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _VariableDefinition = new EcoreExecutorType(AstmPackage.Literals.VARIABLE_DEFINITION, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _Virtual = new EcoreExecutorType(AstmPackage.Literals.VIRTUAL, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _VirtualSpecification = new EcoreExecutorType(AstmPackage.Literals.VIRTUAL_SPECIFICATION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _Visitable = new EcoreExecutorType(AstmPackage.Literals.VISITABLE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final @NonNull EcoreExecutorType _Void = new EcoreExecutorType(AstmPackage.Literals.VOID, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _WhileStatement = new EcoreExecutorType(AstmPackage.Literals.WHILE_STATEMENT, PACKAGE, 0);
		public static final @NonNull EcoreExecutorType _WideCharacter = new EcoreExecutorType(AstmPackage.Literals.WIDE_CHARACTER, PACKAGE, 0);

		private static final @NonNull EcoreExecutorType @NonNull [] types = {
			_AccessKind,
			_ActualParameter,
			_ActualParameterExpression,
			_Add,
			_AddressOf,
			_AggregateExpression,
			_AggregateScope,
			_AggregateType,
			_AggregateTypeDefinition,
			_And,
			_AnnotationExpression,
			_AnnotationType,
			_ArrayAccess,
			_ArrayType,
			_Assign,
			_BinaryExpression,
			_BinaryOperator,
			_BitAnd,
			_BitFieldDefinition,
			_BitLeftShift,
			_BitLiteral,
			_BitNot,
			_BitOr,
			_BitRightShift,
			_BitXor,
			_BlockScope,
			_BlockStatement,
			_Boolean,
			_BooleanLiteral,
			_BreakStatement,
			_ByReferenceActualParameterExpression,
			_ByReferenceFormalParameterType,
			_ByValueActualParameterExpression,
			_ByValueFormalParameterType,
			_Byte,
			_CaseBlock,
			_CastExpression,
			_CatchBlock,
			_CharLiteral,
			_Character,
			_ClassType,
			_CollectionType,
			_Comment,
			_CompilationUnit,
			_ConditionalExpression,
			_ConstructedType,
			_ContinueStatement,
			_DataDefinition,
			_DataType,
			_Declaration,
			_DeclarationOrDefinition,
			_DeclarationOrDefinitionStatement,
			_Decrement,
			_DefaultBlock,
			_Definition,
			_DefinitionObject,
			_DeleteStatement,
			_DelphiBlockStatement,
			_DelphiFunctionCallExpression,
			_DelphiImplementationSection,
			_DelphiInterfaceSection,
			_DelphiUnit,
			_DelphiWithStatement,
			_Deref,
			_DerivesFrom,
			_Dimension,
			_Divide,
			_DoWhileStatement,
			_Double,
			_EmptyStatement,
			_EntryDefinition,
			_EnumLiteralDefinition,
			_EnumType,
			_Equal,
			_ExceptionType,
			_Exponent,
			_Expression,
			_ExpressionStatement,
			_External,
			_FileLocal,
			_Float,
			_ForCheckAfterStatement,
			_ForCheckBeforeStatement,
			_ForStatement,
			_FormalParameterDeclaration,
			_FormalParameterDefinition,
			_FormalParameterType,
			_FunctionCallExpression,
			_FunctionDeclaration,
			_FunctionDefinition,
			_FunctionMemberAttribute,
			_FunctionMemberAttributes,
			_FunctionPersistent,
			_FunctionScope,
			_FunctionType,
			_GASTMObject,
			_GASTMSemanticObject,
			_GASTMSourceObject,
			_GASTMSyntaxObject,
			_GlobalScope,
			_Greater,
			_IdentifierReference,
			_IfStatement,
			_IncludeUnit,
			_Increment,
			_Integer,
			_IntegerLiteral,
			_JumpStatement,
			_LabelAccess,
			_LabelDefinition,
			_LabelType,
			_LabeledStatement,
			_Less,
			_Literal,
			_LongDouble,
			_LongInteger,
			_LoopStatement,
			_MacroCall,
			_MacroDefinition,
			_MissingActualParameter,
			_Modulus,
			_Multiply,
			_Name,
			_NameReference,
			_NameSpaceDefinition,
			_NameSpaceType,
			_NamedType,
			_NamedTypeDefinition,
			_NamedTypeReference,
			_Negate,
			_NewExpression,
			_NoDef,
			_NonVirtual,
			_Not,
			_NotEqual,
			_NotGreater,
			_NotLess,
			_Operator,
			_OperatorAssign,
			_Or,
			_OtherSyntaxObject,
			_PerClassMember,
			_PointerType,
			_PostDecrement,
			_PostIncrement,
			_PreprocessorElement,
			_PrimitiveType,
			_Private,
			_ProgramScope,
			_Project,
			_Protected,
			_Public,
			_PureVirtual,
			_QualifiedIdentifierReference,
			_QualifiedOverData,
			_QualifiedOverPointer,
			_RangeExpression,
			_RangeType,
			_RealLiteral,
			_ReferenceType,
			_ReturnStatement,
			_Scope,
			_ShortInteger,
			_SourceFile,
			_SourceLocation,
			_SpecificConcatString,
			_SpecificGreaterEqual,
			_SpecificIn,
			_SpecificLessEqual,
			_SpecificLike,
			_SpecificSelectStatement,
			_SpecificTriggerDefinition,
			_Statement,
			_StorageSpecification,
			_String,
			_StringLiteral,
			_StructureType,
			_Subtract,
			_SwitchCase,
			_SwitchStatement,
			_TerminateStatement,
			_ThrowStatement,
			_TryStatement,
			_Type,
			_TypeDefinition,
			_TypeQualifiedIdentifierReference,
			_TypeReference,
			_TypesCatchBlock,
			_UnaryExpression,
			_UnaryOperator,
			_UnaryPlus,
			_UnionType,
			_UnnamedTypeReference,
			_VariableCatchBlock,
			_VariableDeclaration,
			_VariableDefinition,
			_Virtual,
			_VirtualSpecification,
			_Visitable,
			_Void,
			_WhileStatement,
			_WideCharacter
		};

		/*
		 *	Install the type descriptors in the package descriptor.
		 */
		static {
			PACKAGE.init(LIBRARY, types);
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::Types and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The fragment descriptors for the local elements of each type and its supertypes.
	 */
	public static class Fragments {
		static {
			Init.initStart();
			Types.init();
		}

		private static final @NonNull ExecutorFragment _AccessKind__AccessKind = new ExecutorFragment(Types._AccessKind, AstmTables.Types._AccessKind);
		private static final @NonNull ExecutorFragment _AccessKind__OclAny = new ExecutorFragment(Types._AccessKind, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AccessKind__OclElement = new ExecutorFragment(Types._AccessKind, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AccessKind__Visitable = new ExecutorFragment(Types._AccessKind, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ActualParameter__ActualParameter = new ExecutorFragment(Types._ActualParameter, AstmTables.Types._ActualParameter);
		private static final @NonNull ExecutorFragment _ActualParameter__OclAny = new ExecutorFragment(Types._ActualParameter, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ActualParameter__OclElement = new ExecutorFragment(Types._ActualParameter, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ActualParameter__Visitable = new ExecutorFragment(Types._ActualParameter, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ActualParameterExpression__ActualParameter = new ExecutorFragment(Types._ActualParameterExpression, AstmTables.Types._ActualParameter);
		private static final @NonNull ExecutorFragment _ActualParameterExpression__ActualParameterExpression = new ExecutorFragment(Types._ActualParameterExpression, AstmTables.Types._ActualParameterExpression);
		private static final @NonNull ExecutorFragment _ActualParameterExpression__OclAny = new ExecutorFragment(Types._ActualParameterExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ActualParameterExpression__OclElement = new ExecutorFragment(Types._ActualParameterExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ActualParameterExpression__Visitable = new ExecutorFragment(Types._ActualParameterExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Add__Add = new ExecutorFragment(Types._Add, AstmTables.Types._Add);
		private static final @NonNull ExecutorFragment _Add__BinaryOperator = new ExecutorFragment(Types._Add, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Add__GASTMObject = new ExecutorFragment(Types._Add, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Add__GASTMSyntaxObject = new ExecutorFragment(Types._Add, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Add__OclAny = new ExecutorFragment(Types._Add, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Add__OclElement = new ExecutorFragment(Types._Add, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Add__Operator = new ExecutorFragment(Types._Add, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Add__OtherSyntaxObject = new ExecutorFragment(Types._Add, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Add__Visitable = new ExecutorFragment(Types._Add, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _AddressOf__AddressOf = new ExecutorFragment(Types._AddressOf, AstmTables.Types._AddressOf);
		private static final @NonNull ExecutorFragment _AddressOf__GASTMObject = new ExecutorFragment(Types._AddressOf, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _AddressOf__GASTMSyntaxObject = new ExecutorFragment(Types._AddressOf, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _AddressOf__OclAny = new ExecutorFragment(Types._AddressOf, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AddressOf__OclElement = new ExecutorFragment(Types._AddressOf, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AddressOf__Operator = new ExecutorFragment(Types._AddressOf, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _AddressOf__OtherSyntaxObject = new ExecutorFragment(Types._AddressOf, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _AddressOf__UnaryOperator = new ExecutorFragment(Types._AddressOf, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _AddressOf__Visitable = new ExecutorFragment(Types._AddressOf, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _AggregateExpression__AggregateExpression = new ExecutorFragment(Types._AggregateExpression, AstmTables.Types._AggregateExpression);
		private static final @NonNull ExecutorFragment _AggregateExpression__Expression = new ExecutorFragment(Types._AggregateExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _AggregateExpression__GASTMObject = new ExecutorFragment(Types._AggregateExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _AggregateExpression__GASTMSyntaxObject = new ExecutorFragment(Types._AggregateExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _AggregateExpression__OclAny = new ExecutorFragment(Types._AggregateExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AggregateExpression__OclElement = new ExecutorFragment(Types._AggregateExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AggregateExpression__Visitable = new ExecutorFragment(Types._AggregateExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _AggregateScope__AggregateScope = new ExecutorFragment(Types._AggregateScope, AstmTables.Types._AggregateScope);
		private static final @NonNull ExecutorFragment _AggregateScope__GASTMSemanticObject = new ExecutorFragment(Types._AggregateScope, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _AggregateScope__OclAny = new ExecutorFragment(Types._AggregateScope, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AggregateScope__OclElement = new ExecutorFragment(Types._AggregateScope, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AggregateScope__Scope = new ExecutorFragment(Types._AggregateScope, AstmTables.Types._Scope);
		private static final @NonNull ExecutorFragment _AggregateScope__Visitable = new ExecutorFragment(Types._AggregateScope, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _AggregateType__AggregateType = new ExecutorFragment(Types._AggregateType, AstmTables.Types._AggregateType);
		private static final @NonNull ExecutorFragment _AggregateType__DataType = new ExecutorFragment(Types._AggregateType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _AggregateType__GASTMObject = new ExecutorFragment(Types._AggregateType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _AggregateType__GASTMSyntaxObject = new ExecutorFragment(Types._AggregateType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _AggregateType__OclAny = new ExecutorFragment(Types._AggregateType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AggregateType__OclElement = new ExecutorFragment(Types._AggregateType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AggregateType__Type = new ExecutorFragment(Types._AggregateType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _AggregateType__Visitable = new ExecutorFragment(Types._AggregateType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__AggregateTypeDefinition = new ExecutorFragment(Types._AggregateTypeDefinition, AstmTables.Types._AggregateTypeDefinition);
		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__DefinitionObject = new ExecutorFragment(Types._AggregateTypeDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__GASTMObject = new ExecutorFragment(Types._AggregateTypeDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._AggregateTypeDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__OclAny = new ExecutorFragment(Types._AggregateTypeDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__OclElement = new ExecutorFragment(Types._AggregateTypeDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__TypeDefinition = new ExecutorFragment(Types._AggregateTypeDefinition, AstmTables.Types._TypeDefinition);
		private static final @NonNull ExecutorFragment _AggregateTypeDefinition__Visitable = new ExecutorFragment(Types._AggregateTypeDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _And__And = new ExecutorFragment(Types._And, AstmTables.Types._And);
		private static final @NonNull ExecutorFragment _And__BinaryOperator = new ExecutorFragment(Types._And, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _And__GASTMObject = new ExecutorFragment(Types._And, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _And__GASTMSyntaxObject = new ExecutorFragment(Types._And, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _And__OclAny = new ExecutorFragment(Types._And, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _And__OclElement = new ExecutorFragment(Types._And, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _And__Operator = new ExecutorFragment(Types._And, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _And__OtherSyntaxObject = new ExecutorFragment(Types._And, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _And__Visitable = new ExecutorFragment(Types._And, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _AnnotationExpression__AnnotationExpression = new ExecutorFragment(Types._AnnotationExpression, AstmTables.Types._AnnotationExpression);
		private static final @NonNull ExecutorFragment _AnnotationExpression__Expression = new ExecutorFragment(Types._AnnotationExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _AnnotationExpression__GASTMObject = new ExecutorFragment(Types._AnnotationExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _AnnotationExpression__GASTMSyntaxObject = new ExecutorFragment(Types._AnnotationExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _AnnotationExpression__OclAny = new ExecutorFragment(Types._AnnotationExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AnnotationExpression__OclElement = new ExecutorFragment(Types._AnnotationExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AnnotationExpression__Visitable = new ExecutorFragment(Types._AnnotationExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _AnnotationType__AggregateType = new ExecutorFragment(Types._AnnotationType, AstmTables.Types._AggregateType);
		private static final @NonNull ExecutorFragment _AnnotationType__AnnotationType = new ExecutorFragment(Types._AnnotationType, AstmTables.Types._AnnotationType);
		private static final @NonNull ExecutorFragment _AnnotationType__DataType = new ExecutorFragment(Types._AnnotationType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _AnnotationType__GASTMObject = new ExecutorFragment(Types._AnnotationType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _AnnotationType__GASTMSyntaxObject = new ExecutorFragment(Types._AnnotationType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _AnnotationType__OclAny = new ExecutorFragment(Types._AnnotationType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _AnnotationType__OclElement = new ExecutorFragment(Types._AnnotationType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _AnnotationType__Type = new ExecutorFragment(Types._AnnotationType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _AnnotationType__Visitable = new ExecutorFragment(Types._AnnotationType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ArrayAccess__ArrayAccess = new ExecutorFragment(Types._ArrayAccess, AstmTables.Types._ArrayAccess);
		private static final @NonNull ExecutorFragment _ArrayAccess__Expression = new ExecutorFragment(Types._ArrayAccess, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _ArrayAccess__GASTMObject = new ExecutorFragment(Types._ArrayAccess, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ArrayAccess__GASTMSyntaxObject = new ExecutorFragment(Types._ArrayAccess, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ArrayAccess__OclAny = new ExecutorFragment(Types._ArrayAccess, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ArrayAccess__OclElement = new ExecutorFragment(Types._ArrayAccess, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ArrayAccess__Visitable = new ExecutorFragment(Types._ArrayAccess, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ArrayType__ArrayType = new ExecutorFragment(Types._ArrayType, AstmTables.Types._ArrayType);
		private static final @NonNull ExecutorFragment _ArrayType__ConstructedType = new ExecutorFragment(Types._ArrayType, AstmTables.Types._ConstructedType);
		private static final @NonNull ExecutorFragment _ArrayType__DataType = new ExecutorFragment(Types._ArrayType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ArrayType__GASTMObject = new ExecutorFragment(Types._ArrayType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ArrayType__GASTMSyntaxObject = new ExecutorFragment(Types._ArrayType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ArrayType__OclAny = new ExecutorFragment(Types._ArrayType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ArrayType__OclElement = new ExecutorFragment(Types._ArrayType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ArrayType__Type = new ExecutorFragment(Types._ArrayType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ArrayType__Visitable = new ExecutorFragment(Types._ArrayType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Assign__Assign = new ExecutorFragment(Types._Assign, AstmTables.Types._Assign);
		private static final @NonNull ExecutorFragment _Assign__BinaryOperator = new ExecutorFragment(Types._Assign, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Assign__GASTMObject = new ExecutorFragment(Types._Assign, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Assign__GASTMSyntaxObject = new ExecutorFragment(Types._Assign, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Assign__OclAny = new ExecutorFragment(Types._Assign, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Assign__OclElement = new ExecutorFragment(Types._Assign, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Assign__Operator = new ExecutorFragment(Types._Assign, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Assign__OtherSyntaxObject = new ExecutorFragment(Types._Assign, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Assign__Visitable = new ExecutorFragment(Types._Assign, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BinaryExpression__BinaryExpression = new ExecutorFragment(Types._BinaryExpression, AstmTables.Types._BinaryExpression);
		private static final @NonNull ExecutorFragment _BinaryExpression__Expression = new ExecutorFragment(Types._BinaryExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _BinaryExpression__GASTMObject = new ExecutorFragment(Types._BinaryExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BinaryExpression__GASTMSyntaxObject = new ExecutorFragment(Types._BinaryExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BinaryExpression__OclAny = new ExecutorFragment(Types._BinaryExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BinaryExpression__OclElement = new ExecutorFragment(Types._BinaryExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BinaryExpression__Visitable = new ExecutorFragment(Types._BinaryExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BinaryOperator__BinaryOperator = new ExecutorFragment(Types._BinaryOperator, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _BinaryOperator__GASTMObject = new ExecutorFragment(Types._BinaryOperator, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BinaryOperator__GASTMSyntaxObject = new ExecutorFragment(Types._BinaryOperator, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BinaryOperator__OclAny = new ExecutorFragment(Types._BinaryOperator, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BinaryOperator__OclElement = new ExecutorFragment(Types._BinaryOperator, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BinaryOperator__Operator = new ExecutorFragment(Types._BinaryOperator, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _BinaryOperator__OtherSyntaxObject = new ExecutorFragment(Types._BinaryOperator, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _BinaryOperator__Visitable = new ExecutorFragment(Types._BinaryOperator, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitAnd__BinaryOperator = new ExecutorFragment(Types._BitAnd, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _BitAnd__BitAnd = new ExecutorFragment(Types._BitAnd, AstmTables.Types._BitAnd);
		private static final @NonNull ExecutorFragment _BitAnd__GASTMObject = new ExecutorFragment(Types._BitAnd, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitAnd__GASTMSyntaxObject = new ExecutorFragment(Types._BitAnd, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitAnd__OclAny = new ExecutorFragment(Types._BitAnd, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitAnd__OclElement = new ExecutorFragment(Types._BitAnd, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitAnd__Operator = new ExecutorFragment(Types._BitAnd, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _BitAnd__OtherSyntaxObject = new ExecutorFragment(Types._BitAnd, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _BitAnd__Visitable = new ExecutorFragment(Types._BitAnd, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitFieldDefinition__BitFieldDefinition = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._BitFieldDefinition);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__DataDefinition = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._DataDefinition);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__Definition = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__DefinitionObject = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__GASTMObject = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__OclAny = new ExecutorFragment(Types._BitFieldDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__OclElement = new ExecutorFragment(Types._BitFieldDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitFieldDefinition__Visitable = new ExecutorFragment(Types._BitFieldDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitLeftShift__BinaryOperator = new ExecutorFragment(Types._BitLeftShift, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _BitLeftShift__BitLeftShift = new ExecutorFragment(Types._BitLeftShift, AstmTables.Types._BitLeftShift);
		private static final @NonNull ExecutorFragment _BitLeftShift__GASTMObject = new ExecutorFragment(Types._BitLeftShift, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitLeftShift__GASTMSyntaxObject = new ExecutorFragment(Types._BitLeftShift, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitLeftShift__OclAny = new ExecutorFragment(Types._BitLeftShift, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitLeftShift__OclElement = new ExecutorFragment(Types._BitLeftShift, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitLeftShift__Operator = new ExecutorFragment(Types._BitLeftShift, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _BitLeftShift__OtherSyntaxObject = new ExecutorFragment(Types._BitLeftShift, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _BitLeftShift__Visitable = new ExecutorFragment(Types._BitLeftShift, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitLiteral__BitLiteral = new ExecutorFragment(Types._BitLiteral, AstmTables.Types._BitLiteral);
		private static final @NonNull ExecutorFragment _BitLiteral__Expression = new ExecutorFragment(Types._BitLiteral, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _BitLiteral__GASTMObject = new ExecutorFragment(Types._BitLiteral, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitLiteral__GASTMSyntaxObject = new ExecutorFragment(Types._BitLiteral, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitLiteral__Literal = new ExecutorFragment(Types._BitLiteral, AstmTables.Types._Literal);
		private static final @NonNull ExecutorFragment _BitLiteral__OclAny = new ExecutorFragment(Types._BitLiteral, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitLiteral__OclElement = new ExecutorFragment(Types._BitLiteral, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitLiteral__Visitable = new ExecutorFragment(Types._BitLiteral, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitNot__BitNot = new ExecutorFragment(Types._BitNot, AstmTables.Types._BitNot);
		private static final @NonNull ExecutorFragment _BitNot__GASTMObject = new ExecutorFragment(Types._BitNot, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitNot__GASTMSyntaxObject = new ExecutorFragment(Types._BitNot, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitNot__OclAny = new ExecutorFragment(Types._BitNot, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitNot__OclElement = new ExecutorFragment(Types._BitNot, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitNot__Operator = new ExecutorFragment(Types._BitNot, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _BitNot__OtherSyntaxObject = new ExecutorFragment(Types._BitNot, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _BitNot__UnaryOperator = new ExecutorFragment(Types._BitNot, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _BitNot__Visitable = new ExecutorFragment(Types._BitNot, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitOr__BinaryOperator = new ExecutorFragment(Types._BitOr, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _BitOr__BitOr = new ExecutorFragment(Types._BitOr, AstmTables.Types._BitOr);
		private static final @NonNull ExecutorFragment _BitOr__GASTMObject = new ExecutorFragment(Types._BitOr, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitOr__GASTMSyntaxObject = new ExecutorFragment(Types._BitOr, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitOr__OclAny = new ExecutorFragment(Types._BitOr, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitOr__OclElement = new ExecutorFragment(Types._BitOr, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitOr__Operator = new ExecutorFragment(Types._BitOr, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _BitOr__OtherSyntaxObject = new ExecutorFragment(Types._BitOr, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _BitOr__Visitable = new ExecutorFragment(Types._BitOr, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitRightShift__BinaryOperator = new ExecutorFragment(Types._BitRightShift, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _BitRightShift__BitRightShift = new ExecutorFragment(Types._BitRightShift, AstmTables.Types._BitRightShift);
		private static final @NonNull ExecutorFragment _BitRightShift__GASTMObject = new ExecutorFragment(Types._BitRightShift, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitRightShift__GASTMSyntaxObject = new ExecutorFragment(Types._BitRightShift, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitRightShift__OclAny = new ExecutorFragment(Types._BitRightShift, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitRightShift__OclElement = new ExecutorFragment(Types._BitRightShift, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitRightShift__Operator = new ExecutorFragment(Types._BitRightShift, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _BitRightShift__OtherSyntaxObject = new ExecutorFragment(Types._BitRightShift, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _BitRightShift__Visitable = new ExecutorFragment(Types._BitRightShift, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BitXor__BinaryOperator = new ExecutorFragment(Types._BitXor, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _BitXor__BitXor = new ExecutorFragment(Types._BitXor, AstmTables.Types._BitXor);
		private static final @NonNull ExecutorFragment _BitXor__GASTMObject = new ExecutorFragment(Types._BitXor, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BitXor__GASTMSyntaxObject = new ExecutorFragment(Types._BitXor, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BitXor__OclAny = new ExecutorFragment(Types._BitXor, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BitXor__OclElement = new ExecutorFragment(Types._BitXor, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BitXor__Operator = new ExecutorFragment(Types._BitXor, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _BitXor__OtherSyntaxObject = new ExecutorFragment(Types._BitXor, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _BitXor__Visitable = new ExecutorFragment(Types._BitXor, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BlockScope__BlockScope = new ExecutorFragment(Types._BlockScope, AstmTables.Types._BlockScope);
		private static final @NonNull ExecutorFragment _BlockScope__GASTMSemanticObject = new ExecutorFragment(Types._BlockScope, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _BlockScope__OclAny = new ExecutorFragment(Types._BlockScope, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BlockScope__OclElement = new ExecutorFragment(Types._BlockScope, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BlockScope__Scope = new ExecutorFragment(Types._BlockScope, AstmTables.Types._Scope);
		private static final @NonNull ExecutorFragment _BlockScope__Visitable = new ExecutorFragment(Types._BlockScope, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BlockStatement__BlockStatement = new ExecutorFragment(Types._BlockStatement, AstmTables.Types._BlockStatement);
		private static final @NonNull ExecutorFragment _BlockStatement__GASTMObject = new ExecutorFragment(Types._BlockStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BlockStatement__GASTMSyntaxObject = new ExecutorFragment(Types._BlockStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BlockStatement__OclAny = new ExecutorFragment(Types._BlockStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BlockStatement__OclElement = new ExecutorFragment(Types._BlockStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BlockStatement__Statement = new ExecutorFragment(Types._BlockStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _BlockStatement__Visitable = new ExecutorFragment(Types._BlockStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Boolean__Boolean = new ExecutorFragment(Types._Boolean, AstmTables.Types._Boolean);
		private static final @NonNull ExecutorFragment _Boolean__DataType = new ExecutorFragment(Types._Boolean, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _Boolean__GASTMObject = new ExecutorFragment(Types._Boolean, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Boolean__GASTMSyntaxObject = new ExecutorFragment(Types._Boolean, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Boolean__OclAny = new ExecutorFragment(Types._Boolean, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Boolean__OclElement = new ExecutorFragment(Types._Boolean, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Boolean__PrimitiveType = new ExecutorFragment(Types._Boolean, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _Boolean__Type = new ExecutorFragment(Types._Boolean, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Boolean__Visitable = new ExecutorFragment(Types._Boolean, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BooleanLiteral__BooleanLiteral = new ExecutorFragment(Types._BooleanLiteral, AstmTables.Types._BooleanLiteral);
		private static final @NonNull ExecutorFragment _BooleanLiteral__Expression = new ExecutorFragment(Types._BooleanLiteral, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _BooleanLiteral__GASTMObject = new ExecutorFragment(Types._BooleanLiteral, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BooleanLiteral__GASTMSyntaxObject = new ExecutorFragment(Types._BooleanLiteral, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BooleanLiteral__Literal = new ExecutorFragment(Types._BooleanLiteral, AstmTables.Types._Literal);
		private static final @NonNull ExecutorFragment _BooleanLiteral__OclAny = new ExecutorFragment(Types._BooleanLiteral, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BooleanLiteral__OclElement = new ExecutorFragment(Types._BooleanLiteral, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BooleanLiteral__Visitable = new ExecutorFragment(Types._BooleanLiteral, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _BreakStatement__BreakStatement = new ExecutorFragment(Types._BreakStatement, AstmTables.Types._BreakStatement);
		private static final @NonNull ExecutorFragment _BreakStatement__GASTMObject = new ExecutorFragment(Types._BreakStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _BreakStatement__GASTMSyntaxObject = new ExecutorFragment(Types._BreakStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _BreakStatement__OclAny = new ExecutorFragment(Types._BreakStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _BreakStatement__OclElement = new ExecutorFragment(Types._BreakStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _BreakStatement__Statement = new ExecutorFragment(Types._BreakStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _BreakStatement__Visitable = new ExecutorFragment(Types._BreakStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ByReferenceActualParameterExpression__ActualParameter = new ExecutorFragment(Types._ByReferenceActualParameterExpression, AstmTables.Types._ActualParameter);
		private static final @NonNull ExecutorFragment _ByReferenceActualParameterExpression__ActualParameterExpression = new ExecutorFragment(Types._ByReferenceActualParameterExpression, AstmTables.Types._ActualParameterExpression);
		private static final @NonNull ExecutorFragment _ByReferenceActualParameterExpression__ByReferenceActualParameterExpression = new ExecutorFragment(Types._ByReferenceActualParameterExpression, AstmTables.Types._ByReferenceActualParameterExpression);
		private static final @NonNull ExecutorFragment _ByReferenceActualParameterExpression__OclAny = new ExecutorFragment(Types._ByReferenceActualParameterExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ByReferenceActualParameterExpression__OclElement = new ExecutorFragment(Types._ByReferenceActualParameterExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ByReferenceActualParameterExpression__Visitable = new ExecutorFragment(Types._ByReferenceActualParameterExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__ByReferenceFormalParameterType = new ExecutorFragment(Types._ByReferenceFormalParameterType, AstmTables.Types._ByReferenceFormalParameterType);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__DataType = new ExecutorFragment(Types._ByReferenceFormalParameterType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__FormalParameterType = new ExecutorFragment(Types._ByReferenceFormalParameterType, AstmTables.Types._FormalParameterType);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__GASTMObject = new ExecutorFragment(Types._ByReferenceFormalParameterType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__GASTMSyntaxObject = new ExecutorFragment(Types._ByReferenceFormalParameterType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__OclAny = new ExecutorFragment(Types._ByReferenceFormalParameterType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__OclElement = new ExecutorFragment(Types._ByReferenceFormalParameterType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__Type = new ExecutorFragment(Types._ByReferenceFormalParameterType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ByReferenceFormalParameterType__Visitable = new ExecutorFragment(Types._ByReferenceFormalParameterType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ByValueActualParameterExpression__ActualParameter = new ExecutorFragment(Types._ByValueActualParameterExpression, AstmTables.Types._ActualParameter);
		private static final @NonNull ExecutorFragment _ByValueActualParameterExpression__ActualParameterExpression = new ExecutorFragment(Types._ByValueActualParameterExpression, AstmTables.Types._ActualParameterExpression);
		private static final @NonNull ExecutorFragment _ByValueActualParameterExpression__ByValueActualParameterExpression = new ExecutorFragment(Types._ByValueActualParameterExpression, AstmTables.Types._ByValueActualParameterExpression);
		private static final @NonNull ExecutorFragment _ByValueActualParameterExpression__OclAny = new ExecutorFragment(Types._ByValueActualParameterExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ByValueActualParameterExpression__OclElement = new ExecutorFragment(Types._ByValueActualParameterExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ByValueActualParameterExpression__Visitable = new ExecutorFragment(Types._ByValueActualParameterExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__ByValueFormalParameterType = new ExecutorFragment(Types._ByValueFormalParameterType, AstmTables.Types._ByValueFormalParameterType);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__DataType = new ExecutorFragment(Types._ByValueFormalParameterType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__FormalParameterType = new ExecutorFragment(Types._ByValueFormalParameterType, AstmTables.Types._FormalParameterType);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__GASTMObject = new ExecutorFragment(Types._ByValueFormalParameterType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__GASTMSyntaxObject = new ExecutorFragment(Types._ByValueFormalParameterType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__OclAny = new ExecutorFragment(Types._ByValueFormalParameterType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__OclElement = new ExecutorFragment(Types._ByValueFormalParameterType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__Type = new ExecutorFragment(Types._ByValueFormalParameterType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ByValueFormalParameterType__Visitable = new ExecutorFragment(Types._ByValueFormalParameterType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Byte__Byte = new ExecutorFragment(Types._Byte, AstmTables.Types._Byte);
		private static final @NonNull ExecutorFragment _Byte__DataType = new ExecutorFragment(Types._Byte, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _Byte__GASTMObject = new ExecutorFragment(Types._Byte, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Byte__GASTMSyntaxObject = new ExecutorFragment(Types._Byte, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Byte__OclAny = new ExecutorFragment(Types._Byte, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Byte__OclElement = new ExecutorFragment(Types._Byte, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Byte__PrimitiveType = new ExecutorFragment(Types._Byte, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _Byte__Type = new ExecutorFragment(Types._Byte, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Byte__Visitable = new ExecutorFragment(Types._Byte, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _CaseBlock__CaseBlock = new ExecutorFragment(Types._CaseBlock, AstmTables.Types._CaseBlock);
		private static final @NonNull ExecutorFragment _CaseBlock__GASTMObject = new ExecutorFragment(Types._CaseBlock, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _CaseBlock__GASTMSyntaxObject = new ExecutorFragment(Types._CaseBlock, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _CaseBlock__OclAny = new ExecutorFragment(Types._CaseBlock, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _CaseBlock__OclElement = new ExecutorFragment(Types._CaseBlock, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _CaseBlock__OtherSyntaxObject = new ExecutorFragment(Types._CaseBlock, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _CaseBlock__SwitchCase = new ExecutorFragment(Types._CaseBlock, AstmTables.Types._SwitchCase);
		private static final @NonNull ExecutorFragment _CaseBlock__Visitable = new ExecutorFragment(Types._CaseBlock, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _CastExpression__CastExpression = new ExecutorFragment(Types._CastExpression, AstmTables.Types._CastExpression);
		private static final @NonNull ExecutorFragment _CastExpression__Expression = new ExecutorFragment(Types._CastExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _CastExpression__GASTMObject = new ExecutorFragment(Types._CastExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _CastExpression__GASTMSyntaxObject = new ExecutorFragment(Types._CastExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _CastExpression__OclAny = new ExecutorFragment(Types._CastExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _CastExpression__OclElement = new ExecutorFragment(Types._CastExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _CastExpression__Visitable = new ExecutorFragment(Types._CastExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _CatchBlock__CatchBlock = new ExecutorFragment(Types._CatchBlock, AstmTables.Types._CatchBlock);
		private static final @NonNull ExecutorFragment _CatchBlock__GASTMObject = new ExecutorFragment(Types._CatchBlock, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _CatchBlock__GASTMSyntaxObject = new ExecutorFragment(Types._CatchBlock, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _CatchBlock__OclAny = new ExecutorFragment(Types._CatchBlock, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _CatchBlock__OclElement = new ExecutorFragment(Types._CatchBlock, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _CatchBlock__OtherSyntaxObject = new ExecutorFragment(Types._CatchBlock, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _CatchBlock__Visitable = new ExecutorFragment(Types._CatchBlock, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _CharLiteral__CharLiteral = new ExecutorFragment(Types._CharLiteral, AstmTables.Types._CharLiteral);
		private static final @NonNull ExecutorFragment _CharLiteral__Expression = new ExecutorFragment(Types._CharLiteral, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _CharLiteral__GASTMObject = new ExecutorFragment(Types._CharLiteral, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _CharLiteral__GASTMSyntaxObject = new ExecutorFragment(Types._CharLiteral, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _CharLiteral__Literal = new ExecutorFragment(Types._CharLiteral, AstmTables.Types._Literal);
		private static final @NonNull ExecutorFragment _CharLiteral__OclAny = new ExecutorFragment(Types._CharLiteral, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _CharLiteral__OclElement = new ExecutorFragment(Types._CharLiteral, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _CharLiteral__Visitable = new ExecutorFragment(Types._CharLiteral, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Character__Character = new ExecutorFragment(Types._Character, AstmTables.Types._Character);
		private static final @NonNull ExecutorFragment _Character__DataType = new ExecutorFragment(Types._Character, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _Character__GASTMObject = new ExecutorFragment(Types._Character, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Character__GASTMSyntaxObject = new ExecutorFragment(Types._Character, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Character__OclAny = new ExecutorFragment(Types._Character, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Character__OclElement = new ExecutorFragment(Types._Character, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Character__PrimitiveType = new ExecutorFragment(Types._Character, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _Character__Type = new ExecutorFragment(Types._Character, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Character__Visitable = new ExecutorFragment(Types._Character, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ClassType__AggregateType = new ExecutorFragment(Types._ClassType, AstmTables.Types._AggregateType);
		private static final @NonNull ExecutorFragment _ClassType__ClassType = new ExecutorFragment(Types._ClassType, AstmTables.Types._ClassType);
		private static final @NonNull ExecutorFragment _ClassType__DataType = new ExecutorFragment(Types._ClassType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ClassType__GASTMObject = new ExecutorFragment(Types._ClassType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ClassType__GASTMSyntaxObject = new ExecutorFragment(Types._ClassType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ClassType__OclAny = new ExecutorFragment(Types._ClassType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ClassType__OclElement = new ExecutorFragment(Types._ClassType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ClassType__Type = new ExecutorFragment(Types._ClassType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ClassType__Visitable = new ExecutorFragment(Types._ClassType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _CollectionType__CollectionType = new ExecutorFragment(Types._CollectionType, AstmTables.Types._CollectionType);
		private static final @NonNull ExecutorFragment _CollectionType__ConstructedType = new ExecutorFragment(Types._CollectionType, AstmTables.Types._ConstructedType);
		private static final @NonNull ExecutorFragment _CollectionType__DataType = new ExecutorFragment(Types._CollectionType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _CollectionType__GASTMObject = new ExecutorFragment(Types._CollectionType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _CollectionType__GASTMSyntaxObject = new ExecutorFragment(Types._CollectionType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _CollectionType__OclAny = new ExecutorFragment(Types._CollectionType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _CollectionType__OclElement = new ExecutorFragment(Types._CollectionType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _CollectionType__Type = new ExecutorFragment(Types._CollectionType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _CollectionType__Visitable = new ExecutorFragment(Types._CollectionType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Comment__Comment = new ExecutorFragment(Types._Comment, AstmTables.Types._Comment);
		private static final @NonNull ExecutorFragment _Comment__GASTMObject = new ExecutorFragment(Types._Comment, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Comment__GASTMSyntaxObject = new ExecutorFragment(Types._Comment, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Comment__OclAny = new ExecutorFragment(Types._Comment, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Comment__OclElement = new ExecutorFragment(Types._Comment, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Comment__PreprocessorElement = new ExecutorFragment(Types._Comment, AstmTables.Types._PreprocessorElement);
		private static final @NonNull ExecutorFragment _Comment__Visitable = new ExecutorFragment(Types._Comment, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _CompilationUnit__CompilationUnit = new ExecutorFragment(Types._CompilationUnit, AstmTables.Types._CompilationUnit);
		private static final @NonNull ExecutorFragment _CompilationUnit__GASTMObject = new ExecutorFragment(Types._CompilationUnit, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _CompilationUnit__GASTMSyntaxObject = new ExecutorFragment(Types._CompilationUnit, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _CompilationUnit__OclAny = new ExecutorFragment(Types._CompilationUnit, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _CompilationUnit__OclElement = new ExecutorFragment(Types._CompilationUnit, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _CompilationUnit__OtherSyntaxObject = new ExecutorFragment(Types._CompilationUnit, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _CompilationUnit__Visitable = new ExecutorFragment(Types._CompilationUnit, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ConditionalExpression__ConditionalExpression = new ExecutorFragment(Types._ConditionalExpression, AstmTables.Types._ConditionalExpression);
		private static final @NonNull ExecutorFragment _ConditionalExpression__Expression = new ExecutorFragment(Types._ConditionalExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _ConditionalExpression__GASTMObject = new ExecutorFragment(Types._ConditionalExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ConditionalExpression__GASTMSyntaxObject = new ExecutorFragment(Types._ConditionalExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ConditionalExpression__OclAny = new ExecutorFragment(Types._ConditionalExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ConditionalExpression__OclElement = new ExecutorFragment(Types._ConditionalExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ConditionalExpression__Visitable = new ExecutorFragment(Types._ConditionalExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ConstructedType__ConstructedType = new ExecutorFragment(Types._ConstructedType, AstmTables.Types._ConstructedType);
		private static final @NonNull ExecutorFragment _ConstructedType__DataType = new ExecutorFragment(Types._ConstructedType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ConstructedType__GASTMObject = new ExecutorFragment(Types._ConstructedType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ConstructedType__GASTMSyntaxObject = new ExecutorFragment(Types._ConstructedType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ConstructedType__OclAny = new ExecutorFragment(Types._ConstructedType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ConstructedType__OclElement = new ExecutorFragment(Types._ConstructedType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ConstructedType__Type = new ExecutorFragment(Types._ConstructedType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ConstructedType__Visitable = new ExecutorFragment(Types._ConstructedType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ContinueStatement__ContinueStatement = new ExecutorFragment(Types._ContinueStatement, AstmTables.Types._ContinueStatement);
		private static final @NonNull ExecutorFragment _ContinueStatement__GASTMObject = new ExecutorFragment(Types._ContinueStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ContinueStatement__GASTMSyntaxObject = new ExecutorFragment(Types._ContinueStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ContinueStatement__OclAny = new ExecutorFragment(Types._ContinueStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ContinueStatement__OclElement = new ExecutorFragment(Types._ContinueStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ContinueStatement__Statement = new ExecutorFragment(Types._ContinueStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _ContinueStatement__Visitable = new ExecutorFragment(Types._ContinueStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DataDefinition__DataDefinition = new ExecutorFragment(Types._DataDefinition, AstmTables.Types._DataDefinition);
		private static final @NonNull ExecutorFragment _DataDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._DataDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _DataDefinition__Definition = new ExecutorFragment(Types._DataDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _DataDefinition__DefinitionObject = new ExecutorFragment(Types._DataDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _DataDefinition__GASTMObject = new ExecutorFragment(Types._DataDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DataDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._DataDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DataDefinition__OclAny = new ExecutorFragment(Types._DataDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DataDefinition__OclElement = new ExecutorFragment(Types._DataDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DataDefinition__Visitable = new ExecutorFragment(Types._DataDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DataType__DataType = new ExecutorFragment(Types._DataType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _DataType__GASTMObject = new ExecutorFragment(Types._DataType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DataType__GASTMSyntaxObject = new ExecutorFragment(Types._DataType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DataType__OclAny = new ExecutorFragment(Types._DataType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DataType__OclElement = new ExecutorFragment(Types._DataType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DataType__Type = new ExecutorFragment(Types._DataType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _DataType__Visitable = new ExecutorFragment(Types._DataType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Declaration__Declaration = new ExecutorFragment(Types._Declaration, AstmTables.Types._Declaration);
		private static final @NonNull ExecutorFragment _Declaration__DeclarationOrDefinition = new ExecutorFragment(Types._Declaration, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _Declaration__DefinitionObject = new ExecutorFragment(Types._Declaration, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _Declaration__GASTMObject = new ExecutorFragment(Types._Declaration, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Declaration__GASTMSyntaxObject = new ExecutorFragment(Types._Declaration, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Declaration__OclAny = new ExecutorFragment(Types._Declaration, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Declaration__OclElement = new ExecutorFragment(Types._Declaration, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Declaration__Visitable = new ExecutorFragment(Types._Declaration, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DeclarationOrDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._DeclarationOrDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinition__DefinitionObject = new ExecutorFragment(Types._DeclarationOrDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinition__GASTMObject = new ExecutorFragment(Types._DeclarationOrDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._DeclarationOrDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinition__OclAny = new ExecutorFragment(Types._DeclarationOrDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinition__OclElement = new ExecutorFragment(Types._DeclarationOrDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinition__Visitable = new ExecutorFragment(Types._DeclarationOrDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DeclarationOrDefinitionStatement__DeclarationOrDefinitionStatement = new ExecutorFragment(Types._DeclarationOrDefinitionStatement, AstmTables.Types._DeclarationOrDefinitionStatement);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinitionStatement__GASTMObject = new ExecutorFragment(Types._DeclarationOrDefinitionStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinitionStatement__GASTMSyntaxObject = new ExecutorFragment(Types._DeclarationOrDefinitionStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinitionStatement__OclAny = new ExecutorFragment(Types._DeclarationOrDefinitionStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinitionStatement__OclElement = new ExecutorFragment(Types._DeclarationOrDefinitionStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinitionStatement__Statement = new ExecutorFragment(Types._DeclarationOrDefinitionStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _DeclarationOrDefinitionStatement__Visitable = new ExecutorFragment(Types._DeclarationOrDefinitionStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Decrement__Decrement = new ExecutorFragment(Types._Decrement, AstmTables.Types._Decrement);
		private static final @NonNull ExecutorFragment _Decrement__GASTMObject = new ExecutorFragment(Types._Decrement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Decrement__GASTMSyntaxObject = new ExecutorFragment(Types._Decrement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Decrement__OclAny = new ExecutorFragment(Types._Decrement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Decrement__OclElement = new ExecutorFragment(Types._Decrement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Decrement__Operator = new ExecutorFragment(Types._Decrement, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Decrement__OtherSyntaxObject = new ExecutorFragment(Types._Decrement, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Decrement__UnaryOperator = new ExecutorFragment(Types._Decrement, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _Decrement__Visitable = new ExecutorFragment(Types._Decrement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DefaultBlock__DefaultBlock = new ExecutorFragment(Types._DefaultBlock, AstmTables.Types._DefaultBlock);
		private static final @NonNull ExecutorFragment _DefaultBlock__GASTMObject = new ExecutorFragment(Types._DefaultBlock, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DefaultBlock__GASTMSyntaxObject = new ExecutorFragment(Types._DefaultBlock, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DefaultBlock__OclAny = new ExecutorFragment(Types._DefaultBlock, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DefaultBlock__OclElement = new ExecutorFragment(Types._DefaultBlock, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DefaultBlock__OtherSyntaxObject = new ExecutorFragment(Types._DefaultBlock, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _DefaultBlock__SwitchCase = new ExecutorFragment(Types._DefaultBlock, AstmTables.Types._SwitchCase);
		private static final @NonNull ExecutorFragment _DefaultBlock__Visitable = new ExecutorFragment(Types._DefaultBlock, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Definition__DeclarationOrDefinition = new ExecutorFragment(Types._Definition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _Definition__Definition = new ExecutorFragment(Types._Definition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _Definition__DefinitionObject = new ExecutorFragment(Types._Definition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _Definition__GASTMObject = new ExecutorFragment(Types._Definition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Definition__GASTMSyntaxObject = new ExecutorFragment(Types._Definition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Definition__OclAny = new ExecutorFragment(Types._Definition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Definition__OclElement = new ExecutorFragment(Types._Definition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Definition__Visitable = new ExecutorFragment(Types._Definition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DefinitionObject__DefinitionObject = new ExecutorFragment(Types._DefinitionObject, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _DefinitionObject__GASTMObject = new ExecutorFragment(Types._DefinitionObject, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DefinitionObject__GASTMSyntaxObject = new ExecutorFragment(Types._DefinitionObject, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DefinitionObject__OclAny = new ExecutorFragment(Types._DefinitionObject, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DefinitionObject__OclElement = new ExecutorFragment(Types._DefinitionObject, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DefinitionObject__Visitable = new ExecutorFragment(Types._DefinitionObject, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DeleteStatement__DeleteStatement = new ExecutorFragment(Types._DeleteStatement, AstmTables.Types._DeleteStatement);
		private static final @NonNull ExecutorFragment _DeleteStatement__GASTMObject = new ExecutorFragment(Types._DeleteStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DeleteStatement__GASTMSyntaxObject = new ExecutorFragment(Types._DeleteStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DeleteStatement__OclAny = new ExecutorFragment(Types._DeleteStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DeleteStatement__OclElement = new ExecutorFragment(Types._DeleteStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DeleteStatement__Statement = new ExecutorFragment(Types._DeleteStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _DeleteStatement__Visitable = new ExecutorFragment(Types._DeleteStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DelphiBlockStatement__BlockStatement = new ExecutorFragment(Types._DelphiBlockStatement, AstmTables.Types._BlockStatement);
		private static final @NonNull ExecutorFragment _DelphiBlockStatement__DelphiBlockStatement = new ExecutorFragment(Types._DelphiBlockStatement, AstmTables.Types._DelphiBlockStatement);
		private static final @NonNull ExecutorFragment _DelphiBlockStatement__GASTMObject = new ExecutorFragment(Types._DelphiBlockStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DelphiBlockStatement__GASTMSyntaxObject = new ExecutorFragment(Types._DelphiBlockStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiBlockStatement__OclAny = new ExecutorFragment(Types._DelphiBlockStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DelphiBlockStatement__OclElement = new ExecutorFragment(Types._DelphiBlockStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DelphiBlockStatement__Statement = new ExecutorFragment(Types._DelphiBlockStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _DelphiBlockStatement__Visitable = new ExecutorFragment(Types._DelphiBlockStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__DelphiFunctionCallExpression = new ExecutorFragment(Types._DelphiFunctionCallExpression, AstmTables.Types._DelphiFunctionCallExpression);
		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__Expression = new ExecutorFragment(Types._DelphiFunctionCallExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__FunctionCallExpression = new ExecutorFragment(Types._DelphiFunctionCallExpression, AstmTables.Types._FunctionCallExpression);
		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__GASTMObject = new ExecutorFragment(Types._DelphiFunctionCallExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__GASTMSyntaxObject = new ExecutorFragment(Types._DelphiFunctionCallExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__OclAny = new ExecutorFragment(Types._DelphiFunctionCallExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__OclElement = new ExecutorFragment(Types._DelphiFunctionCallExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DelphiFunctionCallExpression__Visitable = new ExecutorFragment(Types._DelphiFunctionCallExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DelphiImplementationSection__CompilationUnit = new ExecutorFragment(Types._DelphiImplementationSection, AstmTables.Types._CompilationUnit);
		private static final @NonNull ExecutorFragment _DelphiImplementationSection__DelphiImplementationSection = new ExecutorFragment(Types._DelphiImplementationSection, AstmTables.Types._DelphiImplementationSection);
		private static final @NonNull ExecutorFragment _DelphiImplementationSection__GASTMObject = new ExecutorFragment(Types._DelphiImplementationSection, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DelphiImplementationSection__GASTMSyntaxObject = new ExecutorFragment(Types._DelphiImplementationSection, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiImplementationSection__OclAny = new ExecutorFragment(Types._DelphiImplementationSection, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DelphiImplementationSection__OclElement = new ExecutorFragment(Types._DelphiImplementationSection, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DelphiImplementationSection__OtherSyntaxObject = new ExecutorFragment(Types._DelphiImplementationSection, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiImplementationSection__Visitable = new ExecutorFragment(Types._DelphiImplementationSection, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__CompilationUnit = new ExecutorFragment(Types._DelphiInterfaceSection, AstmTables.Types._CompilationUnit);
		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__DelphiInterfaceSection = new ExecutorFragment(Types._DelphiInterfaceSection, AstmTables.Types._DelphiInterfaceSection);
		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__GASTMObject = new ExecutorFragment(Types._DelphiInterfaceSection, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__GASTMSyntaxObject = new ExecutorFragment(Types._DelphiInterfaceSection, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__OclAny = new ExecutorFragment(Types._DelphiInterfaceSection, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__OclElement = new ExecutorFragment(Types._DelphiInterfaceSection, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__OtherSyntaxObject = new ExecutorFragment(Types._DelphiInterfaceSection, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiInterfaceSection__Visitable = new ExecutorFragment(Types._DelphiInterfaceSection, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DelphiUnit__CompilationUnit = new ExecutorFragment(Types._DelphiUnit, AstmTables.Types._CompilationUnit);
		private static final @NonNull ExecutorFragment _DelphiUnit__DelphiUnit = new ExecutorFragment(Types._DelphiUnit, AstmTables.Types._DelphiUnit);
		private static final @NonNull ExecutorFragment _DelphiUnit__GASTMObject = new ExecutorFragment(Types._DelphiUnit, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DelphiUnit__GASTMSyntaxObject = new ExecutorFragment(Types._DelphiUnit, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiUnit__OclAny = new ExecutorFragment(Types._DelphiUnit, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DelphiUnit__OclElement = new ExecutorFragment(Types._DelphiUnit, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DelphiUnit__OtherSyntaxObject = new ExecutorFragment(Types._DelphiUnit, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiUnit__Visitable = new ExecutorFragment(Types._DelphiUnit, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DelphiWithStatement__BlockStatement = new ExecutorFragment(Types._DelphiWithStatement, AstmTables.Types._BlockStatement);
		private static final @NonNull ExecutorFragment _DelphiWithStatement__DelphiWithStatement = new ExecutorFragment(Types._DelphiWithStatement, AstmTables.Types._DelphiWithStatement);
		private static final @NonNull ExecutorFragment _DelphiWithStatement__GASTMObject = new ExecutorFragment(Types._DelphiWithStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DelphiWithStatement__GASTMSyntaxObject = new ExecutorFragment(Types._DelphiWithStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DelphiWithStatement__OclAny = new ExecutorFragment(Types._DelphiWithStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DelphiWithStatement__OclElement = new ExecutorFragment(Types._DelphiWithStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DelphiWithStatement__Statement = new ExecutorFragment(Types._DelphiWithStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _DelphiWithStatement__Visitable = new ExecutorFragment(Types._DelphiWithStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Deref__Deref = new ExecutorFragment(Types._Deref, AstmTables.Types._Deref);
		private static final @NonNull ExecutorFragment _Deref__GASTMObject = new ExecutorFragment(Types._Deref, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Deref__GASTMSyntaxObject = new ExecutorFragment(Types._Deref, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Deref__OclAny = new ExecutorFragment(Types._Deref, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Deref__OclElement = new ExecutorFragment(Types._Deref, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Deref__Operator = new ExecutorFragment(Types._Deref, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Deref__OtherSyntaxObject = new ExecutorFragment(Types._Deref, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Deref__UnaryOperator = new ExecutorFragment(Types._Deref, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _Deref__Visitable = new ExecutorFragment(Types._Deref, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DerivesFrom__DerivesFrom = new ExecutorFragment(Types._DerivesFrom, AstmTables.Types._DerivesFrom);
		private static final @NonNull ExecutorFragment _DerivesFrom__GASTMObject = new ExecutorFragment(Types._DerivesFrom, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DerivesFrom__GASTMSyntaxObject = new ExecutorFragment(Types._DerivesFrom, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DerivesFrom__OclAny = new ExecutorFragment(Types._DerivesFrom, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DerivesFrom__OclElement = new ExecutorFragment(Types._DerivesFrom, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DerivesFrom__OtherSyntaxObject = new ExecutorFragment(Types._DerivesFrom, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _DerivesFrom__Visitable = new ExecutorFragment(Types._DerivesFrom, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Dimension__Dimension = new ExecutorFragment(Types._Dimension, AstmTables.Types._Dimension);
		private static final @NonNull ExecutorFragment _Dimension__GASTMObject = new ExecutorFragment(Types._Dimension, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Dimension__GASTMSyntaxObject = new ExecutorFragment(Types._Dimension, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Dimension__OclAny = new ExecutorFragment(Types._Dimension, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Dimension__OclElement = new ExecutorFragment(Types._Dimension, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Dimension__OtherSyntaxObject = new ExecutorFragment(Types._Dimension, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Dimension__Visitable = new ExecutorFragment(Types._Dimension, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Divide__BinaryOperator = new ExecutorFragment(Types._Divide, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Divide__Divide = new ExecutorFragment(Types._Divide, AstmTables.Types._Divide);
		private static final @NonNull ExecutorFragment _Divide__GASTMObject = new ExecutorFragment(Types._Divide, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Divide__GASTMSyntaxObject = new ExecutorFragment(Types._Divide, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Divide__OclAny = new ExecutorFragment(Types._Divide, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Divide__OclElement = new ExecutorFragment(Types._Divide, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Divide__Operator = new ExecutorFragment(Types._Divide, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Divide__OtherSyntaxObject = new ExecutorFragment(Types._Divide, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Divide__Visitable = new ExecutorFragment(Types._Divide, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _DoWhileStatement__DoWhileStatement = new ExecutorFragment(Types._DoWhileStatement, AstmTables.Types._DoWhileStatement);
		private static final @NonNull ExecutorFragment _DoWhileStatement__GASTMObject = new ExecutorFragment(Types._DoWhileStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _DoWhileStatement__GASTMSyntaxObject = new ExecutorFragment(Types._DoWhileStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _DoWhileStatement__LoopStatement = new ExecutorFragment(Types._DoWhileStatement, AstmTables.Types._LoopStatement);
		private static final @NonNull ExecutorFragment _DoWhileStatement__OclAny = new ExecutorFragment(Types._DoWhileStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _DoWhileStatement__OclElement = new ExecutorFragment(Types._DoWhileStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _DoWhileStatement__Statement = new ExecutorFragment(Types._DoWhileStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _DoWhileStatement__Visitable = new ExecutorFragment(Types._DoWhileStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Double__DataType = new ExecutorFragment(Types._Double, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _Double__Double = new ExecutorFragment(Types._Double, AstmTables.Types._Double);
		private static final @NonNull ExecutorFragment _Double__GASTMObject = new ExecutorFragment(Types._Double, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Double__GASTMSyntaxObject = new ExecutorFragment(Types._Double, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Double__OclAny = new ExecutorFragment(Types._Double, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Double__OclElement = new ExecutorFragment(Types._Double, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Double__PrimitiveType = new ExecutorFragment(Types._Double, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _Double__Type = new ExecutorFragment(Types._Double, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Double__Visitable = new ExecutorFragment(Types._Double, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _EmptyStatement__EmptyStatement = new ExecutorFragment(Types._EmptyStatement, AstmTables.Types._EmptyStatement);
		private static final @NonNull ExecutorFragment _EmptyStatement__GASTMObject = new ExecutorFragment(Types._EmptyStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _EmptyStatement__GASTMSyntaxObject = new ExecutorFragment(Types._EmptyStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _EmptyStatement__OclAny = new ExecutorFragment(Types._EmptyStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _EmptyStatement__OclElement = new ExecutorFragment(Types._EmptyStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _EmptyStatement__Statement = new ExecutorFragment(Types._EmptyStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _EmptyStatement__Visitable = new ExecutorFragment(Types._EmptyStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _EntryDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._EntryDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _EntryDefinition__Definition = new ExecutorFragment(Types._EntryDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _EntryDefinition__DefinitionObject = new ExecutorFragment(Types._EntryDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _EntryDefinition__EntryDefinition = new ExecutorFragment(Types._EntryDefinition, AstmTables.Types._EntryDefinition);
		private static final @NonNull ExecutorFragment _EntryDefinition__GASTMObject = new ExecutorFragment(Types._EntryDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _EntryDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._EntryDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _EntryDefinition__OclAny = new ExecutorFragment(Types._EntryDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _EntryDefinition__OclElement = new ExecutorFragment(Types._EntryDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _EntryDefinition__Visitable = new ExecutorFragment(Types._EntryDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._EnumLiteralDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__Definition = new ExecutorFragment(Types._EnumLiteralDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__DefinitionObject = new ExecutorFragment(Types._EnumLiteralDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__EnumLiteralDefinition = new ExecutorFragment(Types._EnumLiteralDefinition, AstmTables.Types._EnumLiteralDefinition);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__GASTMObject = new ExecutorFragment(Types._EnumLiteralDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._EnumLiteralDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__OclAny = new ExecutorFragment(Types._EnumLiteralDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__OclElement = new ExecutorFragment(Types._EnumLiteralDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _EnumLiteralDefinition__Visitable = new ExecutorFragment(Types._EnumLiteralDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _EnumType__DataType = new ExecutorFragment(Types._EnumType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _EnumType__EnumType = new ExecutorFragment(Types._EnumType, AstmTables.Types._EnumType);
		private static final @NonNull ExecutorFragment _EnumType__GASTMObject = new ExecutorFragment(Types._EnumType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _EnumType__GASTMSyntaxObject = new ExecutorFragment(Types._EnumType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _EnumType__OclAny = new ExecutorFragment(Types._EnumType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _EnumType__OclElement = new ExecutorFragment(Types._EnumType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _EnumType__Type = new ExecutorFragment(Types._EnumType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _EnumType__Visitable = new ExecutorFragment(Types._EnumType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Equal__BinaryOperator = new ExecutorFragment(Types._Equal, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Equal__Equal = new ExecutorFragment(Types._Equal, AstmTables.Types._Equal);
		private static final @NonNull ExecutorFragment _Equal__GASTMObject = new ExecutorFragment(Types._Equal, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Equal__GASTMSyntaxObject = new ExecutorFragment(Types._Equal, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Equal__OclAny = new ExecutorFragment(Types._Equal, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Equal__OclElement = new ExecutorFragment(Types._Equal, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Equal__Operator = new ExecutorFragment(Types._Equal, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Equal__OtherSyntaxObject = new ExecutorFragment(Types._Equal, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Equal__Visitable = new ExecutorFragment(Types._Equal, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ExceptionType__DataType = new ExecutorFragment(Types._ExceptionType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ExceptionType__ExceptionType = new ExecutorFragment(Types._ExceptionType, AstmTables.Types._ExceptionType);
		private static final @NonNull ExecutorFragment _ExceptionType__GASTMObject = new ExecutorFragment(Types._ExceptionType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ExceptionType__GASTMSyntaxObject = new ExecutorFragment(Types._ExceptionType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ExceptionType__OclAny = new ExecutorFragment(Types._ExceptionType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ExceptionType__OclElement = new ExecutorFragment(Types._ExceptionType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ExceptionType__Type = new ExecutorFragment(Types._ExceptionType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ExceptionType__Visitable = new ExecutorFragment(Types._ExceptionType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Exponent__BinaryOperator = new ExecutorFragment(Types._Exponent, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Exponent__Exponent = new ExecutorFragment(Types._Exponent, AstmTables.Types._Exponent);
		private static final @NonNull ExecutorFragment _Exponent__GASTMObject = new ExecutorFragment(Types._Exponent, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Exponent__GASTMSyntaxObject = new ExecutorFragment(Types._Exponent, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Exponent__OclAny = new ExecutorFragment(Types._Exponent, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Exponent__OclElement = new ExecutorFragment(Types._Exponent, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Exponent__Operator = new ExecutorFragment(Types._Exponent, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Exponent__OtherSyntaxObject = new ExecutorFragment(Types._Exponent, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Exponent__Visitable = new ExecutorFragment(Types._Exponent, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Expression__Expression = new ExecutorFragment(Types._Expression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _Expression__GASTMObject = new ExecutorFragment(Types._Expression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Expression__GASTMSyntaxObject = new ExecutorFragment(Types._Expression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Expression__OclAny = new ExecutorFragment(Types._Expression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Expression__OclElement = new ExecutorFragment(Types._Expression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Expression__Visitable = new ExecutorFragment(Types._Expression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ExpressionStatement__ExpressionStatement = new ExecutorFragment(Types._ExpressionStatement, AstmTables.Types._ExpressionStatement);
		private static final @NonNull ExecutorFragment _ExpressionStatement__GASTMObject = new ExecutorFragment(Types._ExpressionStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ExpressionStatement__GASTMSyntaxObject = new ExecutorFragment(Types._ExpressionStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ExpressionStatement__OclAny = new ExecutorFragment(Types._ExpressionStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ExpressionStatement__OclElement = new ExecutorFragment(Types._ExpressionStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ExpressionStatement__Statement = new ExecutorFragment(Types._ExpressionStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _ExpressionStatement__Visitable = new ExecutorFragment(Types._ExpressionStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _External__External = new ExecutorFragment(Types._External, AstmTables.Types._External);
		private static final @NonNull ExecutorFragment _External__OclAny = new ExecutorFragment(Types._External, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _External__OclElement = new ExecutorFragment(Types._External, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _External__StorageSpecification = new ExecutorFragment(Types._External, AstmTables.Types._StorageSpecification);
		private static final @NonNull ExecutorFragment _External__Visitable = new ExecutorFragment(Types._External, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FileLocal__FileLocal = new ExecutorFragment(Types._FileLocal, AstmTables.Types._FileLocal);
		private static final @NonNull ExecutorFragment _FileLocal__OclAny = new ExecutorFragment(Types._FileLocal, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FileLocal__OclElement = new ExecutorFragment(Types._FileLocal, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FileLocal__StorageSpecification = new ExecutorFragment(Types._FileLocal, AstmTables.Types._StorageSpecification);
		private static final @NonNull ExecutorFragment _FileLocal__Visitable = new ExecutorFragment(Types._FileLocal, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Float__DataType = new ExecutorFragment(Types._Float, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _Float__Float = new ExecutorFragment(Types._Float, AstmTables.Types._Float);
		private static final @NonNull ExecutorFragment _Float__GASTMObject = new ExecutorFragment(Types._Float, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Float__GASTMSyntaxObject = new ExecutorFragment(Types._Float, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Float__OclAny = new ExecutorFragment(Types._Float, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Float__OclElement = new ExecutorFragment(Types._Float, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Float__PrimitiveType = new ExecutorFragment(Types._Float, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _Float__Type = new ExecutorFragment(Types._Float, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Float__Visitable = new ExecutorFragment(Types._Float, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__ForCheckAfterStatement = new ExecutorFragment(Types._ForCheckAfterStatement, AstmTables.Types._ForCheckAfterStatement);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__ForStatement = new ExecutorFragment(Types._ForCheckAfterStatement, AstmTables.Types._ForStatement);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__GASTMObject = new ExecutorFragment(Types._ForCheckAfterStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__GASTMSyntaxObject = new ExecutorFragment(Types._ForCheckAfterStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__LoopStatement = new ExecutorFragment(Types._ForCheckAfterStatement, AstmTables.Types._LoopStatement);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__OclAny = new ExecutorFragment(Types._ForCheckAfterStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__OclElement = new ExecutorFragment(Types._ForCheckAfterStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__Statement = new ExecutorFragment(Types._ForCheckAfterStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _ForCheckAfterStatement__Visitable = new ExecutorFragment(Types._ForCheckAfterStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__ForCheckBeforeStatement = new ExecutorFragment(Types._ForCheckBeforeStatement, AstmTables.Types._ForCheckBeforeStatement);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__ForStatement = new ExecutorFragment(Types._ForCheckBeforeStatement, AstmTables.Types._ForStatement);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__GASTMObject = new ExecutorFragment(Types._ForCheckBeforeStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__GASTMSyntaxObject = new ExecutorFragment(Types._ForCheckBeforeStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__LoopStatement = new ExecutorFragment(Types._ForCheckBeforeStatement, AstmTables.Types._LoopStatement);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__OclAny = new ExecutorFragment(Types._ForCheckBeforeStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__OclElement = new ExecutorFragment(Types._ForCheckBeforeStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__Statement = new ExecutorFragment(Types._ForCheckBeforeStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _ForCheckBeforeStatement__Visitable = new ExecutorFragment(Types._ForCheckBeforeStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ForStatement__ForStatement = new ExecutorFragment(Types._ForStatement, AstmTables.Types._ForStatement);
		private static final @NonNull ExecutorFragment _ForStatement__GASTMObject = new ExecutorFragment(Types._ForStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ForStatement__GASTMSyntaxObject = new ExecutorFragment(Types._ForStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ForStatement__LoopStatement = new ExecutorFragment(Types._ForStatement, AstmTables.Types._LoopStatement);
		private static final @NonNull ExecutorFragment _ForStatement__OclAny = new ExecutorFragment(Types._ForStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ForStatement__OclElement = new ExecutorFragment(Types._ForStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ForStatement__Statement = new ExecutorFragment(Types._ForStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _ForStatement__Visitable = new ExecutorFragment(Types._ForStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__Declaration = new ExecutorFragment(Types._FormalParameterDeclaration, AstmTables.Types._Declaration);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__DeclarationOrDefinition = new ExecutorFragment(Types._FormalParameterDeclaration, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__DefinitionObject = new ExecutorFragment(Types._FormalParameterDeclaration, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__FormalParameterDeclaration = new ExecutorFragment(Types._FormalParameterDeclaration, AstmTables.Types._FormalParameterDeclaration);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__GASTMObject = new ExecutorFragment(Types._FormalParameterDeclaration, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__GASTMSyntaxObject = new ExecutorFragment(Types._FormalParameterDeclaration, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__OclAny = new ExecutorFragment(Types._FormalParameterDeclaration, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__OclElement = new ExecutorFragment(Types._FormalParameterDeclaration, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FormalParameterDeclaration__Visitable = new ExecutorFragment(Types._FormalParameterDeclaration, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FormalParameterDefinition__DataDefinition = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._DataDefinition);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__Definition = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__DefinitionObject = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__FormalParameterDefinition = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._FormalParameterDefinition);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__GASTMObject = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__OclAny = new ExecutorFragment(Types._FormalParameterDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__OclElement = new ExecutorFragment(Types._FormalParameterDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FormalParameterDefinition__Visitable = new ExecutorFragment(Types._FormalParameterDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FormalParameterType__DataType = new ExecutorFragment(Types._FormalParameterType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _FormalParameterType__FormalParameterType = new ExecutorFragment(Types._FormalParameterType, AstmTables.Types._FormalParameterType);
		private static final @NonNull ExecutorFragment _FormalParameterType__GASTMObject = new ExecutorFragment(Types._FormalParameterType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FormalParameterType__GASTMSyntaxObject = new ExecutorFragment(Types._FormalParameterType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FormalParameterType__OclAny = new ExecutorFragment(Types._FormalParameterType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FormalParameterType__OclElement = new ExecutorFragment(Types._FormalParameterType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FormalParameterType__Type = new ExecutorFragment(Types._FormalParameterType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _FormalParameterType__Visitable = new ExecutorFragment(Types._FormalParameterType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionCallExpression__Expression = new ExecutorFragment(Types._FunctionCallExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _FunctionCallExpression__FunctionCallExpression = new ExecutorFragment(Types._FunctionCallExpression, AstmTables.Types._FunctionCallExpression);
		private static final @NonNull ExecutorFragment _FunctionCallExpression__GASTMObject = new ExecutorFragment(Types._FunctionCallExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FunctionCallExpression__GASTMSyntaxObject = new ExecutorFragment(Types._FunctionCallExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FunctionCallExpression__OclAny = new ExecutorFragment(Types._FunctionCallExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionCallExpression__OclElement = new ExecutorFragment(Types._FunctionCallExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionCallExpression__Visitable = new ExecutorFragment(Types._FunctionCallExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionDeclaration__Declaration = new ExecutorFragment(Types._FunctionDeclaration, AstmTables.Types._Declaration);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__DeclarationOrDefinition = new ExecutorFragment(Types._FunctionDeclaration, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__DefinitionObject = new ExecutorFragment(Types._FunctionDeclaration, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__FunctionDeclaration = new ExecutorFragment(Types._FunctionDeclaration, AstmTables.Types._FunctionDeclaration);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__GASTMObject = new ExecutorFragment(Types._FunctionDeclaration, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__GASTMSyntaxObject = new ExecutorFragment(Types._FunctionDeclaration, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__OclAny = new ExecutorFragment(Types._FunctionDeclaration, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__OclElement = new ExecutorFragment(Types._FunctionDeclaration, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionDeclaration__Visitable = new ExecutorFragment(Types._FunctionDeclaration, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._FunctionDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _FunctionDefinition__Definition = new ExecutorFragment(Types._FunctionDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _FunctionDefinition__DefinitionObject = new ExecutorFragment(Types._FunctionDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _FunctionDefinition__FunctionDefinition = new ExecutorFragment(Types._FunctionDefinition, AstmTables.Types._FunctionDefinition);
		private static final @NonNull ExecutorFragment _FunctionDefinition__GASTMObject = new ExecutorFragment(Types._FunctionDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FunctionDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._FunctionDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FunctionDefinition__OclAny = new ExecutorFragment(Types._FunctionDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionDefinition__OclElement = new ExecutorFragment(Types._FunctionDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionDefinition__Visitable = new ExecutorFragment(Types._FunctionDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionMemberAttribute__FunctionMemberAttribute = new ExecutorFragment(Types._FunctionMemberAttribute, AstmTables.Types._FunctionMemberAttribute);
		private static final @NonNull ExecutorFragment _FunctionMemberAttribute__GASTMObject = new ExecutorFragment(Types._FunctionMemberAttribute, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FunctionMemberAttribute__GASTMSyntaxObject = new ExecutorFragment(Types._FunctionMemberAttribute, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FunctionMemberAttribute__OclAny = new ExecutorFragment(Types._FunctionMemberAttribute, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionMemberAttribute__OclElement = new ExecutorFragment(Types._FunctionMemberAttribute, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionMemberAttribute__OtherSyntaxObject = new ExecutorFragment(Types._FunctionMemberAttribute, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _FunctionMemberAttribute__Visitable = new ExecutorFragment(Types._FunctionMemberAttribute, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionMemberAttributes__FunctionMemberAttributes = new ExecutorFragment(Types._FunctionMemberAttributes, AstmTables.Types._FunctionMemberAttributes);
		private static final @NonNull ExecutorFragment _FunctionMemberAttributes__OclAny = new ExecutorFragment(Types._FunctionMemberAttributes, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionMemberAttributes__OclElement = new ExecutorFragment(Types._FunctionMemberAttributes, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionMemberAttributes__Visitable = new ExecutorFragment(Types._FunctionMemberAttributes, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionPersistent__FunctionPersistent = new ExecutorFragment(Types._FunctionPersistent, AstmTables.Types._FunctionPersistent);
		private static final @NonNull ExecutorFragment _FunctionPersistent__OclAny = new ExecutorFragment(Types._FunctionPersistent, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionPersistent__OclElement = new ExecutorFragment(Types._FunctionPersistent, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionPersistent__StorageSpecification = new ExecutorFragment(Types._FunctionPersistent, AstmTables.Types._StorageSpecification);
		private static final @NonNull ExecutorFragment _FunctionPersistent__Visitable = new ExecutorFragment(Types._FunctionPersistent, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionScope__FunctionScope = new ExecutorFragment(Types._FunctionScope, AstmTables.Types._FunctionScope);
		private static final @NonNull ExecutorFragment _FunctionScope__GASTMSemanticObject = new ExecutorFragment(Types._FunctionScope, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _FunctionScope__OclAny = new ExecutorFragment(Types._FunctionScope, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionScope__OclElement = new ExecutorFragment(Types._FunctionScope, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionScope__Scope = new ExecutorFragment(Types._FunctionScope, AstmTables.Types._Scope);
		private static final @NonNull ExecutorFragment _FunctionScope__Visitable = new ExecutorFragment(Types._FunctionScope, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _FunctionType__FunctionType = new ExecutorFragment(Types._FunctionType, AstmTables.Types._FunctionType);
		private static final @NonNull ExecutorFragment _FunctionType__GASTMObject = new ExecutorFragment(Types._FunctionType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _FunctionType__GASTMSyntaxObject = new ExecutorFragment(Types._FunctionType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _FunctionType__OclAny = new ExecutorFragment(Types._FunctionType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _FunctionType__OclElement = new ExecutorFragment(Types._FunctionType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _FunctionType__Type = new ExecutorFragment(Types._FunctionType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _FunctionType__Visitable = new ExecutorFragment(Types._FunctionType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _GASTMObject__GASTMObject = new ExecutorFragment(Types._GASTMObject, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _GASTMObject__OclAny = new ExecutorFragment(Types._GASTMObject, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _GASTMObject__OclElement = new ExecutorFragment(Types._GASTMObject, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _GASTMObject__Visitable = new ExecutorFragment(Types._GASTMObject, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _GASTMSemanticObject__GASTMSemanticObject = new ExecutorFragment(Types._GASTMSemanticObject, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _GASTMSemanticObject__OclAny = new ExecutorFragment(Types._GASTMSemanticObject, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _GASTMSemanticObject__OclElement = new ExecutorFragment(Types._GASTMSemanticObject, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _GASTMSemanticObject__Visitable = new ExecutorFragment(Types._GASTMSemanticObject, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _GASTMSourceObject__GASTMSourceObject = new ExecutorFragment(Types._GASTMSourceObject, AstmTables.Types._GASTMSourceObject);
		private static final @NonNull ExecutorFragment _GASTMSourceObject__OclAny = new ExecutorFragment(Types._GASTMSourceObject, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _GASTMSourceObject__OclElement = new ExecutorFragment(Types._GASTMSourceObject, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _GASTMSourceObject__Visitable = new ExecutorFragment(Types._GASTMSourceObject, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _GASTMSyntaxObject__GASTMObject = new ExecutorFragment(Types._GASTMSyntaxObject, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _GASTMSyntaxObject__GASTMSyntaxObject = new ExecutorFragment(Types._GASTMSyntaxObject, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _GASTMSyntaxObject__OclAny = new ExecutorFragment(Types._GASTMSyntaxObject, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _GASTMSyntaxObject__OclElement = new ExecutorFragment(Types._GASTMSyntaxObject, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _GASTMSyntaxObject__Visitable = new ExecutorFragment(Types._GASTMSyntaxObject, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _GlobalScope__GASTMSemanticObject = new ExecutorFragment(Types._GlobalScope, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _GlobalScope__GlobalScope = new ExecutorFragment(Types._GlobalScope, AstmTables.Types._GlobalScope);
		private static final @NonNull ExecutorFragment _GlobalScope__OclAny = new ExecutorFragment(Types._GlobalScope, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _GlobalScope__OclElement = new ExecutorFragment(Types._GlobalScope, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _GlobalScope__Scope = new ExecutorFragment(Types._GlobalScope, AstmTables.Types._Scope);
		private static final @NonNull ExecutorFragment _GlobalScope__Visitable = new ExecutorFragment(Types._GlobalScope, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Greater__BinaryOperator = new ExecutorFragment(Types._Greater, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Greater__GASTMObject = new ExecutorFragment(Types._Greater, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Greater__GASTMSyntaxObject = new ExecutorFragment(Types._Greater, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Greater__Greater = new ExecutorFragment(Types._Greater, AstmTables.Types._Greater);
		private static final @NonNull ExecutorFragment _Greater__OclAny = new ExecutorFragment(Types._Greater, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Greater__OclElement = new ExecutorFragment(Types._Greater, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Greater__Operator = new ExecutorFragment(Types._Greater, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Greater__OtherSyntaxObject = new ExecutorFragment(Types._Greater, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Greater__Visitable = new ExecutorFragment(Types._Greater, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _IdentifierReference__Expression = new ExecutorFragment(Types._IdentifierReference, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _IdentifierReference__GASTMObject = new ExecutorFragment(Types._IdentifierReference, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _IdentifierReference__GASTMSyntaxObject = new ExecutorFragment(Types._IdentifierReference, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _IdentifierReference__IdentifierReference = new ExecutorFragment(Types._IdentifierReference, AstmTables.Types._IdentifierReference);
		private static final @NonNull ExecutorFragment _IdentifierReference__NameReference = new ExecutorFragment(Types._IdentifierReference, AstmTables.Types._NameReference);
		private static final @NonNull ExecutorFragment _IdentifierReference__OclAny = new ExecutorFragment(Types._IdentifierReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _IdentifierReference__OclElement = new ExecutorFragment(Types._IdentifierReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _IdentifierReference__Visitable = new ExecutorFragment(Types._IdentifierReference, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _IfStatement__GASTMObject = new ExecutorFragment(Types._IfStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _IfStatement__GASTMSyntaxObject = new ExecutorFragment(Types._IfStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _IfStatement__IfStatement = new ExecutorFragment(Types._IfStatement, AstmTables.Types._IfStatement);
		private static final @NonNull ExecutorFragment _IfStatement__OclAny = new ExecutorFragment(Types._IfStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _IfStatement__OclElement = new ExecutorFragment(Types._IfStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _IfStatement__Statement = new ExecutorFragment(Types._IfStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _IfStatement__Visitable = new ExecutorFragment(Types._IfStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _IncludeUnit__GASTMObject = new ExecutorFragment(Types._IncludeUnit, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _IncludeUnit__GASTMSyntaxObject = new ExecutorFragment(Types._IncludeUnit, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _IncludeUnit__IncludeUnit = new ExecutorFragment(Types._IncludeUnit, AstmTables.Types._IncludeUnit);
		private static final @NonNull ExecutorFragment _IncludeUnit__OclAny = new ExecutorFragment(Types._IncludeUnit, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _IncludeUnit__OclElement = new ExecutorFragment(Types._IncludeUnit, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _IncludeUnit__PreprocessorElement = new ExecutorFragment(Types._IncludeUnit, AstmTables.Types._PreprocessorElement);
		private static final @NonNull ExecutorFragment _IncludeUnit__Visitable = new ExecutorFragment(Types._IncludeUnit, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Increment__GASTMObject = new ExecutorFragment(Types._Increment, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Increment__GASTMSyntaxObject = new ExecutorFragment(Types._Increment, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Increment__Increment = new ExecutorFragment(Types._Increment, AstmTables.Types._Increment);
		private static final @NonNull ExecutorFragment _Increment__OclAny = new ExecutorFragment(Types._Increment, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Increment__OclElement = new ExecutorFragment(Types._Increment, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Increment__Operator = new ExecutorFragment(Types._Increment, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Increment__OtherSyntaxObject = new ExecutorFragment(Types._Increment, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Increment__UnaryOperator = new ExecutorFragment(Types._Increment, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _Increment__Visitable = new ExecutorFragment(Types._Increment, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Integer__DataType = new ExecutorFragment(Types._Integer, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _Integer__GASTMObject = new ExecutorFragment(Types._Integer, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Integer__GASTMSyntaxObject = new ExecutorFragment(Types._Integer, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Integer__Integer = new ExecutorFragment(Types._Integer, AstmTables.Types._Integer);
		private static final @NonNull ExecutorFragment _Integer__OclAny = new ExecutorFragment(Types._Integer, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Integer__OclElement = new ExecutorFragment(Types._Integer, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Integer__PrimitiveType = new ExecutorFragment(Types._Integer, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _Integer__Type = new ExecutorFragment(Types._Integer, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Integer__Visitable = new ExecutorFragment(Types._Integer, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _IntegerLiteral__Expression = new ExecutorFragment(Types._IntegerLiteral, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _IntegerLiteral__GASTMObject = new ExecutorFragment(Types._IntegerLiteral, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _IntegerLiteral__GASTMSyntaxObject = new ExecutorFragment(Types._IntegerLiteral, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _IntegerLiteral__IntegerLiteral = new ExecutorFragment(Types._IntegerLiteral, AstmTables.Types._IntegerLiteral);
		private static final @NonNull ExecutorFragment _IntegerLiteral__Literal = new ExecutorFragment(Types._IntegerLiteral, AstmTables.Types._Literal);
		private static final @NonNull ExecutorFragment _IntegerLiteral__OclAny = new ExecutorFragment(Types._IntegerLiteral, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _IntegerLiteral__OclElement = new ExecutorFragment(Types._IntegerLiteral, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _IntegerLiteral__Visitable = new ExecutorFragment(Types._IntegerLiteral, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _JumpStatement__GASTMObject = new ExecutorFragment(Types._JumpStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _JumpStatement__GASTMSyntaxObject = new ExecutorFragment(Types._JumpStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _JumpStatement__JumpStatement = new ExecutorFragment(Types._JumpStatement, AstmTables.Types._JumpStatement);
		private static final @NonNull ExecutorFragment _JumpStatement__OclAny = new ExecutorFragment(Types._JumpStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _JumpStatement__OclElement = new ExecutorFragment(Types._JumpStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _JumpStatement__Statement = new ExecutorFragment(Types._JumpStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _JumpStatement__Visitable = new ExecutorFragment(Types._JumpStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _LabelAccess__Expression = new ExecutorFragment(Types._LabelAccess, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _LabelAccess__GASTMObject = new ExecutorFragment(Types._LabelAccess, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _LabelAccess__GASTMSyntaxObject = new ExecutorFragment(Types._LabelAccess, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _LabelAccess__LabelAccess = new ExecutorFragment(Types._LabelAccess, AstmTables.Types._LabelAccess);
		private static final @NonNull ExecutorFragment _LabelAccess__OclAny = new ExecutorFragment(Types._LabelAccess, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _LabelAccess__OclElement = new ExecutorFragment(Types._LabelAccess, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _LabelAccess__Visitable = new ExecutorFragment(Types._LabelAccess, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _LabelDefinition__DefinitionObject = new ExecutorFragment(Types._LabelDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _LabelDefinition__GASTMObject = new ExecutorFragment(Types._LabelDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _LabelDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._LabelDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _LabelDefinition__LabelDefinition = new ExecutorFragment(Types._LabelDefinition, AstmTables.Types._LabelDefinition);
		private static final @NonNull ExecutorFragment _LabelDefinition__OclAny = new ExecutorFragment(Types._LabelDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _LabelDefinition__OclElement = new ExecutorFragment(Types._LabelDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _LabelDefinition__Visitable = new ExecutorFragment(Types._LabelDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _LabelType__GASTMObject = new ExecutorFragment(Types._LabelType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _LabelType__GASTMSyntaxObject = new ExecutorFragment(Types._LabelType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _LabelType__LabelType = new ExecutorFragment(Types._LabelType, AstmTables.Types._LabelType);
		private static final @NonNull ExecutorFragment _LabelType__OclAny = new ExecutorFragment(Types._LabelType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _LabelType__OclElement = new ExecutorFragment(Types._LabelType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _LabelType__Type = new ExecutorFragment(Types._LabelType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _LabelType__Visitable = new ExecutorFragment(Types._LabelType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _LabeledStatement__GASTMObject = new ExecutorFragment(Types._LabeledStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _LabeledStatement__GASTMSyntaxObject = new ExecutorFragment(Types._LabeledStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _LabeledStatement__LabeledStatement = new ExecutorFragment(Types._LabeledStatement, AstmTables.Types._LabeledStatement);
		private static final @NonNull ExecutorFragment _LabeledStatement__OclAny = new ExecutorFragment(Types._LabeledStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _LabeledStatement__OclElement = new ExecutorFragment(Types._LabeledStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _LabeledStatement__Statement = new ExecutorFragment(Types._LabeledStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _LabeledStatement__Visitable = new ExecutorFragment(Types._LabeledStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Less__BinaryOperator = new ExecutorFragment(Types._Less, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Less__GASTMObject = new ExecutorFragment(Types._Less, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Less__GASTMSyntaxObject = new ExecutorFragment(Types._Less, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Less__Less = new ExecutorFragment(Types._Less, AstmTables.Types._Less);
		private static final @NonNull ExecutorFragment _Less__OclAny = new ExecutorFragment(Types._Less, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Less__OclElement = new ExecutorFragment(Types._Less, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Less__Operator = new ExecutorFragment(Types._Less, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Less__OtherSyntaxObject = new ExecutorFragment(Types._Less, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Less__Visitable = new ExecutorFragment(Types._Less, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Literal__Expression = new ExecutorFragment(Types._Literal, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _Literal__GASTMObject = new ExecutorFragment(Types._Literal, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Literal__GASTMSyntaxObject = new ExecutorFragment(Types._Literal, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Literal__Literal = new ExecutorFragment(Types._Literal, AstmTables.Types._Literal);
		private static final @NonNull ExecutorFragment _Literal__OclAny = new ExecutorFragment(Types._Literal, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Literal__OclElement = new ExecutorFragment(Types._Literal, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Literal__Visitable = new ExecutorFragment(Types._Literal, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _LongDouble__DataType = new ExecutorFragment(Types._LongDouble, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _LongDouble__GASTMObject = new ExecutorFragment(Types._LongDouble, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _LongDouble__GASTMSyntaxObject = new ExecutorFragment(Types._LongDouble, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _LongDouble__LongDouble = new ExecutorFragment(Types._LongDouble, AstmTables.Types._LongDouble);
		private static final @NonNull ExecutorFragment _LongDouble__OclAny = new ExecutorFragment(Types._LongDouble, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _LongDouble__OclElement = new ExecutorFragment(Types._LongDouble, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _LongDouble__PrimitiveType = new ExecutorFragment(Types._LongDouble, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _LongDouble__Type = new ExecutorFragment(Types._LongDouble, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _LongDouble__Visitable = new ExecutorFragment(Types._LongDouble, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _LongInteger__DataType = new ExecutorFragment(Types._LongInteger, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _LongInteger__GASTMObject = new ExecutorFragment(Types._LongInteger, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _LongInteger__GASTMSyntaxObject = new ExecutorFragment(Types._LongInteger, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _LongInteger__LongInteger = new ExecutorFragment(Types._LongInteger, AstmTables.Types._LongInteger);
		private static final @NonNull ExecutorFragment _LongInteger__OclAny = new ExecutorFragment(Types._LongInteger, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _LongInteger__OclElement = new ExecutorFragment(Types._LongInteger, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _LongInteger__PrimitiveType = new ExecutorFragment(Types._LongInteger, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _LongInteger__Type = new ExecutorFragment(Types._LongInteger, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _LongInteger__Visitable = new ExecutorFragment(Types._LongInteger, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _LoopStatement__GASTMObject = new ExecutorFragment(Types._LoopStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _LoopStatement__GASTMSyntaxObject = new ExecutorFragment(Types._LoopStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _LoopStatement__LoopStatement = new ExecutorFragment(Types._LoopStatement, AstmTables.Types._LoopStatement);
		private static final @NonNull ExecutorFragment _LoopStatement__OclAny = new ExecutorFragment(Types._LoopStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _LoopStatement__OclElement = new ExecutorFragment(Types._LoopStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _LoopStatement__Statement = new ExecutorFragment(Types._LoopStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _LoopStatement__Visitable = new ExecutorFragment(Types._LoopStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _MacroCall__GASTMObject = new ExecutorFragment(Types._MacroCall, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _MacroCall__GASTMSyntaxObject = new ExecutorFragment(Types._MacroCall, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _MacroCall__MacroCall = new ExecutorFragment(Types._MacroCall, AstmTables.Types._MacroCall);
		private static final @NonNull ExecutorFragment _MacroCall__OclAny = new ExecutorFragment(Types._MacroCall, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _MacroCall__OclElement = new ExecutorFragment(Types._MacroCall, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _MacroCall__PreprocessorElement = new ExecutorFragment(Types._MacroCall, AstmTables.Types._PreprocessorElement);
		private static final @NonNull ExecutorFragment _MacroCall__Visitable = new ExecutorFragment(Types._MacroCall, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _MacroDefinition__GASTMObject = new ExecutorFragment(Types._MacroDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _MacroDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._MacroDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _MacroDefinition__MacroDefinition = new ExecutorFragment(Types._MacroDefinition, AstmTables.Types._MacroDefinition);
		private static final @NonNull ExecutorFragment _MacroDefinition__OclAny = new ExecutorFragment(Types._MacroDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _MacroDefinition__OclElement = new ExecutorFragment(Types._MacroDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _MacroDefinition__PreprocessorElement = new ExecutorFragment(Types._MacroDefinition, AstmTables.Types._PreprocessorElement);
		private static final @NonNull ExecutorFragment _MacroDefinition__Visitable = new ExecutorFragment(Types._MacroDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _MissingActualParameter__ActualParameter = new ExecutorFragment(Types._MissingActualParameter, AstmTables.Types._ActualParameter);
		private static final @NonNull ExecutorFragment _MissingActualParameter__MissingActualParameter = new ExecutorFragment(Types._MissingActualParameter, AstmTables.Types._MissingActualParameter);
		private static final @NonNull ExecutorFragment _MissingActualParameter__OclAny = new ExecutorFragment(Types._MissingActualParameter, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _MissingActualParameter__OclElement = new ExecutorFragment(Types._MissingActualParameter, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _MissingActualParameter__Visitable = new ExecutorFragment(Types._MissingActualParameter, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Modulus__BinaryOperator = new ExecutorFragment(Types._Modulus, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Modulus__GASTMObject = new ExecutorFragment(Types._Modulus, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Modulus__GASTMSyntaxObject = new ExecutorFragment(Types._Modulus, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Modulus__Modulus = new ExecutorFragment(Types._Modulus, AstmTables.Types._Modulus);
		private static final @NonNull ExecutorFragment _Modulus__OclAny = new ExecutorFragment(Types._Modulus, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Modulus__OclElement = new ExecutorFragment(Types._Modulus, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Modulus__Operator = new ExecutorFragment(Types._Modulus, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Modulus__OtherSyntaxObject = new ExecutorFragment(Types._Modulus, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Modulus__Visitable = new ExecutorFragment(Types._Modulus, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Multiply__BinaryOperator = new ExecutorFragment(Types._Multiply, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Multiply__GASTMObject = new ExecutorFragment(Types._Multiply, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Multiply__GASTMSyntaxObject = new ExecutorFragment(Types._Multiply, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Multiply__Multiply = new ExecutorFragment(Types._Multiply, AstmTables.Types._Multiply);
		private static final @NonNull ExecutorFragment _Multiply__OclAny = new ExecutorFragment(Types._Multiply, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Multiply__OclElement = new ExecutorFragment(Types._Multiply, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Multiply__Operator = new ExecutorFragment(Types._Multiply, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Multiply__OtherSyntaxObject = new ExecutorFragment(Types._Multiply, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Multiply__Visitable = new ExecutorFragment(Types._Multiply, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Name__GASTMObject = new ExecutorFragment(Types._Name, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Name__GASTMSyntaxObject = new ExecutorFragment(Types._Name, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Name__Name = new ExecutorFragment(Types._Name, AstmTables.Types._Name);
		private static final @NonNull ExecutorFragment _Name__OclAny = new ExecutorFragment(Types._Name, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Name__OclElement = new ExecutorFragment(Types._Name, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Name__OtherSyntaxObject = new ExecutorFragment(Types._Name, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Name__Visitable = new ExecutorFragment(Types._Name, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NameReference__Expression = new ExecutorFragment(Types._NameReference, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _NameReference__GASTMObject = new ExecutorFragment(Types._NameReference, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NameReference__GASTMSyntaxObject = new ExecutorFragment(Types._NameReference, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NameReference__NameReference = new ExecutorFragment(Types._NameReference, AstmTables.Types._NameReference);
		private static final @NonNull ExecutorFragment _NameReference__OclAny = new ExecutorFragment(Types._NameReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NameReference__OclElement = new ExecutorFragment(Types._NameReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NameReference__Visitable = new ExecutorFragment(Types._NameReference, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NameSpaceDefinition__DefinitionObject = new ExecutorFragment(Types._NameSpaceDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _NameSpaceDefinition__GASTMObject = new ExecutorFragment(Types._NameSpaceDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NameSpaceDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._NameSpaceDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NameSpaceDefinition__NameSpaceDefinition = new ExecutorFragment(Types._NameSpaceDefinition, AstmTables.Types._NameSpaceDefinition);
		private static final @NonNull ExecutorFragment _NameSpaceDefinition__OclAny = new ExecutorFragment(Types._NameSpaceDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NameSpaceDefinition__OclElement = new ExecutorFragment(Types._NameSpaceDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NameSpaceDefinition__Visitable = new ExecutorFragment(Types._NameSpaceDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NameSpaceType__GASTMObject = new ExecutorFragment(Types._NameSpaceType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NameSpaceType__GASTMSyntaxObject = new ExecutorFragment(Types._NameSpaceType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NameSpaceType__NameSpaceType = new ExecutorFragment(Types._NameSpaceType, AstmTables.Types._NameSpaceType);
		private static final @NonNull ExecutorFragment _NameSpaceType__OclAny = new ExecutorFragment(Types._NameSpaceType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NameSpaceType__OclElement = new ExecutorFragment(Types._NameSpaceType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NameSpaceType__Type = new ExecutorFragment(Types._NameSpaceType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _NameSpaceType__Visitable = new ExecutorFragment(Types._NameSpaceType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NamedType__DataType = new ExecutorFragment(Types._NamedType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _NamedType__GASTMObject = new ExecutorFragment(Types._NamedType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NamedType__GASTMSyntaxObject = new ExecutorFragment(Types._NamedType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NamedType__NamedType = new ExecutorFragment(Types._NamedType, AstmTables.Types._NamedType);
		private static final @NonNull ExecutorFragment _NamedType__OclAny = new ExecutorFragment(Types._NamedType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NamedType__OclElement = new ExecutorFragment(Types._NamedType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NamedType__Type = new ExecutorFragment(Types._NamedType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _NamedType__Visitable = new ExecutorFragment(Types._NamedType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NamedTypeDefinition__DefinitionObject = new ExecutorFragment(Types._NamedTypeDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _NamedTypeDefinition__GASTMObject = new ExecutorFragment(Types._NamedTypeDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NamedTypeDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._NamedTypeDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NamedTypeDefinition__NamedTypeDefinition = new ExecutorFragment(Types._NamedTypeDefinition, AstmTables.Types._NamedTypeDefinition);
		private static final @NonNull ExecutorFragment _NamedTypeDefinition__OclAny = new ExecutorFragment(Types._NamedTypeDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NamedTypeDefinition__OclElement = new ExecutorFragment(Types._NamedTypeDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NamedTypeDefinition__TypeDefinition = new ExecutorFragment(Types._NamedTypeDefinition, AstmTables.Types._TypeDefinition);
		private static final @NonNull ExecutorFragment _NamedTypeDefinition__Visitable = new ExecutorFragment(Types._NamedTypeDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NamedTypeReference__GASTMObject = new ExecutorFragment(Types._NamedTypeReference, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NamedTypeReference__GASTMSyntaxObject = new ExecutorFragment(Types._NamedTypeReference, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NamedTypeReference__NamedTypeReference = new ExecutorFragment(Types._NamedTypeReference, AstmTables.Types._NamedTypeReference);
		private static final @NonNull ExecutorFragment _NamedTypeReference__OclAny = new ExecutorFragment(Types._NamedTypeReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NamedTypeReference__OclElement = new ExecutorFragment(Types._NamedTypeReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NamedTypeReference__Type = new ExecutorFragment(Types._NamedTypeReference, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _NamedTypeReference__TypeReference = new ExecutorFragment(Types._NamedTypeReference, AstmTables.Types._TypeReference);
		private static final @NonNull ExecutorFragment _NamedTypeReference__Visitable = new ExecutorFragment(Types._NamedTypeReference, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Negate__GASTMObject = new ExecutorFragment(Types._Negate, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Negate__GASTMSyntaxObject = new ExecutorFragment(Types._Negate, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Negate__Negate = new ExecutorFragment(Types._Negate, AstmTables.Types._Negate);
		private static final @NonNull ExecutorFragment _Negate__OclAny = new ExecutorFragment(Types._Negate, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Negate__OclElement = new ExecutorFragment(Types._Negate, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Negate__Operator = new ExecutorFragment(Types._Negate, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Negate__OtherSyntaxObject = new ExecutorFragment(Types._Negate, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Negate__UnaryOperator = new ExecutorFragment(Types._Negate, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _Negate__Visitable = new ExecutorFragment(Types._Negate, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NewExpression__Expression = new ExecutorFragment(Types._NewExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _NewExpression__GASTMObject = new ExecutorFragment(Types._NewExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NewExpression__GASTMSyntaxObject = new ExecutorFragment(Types._NewExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NewExpression__NewExpression = new ExecutorFragment(Types._NewExpression, AstmTables.Types._NewExpression);
		private static final @NonNull ExecutorFragment _NewExpression__OclAny = new ExecutorFragment(Types._NewExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NewExpression__OclElement = new ExecutorFragment(Types._NewExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NewExpression__Visitable = new ExecutorFragment(Types._NewExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NoDef__NoDef = new ExecutorFragment(Types._NoDef, AstmTables.Types._NoDef);
		private static final @NonNull ExecutorFragment _NoDef__OclAny = new ExecutorFragment(Types._NoDef, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NoDef__OclElement = new ExecutorFragment(Types._NoDef, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NoDef__StorageSpecification = new ExecutorFragment(Types._NoDef, AstmTables.Types._StorageSpecification);
		private static final @NonNull ExecutorFragment _NoDef__Visitable = new ExecutorFragment(Types._NoDef, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NonVirtual__GASTMObject = new ExecutorFragment(Types._NonVirtual, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NonVirtual__GASTMSyntaxObject = new ExecutorFragment(Types._NonVirtual, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NonVirtual__NonVirtual = new ExecutorFragment(Types._NonVirtual, AstmTables.Types._NonVirtual);
		private static final @NonNull ExecutorFragment _NonVirtual__OclAny = new ExecutorFragment(Types._NonVirtual, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NonVirtual__OclElement = new ExecutorFragment(Types._NonVirtual, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NonVirtual__OtherSyntaxObject = new ExecutorFragment(Types._NonVirtual, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _NonVirtual__VirtualSpecification = new ExecutorFragment(Types._NonVirtual, AstmTables.Types._VirtualSpecification);
		private static final @NonNull ExecutorFragment _NonVirtual__Visitable = new ExecutorFragment(Types._NonVirtual, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Not__GASTMObject = new ExecutorFragment(Types._Not, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Not__GASTMSyntaxObject = new ExecutorFragment(Types._Not, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Not__Not = new ExecutorFragment(Types._Not, AstmTables.Types._Not);
		private static final @NonNull ExecutorFragment _Not__OclAny = new ExecutorFragment(Types._Not, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Not__OclElement = new ExecutorFragment(Types._Not, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Not__Operator = new ExecutorFragment(Types._Not, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Not__OtherSyntaxObject = new ExecutorFragment(Types._Not, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Not__UnaryOperator = new ExecutorFragment(Types._Not, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _Not__Visitable = new ExecutorFragment(Types._Not, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NotEqual__BinaryOperator = new ExecutorFragment(Types._NotEqual, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _NotEqual__GASTMObject = new ExecutorFragment(Types._NotEqual, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NotEqual__GASTMSyntaxObject = new ExecutorFragment(Types._NotEqual, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NotEqual__NotEqual = new ExecutorFragment(Types._NotEqual, AstmTables.Types._NotEqual);
		private static final @NonNull ExecutorFragment _NotEqual__OclAny = new ExecutorFragment(Types._NotEqual, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NotEqual__OclElement = new ExecutorFragment(Types._NotEqual, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NotEqual__Operator = new ExecutorFragment(Types._NotEqual, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _NotEqual__OtherSyntaxObject = new ExecutorFragment(Types._NotEqual, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _NotEqual__Visitable = new ExecutorFragment(Types._NotEqual, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NotGreater__BinaryOperator = new ExecutorFragment(Types._NotGreater, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _NotGreater__GASTMObject = new ExecutorFragment(Types._NotGreater, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NotGreater__GASTMSyntaxObject = new ExecutorFragment(Types._NotGreater, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NotGreater__NotGreater = new ExecutorFragment(Types._NotGreater, AstmTables.Types._NotGreater);
		private static final @NonNull ExecutorFragment _NotGreater__OclAny = new ExecutorFragment(Types._NotGreater, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NotGreater__OclElement = new ExecutorFragment(Types._NotGreater, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NotGreater__Operator = new ExecutorFragment(Types._NotGreater, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _NotGreater__OtherSyntaxObject = new ExecutorFragment(Types._NotGreater, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _NotGreater__Visitable = new ExecutorFragment(Types._NotGreater, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _NotLess__BinaryOperator = new ExecutorFragment(Types._NotLess, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _NotLess__GASTMObject = new ExecutorFragment(Types._NotLess, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _NotLess__GASTMSyntaxObject = new ExecutorFragment(Types._NotLess, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _NotLess__NotLess = new ExecutorFragment(Types._NotLess, AstmTables.Types._NotLess);
		private static final @NonNull ExecutorFragment _NotLess__OclAny = new ExecutorFragment(Types._NotLess, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _NotLess__OclElement = new ExecutorFragment(Types._NotLess, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _NotLess__Operator = new ExecutorFragment(Types._NotLess, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _NotLess__OtherSyntaxObject = new ExecutorFragment(Types._NotLess, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _NotLess__Visitable = new ExecutorFragment(Types._NotLess, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Operator__GASTMObject = new ExecutorFragment(Types._Operator, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Operator__GASTMSyntaxObject = new ExecutorFragment(Types._Operator, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Operator__OclAny = new ExecutorFragment(Types._Operator, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Operator__OclElement = new ExecutorFragment(Types._Operator, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Operator__Operator = new ExecutorFragment(Types._Operator, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Operator__OtherSyntaxObject = new ExecutorFragment(Types._Operator, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Operator__Visitable = new ExecutorFragment(Types._Operator, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _OperatorAssign__BinaryOperator = new ExecutorFragment(Types._OperatorAssign, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _OperatorAssign__GASTMObject = new ExecutorFragment(Types._OperatorAssign, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _OperatorAssign__GASTMSyntaxObject = new ExecutorFragment(Types._OperatorAssign, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _OperatorAssign__OclAny = new ExecutorFragment(Types._OperatorAssign, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _OperatorAssign__OclElement = new ExecutorFragment(Types._OperatorAssign, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _OperatorAssign__Operator = new ExecutorFragment(Types._OperatorAssign, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _OperatorAssign__OperatorAssign = new ExecutorFragment(Types._OperatorAssign, AstmTables.Types._OperatorAssign);
		private static final @NonNull ExecutorFragment _OperatorAssign__OtherSyntaxObject = new ExecutorFragment(Types._OperatorAssign, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _OperatorAssign__Visitable = new ExecutorFragment(Types._OperatorAssign, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Or__BinaryOperator = new ExecutorFragment(Types._Or, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Or__GASTMObject = new ExecutorFragment(Types._Or, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Or__GASTMSyntaxObject = new ExecutorFragment(Types._Or, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Or__OclAny = new ExecutorFragment(Types._Or, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Or__OclElement = new ExecutorFragment(Types._Or, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Or__Operator = new ExecutorFragment(Types._Or, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Or__Or = new ExecutorFragment(Types._Or, AstmTables.Types._Or);
		private static final @NonNull ExecutorFragment _Or__OtherSyntaxObject = new ExecutorFragment(Types._Or, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Or__Visitable = new ExecutorFragment(Types._Or, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _OtherSyntaxObject__GASTMObject = new ExecutorFragment(Types._OtherSyntaxObject, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _OtherSyntaxObject__GASTMSyntaxObject = new ExecutorFragment(Types._OtherSyntaxObject, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _OtherSyntaxObject__OclAny = new ExecutorFragment(Types._OtherSyntaxObject, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _OtherSyntaxObject__OclElement = new ExecutorFragment(Types._OtherSyntaxObject, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _OtherSyntaxObject__OtherSyntaxObject = new ExecutorFragment(Types._OtherSyntaxObject, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _OtherSyntaxObject__Visitable = new ExecutorFragment(Types._OtherSyntaxObject, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _PerClassMember__OclAny = new ExecutorFragment(Types._PerClassMember, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _PerClassMember__OclElement = new ExecutorFragment(Types._PerClassMember, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _PerClassMember__PerClassMember = new ExecutorFragment(Types._PerClassMember, AstmTables.Types._PerClassMember);
		private static final @NonNull ExecutorFragment _PerClassMember__StorageSpecification = new ExecutorFragment(Types._PerClassMember, AstmTables.Types._StorageSpecification);
		private static final @NonNull ExecutorFragment _PerClassMember__Visitable = new ExecutorFragment(Types._PerClassMember, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _PointerType__ConstructedType = new ExecutorFragment(Types._PointerType, AstmTables.Types._ConstructedType);
		private static final @NonNull ExecutorFragment _PointerType__DataType = new ExecutorFragment(Types._PointerType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _PointerType__GASTMObject = new ExecutorFragment(Types._PointerType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _PointerType__GASTMSyntaxObject = new ExecutorFragment(Types._PointerType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _PointerType__OclAny = new ExecutorFragment(Types._PointerType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _PointerType__OclElement = new ExecutorFragment(Types._PointerType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _PointerType__PointerType = new ExecutorFragment(Types._PointerType, AstmTables.Types._PointerType);
		private static final @NonNull ExecutorFragment _PointerType__Type = new ExecutorFragment(Types._PointerType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _PointerType__Visitable = new ExecutorFragment(Types._PointerType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _PostDecrement__GASTMObject = new ExecutorFragment(Types._PostDecrement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _PostDecrement__GASTMSyntaxObject = new ExecutorFragment(Types._PostDecrement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _PostDecrement__OclAny = new ExecutorFragment(Types._PostDecrement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _PostDecrement__OclElement = new ExecutorFragment(Types._PostDecrement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _PostDecrement__Operator = new ExecutorFragment(Types._PostDecrement, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _PostDecrement__OtherSyntaxObject = new ExecutorFragment(Types._PostDecrement, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _PostDecrement__PostDecrement = new ExecutorFragment(Types._PostDecrement, AstmTables.Types._PostDecrement);
		private static final @NonNull ExecutorFragment _PostDecrement__UnaryOperator = new ExecutorFragment(Types._PostDecrement, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _PostDecrement__Visitable = new ExecutorFragment(Types._PostDecrement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _PostIncrement__GASTMObject = new ExecutorFragment(Types._PostIncrement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _PostIncrement__GASTMSyntaxObject = new ExecutorFragment(Types._PostIncrement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _PostIncrement__OclAny = new ExecutorFragment(Types._PostIncrement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _PostIncrement__OclElement = new ExecutorFragment(Types._PostIncrement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _PostIncrement__Operator = new ExecutorFragment(Types._PostIncrement, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _PostIncrement__OtherSyntaxObject = new ExecutorFragment(Types._PostIncrement, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _PostIncrement__PostIncrement = new ExecutorFragment(Types._PostIncrement, AstmTables.Types._PostIncrement);
		private static final @NonNull ExecutorFragment _PostIncrement__UnaryOperator = new ExecutorFragment(Types._PostIncrement, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _PostIncrement__Visitable = new ExecutorFragment(Types._PostIncrement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _PreprocessorElement__GASTMObject = new ExecutorFragment(Types._PreprocessorElement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _PreprocessorElement__GASTMSyntaxObject = new ExecutorFragment(Types._PreprocessorElement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _PreprocessorElement__OclAny = new ExecutorFragment(Types._PreprocessorElement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _PreprocessorElement__OclElement = new ExecutorFragment(Types._PreprocessorElement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _PreprocessorElement__PreprocessorElement = new ExecutorFragment(Types._PreprocessorElement, AstmTables.Types._PreprocessorElement);
		private static final @NonNull ExecutorFragment _PreprocessorElement__Visitable = new ExecutorFragment(Types._PreprocessorElement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _PrimitiveType__DataType = new ExecutorFragment(Types._PrimitiveType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _PrimitiveType__GASTMObject = new ExecutorFragment(Types._PrimitiveType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _PrimitiveType__GASTMSyntaxObject = new ExecutorFragment(Types._PrimitiveType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _PrimitiveType__OclAny = new ExecutorFragment(Types._PrimitiveType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _PrimitiveType__OclElement = new ExecutorFragment(Types._PrimitiveType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _PrimitiveType__PrimitiveType = new ExecutorFragment(Types._PrimitiveType, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _PrimitiveType__Type = new ExecutorFragment(Types._PrimitiveType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _PrimitiveType__Visitable = new ExecutorFragment(Types._PrimitiveType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Private__AccessKind = new ExecutorFragment(Types._Private, AstmTables.Types._AccessKind);
		private static final @NonNull ExecutorFragment _Private__OclAny = new ExecutorFragment(Types._Private, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Private__OclElement = new ExecutorFragment(Types._Private, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Private__Private = new ExecutorFragment(Types._Private, AstmTables.Types._Private);
		private static final @NonNull ExecutorFragment _Private__Visitable = new ExecutorFragment(Types._Private, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ProgramScope__GASTMSemanticObject = new ExecutorFragment(Types._ProgramScope, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _ProgramScope__OclAny = new ExecutorFragment(Types._ProgramScope, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ProgramScope__OclElement = new ExecutorFragment(Types._ProgramScope, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ProgramScope__ProgramScope = new ExecutorFragment(Types._ProgramScope, AstmTables.Types._ProgramScope);
		private static final @NonNull ExecutorFragment _ProgramScope__Scope = new ExecutorFragment(Types._ProgramScope, AstmTables.Types._Scope);
		private static final @NonNull ExecutorFragment _ProgramScope__Visitable = new ExecutorFragment(Types._ProgramScope, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Project__GASTMSemanticObject = new ExecutorFragment(Types._Project, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _Project__OclAny = new ExecutorFragment(Types._Project, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Project__OclElement = new ExecutorFragment(Types._Project, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Project__Project = new ExecutorFragment(Types._Project, AstmTables.Types._Project);
		private static final @NonNull ExecutorFragment _Project__Visitable = new ExecutorFragment(Types._Project, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Protected__AccessKind = new ExecutorFragment(Types._Protected, AstmTables.Types._AccessKind);
		private static final @NonNull ExecutorFragment _Protected__OclAny = new ExecutorFragment(Types._Protected, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Protected__OclElement = new ExecutorFragment(Types._Protected, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Protected__Protected = new ExecutorFragment(Types._Protected, AstmTables.Types._Protected);
		private static final @NonNull ExecutorFragment _Protected__Visitable = new ExecutorFragment(Types._Protected, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Public__AccessKind = new ExecutorFragment(Types._Public, AstmTables.Types._AccessKind);
		private static final @NonNull ExecutorFragment _Public__OclAny = new ExecutorFragment(Types._Public, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Public__OclElement = new ExecutorFragment(Types._Public, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Public__Public = new ExecutorFragment(Types._Public, AstmTables.Types._Public);
		private static final @NonNull ExecutorFragment _Public__Visitable = new ExecutorFragment(Types._Public, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _PureVirtual__GASTMObject = new ExecutorFragment(Types._PureVirtual, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _PureVirtual__GASTMSyntaxObject = new ExecutorFragment(Types._PureVirtual, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _PureVirtual__OclAny = new ExecutorFragment(Types._PureVirtual, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _PureVirtual__OclElement = new ExecutorFragment(Types._PureVirtual, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _PureVirtual__OtherSyntaxObject = new ExecutorFragment(Types._PureVirtual, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _PureVirtual__PureVirtual = new ExecutorFragment(Types._PureVirtual, AstmTables.Types._PureVirtual);
		private static final @NonNull ExecutorFragment _PureVirtual__VirtualSpecification = new ExecutorFragment(Types._PureVirtual, AstmTables.Types._VirtualSpecification);
		private static final @NonNull ExecutorFragment _PureVirtual__Visitable = new ExecutorFragment(Types._PureVirtual, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__Expression = new ExecutorFragment(Types._QualifiedIdentifierReference, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__GASTMObject = new ExecutorFragment(Types._QualifiedIdentifierReference, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__GASTMSyntaxObject = new ExecutorFragment(Types._QualifiedIdentifierReference, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__NameReference = new ExecutorFragment(Types._QualifiedIdentifierReference, AstmTables.Types._NameReference);
		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__OclAny = new ExecutorFragment(Types._QualifiedIdentifierReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__OclElement = new ExecutorFragment(Types._QualifiedIdentifierReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__QualifiedIdentifierReference = new ExecutorFragment(Types._QualifiedIdentifierReference, AstmTables.Types._QualifiedIdentifierReference);
		private static final @NonNull ExecutorFragment _QualifiedIdentifierReference__Visitable = new ExecutorFragment(Types._QualifiedIdentifierReference, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _QualifiedOverData__Expression = new ExecutorFragment(Types._QualifiedOverData, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _QualifiedOverData__GASTMObject = new ExecutorFragment(Types._QualifiedOverData, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _QualifiedOverData__GASTMSyntaxObject = new ExecutorFragment(Types._QualifiedOverData, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _QualifiedOverData__NameReference = new ExecutorFragment(Types._QualifiedOverData, AstmTables.Types._NameReference);
		private static final @NonNull ExecutorFragment _QualifiedOverData__OclAny = new ExecutorFragment(Types._QualifiedOverData, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _QualifiedOverData__OclElement = new ExecutorFragment(Types._QualifiedOverData, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _QualifiedOverData__QualifiedIdentifierReference = new ExecutorFragment(Types._QualifiedOverData, AstmTables.Types._QualifiedIdentifierReference);
		private static final @NonNull ExecutorFragment _QualifiedOverData__QualifiedOverData = new ExecutorFragment(Types._QualifiedOverData, AstmTables.Types._QualifiedOverData);
		private static final @NonNull ExecutorFragment _QualifiedOverData__Visitable = new ExecutorFragment(Types._QualifiedOverData, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _QualifiedOverPointer__Expression = new ExecutorFragment(Types._QualifiedOverPointer, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__GASTMObject = new ExecutorFragment(Types._QualifiedOverPointer, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__GASTMSyntaxObject = new ExecutorFragment(Types._QualifiedOverPointer, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__NameReference = new ExecutorFragment(Types._QualifiedOverPointer, AstmTables.Types._NameReference);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__OclAny = new ExecutorFragment(Types._QualifiedOverPointer, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__OclElement = new ExecutorFragment(Types._QualifiedOverPointer, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__QualifiedIdentifierReference = new ExecutorFragment(Types._QualifiedOverPointer, AstmTables.Types._QualifiedIdentifierReference);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__QualifiedOverPointer = new ExecutorFragment(Types._QualifiedOverPointer, AstmTables.Types._QualifiedOverPointer);
		private static final @NonNull ExecutorFragment _QualifiedOverPointer__Visitable = new ExecutorFragment(Types._QualifiedOverPointer, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _RangeExpression__Expression = new ExecutorFragment(Types._RangeExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _RangeExpression__GASTMObject = new ExecutorFragment(Types._RangeExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _RangeExpression__GASTMSyntaxObject = new ExecutorFragment(Types._RangeExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _RangeExpression__OclAny = new ExecutorFragment(Types._RangeExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _RangeExpression__OclElement = new ExecutorFragment(Types._RangeExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _RangeExpression__RangeExpression = new ExecutorFragment(Types._RangeExpression, AstmTables.Types._RangeExpression);
		private static final @NonNull ExecutorFragment _RangeExpression__Visitable = new ExecutorFragment(Types._RangeExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _RangeType__ConstructedType = new ExecutorFragment(Types._RangeType, AstmTables.Types._ConstructedType);
		private static final @NonNull ExecutorFragment _RangeType__DataType = new ExecutorFragment(Types._RangeType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _RangeType__GASTMObject = new ExecutorFragment(Types._RangeType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _RangeType__GASTMSyntaxObject = new ExecutorFragment(Types._RangeType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _RangeType__OclAny = new ExecutorFragment(Types._RangeType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _RangeType__OclElement = new ExecutorFragment(Types._RangeType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _RangeType__RangeType = new ExecutorFragment(Types._RangeType, AstmTables.Types._RangeType);
		private static final @NonNull ExecutorFragment _RangeType__Type = new ExecutorFragment(Types._RangeType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _RangeType__Visitable = new ExecutorFragment(Types._RangeType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _RealLiteral__Expression = new ExecutorFragment(Types._RealLiteral, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _RealLiteral__GASTMObject = new ExecutorFragment(Types._RealLiteral, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _RealLiteral__GASTMSyntaxObject = new ExecutorFragment(Types._RealLiteral, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _RealLiteral__Literal = new ExecutorFragment(Types._RealLiteral, AstmTables.Types._Literal);
		private static final @NonNull ExecutorFragment _RealLiteral__OclAny = new ExecutorFragment(Types._RealLiteral, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _RealLiteral__OclElement = new ExecutorFragment(Types._RealLiteral, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _RealLiteral__RealLiteral = new ExecutorFragment(Types._RealLiteral, AstmTables.Types._RealLiteral);
		private static final @NonNull ExecutorFragment _RealLiteral__Visitable = new ExecutorFragment(Types._RealLiteral, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ReferenceType__ConstructedType = new ExecutorFragment(Types._ReferenceType, AstmTables.Types._ConstructedType);
		private static final @NonNull ExecutorFragment _ReferenceType__DataType = new ExecutorFragment(Types._ReferenceType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ReferenceType__GASTMObject = new ExecutorFragment(Types._ReferenceType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ReferenceType__GASTMSyntaxObject = new ExecutorFragment(Types._ReferenceType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ReferenceType__OclAny = new ExecutorFragment(Types._ReferenceType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ReferenceType__OclElement = new ExecutorFragment(Types._ReferenceType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ReferenceType__ReferenceType = new ExecutorFragment(Types._ReferenceType, AstmTables.Types._ReferenceType);
		private static final @NonNull ExecutorFragment _ReferenceType__Type = new ExecutorFragment(Types._ReferenceType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ReferenceType__Visitable = new ExecutorFragment(Types._ReferenceType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ReturnStatement__GASTMObject = new ExecutorFragment(Types._ReturnStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ReturnStatement__GASTMSyntaxObject = new ExecutorFragment(Types._ReturnStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ReturnStatement__OclAny = new ExecutorFragment(Types._ReturnStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ReturnStatement__OclElement = new ExecutorFragment(Types._ReturnStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ReturnStatement__ReturnStatement = new ExecutorFragment(Types._ReturnStatement, AstmTables.Types._ReturnStatement);
		private static final @NonNull ExecutorFragment _ReturnStatement__Statement = new ExecutorFragment(Types._ReturnStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _ReturnStatement__Visitable = new ExecutorFragment(Types._ReturnStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Scope__GASTMSemanticObject = new ExecutorFragment(Types._Scope, AstmTables.Types._GASTMSemanticObject);
		private static final @NonNull ExecutorFragment _Scope__OclAny = new ExecutorFragment(Types._Scope, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Scope__OclElement = new ExecutorFragment(Types._Scope, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Scope__Scope = new ExecutorFragment(Types._Scope, AstmTables.Types._Scope);
		private static final @NonNull ExecutorFragment _Scope__Visitable = new ExecutorFragment(Types._Scope, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ShortInteger__DataType = new ExecutorFragment(Types._ShortInteger, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _ShortInteger__GASTMObject = new ExecutorFragment(Types._ShortInteger, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ShortInteger__GASTMSyntaxObject = new ExecutorFragment(Types._ShortInteger, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ShortInteger__OclAny = new ExecutorFragment(Types._ShortInteger, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ShortInteger__OclElement = new ExecutorFragment(Types._ShortInteger, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ShortInteger__PrimitiveType = new ExecutorFragment(Types._ShortInteger, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _ShortInteger__ShortInteger = new ExecutorFragment(Types._ShortInteger, AstmTables.Types._ShortInteger);
		private static final @NonNull ExecutorFragment _ShortInteger__Type = new ExecutorFragment(Types._ShortInteger, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _ShortInteger__Visitable = new ExecutorFragment(Types._ShortInteger, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SourceFile__GASTMSourceObject = new ExecutorFragment(Types._SourceFile, AstmTables.Types._GASTMSourceObject);
		private static final @NonNull ExecutorFragment _SourceFile__OclAny = new ExecutorFragment(Types._SourceFile, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SourceFile__OclElement = new ExecutorFragment(Types._SourceFile, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SourceFile__SourceFile = new ExecutorFragment(Types._SourceFile, AstmTables.Types._SourceFile);
		private static final @NonNull ExecutorFragment _SourceFile__Visitable = new ExecutorFragment(Types._SourceFile, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SourceLocation__GASTMSourceObject = new ExecutorFragment(Types._SourceLocation, AstmTables.Types._GASTMSourceObject);
		private static final @NonNull ExecutorFragment _SourceLocation__OclAny = new ExecutorFragment(Types._SourceLocation, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SourceLocation__OclElement = new ExecutorFragment(Types._SourceLocation, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SourceLocation__SourceLocation = new ExecutorFragment(Types._SourceLocation, AstmTables.Types._SourceLocation);
		private static final @NonNull ExecutorFragment _SourceLocation__Visitable = new ExecutorFragment(Types._SourceLocation, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SpecificConcatString__BinaryOperator = new ExecutorFragment(Types._SpecificConcatString, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _SpecificConcatString__GASTMObject = new ExecutorFragment(Types._SpecificConcatString, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SpecificConcatString__GASTMSyntaxObject = new ExecutorFragment(Types._SpecificConcatString, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificConcatString__OclAny = new ExecutorFragment(Types._SpecificConcatString, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SpecificConcatString__OclElement = new ExecutorFragment(Types._SpecificConcatString, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SpecificConcatString__Operator = new ExecutorFragment(Types._SpecificConcatString, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _SpecificConcatString__OtherSyntaxObject = new ExecutorFragment(Types._SpecificConcatString, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificConcatString__SpecificConcatString = new ExecutorFragment(Types._SpecificConcatString, AstmTables.Types._SpecificConcatString);
		private static final @NonNull ExecutorFragment _SpecificConcatString__Visitable = new ExecutorFragment(Types._SpecificConcatString, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__BinaryOperator = new ExecutorFragment(Types._SpecificGreaterEqual, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__GASTMObject = new ExecutorFragment(Types._SpecificGreaterEqual, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__GASTMSyntaxObject = new ExecutorFragment(Types._SpecificGreaterEqual, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__OclAny = new ExecutorFragment(Types._SpecificGreaterEqual, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__OclElement = new ExecutorFragment(Types._SpecificGreaterEqual, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__Operator = new ExecutorFragment(Types._SpecificGreaterEqual, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__OtherSyntaxObject = new ExecutorFragment(Types._SpecificGreaterEqual, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__SpecificGreaterEqual = new ExecutorFragment(Types._SpecificGreaterEqual, AstmTables.Types._SpecificGreaterEqual);
		private static final @NonNull ExecutorFragment _SpecificGreaterEqual__Visitable = new ExecutorFragment(Types._SpecificGreaterEqual, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SpecificIn__BinaryOperator = new ExecutorFragment(Types._SpecificIn, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _SpecificIn__GASTMObject = new ExecutorFragment(Types._SpecificIn, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SpecificIn__GASTMSyntaxObject = new ExecutorFragment(Types._SpecificIn, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificIn__OclAny = new ExecutorFragment(Types._SpecificIn, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SpecificIn__OclElement = new ExecutorFragment(Types._SpecificIn, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SpecificIn__Operator = new ExecutorFragment(Types._SpecificIn, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _SpecificIn__OtherSyntaxObject = new ExecutorFragment(Types._SpecificIn, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificIn__SpecificIn = new ExecutorFragment(Types._SpecificIn, AstmTables.Types._SpecificIn);
		private static final @NonNull ExecutorFragment _SpecificIn__Visitable = new ExecutorFragment(Types._SpecificIn, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SpecificLessEqual__BinaryOperator = new ExecutorFragment(Types._SpecificLessEqual, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__GASTMObject = new ExecutorFragment(Types._SpecificLessEqual, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__GASTMSyntaxObject = new ExecutorFragment(Types._SpecificLessEqual, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__OclAny = new ExecutorFragment(Types._SpecificLessEqual, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__OclElement = new ExecutorFragment(Types._SpecificLessEqual, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__Operator = new ExecutorFragment(Types._SpecificLessEqual, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__OtherSyntaxObject = new ExecutorFragment(Types._SpecificLessEqual, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__SpecificLessEqual = new ExecutorFragment(Types._SpecificLessEqual, AstmTables.Types._SpecificLessEqual);
		private static final @NonNull ExecutorFragment _SpecificLessEqual__Visitable = new ExecutorFragment(Types._SpecificLessEqual, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SpecificLike__BinaryOperator = new ExecutorFragment(Types._SpecificLike, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _SpecificLike__GASTMObject = new ExecutorFragment(Types._SpecificLike, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SpecificLike__GASTMSyntaxObject = new ExecutorFragment(Types._SpecificLike, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificLike__OclAny = new ExecutorFragment(Types._SpecificLike, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SpecificLike__OclElement = new ExecutorFragment(Types._SpecificLike, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SpecificLike__Operator = new ExecutorFragment(Types._SpecificLike, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _SpecificLike__OtherSyntaxObject = new ExecutorFragment(Types._SpecificLike, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificLike__SpecificLike = new ExecutorFragment(Types._SpecificLike, AstmTables.Types._SpecificLike);
		private static final @NonNull ExecutorFragment _SpecificLike__Visitable = new ExecutorFragment(Types._SpecificLike, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SpecificSelectStatement__GASTMObject = new ExecutorFragment(Types._SpecificSelectStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SpecificSelectStatement__GASTMSyntaxObject = new ExecutorFragment(Types._SpecificSelectStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificSelectStatement__OclAny = new ExecutorFragment(Types._SpecificSelectStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SpecificSelectStatement__OclElement = new ExecutorFragment(Types._SpecificSelectStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SpecificSelectStatement__SpecificSelectStatement = new ExecutorFragment(Types._SpecificSelectStatement, AstmTables.Types._SpecificSelectStatement);
		private static final @NonNull ExecutorFragment _SpecificSelectStatement__Statement = new ExecutorFragment(Types._SpecificSelectStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _SpecificSelectStatement__Visitable = new ExecutorFragment(Types._SpecificSelectStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._SpecificTriggerDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__Definition = new ExecutorFragment(Types._SpecificTriggerDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__DefinitionObject = new ExecutorFragment(Types._SpecificTriggerDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__GASTMObject = new ExecutorFragment(Types._SpecificTriggerDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._SpecificTriggerDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__OclAny = new ExecutorFragment(Types._SpecificTriggerDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__OclElement = new ExecutorFragment(Types._SpecificTriggerDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__SpecificTriggerDefinition = new ExecutorFragment(Types._SpecificTriggerDefinition, AstmTables.Types._SpecificTriggerDefinition);
		private static final @NonNull ExecutorFragment _SpecificTriggerDefinition__Visitable = new ExecutorFragment(Types._SpecificTriggerDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Statement__GASTMObject = new ExecutorFragment(Types._Statement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Statement__GASTMSyntaxObject = new ExecutorFragment(Types._Statement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Statement__OclAny = new ExecutorFragment(Types._Statement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Statement__OclElement = new ExecutorFragment(Types._Statement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Statement__Statement = new ExecutorFragment(Types._Statement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _Statement__Visitable = new ExecutorFragment(Types._Statement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _StorageSpecification__OclAny = new ExecutorFragment(Types._StorageSpecification, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _StorageSpecification__OclElement = new ExecutorFragment(Types._StorageSpecification, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _StorageSpecification__StorageSpecification = new ExecutorFragment(Types._StorageSpecification, AstmTables.Types._StorageSpecification);
		private static final @NonNull ExecutorFragment _StorageSpecification__Visitable = new ExecutorFragment(Types._StorageSpecification, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _String__DataType = new ExecutorFragment(Types._String, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _String__GASTMObject = new ExecutorFragment(Types._String, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _String__GASTMSyntaxObject = new ExecutorFragment(Types._String, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _String__OclAny = new ExecutorFragment(Types._String, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _String__OclElement = new ExecutorFragment(Types._String, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _String__PrimitiveType = new ExecutorFragment(Types._String, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _String__String = new ExecutorFragment(Types._String, AstmTables.Types._String);
		private static final @NonNull ExecutorFragment _String__Type = new ExecutorFragment(Types._String, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _String__Visitable = new ExecutorFragment(Types._String, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _StringLiteral__Expression = new ExecutorFragment(Types._StringLiteral, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _StringLiteral__GASTMObject = new ExecutorFragment(Types._StringLiteral, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _StringLiteral__GASTMSyntaxObject = new ExecutorFragment(Types._StringLiteral, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _StringLiteral__Literal = new ExecutorFragment(Types._StringLiteral, AstmTables.Types._Literal);
		private static final @NonNull ExecutorFragment _StringLiteral__OclAny = new ExecutorFragment(Types._StringLiteral, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _StringLiteral__OclElement = new ExecutorFragment(Types._StringLiteral, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _StringLiteral__StringLiteral = new ExecutorFragment(Types._StringLiteral, AstmTables.Types._StringLiteral);
		private static final @NonNull ExecutorFragment _StringLiteral__Visitable = new ExecutorFragment(Types._StringLiteral, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _StructureType__AggregateType = new ExecutorFragment(Types._StructureType, AstmTables.Types._AggregateType);
		private static final @NonNull ExecutorFragment _StructureType__DataType = new ExecutorFragment(Types._StructureType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _StructureType__GASTMObject = new ExecutorFragment(Types._StructureType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _StructureType__GASTMSyntaxObject = new ExecutorFragment(Types._StructureType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _StructureType__OclAny = new ExecutorFragment(Types._StructureType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _StructureType__OclElement = new ExecutorFragment(Types._StructureType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _StructureType__StructureType = new ExecutorFragment(Types._StructureType, AstmTables.Types._StructureType);
		private static final @NonNull ExecutorFragment _StructureType__Type = new ExecutorFragment(Types._StructureType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _StructureType__Visitable = new ExecutorFragment(Types._StructureType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Subtract__BinaryOperator = new ExecutorFragment(Types._Subtract, AstmTables.Types._BinaryOperator);
		private static final @NonNull ExecutorFragment _Subtract__GASTMObject = new ExecutorFragment(Types._Subtract, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Subtract__GASTMSyntaxObject = new ExecutorFragment(Types._Subtract, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Subtract__OclAny = new ExecutorFragment(Types._Subtract, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Subtract__OclElement = new ExecutorFragment(Types._Subtract, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Subtract__Operator = new ExecutorFragment(Types._Subtract, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _Subtract__OtherSyntaxObject = new ExecutorFragment(Types._Subtract, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Subtract__Subtract = new ExecutorFragment(Types._Subtract, AstmTables.Types._Subtract);
		private static final @NonNull ExecutorFragment _Subtract__Visitable = new ExecutorFragment(Types._Subtract, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SwitchCase__GASTMObject = new ExecutorFragment(Types._SwitchCase, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SwitchCase__GASTMSyntaxObject = new ExecutorFragment(Types._SwitchCase, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SwitchCase__OclAny = new ExecutorFragment(Types._SwitchCase, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SwitchCase__OclElement = new ExecutorFragment(Types._SwitchCase, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SwitchCase__OtherSyntaxObject = new ExecutorFragment(Types._SwitchCase, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _SwitchCase__SwitchCase = new ExecutorFragment(Types._SwitchCase, AstmTables.Types._SwitchCase);
		private static final @NonNull ExecutorFragment _SwitchCase__Visitable = new ExecutorFragment(Types._SwitchCase, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _SwitchStatement__GASTMObject = new ExecutorFragment(Types._SwitchStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _SwitchStatement__GASTMSyntaxObject = new ExecutorFragment(Types._SwitchStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _SwitchStatement__OclAny = new ExecutorFragment(Types._SwitchStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _SwitchStatement__OclElement = new ExecutorFragment(Types._SwitchStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _SwitchStatement__Statement = new ExecutorFragment(Types._SwitchStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _SwitchStatement__SwitchStatement = new ExecutorFragment(Types._SwitchStatement, AstmTables.Types._SwitchStatement);
		private static final @NonNull ExecutorFragment _SwitchStatement__Visitable = new ExecutorFragment(Types._SwitchStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _TerminateStatement__GASTMObject = new ExecutorFragment(Types._TerminateStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _TerminateStatement__GASTMSyntaxObject = new ExecutorFragment(Types._TerminateStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _TerminateStatement__OclAny = new ExecutorFragment(Types._TerminateStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _TerminateStatement__OclElement = new ExecutorFragment(Types._TerminateStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _TerminateStatement__Statement = new ExecutorFragment(Types._TerminateStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _TerminateStatement__TerminateStatement = new ExecutorFragment(Types._TerminateStatement, AstmTables.Types._TerminateStatement);
		private static final @NonNull ExecutorFragment _TerminateStatement__Visitable = new ExecutorFragment(Types._TerminateStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _ThrowStatement__GASTMObject = new ExecutorFragment(Types._ThrowStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _ThrowStatement__GASTMSyntaxObject = new ExecutorFragment(Types._ThrowStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _ThrowStatement__OclAny = new ExecutorFragment(Types._ThrowStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _ThrowStatement__OclElement = new ExecutorFragment(Types._ThrowStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _ThrowStatement__Statement = new ExecutorFragment(Types._ThrowStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _ThrowStatement__ThrowStatement = new ExecutorFragment(Types._ThrowStatement, AstmTables.Types._ThrowStatement);
		private static final @NonNull ExecutorFragment _ThrowStatement__Visitable = new ExecutorFragment(Types._ThrowStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _TryStatement__GASTMObject = new ExecutorFragment(Types._TryStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _TryStatement__GASTMSyntaxObject = new ExecutorFragment(Types._TryStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _TryStatement__OclAny = new ExecutorFragment(Types._TryStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _TryStatement__OclElement = new ExecutorFragment(Types._TryStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _TryStatement__Statement = new ExecutorFragment(Types._TryStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _TryStatement__TryStatement = new ExecutorFragment(Types._TryStatement, AstmTables.Types._TryStatement);
		private static final @NonNull ExecutorFragment _TryStatement__Visitable = new ExecutorFragment(Types._TryStatement, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Type__GASTMObject = new ExecutorFragment(Types._Type, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Type__GASTMSyntaxObject = new ExecutorFragment(Types._Type, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Type__OclAny = new ExecutorFragment(Types._Type, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Type__OclElement = new ExecutorFragment(Types._Type, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Type__Type = new ExecutorFragment(Types._Type, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Type__Visitable = new ExecutorFragment(Types._Type, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _TypeDefinition__DefinitionObject = new ExecutorFragment(Types._TypeDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _TypeDefinition__GASTMObject = new ExecutorFragment(Types._TypeDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _TypeDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._TypeDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _TypeDefinition__OclAny = new ExecutorFragment(Types._TypeDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _TypeDefinition__OclElement = new ExecutorFragment(Types._TypeDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _TypeDefinition__TypeDefinition = new ExecutorFragment(Types._TypeDefinition, AstmTables.Types._TypeDefinition);
		private static final @NonNull ExecutorFragment _TypeDefinition__Visitable = new ExecutorFragment(Types._TypeDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__Expression = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__GASTMObject = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__GASTMSyntaxObject = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__NameReference = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, AstmTables.Types._NameReference);
		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__OclAny = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__OclElement = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__TypeQualifiedIdentifierReference = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, AstmTables.Types._TypeQualifiedIdentifierReference);
		private static final @NonNull ExecutorFragment _TypeQualifiedIdentifierReference__Visitable = new ExecutorFragment(Types._TypeQualifiedIdentifierReference, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _TypeReference__GASTMObject = new ExecutorFragment(Types._TypeReference, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _TypeReference__GASTMSyntaxObject = new ExecutorFragment(Types._TypeReference, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _TypeReference__OclAny = new ExecutorFragment(Types._TypeReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _TypeReference__OclElement = new ExecutorFragment(Types._TypeReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _TypeReference__Type = new ExecutorFragment(Types._TypeReference, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _TypeReference__TypeReference = new ExecutorFragment(Types._TypeReference, AstmTables.Types._TypeReference);
		private static final @NonNull ExecutorFragment _TypeReference__Visitable = new ExecutorFragment(Types._TypeReference, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _TypesCatchBlock__CatchBlock = new ExecutorFragment(Types._TypesCatchBlock, AstmTables.Types._CatchBlock);
		private static final @NonNull ExecutorFragment _TypesCatchBlock__GASTMObject = new ExecutorFragment(Types._TypesCatchBlock, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _TypesCatchBlock__GASTMSyntaxObject = new ExecutorFragment(Types._TypesCatchBlock, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _TypesCatchBlock__OclAny = new ExecutorFragment(Types._TypesCatchBlock, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _TypesCatchBlock__OclElement = new ExecutorFragment(Types._TypesCatchBlock, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _TypesCatchBlock__OtherSyntaxObject = new ExecutorFragment(Types._TypesCatchBlock, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _TypesCatchBlock__TypesCatchBlock = new ExecutorFragment(Types._TypesCatchBlock, AstmTables.Types._TypesCatchBlock);
		private static final @NonNull ExecutorFragment _TypesCatchBlock__Visitable = new ExecutorFragment(Types._TypesCatchBlock, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _UnaryExpression__Expression = new ExecutorFragment(Types._UnaryExpression, AstmTables.Types._Expression);
		private static final @NonNull ExecutorFragment _UnaryExpression__GASTMObject = new ExecutorFragment(Types._UnaryExpression, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _UnaryExpression__GASTMSyntaxObject = new ExecutorFragment(Types._UnaryExpression, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _UnaryExpression__OclAny = new ExecutorFragment(Types._UnaryExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _UnaryExpression__OclElement = new ExecutorFragment(Types._UnaryExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _UnaryExpression__UnaryExpression = new ExecutorFragment(Types._UnaryExpression, AstmTables.Types._UnaryExpression);
		private static final @NonNull ExecutorFragment _UnaryExpression__Visitable = new ExecutorFragment(Types._UnaryExpression, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _UnaryOperator__GASTMObject = new ExecutorFragment(Types._UnaryOperator, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _UnaryOperator__GASTMSyntaxObject = new ExecutorFragment(Types._UnaryOperator, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _UnaryOperator__OclAny = new ExecutorFragment(Types._UnaryOperator, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _UnaryOperator__OclElement = new ExecutorFragment(Types._UnaryOperator, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _UnaryOperator__Operator = new ExecutorFragment(Types._UnaryOperator, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _UnaryOperator__OtherSyntaxObject = new ExecutorFragment(Types._UnaryOperator, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _UnaryOperator__UnaryOperator = new ExecutorFragment(Types._UnaryOperator, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _UnaryOperator__Visitable = new ExecutorFragment(Types._UnaryOperator, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _UnaryPlus__GASTMObject = new ExecutorFragment(Types._UnaryPlus, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _UnaryPlus__GASTMSyntaxObject = new ExecutorFragment(Types._UnaryPlus, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _UnaryPlus__OclAny = new ExecutorFragment(Types._UnaryPlus, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _UnaryPlus__OclElement = new ExecutorFragment(Types._UnaryPlus, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _UnaryPlus__Operator = new ExecutorFragment(Types._UnaryPlus, AstmTables.Types._Operator);
		private static final @NonNull ExecutorFragment _UnaryPlus__OtherSyntaxObject = new ExecutorFragment(Types._UnaryPlus, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _UnaryPlus__UnaryOperator = new ExecutorFragment(Types._UnaryPlus, AstmTables.Types._UnaryOperator);
		private static final @NonNull ExecutorFragment _UnaryPlus__UnaryPlus = new ExecutorFragment(Types._UnaryPlus, AstmTables.Types._UnaryPlus);
		private static final @NonNull ExecutorFragment _UnaryPlus__Visitable = new ExecutorFragment(Types._UnaryPlus, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _UnionType__AggregateType = new ExecutorFragment(Types._UnionType, AstmTables.Types._AggregateType);
		private static final @NonNull ExecutorFragment _UnionType__DataType = new ExecutorFragment(Types._UnionType, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _UnionType__GASTMObject = new ExecutorFragment(Types._UnionType, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _UnionType__GASTMSyntaxObject = new ExecutorFragment(Types._UnionType, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _UnionType__OclAny = new ExecutorFragment(Types._UnionType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _UnionType__OclElement = new ExecutorFragment(Types._UnionType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _UnionType__Type = new ExecutorFragment(Types._UnionType, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _UnionType__UnionType = new ExecutorFragment(Types._UnionType, AstmTables.Types._UnionType);
		private static final @NonNull ExecutorFragment _UnionType__Visitable = new ExecutorFragment(Types._UnionType, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _UnnamedTypeReference__GASTMObject = new ExecutorFragment(Types._UnnamedTypeReference, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _UnnamedTypeReference__GASTMSyntaxObject = new ExecutorFragment(Types._UnnamedTypeReference, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _UnnamedTypeReference__OclAny = new ExecutorFragment(Types._UnnamedTypeReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _UnnamedTypeReference__OclElement = new ExecutorFragment(Types._UnnamedTypeReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _UnnamedTypeReference__Type = new ExecutorFragment(Types._UnnamedTypeReference, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _UnnamedTypeReference__TypeReference = new ExecutorFragment(Types._UnnamedTypeReference, AstmTables.Types._TypeReference);
		private static final @NonNull ExecutorFragment _UnnamedTypeReference__UnnamedTypeReference = new ExecutorFragment(Types._UnnamedTypeReference, AstmTables.Types._UnnamedTypeReference);
		private static final @NonNull ExecutorFragment _UnnamedTypeReference__Visitable = new ExecutorFragment(Types._UnnamedTypeReference, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _VariableCatchBlock__CatchBlock = new ExecutorFragment(Types._VariableCatchBlock, AstmTables.Types._CatchBlock);
		private static final @NonNull ExecutorFragment _VariableCatchBlock__GASTMObject = new ExecutorFragment(Types._VariableCatchBlock, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _VariableCatchBlock__GASTMSyntaxObject = new ExecutorFragment(Types._VariableCatchBlock, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _VariableCatchBlock__OclAny = new ExecutorFragment(Types._VariableCatchBlock, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _VariableCatchBlock__OclElement = new ExecutorFragment(Types._VariableCatchBlock, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _VariableCatchBlock__OtherSyntaxObject = new ExecutorFragment(Types._VariableCatchBlock, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _VariableCatchBlock__VariableCatchBlock = new ExecutorFragment(Types._VariableCatchBlock, AstmTables.Types._VariableCatchBlock);
		private static final @NonNull ExecutorFragment _VariableCatchBlock__Visitable = new ExecutorFragment(Types._VariableCatchBlock, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _VariableDeclaration__Declaration = new ExecutorFragment(Types._VariableDeclaration, AstmTables.Types._Declaration);
		private static final @NonNull ExecutorFragment _VariableDeclaration__DeclarationOrDefinition = new ExecutorFragment(Types._VariableDeclaration, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _VariableDeclaration__DefinitionObject = new ExecutorFragment(Types._VariableDeclaration, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _VariableDeclaration__GASTMObject = new ExecutorFragment(Types._VariableDeclaration, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _VariableDeclaration__GASTMSyntaxObject = new ExecutorFragment(Types._VariableDeclaration, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _VariableDeclaration__OclAny = new ExecutorFragment(Types._VariableDeclaration, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _VariableDeclaration__OclElement = new ExecutorFragment(Types._VariableDeclaration, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _VariableDeclaration__VariableDeclaration = new ExecutorFragment(Types._VariableDeclaration, AstmTables.Types._VariableDeclaration);
		private static final @NonNull ExecutorFragment _VariableDeclaration__Visitable = new ExecutorFragment(Types._VariableDeclaration, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _VariableDefinition__DataDefinition = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._DataDefinition);
		private static final @NonNull ExecutorFragment _VariableDefinition__DeclarationOrDefinition = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._DeclarationOrDefinition);
		private static final @NonNull ExecutorFragment _VariableDefinition__Definition = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._Definition);
		private static final @NonNull ExecutorFragment _VariableDefinition__DefinitionObject = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._DefinitionObject);
		private static final @NonNull ExecutorFragment _VariableDefinition__GASTMObject = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _VariableDefinition__GASTMSyntaxObject = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _VariableDefinition__OclAny = new ExecutorFragment(Types._VariableDefinition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _VariableDefinition__OclElement = new ExecutorFragment(Types._VariableDefinition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _VariableDefinition__VariableDefinition = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._VariableDefinition);
		private static final @NonNull ExecutorFragment _VariableDefinition__Visitable = new ExecutorFragment(Types._VariableDefinition, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Virtual__GASTMObject = new ExecutorFragment(Types._Virtual, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Virtual__GASTMSyntaxObject = new ExecutorFragment(Types._Virtual, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Virtual__OclAny = new ExecutorFragment(Types._Virtual, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Virtual__OclElement = new ExecutorFragment(Types._Virtual, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Virtual__OtherSyntaxObject = new ExecutorFragment(Types._Virtual, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _Virtual__Virtual = new ExecutorFragment(Types._Virtual, AstmTables.Types._Virtual);
		private static final @NonNull ExecutorFragment _Virtual__VirtualSpecification = new ExecutorFragment(Types._Virtual, AstmTables.Types._VirtualSpecification);
		private static final @NonNull ExecutorFragment _Virtual__Visitable = new ExecutorFragment(Types._Virtual, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _VirtualSpecification__GASTMObject = new ExecutorFragment(Types._VirtualSpecification, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _VirtualSpecification__GASTMSyntaxObject = new ExecutorFragment(Types._VirtualSpecification, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _VirtualSpecification__OclAny = new ExecutorFragment(Types._VirtualSpecification, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _VirtualSpecification__OclElement = new ExecutorFragment(Types._VirtualSpecification, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _VirtualSpecification__OtherSyntaxObject = new ExecutorFragment(Types._VirtualSpecification, AstmTables.Types._OtherSyntaxObject);
		private static final @NonNull ExecutorFragment _VirtualSpecification__VirtualSpecification = new ExecutorFragment(Types._VirtualSpecification, AstmTables.Types._VirtualSpecification);
		private static final @NonNull ExecutorFragment _VirtualSpecification__Visitable = new ExecutorFragment(Types._VirtualSpecification, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Visitable__OclAny = new ExecutorFragment(Types._Visitable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Visitable__OclElement = new ExecutorFragment(Types._Visitable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Visitable__Visitable = new ExecutorFragment(Types._Visitable, AstmTables.Types._Visitable);

		private static final @NonNull ExecutorFragment _Void__DataType = new ExecutorFragment(Types._Void, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _Void__GASTMObject = new ExecutorFragment(Types._Void, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _Void__GASTMSyntaxObject = new ExecutorFragment(Types._Void, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _Void__OclAny = new ExecutorFragment(Types._Void, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _Void__OclElement = new ExecutorFragment(Types._Void, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _Void__PrimitiveType = new ExecutorFragment(Types._Void, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _Void__Type = new ExecutorFragment(Types._Void, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _Void__Visitable = new ExecutorFragment(Types._Void, AstmTables.Types._Visitable);
		private static final @NonNull ExecutorFragment _Void__Void = new ExecutorFragment(Types._Void, AstmTables.Types._Void);

		private static final @NonNull ExecutorFragment _WhileStatement__GASTMObject = new ExecutorFragment(Types._WhileStatement, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _WhileStatement__GASTMSyntaxObject = new ExecutorFragment(Types._WhileStatement, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _WhileStatement__LoopStatement = new ExecutorFragment(Types._WhileStatement, AstmTables.Types._LoopStatement);
		private static final @NonNull ExecutorFragment _WhileStatement__OclAny = new ExecutorFragment(Types._WhileStatement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _WhileStatement__OclElement = new ExecutorFragment(Types._WhileStatement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _WhileStatement__Statement = new ExecutorFragment(Types._WhileStatement, AstmTables.Types._Statement);
		private static final @NonNull ExecutorFragment _WhileStatement__Visitable = new ExecutorFragment(Types._WhileStatement, AstmTables.Types._Visitable);
		private static final @NonNull ExecutorFragment _WhileStatement__WhileStatement = new ExecutorFragment(Types._WhileStatement, AstmTables.Types._WhileStatement);

		private static final @NonNull ExecutorFragment _WideCharacter__DataType = new ExecutorFragment(Types._WideCharacter, AstmTables.Types._DataType);
		private static final @NonNull ExecutorFragment _WideCharacter__GASTMObject = new ExecutorFragment(Types._WideCharacter, AstmTables.Types._GASTMObject);
		private static final @NonNull ExecutorFragment _WideCharacter__GASTMSyntaxObject = new ExecutorFragment(Types._WideCharacter, AstmTables.Types._GASTMSyntaxObject);
		private static final @NonNull ExecutorFragment _WideCharacter__OclAny = new ExecutorFragment(Types._WideCharacter, OCLstdlibTables.Types._OclAny);
		private static final @NonNull ExecutorFragment _WideCharacter__OclElement = new ExecutorFragment(Types._WideCharacter, OCLstdlibTables.Types._OclElement);
		private static final @NonNull ExecutorFragment _WideCharacter__PrimitiveType = new ExecutorFragment(Types._WideCharacter, AstmTables.Types._PrimitiveType);
		private static final @NonNull ExecutorFragment _WideCharacter__Type = new ExecutorFragment(Types._WideCharacter, AstmTables.Types._Type);
		private static final @NonNull ExecutorFragment _WideCharacter__Visitable = new ExecutorFragment(Types._WideCharacter, AstmTables.Types._Visitable);
		private static final @NonNull ExecutorFragment _WideCharacter__WideCharacter = new ExecutorFragment(Types._WideCharacter, AstmTables.Types._WideCharacter);

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::Fragments and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The parameter lists shared by operations.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Parameters {
		static {
			Init.initStart();
			Fragments.init();
		}


		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::Parameters and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The operation descriptors for each operation of each type.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Operations {
		static {
			Init.initStart();
			Parameters.init();
		}

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::Operations and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The property descriptors for each property of each type.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Properties {
		static {
			Init.initStart();
			Operations.init();
		}


		public static final @NonNull ExecutorProperty _ActualParameter__FunctionCallExpression__actualParams = new ExecutorPropertyWithImplementation("FunctionCallExpression", Types._ActualParameter, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_CALL_EXPRESSION__ACTUAL_PARAMS));

		public static final @NonNull ExecutorProperty _ActualParameterExpression__value = new EcoreExecutorProperty(AstmPackage.Literals.ACTUAL_PARAMETER_EXPRESSION__VALUE, Types._ActualParameterExpression, 0);

		public static final @NonNull ExecutorProperty _AggregateScope__AggregateType__opensScope = new ExecutorPropertyWithImplementation("AggregateType", Types._AggregateScope, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.AGGREGATE_TYPE__OPENS_SCOPE));

		public static final @NonNull ExecutorProperty _AggregateType__members = new EcoreExecutorProperty(AstmPackage.Literals.AGGREGATE_TYPE__MEMBERS, Types._AggregateType, 0);
		public static final @NonNull ExecutorProperty _AggregateType__opensScope = new EcoreExecutorProperty(AstmPackage.Literals.AGGREGATE_TYPE__OPENS_SCOPE, Types._AggregateType, 1);
		public static final @NonNull ExecutorProperty _AggregateType__AggregateTypeDefinition__aggregateType = new ExecutorPropertyWithImplementation("AggregateTypeDefinition", Types._AggregateType, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.AGGREGATE_TYPE_DEFINITION__AGGREGATE_TYPE));

		public static final @NonNull ExecutorProperty _AggregateTypeDefinition__aggregateType = new EcoreExecutorProperty(AstmPackage.Literals.AGGREGATE_TYPE_DEFINITION__AGGREGATE_TYPE, Types._AggregateTypeDefinition, 0);

		public static final @NonNull ExecutorProperty _AnnotationExpression__annotationType = new EcoreExecutorProperty(AstmPackage.Literals.ANNOTATION_EXPRESSION__ANNOTATION_TYPE, Types._AnnotationExpression, 0);
		public static final @NonNull ExecutorProperty _AnnotationExpression__memberValues = new EcoreExecutorProperty(AstmPackage.Literals.ANNOTATION_EXPRESSION__MEMBER_VALUES, Types._AnnotationExpression, 1);
		public static final @NonNull ExecutorProperty _AnnotationExpression__GASTMSyntaxObject__annotations = new ExecutorPropertyWithImplementation("GASTMSyntaxObject", Types._AnnotationExpression, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.GASTM_SYNTAX_OBJECT__ANNOTATIONS));

		public static final @NonNull ExecutorProperty _ArrayAccess__arrayName = new EcoreExecutorProperty(AstmPackage.Literals.ARRAY_ACCESS__ARRAY_NAME, Types._ArrayAccess, 0);
		public static final @NonNull ExecutorProperty _ArrayAccess__subscripts = new EcoreExecutorProperty(AstmPackage.Literals.ARRAY_ACCESS__SUBSCRIPTS, Types._ArrayAccess, 1);

		public static final @NonNull ExecutorProperty _ArrayType__ranks = new EcoreExecutorProperty(AstmPackage.Literals.ARRAY_TYPE__RANKS, Types._ArrayType, 0);

		public static final @NonNull ExecutorProperty _BinaryExpression__leftOperand = new EcoreExecutorProperty(AstmPackage.Literals.BINARY_EXPRESSION__LEFT_OPERAND, Types._BinaryExpression, 0);
		public static final @NonNull ExecutorProperty _BinaryExpression__operator = new EcoreExecutorProperty(AstmPackage.Literals.BINARY_EXPRESSION__OPERATOR, Types._BinaryExpression, 1);
		public static final @NonNull ExecutorProperty _BinaryExpression__rightOperand = new EcoreExecutorProperty(AstmPackage.Literals.BINARY_EXPRESSION__RIGHT_OPERAND, Types._BinaryExpression, 2);

		public static final @NonNull ExecutorProperty _BitFieldDefinition__bitFieldSize = new EcoreExecutorProperty(AstmPackage.Literals.BIT_FIELD_DEFINITION__BIT_FIELD_SIZE, Types._BitFieldDefinition, 0);

		public static final @NonNull ExecutorProperty _BlockScope__BlockStatement__opensScope = new ExecutorPropertyWithImplementation("BlockStatement", Types._BlockScope, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.BLOCK_STATEMENT__OPENS_SCOPE));

		public static final @NonNull ExecutorProperty _BlockStatement__opensScope = new EcoreExecutorProperty(AstmPackage.Literals.BLOCK_STATEMENT__OPENS_SCOPE, Types._BlockStatement, 0);
		public static final @NonNull ExecutorProperty _BlockStatement__subStatements = new EcoreExecutorProperty(AstmPackage.Literals.BLOCK_STATEMENT__SUB_STATEMENTS, Types._BlockStatement, 1);

		public static final @NonNull ExecutorProperty _BreakStatement__target = new EcoreExecutorProperty(AstmPackage.Literals.BREAK_STATEMENT__TARGET, Types._BreakStatement, 0);

		public static final @NonNull ExecutorProperty _CaseBlock__caseExpressions = new EcoreExecutorProperty(AstmPackage.Literals.CASE_BLOCK__CASE_EXPRESSIONS, Types._CaseBlock, 0);

		public static final @NonNull ExecutorProperty _CastExpression__castType = new EcoreExecutorProperty(AstmPackage.Literals.CAST_EXPRESSION__CAST_TYPE, Types._CastExpression, 0);
		public static final @NonNull ExecutorProperty _CastExpression__expression = new EcoreExecutorProperty(AstmPackage.Literals.CAST_EXPRESSION__EXPRESSION, Types._CastExpression, 1);

		public static final @NonNull ExecutorProperty _CatchBlock__body = new EcoreExecutorProperty(AstmPackage.Literals.CATCH_BLOCK__BODY, Types._CatchBlock, 0);
		public static final @NonNull ExecutorProperty _CatchBlock__TryStatement__catchBlocks = new ExecutorPropertyWithImplementation("TryStatement", Types._CatchBlock, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.TRY_STATEMENT__CATCH_BLOCKS));

		public static final @NonNull ExecutorProperty _ClassType__derivesFrom = new EcoreExecutorProperty(AstmPackage.Literals.CLASS_TYPE__DERIVES_FROM, Types._ClassType, 0);

		public static final @NonNull ExecutorProperty _Comment__text = new EcoreExecutorProperty(AstmPackage.Literals.COMMENT__TEXT, Types._Comment, 0);

		public static final @NonNull ExecutorProperty _CompilationUnit__fragments = new EcoreExecutorProperty(AstmPackage.Literals.COMPILATION_UNIT__FRAGMENTS, Types._CompilationUnit, 0);
		public static final @NonNull ExecutorProperty _CompilationUnit__language = new EcoreExecutorProperty(AstmPackage.Literals.COMPILATION_UNIT__LANGUAGE, Types._CompilationUnit, 1);
		public static final @NonNull ExecutorProperty _CompilationUnit__opensScope = new EcoreExecutorProperty(AstmPackage.Literals.COMPILATION_UNIT__OPENS_SCOPE, Types._CompilationUnit, 2);
		public static final @NonNull ExecutorProperty _CompilationUnit__Project__files = new ExecutorPropertyWithImplementation("Project", Types._CompilationUnit, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.PROJECT__FILES));

		public static final @NonNull ExecutorProperty _ConditionalExpression__condition = new EcoreExecutorProperty(AstmPackage.Literals.CONDITIONAL_EXPRESSION__CONDITION, Types._ConditionalExpression, 0);
		public static final @NonNull ExecutorProperty _ConditionalExpression__onFalseOperand = new EcoreExecutorProperty(AstmPackage.Literals.CONDITIONAL_EXPRESSION__ON_FALSE_OPERAND, Types._ConditionalExpression, 1);
		public static final @NonNull ExecutorProperty _ConditionalExpression__onTrueOperand = new EcoreExecutorProperty(AstmPackage.Literals.CONDITIONAL_EXPRESSION__ON_TRUE_OPERAND, Types._ConditionalExpression, 2);

		public static final @NonNull ExecutorProperty _ConstructedType__baseType = new EcoreExecutorProperty(AstmPackage.Literals.CONSTRUCTED_TYPE__BASE_TYPE, Types._ConstructedType, 0);

		public static final @NonNull ExecutorProperty _ContinueStatement__target = new EcoreExecutorProperty(AstmPackage.Literals.CONTINUE_STATEMENT__TARGET, Types._ContinueStatement, 0);

		public static final @NonNull ExecutorProperty _DataDefinition__initialValue = new EcoreExecutorProperty(AstmPackage.Literals.DATA_DEFINITION__INITIAL_VALUE, Types._DataDefinition, 0);
		public static final @NonNull ExecutorProperty _DataDefinition__isMutable = new EcoreExecutorProperty(AstmPackage.Literals.DATA_DEFINITION__IS_MUTABLE, Types._DataDefinition, 1);
		public static final @NonNull ExecutorProperty _DataDefinition__VariableCatchBlock__exceptionVariable = new ExecutorPropertyWithImplementation("VariableCatchBlock", Types._DataDefinition, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.VARIABLE_CATCH_BLOCK__EXCEPTION_VARIABLE));

		public static final @NonNull ExecutorProperty _Declaration__declarationType = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION__DECLARATION_TYPE, Types._Declaration, 0);
		public static final @NonNull ExecutorProperty _Declaration__defRef = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION__DEF_REF, Types._Declaration, 1);
		public static final @NonNull ExecutorProperty _Declaration__identifierName = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION__IDENTIFIER_NAME, Types._Declaration, 2);

		public static final @NonNull ExecutorProperty _DeclarationOrDefinition__accessKind = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION__ACCESS_KIND, Types._DeclarationOrDefinition, 0);
		public static final @NonNull ExecutorProperty _DeclarationOrDefinition__isRegister = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION__IS_REGISTER, Types._DeclarationOrDefinition, 1);
		public static final @NonNull ExecutorProperty _DeclarationOrDefinition__linkageSpecifier = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION__LINKAGE_SPECIFIER, Types._DeclarationOrDefinition, 2);
		public static final @NonNull ExecutorProperty _DeclarationOrDefinition__storageSpecifiers = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION__STORAGE_SPECIFIERS, Types._DeclarationOrDefinition, 3);

		public static final @NonNull ExecutorProperty _DeclarationOrDefinitionStatement__declOrDefn = new EcoreExecutorProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION_STATEMENT__DECL_OR_DEFN, Types._DeclarationOrDefinitionStatement, 0);

		public static final @NonNull ExecutorProperty _Definition__definitionType = new EcoreExecutorProperty(AstmPackage.Literals.DEFINITION__DEFINITION_TYPE, Types._Definition, 0);
		public static final @NonNull ExecutorProperty _Definition__identifierName = new EcoreExecutorProperty(AstmPackage.Literals.DEFINITION__IDENTIFIER_NAME, Types._Definition, 1);
		public static final @NonNull ExecutorProperty _Definition__Declaration__defRef = new ExecutorPropertyWithImplementation("Declaration", Types._Definition, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DECLARATION__DEF_REF));

		public static final @NonNull ExecutorProperty _DefinitionObject__AggregateType__members = new ExecutorPropertyWithImplementation("AggregateType", Types._DefinitionObject, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.AGGREGATE_TYPE__MEMBERS));
		public static final @NonNull ExecutorProperty _DefinitionObject__CompilationUnit__fragments = new ExecutorPropertyWithImplementation("CompilationUnit", Types._DefinitionObject, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.COMPILATION_UNIT__FRAGMENTS));
		public static final @NonNull ExecutorProperty _DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn = new ExecutorPropertyWithImplementation("DeclarationOrDefinitionStatement", Types._DefinitionObject, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION_STATEMENT__DECL_OR_DEFN));
		public static final @NonNull ExecutorProperty _DefinitionObject__DelphiBlockStatement__declarations = new ExecutorPropertyWithImplementation("DelphiBlockStatement", Types._DefinitionObject, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_BLOCK_STATEMENT__DECLARATIONS));
		public static final @NonNull ExecutorProperty _DefinitionObject__DelphiFunctionCallExpression__applyTo = new ExecutorPropertyWithImplementation("DelphiFunctionCallExpression", Types._DefinitionObject, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_FUNCTION_CALL_EXPRESSION__APPLY_TO));
		public static final @NonNull ExecutorProperty _DefinitionObject__DelphiWithStatement__withs = new ExecutorPropertyWithImplementation("DelphiWithStatement", Types._DefinitionObject, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_WITH_STATEMENT__WITHS));
		public static final @NonNull ExecutorProperty _DefinitionObject__NameReference__refersTo = new ExecutorPropertyWithImplementation("NameReference", Types._DefinitionObject, 6, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAME_REFERENCE__REFERS_TO));
		public static final @NonNull ExecutorProperty _DefinitionObject__NameSpaceDefinition__body = new ExecutorPropertyWithImplementation("NameSpaceDefinition", Types._DefinitionObject, 7, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAME_SPACE_DEFINITION__BODY));
		public static final @NonNull ExecutorProperty _DefinitionObject__Scope__definitionObject = new ExecutorPropertyWithImplementation("Scope", Types._DefinitionObject, 8, new EcoreLibraryOppositeProperty(AstmPackage.Literals.SCOPE__DEFINITION_OBJECT));

		public static final @NonNull ExecutorProperty _DeleteStatement__operand = new EcoreExecutorProperty(AstmPackage.Literals.DELETE_STATEMENT__OPERAND, Types._DeleteStatement, 0);

		public static final @NonNull ExecutorProperty _DelphiBlockStatement__declarations = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_BLOCK_STATEMENT__DECLARATIONS, Types._DelphiBlockStatement, 0);
		public static final @NonNull ExecutorProperty _DelphiBlockStatement__exports = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_BLOCK_STATEMENT__EXPORTS, Types._DelphiBlockStatement, 1);

		public static final @NonNull ExecutorProperty _DelphiFunctionCallExpression__applyTo = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_FUNCTION_CALL_EXPRESSION__APPLY_TO, Types._DelphiFunctionCallExpression, 0);

		public static final @NonNull ExecutorProperty _DelphiImplementationSection__exports = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_IMPLEMENTATION_SECTION__EXPORTS, Types._DelphiImplementationSection, 0);
		public static final @NonNull ExecutorProperty _DelphiImplementationSection__uses = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_IMPLEMENTATION_SECTION__USES, Types._DelphiImplementationSection, 1);
		public static final @NonNull ExecutorProperty _DelphiImplementationSection__DelphiUnit__implementation = new ExecutorPropertyWithImplementation("DelphiUnit", Types._DelphiImplementationSection, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_UNIT__IMPLEMENTATION));

		public static final @NonNull ExecutorProperty _DelphiInterfaceSection__uses = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_INTERFACE_SECTION__USES, Types._DelphiInterfaceSection, 0);
		public static final @NonNull ExecutorProperty _DelphiInterfaceSection__DelphiUnit__interface = new ExecutorPropertyWithImplementation("DelphiUnit", Types._DelphiInterfaceSection, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_UNIT__INTERFACE));

		public static final @NonNull ExecutorProperty _DelphiUnit__implementation = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_UNIT__IMPLEMENTATION, Types._DelphiUnit, 0);
		public static final @NonNull ExecutorProperty _DelphiUnit__interface = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_UNIT__INTERFACE, Types._DelphiUnit, 1);
		public static final @NonNull ExecutorProperty _DelphiUnit__name = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_UNIT__NAME, Types._DelphiUnit, 2);

		public static final @NonNull ExecutorProperty _DelphiWithStatement__withs = new EcoreExecutorProperty(AstmPackage.Literals.DELPHI_WITH_STATEMENT__WITHS, Types._DelphiWithStatement, 0);

		public static final @NonNull ExecutorProperty _DerivesFrom__accessKind = new EcoreExecutorProperty(AstmPackage.Literals.DERIVES_FROM__ACCESS_KIND, Types._DerivesFrom, 0);
		public static final @NonNull ExecutorProperty _DerivesFrom__className = new EcoreExecutorProperty(AstmPackage.Literals.DERIVES_FROM__CLASS_NAME, Types._DerivesFrom, 1);
		public static final @NonNull ExecutorProperty _DerivesFrom__isVirtual = new EcoreExecutorProperty(AstmPackage.Literals.DERIVES_FROM__IS_VIRTUAL, Types._DerivesFrom, 2);
		public static final @NonNull ExecutorProperty _DerivesFrom__ClassType__derivesFrom = new ExecutorPropertyWithImplementation("ClassType", Types._DerivesFrom, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CLASS_TYPE__DERIVES_FROM));

		public static final @NonNull ExecutorProperty _Dimension__highBound = new EcoreExecutorProperty(AstmPackage.Literals.DIMENSION__HIGH_BOUND, Types._Dimension, 0);
		public static final @NonNull ExecutorProperty _Dimension__lowBound = new EcoreExecutorProperty(AstmPackage.Literals.DIMENSION__LOW_BOUND, Types._Dimension, 1);
		public static final @NonNull ExecutorProperty _Dimension__ArrayType__ranks = new ExecutorPropertyWithImplementation("ArrayType", Types._Dimension, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ARRAY_TYPE__RANKS));

		public static final @NonNull ExecutorProperty _EntryDefinition__body = new EcoreExecutorProperty(AstmPackage.Literals.ENTRY_DEFINITION__BODY, Types._EntryDefinition, 0);
		public static final @NonNull ExecutorProperty _EntryDefinition__formalParameters = new EcoreExecutorProperty(AstmPackage.Literals.ENTRY_DEFINITION__FORMAL_PARAMETERS, Types._EntryDefinition, 1);

		public static final @NonNull ExecutorProperty _EnumLiteralDefinition__value = new EcoreExecutorProperty(AstmPackage.Literals.ENUM_LITERAL_DEFINITION__VALUE, Types._EnumLiteralDefinition, 0);
		public static final @NonNull ExecutorProperty _EnumLiteralDefinition__EnumType__enumLiterals = new ExecutorPropertyWithImplementation("EnumType", Types._EnumLiteralDefinition, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ENUM_TYPE__ENUM_LITERALS));

		public static final @NonNull ExecutorProperty _EnumType__enumLiterals = new EcoreExecutorProperty(AstmPackage.Literals.ENUM_TYPE__ENUM_LITERALS, Types._EnumType, 0);

		public static final @NonNull ExecutorProperty _Expression__expressionType = new EcoreExecutorProperty(AstmPackage.Literals.EXPRESSION__EXPRESSION_TYPE, Types._Expression, 0);
		public static final @NonNull ExecutorProperty _Expression__ActualParameterExpression__value = new ExecutorPropertyWithImplementation("ActualParameterExpression", Types._Expression, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ACTUAL_PARAMETER_EXPRESSION__VALUE));
		public static final @NonNull ExecutorProperty _Expression__AnnotationExpression__memberValues = new ExecutorPropertyWithImplementation("AnnotationExpression", Types._Expression, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ANNOTATION_EXPRESSION__MEMBER_VALUES));
		public static final @NonNull ExecutorProperty _Expression__ArrayAccess__arrayName = new ExecutorPropertyWithImplementation("ArrayAccess", Types._Expression, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ARRAY_ACCESS__ARRAY_NAME));
		public static final @NonNull ExecutorProperty _Expression__ArrayAccess__subscripts = new ExecutorPropertyWithImplementation("ArrayAccess", Types._Expression, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ARRAY_ACCESS__SUBSCRIPTS));
		public static final @NonNull ExecutorProperty _Expression__BinaryExpression__leftOperand = new ExecutorPropertyWithImplementation("BinaryExpression", Types._Expression, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.BINARY_EXPRESSION__LEFT_OPERAND));
		public static final @NonNull ExecutorProperty _Expression__BinaryExpression__rightOperand = new ExecutorPropertyWithImplementation("BinaryExpression", Types._Expression, 6, new EcoreLibraryOppositeProperty(AstmPackage.Literals.BINARY_EXPRESSION__RIGHT_OPERAND));
		public static final @NonNull ExecutorProperty _Expression__BitFieldDefinition__bitFieldSize = new ExecutorPropertyWithImplementation("BitFieldDefinition", Types._Expression, 7, new EcoreLibraryOppositeProperty(AstmPackage.Literals.BIT_FIELD_DEFINITION__BIT_FIELD_SIZE));
		public static final @NonNull ExecutorProperty _Expression__CaseBlock__caseExpressions = new ExecutorPropertyWithImplementation("CaseBlock", Types._Expression, 8, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CASE_BLOCK__CASE_EXPRESSIONS));
		public static final @NonNull ExecutorProperty _Expression__CastExpression__expression = new ExecutorPropertyWithImplementation("CastExpression", Types._Expression, 9, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CAST_EXPRESSION__EXPRESSION));
		public static final @NonNull ExecutorProperty _Expression__ConditionalExpression__condition = new ExecutorPropertyWithImplementation("ConditionalExpression", Types._Expression, 10, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CONDITIONAL_EXPRESSION__CONDITION));
		public static final @NonNull ExecutorProperty _Expression__ConditionalExpression__onFalseOperand = new ExecutorPropertyWithImplementation("ConditionalExpression", Types._Expression, 11, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CONDITIONAL_EXPRESSION__ON_FALSE_OPERAND));
		public static final @NonNull ExecutorProperty _Expression__ConditionalExpression__onTrueOperand = new ExecutorPropertyWithImplementation("ConditionalExpression", Types._Expression, 12, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CONDITIONAL_EXPRESSION__ON_TRUE_OPERAND));
		public static final @NonNull ExecutorProperty _Expression__DataDefinition__initialValue = new ExecutorPropertyWithImplementation("DataDefinition", Types._Expression, 13, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DATA_DEFINITION__INITIAL_VALUE));
		public static final @NonNull ExecutorProperty _Expression__DeleteStatement__operand = new ExecutorPropertyWithImplementation("DeleteStatement", Types._Expression, 14, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELETE_STATEMENT__OPERAND));
		public static final @NonNull ExecutorProperty _Expression__Dimension__highBound = new ExecutorPropertyWithImplementation("Dimension", Types._Expression, 15, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DIMENSION__HIGH_BOUND));
		public static final @NonNull ExecutorProperty _Expression__Dimension__lowBound = new ExecutorPropertyWithImplementation("Dimension", Types._Expression, 16, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DIMENSION__LOW_BOUND));
		public static final @NonNull ExecutorProperty _Expression__EnumLiteralDefinition__value = new ExecutorPropertyWithImplementation("EnumLiteralDefinition", Types._Expression, 17, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ENUM_LITERAL_DEFINITION__VALUE));
		public static final @NonNull ExecutorProperty _Expression__ExpressionStatement__expression = new ExecutorPropertyWithImplementation("ExpressionStatement", Types._Expression, 18, new EcoreLibraryOppositeProperty(AstmPackage.Literals.EXPRESSION_STATEMENT__EXPRESSION));
		public static final @NonNull ExecutorProperty _Expression__ForStatement__initBody = new ExecutorPropertyWithImplementation("ForStatement", Types._Expression, 19, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FOR_STATEMENT__INIT_BODY));
		public static final @NonNull ExecutorProperty _Expression__ForStatement__iterationBody = new ExecutorPropertyWithImplementation("ForStatement", Types._Expression, 20, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FOR_STATEMENT__ITERATION_BODY));
		public static final @NonNull ExecutorProperty _Expression__FunctionCallExpression__calledFunction = new ExecutorPropertyWithImplementation("FunctionCallExpression", Types._Expression, 21, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_CALL_EXPRESSION__CALLED_FUNCTION));
		public static final @NonNull ExecutorProperty _Expression__IfStatement__condition = new ExecutorPropertyWithImplementation("IfStatement", Types._Expression, 22, new EcoreLibraryOppositeProperty(AstmPackage.Literals.IF_STATEMENT__CONDITION));
		public static final @NonNull ExecutorProperty _Expression__JumpStatement__target = new ExecutorPropertyWithImplementation("JumpStatement", Types._Expression, 23, new EcoreLibraryOppositeProperty(AstmPackage.Literals.JUMP_STATEMENT__TARGET));
		public static final @NonNull ExecutorProperty _Expression__LoopStatement__condition = new ExecutorPropertyWithImplementation("LoopStatement", Types._Expression, 24, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LOOP_STATEMENT__CONDITION));
		public static final @NonNull ExecutorProperty _Expression__QualifiedIdentifierReference__qualifiers = new ExecutorPropertyWithImplementation("QualifiedIdentifierReference", Types._Expression, 25, new EcoreLibraryOppositeProperty(AstmPackage.Literals.QUALIFIED_IDENTIFIER_REFERENCE__QUALIFIERS));
		public static final @NonNull ExecutorProperty _Expression__RangeExpression__fromExpression = new ExecutorPropertyWithImplementation("RangeExpression", Types._Expression, 26, new EcoreLibraryOppositeProperty(AstmPackage.Literals.RANGE_EXPRESSION__FROM_EXPRESSION));
		public static final @NonNull ExecutorProperty _Expression__RangeExpression__toExpression = new ExecutorPropertyWithImplementation("RangeExpression", Types._Expression, 27, new EcoreLibraryOppositeProperty(AstmPackage.Literals.RANGE_EXPRESSION__TO_EXPRESSION));
		public static final @NonNull ExecutorProperty _Expression__ReturnStatement__returnValue = new ExecutorPropertyWithImplementation("ReturnStatement", Types._Expression, 28, new EcoreLibraryOppositeProperty(AstmPackage.Literals.RETURN_STATEMENT__RETURN_VALUE));
		public static final @NonNull ExecutorProperty _Expression__SwitchStatement__switchExpression = new ExecutorPropertyWithImplementation("SwitchStatement", Types._Expression, 29, new EcoreLibraryOppositeProperty(AstmPackage.Literals.SWITCH_STATEMENT__SWITCH_EXPRESSION));
		public static final @NonNull ExecutorProperty _Expression__ThrowStatement__exception = new ExecutorPropertyWithImplementation("ThrowStatement", Types._Expression, 30, new EcoreLibraryOppositeProperty(AstmPackage.Literals.THROW_STATEMENT__EXCEPTION));
		public static final @NonNull ExecutorProperty _Expression__UnaryExpression__operand = new ExecutorPropertyWithImplementation("UnaryExpression", Types._Expression, 31, new EcoreLibraryOppositeProperty(AstmPackage.Literals.UNARY_EXPRESSION__OPERAND));

		public static final @NonNull ExecutorProperty _ExpressionStatement__expression = new EcoreExecutorProperty(AstmPackage.Literals.EXPRESSION_STATEMENT__EXPRESSION, Types._ExpressionStatement, 0);

		public static final @NonNull ExecutorProperty _ForStatement__initBody = new EcoreExecutorProperty(AstmPackage.Literals.FOR_STATEMENT__INIT_BODY, Types._ForStatement, 0);
		public static final @NonNull ExecutorProperty _ForStatement__iterationBody = new EcoreExecutorProperty(AstmPackage.Literals.FOR_STATEMENT__ITERATION_BODY, Types._ForStatement, 1);

		public static final @NonNull ExecutorProperty _FormalParameterDeclaration__FunctionDeclaration__formalParameters = new ExecutorPropertyWithImplementation("FunctionDeclaration", Types._FormalParameterDeclaration, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DECLARATION__FORMAL_PARAMETERS));

		public static final @NonNull ExecutorProperty _FormalParameterDefinition__EntryDefinition__formalParameters = new ExecutorPropertyWithImplementation("EntryDefinition", Types._FormalParameterDefinition, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ENTRY_DEFINITION__FORMAL_PARAMETERS));
		public static final @NonNull ExecutorProperty _FormalParameterDefinition__FunctionDefinition__formalParameters = new ExecutorPropertyWithImplementation("FunctionDefinition", Types._FormalParameterDefinition, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DEFINITION__FORMAL_PARAMETERS));

		public static final @NonNull ExecutorProperty _FormalParameterType__type = new EcoreExecutorProperty(AstmPackage.Literals.FORMAL_PARAMETER_TYPE__TYPE, Types._FormalParameterType, 0);
		public static final @NonNull ExecutorProperty _FormalParameterType__FunctionType__parameterTypes = new ExecutorPropertyWithImplementation("FunctionType", Types._FormalParameterType, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_TYPE__PARAMETER_TYPES));

		public static final @NonNull ExecutorProperty _FunctionCallExpression__actualParams = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_CALL_EXPRESSION__ACTUAL_PARAMS, Types._FunctionCallExpression, 0);
		public static final @NonNull ExecutorProperty _FunctionCallExpression__calledFunction = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_CALL_EXPRESSION__CALLED_FUNCTION, Types._FunctionCallExpression, 1);

		public static final @NonNull ExecutorProperty _FunctionDeclaration__formalParameters = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DECLARATION__FORMAL_PARAMETERS, Types._FunctionDeclaration, 0);
		public static final @NonNull ExecutorProperty _FunctionDeclaration__functionMemberAttributes = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DECLARATION__FUNCTION_MEMBER_ATTRIBUTES, Types._FunctionDeclaration, 1);
		public static final @NonNull ExecutorProperty _FunctionDeclaration__returnType = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DECLARATION__RETURN_TYPE, Types._FunctionDeclaration, 2);

		public static final @NonNull ExecutorProperty _FunctionDefinition__body = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DEFINITION__BODY, Types._FunctionDefinition, 0);
		public static final @NonNull ExecutorProperty _FunctionDefinition__formalParameters = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DEFINITION__FORMAL_PARAMETERS, Types._FunctionDefinition, 1);
		public static final @NonNull ExecutorProperty _FunctionDefinition__functionMemberAttributes = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DEFINITION__FUNCTION_MEMBER_ATTRIBUTES, Types._FunctionDefinition, 2);
		public static final @NonNull ExecutorProperty _FunctionDefinition__opensScope = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DEFINITION__OPENS_SCOPE, Types._FunctionDefinition, 3);
		public static final @NonNull ExecutorProperty _FunctionDefinition__returnType = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_DEFINITION__RETURN_TYPE, Types._FunctionDefinition, 4);

		public static final @NonNull ExecutorProperty _FunctionMemberAttributes__isFriend = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_MEMBER_ATTRIBUTES__IS_FRIEND, Types._FunctionMemberAttributes, 0);
		public static final @NonNull ExecutorProperty _FunctionMemberAttributes__isInline = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_MEMBER_ATTRIBUTES__IS_INLINE, Types._FunctionMemberAttributes, 1);
		public static final @NonNull ExecutorProperty _FunctionMemberAttributes__isThisConst = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_MEMBER_ATTRIBUTES__IS_THIS_CONST, Types._FunctionMemberAttributes, 2);
		public static final @NonNull ExecutorProperty _FunctionMemberAttributes__virtualSpecifier = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_MEMBER_ATTRIBUTES__VIRTUAL_SPECIFIER, Types._FunctionMemberAttributes, 3);
		public static final @NonNull ExecutorProperty _FunctionMemberAttributes__FunctionDeclaration__functionMemberAttributes = new ExecutorPropertyWithImplementation("FunctionDeclaration", Types._FunctionMemberAttributes, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DECLARATION__FUNCTION_MEMBER_ATTRIBUTES));
		public static final @NonNull ExecutorProperty _FunctionMemberAttributes__FunctionDefinition__functionMemberAttributes = new ExecutorPropertyWithImplementation("FunctionDefinition", Types._FunctionMemberAttributes, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DEFINITION__FUNCTION_MEMBER_ATTRIBUTES));

		public static final @NonNull ExecutorProperty _FunctionScope__FunctionDefinition__opensScope = new ExecutorPropertyWithImplementation("FunctionDefinition", Types._FunctionScope, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DEFINITION__OPENS_SCOPE));

		public static final @NonNull ExecutorProperty _FunctionType__parameterTypes = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_TYPE__PARAMETER_TYPES, Types._FunctionType, 0);
		public static final @NonNull ExecutorProperty _FunctionType__returnType = new EcoreExecutorProperty(AstmPackage.Literals.FUNCTION_TYPE__RETURN_TYPE, Types._FunctionType, 1);

		public static final @NonNull ExecutorProperty _GASTMSyntaxObject__annotations = new EcoreExecutorProperty(AstmPackage.Literals.GASTM_SYNTAX_OBJECT__ANNOTATIONS, Types._GASTMSyntaxObject, 0);
		public static final @NonNull ExecutorProperty _GASTMSyntaxObject__locationInfo = new EcoreExecutorProperty(AstmPackage.Literals.GASTM_SYNTAX_OBJECT__LOCATION_INFO, Types._GASTMSyntaxObject, 1);
		public static final @NonNull ExecutorProperty _GASTMSyntaxObject__preProcessorElements = new EcoreExecutorProperty(AstmPackage.Literals.GASTM_SYNTAX_OBJECT__PRE_PROCESSOR_ELEMENTS, Types._GASTMSyntaxObject, 2);

		public static final @NonNull ExecutorProperty _GlobalScope__Project__outerScope = new ExecutorPropertyWithImplementation("Project", Types._GlobalScope, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.PROJECT__OUTER_SCOPE));

		public static final @NonNull ExecutorProperty _IdentifierReference__QualifiedIdentifierReference__member = new ExecutorPropertyWithImplementation("QualifiedIdentifierReference", Types._IdentifierReference, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.QUALIFIED_IDENTIFIER_REFERENCE__MEMBER));
		public static final @NonNull ExecutorProperty _IdentifierReference__TypeQualifiedIdentifierReference__member = new ExecutorPropertyWithImplementation("TypeQualifiedIdentifierReference", Types._IdentifierReference, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.TYPE_QUALIFIED_IDENTIFIER_REFERENCE__MEMBER));

		public static final @NonNull ExecutorProperty _IfStatement__condition = new EcoreExecutorProperty(AstmPackage.Literals.IF_STATEMENT__CONDITION, Types._IfStatement, 0);
		public static final @NonNull ExecutorProperty _IfStatement__elseBody = new EcoreExecutorProperty(AstmPackage.Literals.IF_STATEMENT__ELSE_BODY, Types._IfStatement, 1);
		public static final @NonNull ExecutorProperty _IfStatement__thenBody = new EcoreExecutorProperty(AstmPackage.Literals.IF_STATEMENT__THEN_BODY, Types._IfStatement, 2);

		public static final @NonNull ExecutorProperty _IncludeUnit__file = new EcoreExecutorProperty(AstmPackage.Literals.INCLUDE_UNIT__FILE, Types._IncludeUnit, 0);

		public static final @NonNull ExecutorProperty _JumpStatement__target = new EcoreExecutorProperty(AstmPackage.Literals.JUMP_STATEMENT__TARGET, Types._JumpStatement, 0);

		public static final @NonNull ExecutorProperty _LabelAccess__definition = new EcoreExecutorProperty(AstmPackage.Literals.LABEL_ACCESS__DEFINITION, Types._LabelAccess, 0);
		public static final @NonNull ExecutorProperty _LabelAccess__name = new EcoreExecutorProperty(AstmPackage.Literals.LABEL_ACCESS__NAME, Types._LabelAccess, 1);
		public static final @NonNull ExecutorProperty _LabelAccess__BreakStatement__target = new ExecutorPropertyWithImplementation("BreakStatement", Types._LabelAccess, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.BREAK_STATEMENT__TARGET));
		public static final @NonNull ExecutorProperty _LabelAccess__ContinueStatement__target = new ExecutorPropertyWithImplementation("ContinueStatement", Types._LabelAccess, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CONTINUE_STATEMENT__TARGET));

		public static final @NonNull ExecutorProperty _LabelDefinition__labelName = new EcoreExecutorProperty(AstmPackage.Literals.LABEL_DEFINITION__LABEL_NAME, Types._LabelDefinition, 0);
		public static final @NonNull ExecutorProperty _LabelDefinition__labelType = new EcoreExecutorProperty(AstmPackage.Literals.LABEL_DEFINITION__LABEL_TYPE, Types._LabelDefinition, 1);
		public static final @NonNull ExecutorProperty _LabelDefinition__LabelAccess__definition = new ExecutorPropertyWithImplementation("LabelAccess", Types._LabelDefinition, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LABEL_ACCESS__DEFINITION));
		public static final @NonNull ExecutorProperty _LabelDefinition__LabeledStatement__label = new ExecutorPropertyWithImplementation("LabeledStatement", Types._LabelDefinition, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LABELED_STATEMENT__LABEL));

		public static final @NonNull ExecutorProperty _LabelType__LabelDefinition__labelType = new ExecutorPropertyWithImplementation("LabelDefinition", Types._LabelType, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LABEL_DEFINITION__LABEL_TYPE));

		public static final @NonNull ExecutorProperty _LabeledStatement__label = new EcoreExecutorProperty(AstmPackage.Literals.LABELED_STATEMENT__LABEL, Types._LabeledStatement, 0);
		public static final @NonNull ExecutorProperty _LabeledStatement__statement = new EcoreExecutorProperty(AstmPackage.Literals.LABELED_STATEMENT__STATEMENT, Types._LabeledStatement, 1);

		public static final @NonNull ExecutorProperty _Literal__value = new EcoreExecutorProperty(AstmPackage.Literals.LITERAL__VALUE, Types._Literal, 0);

		public static final @NonNull ExecutorProperty _LoopStatement__body = new EcoreExecutorProperty(AstmPackage.Literals.LOOP_STATEMENT__BODY, Types._LoopStatement, 0);
		public static final @NonNull ExecutorProperty _LoopStatement__condition = new EcoreExecutorProperty(AstmPackage.Literals.LOOP_STATEMENT__CONDITION, Types._LoopStatement, 1);

		public static final @NonNull ExecutorProperty _MacroCall__refersTo = new EcoreExecutorProperty(AstmPackage.Literals.MACRO_CALL__REFERS_TO, Types._MacroCall, 0);

		public static final @NonNull ExecutorProperty _MacroDefinition__body = new EcoreExecutorProperty(AstmPackage.Literals.MACRO_DEFINITION__BODY, Types._MacroDefinition, 0);
		public static final @NonNull ExecutorProperty _MacroDefinition__macroName = new EcoreExecutorProperty(AstmPackage.Literals.MACRO_DEFINITION__MACRO_NAME, Types._MacroDefinition, 1);
		public static final @NonNull ExecutorProperty _MacroDefinition__MacroCall__refersTo = new ExecutorPropertyWithImplementation("MacroCall", Types._MacroDefinition, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.MACRO_CALL__REFERS_TO));

		public static final @NonNull ExecutorProperty _Name__nameString = new EcoreExecutorProperty(AstmPackage.Literals.NAME__NAME_STRING, Types._Name, 0);
		public static final @NonNull ExecutorProperty _Name__Declaration__identifierName = new ExecutorPropertyWithImplementation("Declaration", Types._Name, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DECLARATION__IDENTIFIER_NAME));
		public static final @NonNull ExecutorProperty _Name__Definition__identifierName = new ExecutorPropertyWithImplementation("Definition", Types._Name, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DEFINITION__IDENTIFIER_NAME));
		public static final @NonNull ExecutorProperty _Name__DelphiUnit__name = new ExecutorPropertyWithImplementation("DelphiUnit", Types._Name, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_UNIT__NAME));
		public static final @NonNull ExecutorProperty _Name__LabelAccess__name = new ExecutorPropertyWithImplementation("LabelAccess", Types._Name, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LABEL_ACCESS__NAME));
		public static final @NonNull ExecutorProperty _Name__LabelDefinition__labelName = new ExecutorPropertyWithImplementation("LabelDefinition", Types._Name, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LABEL_DEFINITION__LABEL_NAME));
		public static final @NonNull ExecutorProperty _Name__NameReference__name = new ExecutorPropertyWithImplementation("NameReference", Types._Name, 6, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAME_REFERENCE__NAME));
		public static final @NonNull ExecutorProperty _Name__NameSpaceDefinition__nameSpace = new ExecutorPropertyWithImplementation("NameSpaceDefinition", Types._Name, 7, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAME_SPACE_DEFINITION__NAME_SPACE));
		public static final @NonNull ExecutorProperty _Name__NamedTypeReference__name = new ExecutorPropertyWithImplementation("NamedTypeReference", Types._Name, 8, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAMED_TYPE_REFERENCE__NAME));
		public static final @NonNull ExecutorProperty _Name__TypeDefinition__name = new ExecutorPropertyWithImplementation("TypeDefinition", Types._Name, 9, new EcoreLibraryOppositeProperty(AstmPackage.Literals.TYPE_DEFINITION__NAME));

		public static final @NonNull ExecutorProperty _NameReference__name = new EcoreExecutorProperty(AstmPackage.Literals.NAME_REFERENCE__NAME, Types._NameReference, 0);
		public static final @NonNull ExecutorProperty _NameReference__refersTo = new EcoreExecutorProperty(AstmPackage.Literals.NAME_REFERENCE__REFERS_TO, Types._NameReference, 1);

		public static final @NonNull ExecutorProperty _NameSpaceDefinition__body = new EcoreExecutorProperty(AstmPackage.Literals.NAME_SPACE_DEFINITION__BODY, Types._NameSpaceDefinition, 0);
		public static final @NonNull ExecutorProperty _NameSpaceDefinition__nameSpace = new EcoreExecutorProperty(AstmPackage.Literals.NAME_SPACE_DEFINITION__NAME_SPACE, Types._NameSpaceDefinition, 1);
		public static final @NonNull ExecutorProperty _NameSpaceDefinition__nameSpaceType = new EcoreExecutorProperty(AstmPackage.Literals.NAME_SPACE_DEFINITION__NAME_SPACE_TYPE, Types._NameSpaceDefinition, 2);

		public static final @NonNull ExecutorProperty _NameSpaceType__NameSpaceDefinition__nameSpaceType = new ExecutorPropertyWithImplementation("NameSpaceDefinition", Types._NameSpaceType, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAME_SPACE_DEFINITION__NAME_SPACE_TYPE));

		public static final @NonNull ExecutorProperty _NamedType__body = new EcoreExecutorProperty(AstmPackage.Literals.NAMED_TYPE__BODY, Types._NamedType, 0);
		public static final @NonNull ExecutorProperty _NamedType__DerivesFrom__className = new ExecutorPropertyWithImplementation("DerivesFrom", Types._NamedType, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DERIVES_FROM__CLASS_NAME));
		public static final @NonNull ExecutorProperty _NamedType__NamedTypeDefinition__definitionType = new ExecutorPropertyWithImplementation("NamedTypeDefinition", Types._NamedType, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAMED_TYPE_DEFINITION__DEFINITION_TYPE));

		public static final @NonNull ExecutorProperty _NamedTypeDefinition__definitionType = new EcoreExecutorProperty(AstmPackage.Literals.NAMED_TYPE_DEFINITION__DEFINITION_TYPE, Types._NamedTypeDefinition, 0);

		public static final @NonNull ExecutorProperty _NamedTypeReference__name = new EcoreExecutorProperty(AstmPackage.Literals.NAMED_TYPE_REFERENCE__NAME, Types._NamedTypeReference, 0);
		public static final @NonNull ExecutorProperty _NamedTypeReference__type = new EcoreExecutorProperty(AstmPackage.Literals.NAMED_TYPE_REFERENCE__TYPE, Types._NamedTypeReference, 1);
		public static final @NonNull ExecutorProperty _NamedTypeReference__DelphiBlockStatement__exports = new ExecutorPropertyWithImplementation("DelphiBlockStatement", Types._NamedTypeReference, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_BLOCK_STATEMENT__EXPORTS));
		public static final @NonNull ExecutorProperty _NamedTypeReference__DelphiImplementationSection__exports = new ExecutorPropertyWithImplementation("DelphiImplementationSection", Types._NamedTypeReference, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_IMPLEMENTATION_SECTION__EXPORTS));
		public static final @NonNull ExecutorProperty _NamedTypeReference__DelphiImplementationSection__uses = new ExecutorPropertyWithImplementation("DelphiImplementationSection", Types._NamedTypeReference, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_IMPLEMENTATION_SECTION__USES));
		public static final @NonNull ExecutorProperty _NamedTypeReference__DelphiInterfaceSection__uses = new ExecutorPropertyWithImplementation("DelphiInterfaceSection", Types._NamedTypeReference, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DELPHI_INTERFACE_SECTION__USES));

		public static final @NonNull ExecutorProperty _NewExpression__actualParams = new EcoreExecutorProperty(AstmPackage.Literals.NEW_EXPRESSION__ACTUAL_PARAMS, Types._NewExpression, 0);
		public static final @NonNull ExecutorProperty _NewExpression__newType = new EcoreExecutorProperty(AstmPackage.Literals.NEW_EXPRESSION__NEW_TYPE, Types._NewExpression, 1);

		public static final @NonNull ExecutorProperty _OperatorAssign__operator = new EcoreExecutorProperty(AstmPackage.Literals.OPERATOR_ASSIGN__OPERATOR, Types._OperatorAssign, 0);

		public static final @NonNull ExecutorProperty _OtherSyntaxObject__BinaryExpression__operator = new ExecutorPropertyWithImplementation("BinaryExpression", Types._OtherSyntaxObject, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.BINARY_EXPRESSION__OPERATOR));
		public static final @NonNull ExecutorProperty _OtherSyntaxObject__DeclarationOrDefinition__accessKind = new ExecutorPropertyWithImplementation("DeclarationOrDefinition", Types._OtherSyntaxObject, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION__ACCESS_KIND));
		public static final @NonNull ExecutorProperty _OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers = new ExecutorPropertyWithImplementation("DeclarationOrDefinition", Types._OtherSyntaxObject, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DECLARATION_OR_DEFINITION__STORAGE_SPECIFIERS));
		public static final @NonNull ExecutorProperty _OtherSyntaxObject__DerivesFrom__accessKind = new ExecutorPropertyWithImplementation("DerivesFrom", Types._OtherSyntaxObject, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DERIVES_FROM__ACCESS_KIND));
		public static final @NonNull ExecutorProperty _OtherSyntaxObject__NewExpression__actualParams = new ExecutorPropertyWithImplementation("NewExpression", Types._OtherSyntaxObject, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NEW_EXPRESSION__ACTUAL_PARAMS));
		public static final @NonNull ExecutorProperty _OtherSyntaxObject__OperatorAssign__operator = new ExecutorPropertyWithImplementation("OperatorAssign", Types._OtherSyntaxObject, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.OPERATOR_ASSIGN__OPERATOR));
		public static final @NonNull ExecutorProperty _OtherSyntaxObject__UnaryExpression__operator = new ExecutorPropertyWithImplementation("UnaryExpression", Types._OtherSyntaxObject, 6, new EcoreLibraryOppositeProperty(AstmPackage.Literals.UNARY_EXPRESSION__OPERATOR));

		public static final @NonNull ExecutorProperty _PreprocessorElement__GASTMSyntaxObject__preProcessorElements = new ExecutorPropertyWithImplementation("GASTMSyntaxObject", Types._PreprocessorElement, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.GASTM_SYNTAX_OBJECT__PRE_PROCESSOR_ELEMENTS));

		public static final @NonNull ExecutorProperty _PrimitiveType__isSigned = new EcoreExecutorProperty(AstmPackage.Literals.PRIMITIVE_TYPE__IS_SIGNED, Types._PrimitiveType, 0);

		public static final @NonNull ExecutorProperty _ProgramScope__CompilationUnit__opensScope = new ExecutorPropertyWithImplementation("CompilationUnit", Types._ProgramScope, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.COMPILATION_UNIT__OPENS_SCOPE));

		public static final @NonNull ExecutorProperty _Project__files = new EcoreExecutorProperty(AstmPackage.Literals.PROJECT__FILES, Types._Project, 0);
		public static final @NonNull ExecutorProperty _Project__outerScope = new EcoreExecutorProperty(AstmPackage.Literals.PROJECT__OUTER_SCOPE, Types._Project, 1);

		public static final @NonNull ExecutorProperty _QualifiedIdentifierReference__member = new EcoreExecutorProperty(AstmPackage.Literals.QUALIFIED_IDENTIFIER_REFERENCE__MEMBER, Types._QualifiedIdentifierReference, 0);
		public static final @NonNull ExecutorProperty _QualifiedIdentifierReference__qualifiers = new EcoreExecutorProperty(AstmPackage.Literals.QUALIFIED_IDENTIFIER_REFERENCE__QUALIFIERS, Types._QualifiedIdentifierReference, 1);

		public static final @NonNull ExecutorProperty _RangeExpression__fromExpression = new EcoreExecutorProperty(AstmPackage.Literals.RANGE_EXPRESSION__FROM_EXPRESSION, Types._RangeExpression, 0);
		public static final @NonNull ExecutorProperty _RangeExpression__toExpression = new EcoreExecutorProperty(AstmPackage.Literals.RANGE_EXPRESSION__TO_EXPRESSION, Types._RangeExpression, 1);

		public static final @NonNull ExecutorProperty _ReturnStatement__returnValue = new EcoreExecutorProperty(AstmPackage.Literals.RETURN_STATEMENT__RETURN_VALUE, Types._ReturnStatement, 0);

		public static final @NonNull ExecutorProperty _Scope__childScope = new EcoreExecutorProperty(AstmPackage.Literals.SCOPE__CHILD_SCOPE, Types._Scope, 0);
		public static final @NonNull ExecutorProperty _Scope__definitionObject = new EcoreExecutorProperty(AstmPackage.Literals.SCOPE__DEFINITION_OBJECT, Types._Scope, 1);
		public static final @NonNull ExecutorProperty _Scope__Scope__childScope = new ExecutorPropertyWithImplementation("Scope", Types._Scope, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.SCOPE__CHILD_SCOPE));

		public static final @NonNull ExecutorProperty _SourceFile__pathName = new EcoreExecutorProperty(AstmPackage.Literals.SOURCE_FILE__PATH_NAME, Types._SourceFile, 0);
		public static final @NonNull ExecutorProperty _SourceFile__IncludeUnit__file = new ExecutorPropertyWithImplementation("IncludeUnit", Types._SourceFile, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.INCLUDE_UNIT__FILE));
		public static final @NonNull ExecutorProperty _SourceFile__SourceLocation__inSourceFile = new ExecutorPropertyWithImplementation("SourceLocation", Types._SourceFile, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.SOURCE_LOCATION__IN_SOURCE_FILE));

		public static final @NonNull ExecutorProperty _SourceLocation__endColumn = new EcoreExecutorProperty(AstmPackage.Literals.SOURCE_LOCATION__END_COLUMN, Types._SourceLocation, 0);
		public static final @NonNull ExecutorProperty _SourceLocation__endLine = new EcoreExecutorProperty(AstmPackage.Literals.SOURCE_LOCATION__END_LINE, Types._SourceLocation, 1);
		public static final @NonNull ExecutorProperty _SourceLocation__inSourceFile = new EcoreExecutorProperty(AstmPackage.Literals.SOURCE_LOCATION__IN_SOURCE_FILE, Types._SourceLocation, 2);
		public static final @NonNull ExecutorProperty _SourceLocation__startColumn = new EcoreExecutorProperty(AstmPackage.Literals.SOURCE_LOCATION__START_COLUMN, Types._SourceLocation, 3);
		public static final @NonNull ExecutorProperty _SourceLocation__startLine = new EcoreExecutorProperty(AstmPackage.Literals.SOURCE_LOCATION__START_LINE, Types._SourceLocation, 4);
		public static final @NonNull ExecutorProperty _SourceLocation__GASTMSyntaxObject__locationInfo = new ExecutorPropertyWithImplementation("GASTMSyntaxObject", Types._SourceLocation, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.GASTM_SYNTAX_OBJECT__LOCATION_INFO));

		public static final @NonNull ExecutorProperty _SpecificTriggerDefinition__body = new EcoreExecutorProperty(AstmPackage.Literals.SPECIFIC_TRIGGER_DEFINITION__BODY, Types._SpecificTriggerDefinition, 0);

		public static final @NonNull ExecutorProperty _Statement__BlockStatement__subStatements = new ExecutorPropertyWithImplementation("BlockStatement", Types._Statement, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.BLOCK_STATEMENT__SUB_STATEMENTS));
		public static final @NonNull ExecutorProperty _Statement__CatchBlock__body = new ExecutorPropertyWithImplementation("CatchBlock", Types._Statement, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CATCH_BLOCK__BODY));
		public static final @NonNull ExecutorProperty _Statement__EntryDefinition__body = new ExecutorPropertyWithImplementation("EntryDefinition", Types._Statement, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ENTRY_DEFINITION__BODY));
		public static final @NonNull ExecutorProperty _Statement__FunctionDefinition__body = new ExecutorPropertyWithImplementation("FunctionDefinition", Types._Statement, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DEFINITION__BODY));
		public static final @NonNull ExecutorProperty _Statement__IfStatement__elseBody = new ExecutorPropertyWithImplementation("IfStatement", Types._Statement, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.IF_STATEMENT__ELSE_BODY));
		public static final @NonNull ExecutorProperty _Statement__IfStatement__thenBody = new ExecutorPropertyWithImplementation("IfStatement", Types._Statement, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.IF_STATEMENT__THEN_BODY));
		public static final @NonNull ExecutorProperty _Statement__LabeledStatement__statement = new ExecutorPropertyWithImplementation("LabeledStatement", Types._Statement, 6, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LABELED_STATEMENT__STATEMENT));
		public static final @NonNull ExecutorProperty _Statement__LoopStatement__body = new ExecutorPropertyWithImplementation("LoopStatement", Types._Statement, 7, new EcoreLibraryOppositeProperty(AstmPackage.Literals.LOOP_STATEMENT__BODY));
		public static final @NonNull ExecutorProperty _Statement__SpecificTriggerDefinition__body = new ExecutorPropertyWithImplementation("SpecificTriggerDefinition", Types._Statement, 8, new EcoreLibraryOppositeProperty(AstmPackage.Literals.SPECIFIC_TRIGGER_DEFINITION__BODY));
		public static final @NonNull ExecutorProperty _Statement__SwitchCase__body = new ExecutorPropertyWithImplementation("SwitchCase", Types._Statement, 9, new EcoreLibraryOppositeProperty(AstmPackage.Literals.SWITCH_CASE__BODY));
		public static final @NonNull ExecutorProperty _Statement__TryStatement__finalStatement = new ExecutorPropertyWithImplementation("TryStatement", Types._Statement, 10, new EcoreLibraryOppositeProperty(AstmPackage.Literals.TRY_STATEMENT__FINAL_STATEMENT));
		public static final @NonNull ExecutorProperty _Statement__TryStatement__guardedStatement = new ExecutorPropertyWithImplementation("TryStatement", Types._Statement, 11, new EcoreLibraryOppositeProperty(AstmPackage.Literals.TRY_STATEMENT__GUARDED_STATEMENT));

		public static final @NonNull ExecutorProperty _SwitchCase__body = new EcoreExecutorProperty(AstmPackage.Literals.SWITCH_CASE__BODY, Types._SwitchCase, 0);
		public static final @NonNull ExecutorProperty _SwitchCase__SwitchStatement__cases = new ExecutorPropertyWithImplementation("SwitchStatement", Types._SwitchCase, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.SWITCH_STATEMENT__CASES));

		public static final @NonNull ExecutorProperty _SwitchStatement__cases = new EcoreExecutorProperty(AstmPackage.Literals.SWITCH_STATEMENT__CASES, Types._SwitchStatement, 0);
		public static final @NonNull ExecutorProperty _SwitchStatement__switchExpression = new EcoreExecutorProperty(AstmPackage.Literals.SWITCH_STATEMENT__SWITCH_EXPRESSION, Types._SwitchStatement, 1);

		public static final @NonNull ExecutorProperty _ThrowStatement__exception = new EcoreExecutorProperty(AstmPackage.Literals.THROW_STATEMENT__EXCEPTION, Types._ThrowStatement, 0);

		public static final @NonNull ExecutorProperty _TryStatement__catchBlocks = new EcoreExecutorProperty(AstmPackage.Literals.TRY_STATEMENT__CATCH_BLOCKS, Types._TryStatement, 0);
		public static final @NonNull ExecutorProperty _TryStatement__finalStatement = new EcoreExecutorProperty(AstmPackage.Literals.TRY_STATEMENT__FINAL_STATEMENT, Types._TryStatement, 1);
		public static final @NonNull ExecutorProperty _TryStatement__guardedStatement = new EcoreExecutorProperty(AstmPackage.Literals.TRY_STATEMENT__GUARDED_STATEMENT, Types._TryStatement, 2);

		public static final @NonNull ExecutorProperty _Type__isConst = new EcoreExecutorProperty(AstmPackage.Literals.TYPE__IS_CONST, Types._Type, 0);
		public static final @NonNull ExecutorProperty _Type__isVolatile = new EcoreExecutorProperty(AstmPackage.Literals.TYPE__IS_VOLATILE, Types._Type, 1);
		public static final @NonNull ExecutorProperty _Type__NamedType__body = new ExecutorPropertyWithImplementation("NamedType", Types._Type, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAMED_TYPE__BODY));
		public static final @NonNull ExecutorProperty _Type__TypesCatchBlock__exceptions = new ExecutorPropertyWithImplementation("TypesCatchBlock", Types._Type, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.TYPES_CATCH_BLOCK__EXCEPTIONS));
		public static final @NonNull ExecutorProperty _Type__UnnamedTypeReference__type = new ExecutorPropertyWithImplementation("UnnamedTypeReference", Types._Type, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.UNNAMED_TYPE_REFERENCE__TYPE));

		public static final @NonNull ExecutorProperty _TypeDefinition__name = new EcoreExecutorProperty(AstmPackage.Literals.TYPE_DEFINITION__NAME, Types._TypeDefinition, 0);
		public static final @NonNull ExecutorProperty _TypeDefinition__NamedTypeReference__type = new ExecutorPropertyWithImplementation("NamedTypeReference", Types._TypeDefinition, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NAMED_TYPE_REFERENCE__TYPE));

		public static final @NonNull ExecutorProperty _TypeQualifiedIdentifierReference__aggregateType = new EcoreExecutorProperty(AstmPackage.Literals.TYPE_QUALIFIED_IDENTIFIER_REFERENCE__AGGREGATE_TYPE, Types._TypeQualifiedIdentifierReference, 0);
		public static final @NonNull ExecutorProperty _TypeQualifiedIdentifierReference__member = new EcoreExecutorProperty(AstmPackage.Literals.TYPE_QUALIFIED_IDENTIFIER_REFERENCE__MEMBER, Types._TypeQualifiedIdentifierReference, 1);

		public static final @NonNull ExecutorProperty _TypeReference__AnnotationExpression__annotationType = new ExecutorPropertyWithImplementation("AnnotationExpression", Types._TypeReference, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.ANNOTATION_EXPRESSION__ANNOTATION_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__CastExpression__castType = new ExecutorPropertyWithImplementation("CastExpression", Types._TypeReference, 1, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CAST_EXPRESSION__CAST_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__ConstructedType__baseType = new ExecutorPropertyWithImplementation("ConstructedType", Types._TypeReference, 2, new EcoreLibraryOppositeProperty(AstmPackage.Literals.CONSTRUCTED_TYPE__BASE_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__Declaration__declarationType = new ExecutorPropertyWithImplementation("Declaration", Types._TypeReference, 3, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DECLARATION__DECLARATION_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__Definition__definitionType = new ExecutorPropertyWithImplementation("Definition", Types._TypeReference, 4, new EcoreLibraryOppositeProperty(AstmPackage.Literals.DEFINITION__DEFINITION_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__Expression__expressionType = new ExecutorPropertyWithImplementation("Expression", Types._TypeReference, 5, new EcoreLibraryOppositeProperty(AstmPackage.Literals.EXPRESSION__EXPRESSION_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__FormalParameterType__type = new ExecutorPropertyWithImplementation("FormalParameterType", Types._TypeReference, 6, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FORMAL_PARAMETER_TYPE__TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__FunctionDeclaration__returnType = new ExecutorPropertyWithImplementation("FunctionDeclaration", Types._TypeReference, 7, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DECLARATION__RETURN_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__FunctionDefinition__returnType = new ExecutorPropertyWithImplementation("FunctionDefinition", Types._TypeReference, 8, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_DEFINITION__RETURN_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__FunctionType__returnType = new ExecutorPropertyWithImplementation("FunctionType", Types._TypeReference, 9, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_TYPE__RETURN_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__NewExpression__newType = new ExecutorPropertyWithImplementation("NewExpression", Types._TypeReference, 10, new EcoreLibraryOppositeProperty(AstmPackage.Literals.NEW_EXPRESSION__NEW_TYPE));
		public static final @NonNull ExecutorProperty _TypeReference__TypeQualifiedIdentifierReference__aggregateType = new ExecutorPropertyWithImplementation("TypeQualifiedIdentifierReference", Types._TypeReference, 11, new EcoreLibraryOppositeProperty(AstmPackage.Literals.TYPE_QUALIFIED_IDENTIFIER_REFERENCE__AGGREGATE_TYPE));

		public static final @NonNull ExecutorProperty _TypesCatchBlock__exceptions = new EcoreExecutorProperty(AstmPackage.Literals.TYPES_CATCH_BLOCK__EXCEPTIONS, Types._TypesCatchBlock, 0);

		public static final @NonNull ExecutorProperty _UnaryExpression__operand = new EcoreExecutorProperty(AstmPackage.Literals.UNARY_EXPRESSION__OPERAND, Types._UnaryExpression, 0);
		public static final @NonNull ExecutorProperty _UnaryExpression__operator = new EcoreExecutorProperty(AstmPackage.Literals.UNARY_EXPRESSION__OPERATOR, Types._UnaryExpression, 1);

		public static final @NonNull ExecutorProperty _UnnamedTypeReference__type = new EcoreExecutorProperty(AstmPackage.Literals.UNNAMED_TYPE_REFERENCE__TYPE, Types._UnnamedTypeReference, 0);

		public static final @NonNull ExecutorProperty _VariableCatchBlock__exceptionVariable = new EcoreExecutorProperty(AstmPackage.Literals.VARIABLE_CATCH_BLOCK__EXCEPTION_VARIABLE, Types._VariableCatchBlock, 0);

		public static final @NonNull ExecutorProperty _VariableDeclaration__isMutable = new EcoreExecutorProperty(AstmPackage.Literals.VARIABLE_DECLARATION__IS_MUTABLE, Types._VariableDeclaration, 0);

		public static final @NonNull ExecutorProperty _VirtualSpecification__FunctionMemberAttributes__virtualSpecifier = new ExecutorPropertyWithImplementation("FunctionMemberAttributes", Types._VirtualSpecification, 0, new EcoreLibraryOppositeProperty(AstmPackage.Literals.FUNCTION_MEMBER_ATTRIBUTES__VIRTUAL_SPECIFIER));
		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::Properties and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The fragments for all base types in depth order: OclAny first, OclSelf last.
	 */
	public static class TypeFragments {
		static {
			Init.initStart();
			Properties.init();
		}

		private static final @NonNull ExecutorFragment @NonNull [] _AccessKind =
		{
			Fragments._AccessKind__OclAny /* 0 */,
			Fragments._AccessKind__OclElement /* 1 */,
			Fragments._AccessKind__Visitable /* 2 */,
			Fragments._AccessKind__AccessKind /* 3 */
		};
		private static final int @NonNull [] __AccessKind = { 1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ActualParameter =
		{
			Fragments._ActualParameter__OclAny /* 0 */,
			Fragments._ActualParameter__OclElement /* 1 */,
			Fragments._ActualParameter__Visitable /* 2 */,
			Fragments._ActualParameter__ActualParameter /* 3 */
		};
		private static final int @NonNull [] __ActualParameter = { 1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ActualParameterExpression =
		{
			Fragments._ActualParameterExpression__OclAny /* 0 */,
			Fragments._ActualParameterExpression__OclElement /* 1 */,
			Fragments._ActualParameterExpression__Visitable /* 2 */,
			Fragments._ActualParameterExpression__ActualParameter /* 3 */,
			Fragments._ActualParameterExpression__ActualParameterExpression /* 4 */
		};
		private static final int @NonNull [] __ActualParameterExpression = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Add =
		{
			Fragments._Add__OclAny /* 0 */,
			Fragments._Add__OclElement /* 1 */,
			Fragments._Add__Visitable /* 2 */,
			Fragments._Add__GASTMObject /* 3 */,
			Fragments._Add__GASTMSyntaxObject /* 4 */,
			Fragments._Add__OtherSyntaxObject /* 5 */,
			Fragments._Add__Operator /* 6 */,
			Fragments._Add__BinaryOperator /* 7 */,
			Fragments._Add__Add /* 8 */
		};
		private static final int @NonNull [] __Add = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _AddressOf =
		{
			Fragments._AddressOf__OclAny /* 0 */,
			Fragments._AddressOf__OclElement /* 1 */,
			Fragments._AddressOf__Visitable /* 2 */,
			Fragments._AddressOf__GASTMObject /* 3 */,
			Fragments._AddressOf__GASTMSyntaxObject /* 4 */,
			Fragments._AddressOf__OtherSyntaxObject /* 5 */,
			Fragments._AddressOf__Operator /* 6 */,
			Fragments._AddressOf__UnaryOperator /* 7 */,
			Fragments._AddressOf__AddressOf /* 8 */
		};
		private static final int @NonNull [] __AddressOf = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _AggregateExpression =
		{
			Fragments._AggregateExpression__OclAny /* 0 */,
			Fragments._AggregateExpression__OclElement /* 1 */,
			Fragments._AggregateExpression__Visitable /* 2 */,
			Fragments._AggregateExpression__GASTMObject /* 3 */,
			Fragments._AggregateExpression__GASTMSyntaxObject /* 4 */,
			Fragments._AggregateExpression__Expression /* 5 */,
			Fragments._AggregateExpression__AggregateExpression /* 6 */
		};
		private static final int @NonNull [] __AggregateExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _AggregateScope =
		{
			Fragments._AggregateScope__OclAny /* 0 */,
			Fragments._AggregateScope__OclElement /* 1 */,
			Fragments._AggregateScope__Visitable /* 2 */,
			Fragments._AggregateScope__GASTMSemanticObject /* 3 */,
			Fragments._AggregateScope__Scope /* 4 */,
			Fragments._AggregateScope__AggregateScope /* 5 */
		};
		private static final int @NonNull [] __AggregateScope = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _AggregateType =
		{
			Fragments._AggregateType__OclAny /* 0 */,
			Fragments._AggregateType__OclElement /* 1 */,
			Fragments._AggregateType__Visitable /* 2 */,
			Fragments._AggregateType__GASTMObject /* 3 */,
			Fragments._AggregateType__GASTMSyntaxObject /* 4 */,
			Fragments._AggregateType__Type /* 5 */,
			Fragments._AggregateType__DataType /* 6 */,
			Fragments._AggregateType__AggregateType /* 7 */
		};
		private static final int @NonNull [] __AggregateType = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _AggregateTypeDefinition =
		{
			Fragments._AggregateTypeDefinition__OclAny /* 0 */,
			Fragments._AggregateTypeDefinition__OclElement /* 1 */,
			Fragments._AggregateTypeDefinition__Visitable /* 2 */,
			Fragments._AggregateTypeDefinition__GASTMObject /* 3 */,
			Fragments._AggregateTypeDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._AggregateTypeDefinition__DefinitionObject /* 5 */,
			Fragments._AggregateTypeDefinition__TypeDefinition /* 6 */,
			Fragments._AggregateTypeDefinition__AggregateTypeDefinition /* 7 */
		};
		private static final int @NonNull [] __AggregateTypeDefinition = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _And =
		{
			Fragments._And__OclAny /* 0 */,
			Fragments._And__OclElement /* 1 */,
			Fragments._And__Visitable /* 2 */,
			Fragments._And__GASTMObject /* 3 */,
			Fragments._And__GASTMSyntaxObject /* 4 */,
			Fragments._And__OtherSyntaxObject /* 5 */,
			Fragments._And__Operator /* 6 */,
			Fragments._And__BinaryOperator /* 7 */,
			Fragments._And__And /* 8 */
		};
		private static final int @NonNull [] __And = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _AnnotationExpression =
		{
			Fragments._AnnotationExpression__OclAny /* 0 */,
			Fragments._AnnotationExpression__OclElement /* 1 */,
			Fragments._AnnotationExpression__Visitable /* 2 */,
			Fragments._AnnotationExpression__GASTMObject /* 3 */,
			Fragments._AnnotationExpression__GASTMSyntaxObject /* 4 */,
			Fragments._AnnotationExpression__Expression /* 5 */,
			Fragments._AnnotationExpression__AnnotationExpression /* 6 */
		};
		private static final int @NonNull [] __AnnotationExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _AnnotationType =
		{
			Fragments._AnnotationType__OclAny /* 0 */,
			Fragments._AnnotationType__OclElement /* 1 */,
			Fragments._AnnotationType__Visitable /* 2 */,
			Fragments._AnnotationType__GASTMObject /* 3 */,
			Fragments._AnnotationType__GASTMSyntaxObject /* 4 */,
			Fragments._AnnotationType__Type /* 5 */,
			Fragments._AnnotationType__DataType /* 6 */,
			Fragments._AnnotationType__AggregateType /* 7 */,
			Fragments._AnnotationType__AnnotationType /* 8 */
		};
		private static final int @NonNull [] __AnnotationType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ArrayAccess =
		{
			Fragments._ArrayAccess__OclAny /* 0 */,
			Fragments._ArrayAccess__OclElement /* 1 */,
			Fragments._ArrayAccess__Visitable /* 2 */,
			Fragments._ArrayAccess__GASTMObject /* 3 */,
			Fragments._ArrayAccess__GASTMSyntaxObject /* 4 */,
			Fragments._ArrayAccess__Expression /* 5 */,
			Fragments._ArrayAccess__ArrayAccess /* 6 */
		};
		private static final int @NonNull [] __ArrayAccess = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ArrayType =
		{
			Fragments._ArrayType__OclAny /* 0 */,
			Fragments._ArrayType__OclElement /* 1 */,
			Fragments._ArrayType__Visitable /* 2 */,
			Fragments._ArrayType__GASTMObject /* 3 */,
			Fragments._ArrayType__GASTMSyntaxObject /* 4 */,
			Fragments._ArrayType__Type /* 5 */,
			Fragments._ArrayType__DataType /* 6 */,
			Fragments._ArrayType__ConstructedType /* 7 */,
			Fragments._ArrayType__ArrayType /* 8 */
		};
		private static final int @NonNull [] __ArrayType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Assign =
		{
			Fragments._Assign__OclAny /* 0 */,
			Fragments._Assign__OclElement /* 1 */,
			Fragments._Assign__Visitable /* 2 */,
			Fragments._Assign__GASTMObject /* 3 */,
			Fragments._Assign__GASTMSyntaxObject /* 4 */,
			Fragments._Assign__OtherSyntaxObject /* 5 */,
			Fragments._Assign__Operator /* 6 */,
			Fragments._Assign__BinaryOperator /* 7 */,
			Fragments._Assign__Assign /* 8 */
		};
		private static final int @NonNull [] __Assign = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BinaryExpression =
		{
			Fragments._BinaryExpression__OclAny /* 0 */,
			Fragments._BinaryExpression__OclElement /* 1 */,
			Fragments._BinaryExpression__Visitable /* 2 */,
			Fragments._BinaryExpression__GASTMObject /* 3 */,
			Fragments._BinaryExpression__GASTMSyntaxObject /* 4 */,
			Fragments._BinaryExpression__Expression /* 5 */,
			Fragments._BinaryExpression__BinaryExpression /* 6 */
		};
		private static final int @NonNull [] __BinaryExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BinaryOperator =
		{
			Fragments._BinaryOperator__OclAny /* 0 */,
			Fragments._BinaryOperator__OclElement /* 1 */,
			Fragments._BinaryOperator__Visitable /* 2 */,
			Fragments._BinaryOperator__GASTMObject /* 3 */,
			Fragments._BinaryOperator__GASTMSyntaxObject /* 4 */,
			Fragments._BinaryOperator__OtherSyntaxObject /* 5 */,
			Fragments._BinaryOperator__Operator /* 6 */,
			Fragments._BinaryOperator__BinaryOperator /* 7 */
		};
		private static final int @NonNull [] __BinaryOperator = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitAnd =
		{
			Fragments._BitAnd__OclAny /* 0 */,
			Fragments._BitAnd__OclElement /* 1 */,
			Fragments._BitAnd__Visitable /* 2 */,
			Fragments._BitAnd__GASTMObject /* 3 */,
			Fragments._BitAnd__GASTMSyntaxObject /* 4 */,
			Fragments._BitAnd__OtherSyntaxObject /* 5 */,
			Fragments._BitAnd__Operator /* 6 */,
			Fragments._BitAnd__BinaryOperator /* 7 */,
			Fragments._BitAnd__BitAnd /* 8 */
		};
		private static final int @NonNull [] __BitAnd = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitFieldDefinition =
		{
			Fragments._BitFieldDefinition__OclAny /* 0 */,
			Fragments._BitFieldDefinition__OclElement /* 1 */,
			Fragments._BitFieldDefinition__Visitable /* 2 */,
			Fragments._BitFieldDefinition__GASTMObject /* 3 */,
			Fragments._BitFieldDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._BitFieldDefinition__DefinitionObject /* 5 */,
			Fragments._BitFieldDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._BitFieldDefinition__Definition /* 7 */,
			Fragments._BitFieldDefinition__DataDefinition /* 8 */,
			Fragments._BitFieldDefinition__BitFieldDefinition /* 9 */
		};
		private static final int @NonNull [] __BitFieldDefinition = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitLeftShift =
		{
			Fragments._BitLeftShift__OclAny /* 0 */,
			Fragments._BitLeftShift__OclElement /* 1 */,
			Fragments._BitLeftShift__Visitable /* 2 */,
			Fragments._BitLeftShift__GASTMObject /* 3 */,
			Fragments._BitLeftShift__GASTMSyntaxObject /* 4 */,
			Fragments._BitLeftShift__OtherSyntaxObject /* 5 */,
			Fragments._BitLeftShift__Operator /* 6 */,
			Fragments._BitLeftShift__BinaryOperator /* 7 */,
			Fragments._BitLeftShift__BitLeftShift /* 8 */
		};
		private static final int @NonNull [] __BitLeftShift = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitLiteral =
		{
			Fragments._BitLiteral__OclAny /* 0 */,
			Fragments._BitLiteral__OclElement /* 1 */,
			Fragments._BitLiteral__Visitable /* 2 */,
			Fragments._BitLiteral__GASTMObject /* 3 */,
			Fragments._BitLiteral__GASTMSyntaxObject /* 4 */,
			Fragments._BitLiteral__Expression /* 5 */,
			Fragments._BitLiteral__Literal /* 6 */,
			Fragments._BitLiteral__BitLiteral /* 7 */
		};
		private static final int @NonNull [] __BitLiteral = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitNot =
		{
			Fragments._BitNot__OclAny /* 0 */,
			Fragments._BitNot__OclElement /* 1 */,
			Fragments._BitNot__Visitable /* 2 */,
			Fragments._BitNot__GASTMObject /* 3 */,
			Fragments._BitNot__GASTMSyntaxObject /* 4 */,
			Fragments._BitNot__OtherSyntaxObject /* 5 */,
			Fragments._BitNot__Operator /* 6 */,
			Fragments._BitNot__UnaryOperator /* 7 */,
			Fragments._BitNot__BitNot /* 8 */
		};
		private static final int @NonNull [] __BitNot = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitOr =
		{
			Fragments._BitOr__OclAny /* 0 */,
			Fragments._BitOr__OclElement /* 1 */,
			Fragments._BitOr__Visitable /* 2 */,
			Fragments._BitOr__GASTMObject /* 3 */,
			Fragments._BitOr__GASTMSyntaxObject /* 4 */,
			Fragments._BitOr__OtherSyntaxObject /* 5 */,
			Fragments._BitOr__Operator /* 6 */,
			Fragments._BitOr__BinaryOperator /* 7 */,
			Fragments._BitOr__BitOr /* 8 */
		};
		private static final int @NonNull [] __BitOr = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitRightShift =
		{
			Fragments._BitRightShift__OclAny /* 0 */,
			Fragments._BitRightShift__OclElement /* 1 */,
			Fragments._BitRightShift__Visitable /* 2 */,
			Fragments._BitRightShift__GASTMObject /* 3 */,
			Fragments._BitRightShift__GASTMSyntaxObject /* 4 */,
			Fragments._BitRightShift__OtherSyntaxObject /* 5 */,
			Fragments._BitRightShift__Operator /* 6 */,
			Fragments._BitRightShift__BinaryOperator /* 7 */,
			Fragments._BitRightShift__BitRightShift /* 8 */
		};
		private static final int @NonNull [] __BitRightShift = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BitXor =
		{
			Fragments._BitXor__OclAny /* 0 */,
			Fragments._BitXor__OclElement /* 1 */,
			Fragments._BitXor__Visitable /* 2 */,
			Fragments._BitXor__GASTMObject /* 3 */,
			Fragments._BitXor__GASTMSyntaxObject /* 4 */,
			Fragments._BitXor__OtherSyntaxObject /* 5 */,
			Fragments._BitXor__Operator /* 6 */,
			Fragments._BitXor__BinaryOperator /* 7 */,
			Fragments._BitXor__BitXor /* 8 */
		};
		private static final int @NonNull [] __BitXor = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BlockScope =
		{
			Fragments._BlockScope__OclAny /* 0 */,
			Fragments._BlockScope__OclElement /* 1 */,
			Fragments._BlockScope__Visitable /* 2 */,
			Fragments._BlockScope__GASTMSemanticObject /* 3 */,
			Fragments._BlockScope__Scope /* 4 */,
			Fragments._BlockScope__BlockScope /* 5 */
		};
		private static final int @NonNull [] __BlockScope = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BlockStatement =
		{
			Fragments._BlockStatement__OclAny /* 0 */,
			Fragments._BlockStatement__OclElement /* 1 */,
			Fragments._BlockStatement__Visitable /* 2 */,
			Fragments._BlockStatement__GASTMObject /* 3 */,
			Fragments._BlockStatement__GASTMSyntaxObject /* 4 */,
			Fragments._BlockStatement__Statement /* 5 */,
			Fragments._BlockStatement__BlockStatement /* 6 */
		};
		private static final int @NonNull [] __BlockStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Boolean =
		{
			Fragments._Boolean__OclAny /* 0 */,
			Fragments._Boolean__OclElement /* 1 */,
			Fragments._Boolean__Visitable /* 2 */,
			Fragments._Boolean__GASTMObject /* 3 */,
			Fragments._Boolean__GASTMSyntaxObject /* 4 */,
			Fragments._Boolean__Type /* 5 */,
			Fragments._Boolean__DataType /* 6 */,
			Fragments._Boolean__PrimitiveType /* 7 */,
			Fragments._Boolean__Boolean /* 8 */
		};
		private static final int @NonNull [] __Boolean = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BooleanLiteral =
		{
			Fragments._BooleanLiteral__OclAny /* 0 */,
			Fragments._BooleanLiteral__OclElement /* 1 */,
			Fragments._BooleanLiteral__Visitable /* 2 */,
			Fragments._BooleanLiteral__GASTMObject /* 3 */,
			Fragments._BooleanLiteral__GASTMSyntaxObject /* 4 */,
			Fragments._BooleanLiteral__Expression /* 5 */,
			Fragments._BooleanLiteral__Literal /* 6 */,
			Fragments._BooleanLiteral__BooleanLiteral /* 7 */
		};
		private static final int @NonNull [] __BooleanLiteral = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _BreakStatement =
		{
			Fragments._BreakStatement__OclAny /* 0 */,
			Fragments._BreakStatement__OclElement /* 1 */,
			Fragments._BreakStatement__Visitable /* 2 */,
			Fragments._BreakStatement__GASTMObject /* 3 */,
			Fragments._BreakStatement__GASTMSyntaxObject /* 4 */,
			Fragments._BreakStatement__Statement /* 5 */,
			Fragments._BreakStatement__BreakStatement /* 6 */
		};
		private static final int @NonNull [] __BreakStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ByReferenceActualParameterExpression =
		{
			Fragments._ByReferenceActualParameterExpression__OclAny /* 0 */,
			Fragments._ByReferenceActualParameterExpression__OclElement /* 1 */,
			Fragments._ByReferenceActualParameterExpression__Visitable /* 2 */,
			Fragments._ByReferenceActualParameterExpression__ActualParameter /* 3 */,
			Fragments._ByReferenceActualParameterExpression__ActualParameterExpression /* 4 */,
			Fragments._ByReferenceActualParameterExpression__ByReferenceActualParameterExpression /* 5 */
		};
		private static final int @NonNull [] __ByReferenceActualParameterExpression = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ByReferenceFormalParameterType =
		{
			Fragments._ByReferenceFormalParameterType__OclAny /* 0 */,
			Fragments._ByReferenceFormalParameterType__OclElement /* 1 */,
			Fragments._ByReferenceFormalParameterType__Visitable /* 2 */,
			Fragments._ByReferenceFormalParameterType__GASTMObject /* 3 */,
			Fragments._ByReferenceFormalParameterType__GASTMSyntaxObject /* 4 */,
			Fragments._ByReferenceFormalParameterType__Type /* 5 */,
			Fragments._ByReferenceFormalParameterType__DataType /* 6 */,
			Fragments._ByReferenceFormalParameterType__FormalParameterType /* 7 */,
			Fragments._ByReferenceFormalParameterType__ByReferenceFormalParameterType /* 8 */
		};
		private static final int @NonNull [] __ByReferenceFormalParameterType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ByValueActualParameterExpression =
		{
			Fragments._ByValueActualParameterExpression__OclAny /* 0 */,
			Fragments._ByValueActualParameterExpression__OclElement /* 1 */,
			Fragments._ByValueActualParameterExpression__Visitable /* 2 */,
			Fragments._ByValueActualParameterExpression__ActualParameter /* 3 */,
			Fragments._ByValueActualParameterExpression__ActualParameterExpression /* 4 */,
			Fragments._ByValueActualParameterExpression__ByValueActualParameterExpression /* 5 */
		};
		private static final int @NonNull [] __ByValueActualParameterExpression = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ByValueFormalParameterType =
		{
			Fragments._ByValueFormalParameterType__OclAny /* 0 */,
			Fragments._ByValueFormalParameterType__OclElement /* 1 */,
			Fragments._ByValueFormalParameterType__Visitable /* 2 */,
			Fragments._ByValueFormalParameterType__GASTMObject /* 3 */,
			Fragments._ByValueFormalParameterType__GASTMSyntaxObject /* 4 */,
			Fragments._ByValueFormalParameterType__Type /* 5 */,
			Fragments._ByValueFormalParameterType__DataType /* 6 */,
			Fragments._ByValueFormalParameterType__FormalParameterType /* 7 */,
			Fragments._ByValueFormalParameterType__ByValueFormalParameterType /* 8 */
		};
		private static final int @NonNull [] __ByValueFormalParameterType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Byte =
		{
			Fragments._Byte__OclAny /* 0 */,
			Fragments._Byte__OclElement /* 1 */,
			Fragments._Byte__Visitable /* 2 */,
			Fragments._Byte__GASTMObject /* 3 */,
			Fragments._Byte__GASTMSyntaxObject /* 4 */,
			Fragments._Byte__Type /* 5 */,
			Fragments._Byte__DataType /* 6 */,
			Fragments._Byte__PrimitiveType /* 7 */,
			Fragments._Byte__Byte /* 8 */
		};
		private static final int @NonNull [] __Byte = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _CaseBlock =
		{
			Fragments._CaseBlock__OclAny /* 0 */,
			Fragments._CaseBlock__OclElement /* 1 */,
			Fragments._CaseBlock__Visitable /* 2 */,
			Fragments._CaseBlock__GASTMObject /* 3 */,
			Fragments._CaseBlock__GASTMSyntaxObject /* 4 */,
			Fragments._CaseBlock__OtherSyntaxObject /* 5 */,
			Fragments._CaseBlock__SwitchCase /* 6 */,
			Fragments._CaseBlock__CaseBlock /* 7 */
		};
		private static final int @NonNull [] __CaseBlock = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _CastExpression =
		{
			Fragments._CastExpression__OclAny /* 0 */,
			Fragments._CastExpression__OclElement /* 1 */,
			Fragments._CastExpression__Visitable /* 2 */,
			Fragments._CastExpression__GASTMObject /* 3 */,
			Fragments._CastExpression__GASTMSyntaxObject /* 4 */,
			Fragments._CastExpression__Expression /* 5 */,
			Fragments._CastExpression__CastExpression /* 6 */
		};
		private static final int @NonNull [] __CastExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _CatchBlock =
		{
			Fragments._CatchBlock__OclAny /* 0 */,
			Fragments._CatchBlock__OclElement /* 1 */,
			Fragments._CatchBlock__Visitable /* 2 */,
			Fragments._CatchBlock__GASTMObject /* 3 */,
			Fragments._CatchBlock__GASTMSyntaxObject /* 4 */,
			Fragments._CatchBlock__OtherSyntaxObject /* 5 */,
			Fragments._CatchBlock__CatchBlock /* 6 */
		};
		private static final int @NonNull [] __CatchBlock = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _CharLiteral =
		{
			Fragments._CharLiteral__OclAny /* 0 */,
			Fragments._CharLiteral__OclElement /* 1 */,
			Fragments._CharLiteral__Visitable /* 2 */,
			Fragments._CharLiteral__GASTMObject /* 3 */,
			Fragments._CharLiteral__GASTMSyntaxObject /* 4 */,
			Fragments._CharLiteral__Expression /* 5 */,
			Fragments._CharLiteral__Literal /* 6 */,
			Fragments._CharLiteral__CharLiteral /* 7 */
		};
		private static final int @NonNull [] __CharLiteral = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Character =
		{
			Fragments._Character__OclAny /* 0 */,
			Fragments._Character__OclElement /* 1 */,
			Fragments._Character__Visitable /* 2 */,
			Fragments._Character__GASTMObject /* 3 */,
			Fragments._Character__GASTMSyntaxObject /* 4 */,
			Fragments._Character__Type /* 5 */,
			Fragments._Character__DataType /* 6 */,
			Fragments._Character__PrimitiveType /* 7 */,
			Fragments._Character__Character /* 8 */
		};
		private static final int @NonNull [] __Character = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ClassType =
		{
			Fragments._ClassType__OclAny /* 0 */,
			Fragments._ClassType__OclElement /* 1 */,
			Fragments._ClassType__Visitable /* 2 */,
			Fragments._ClassType__GASTMObject /* 3 */,
			Fragments._ClassType__GASTMSyntaxObject /* 4 */,
			Fragments._ClassType__Type /* 5 */,
			Fragments._ClassType__DataType /* 6 */,
			Fragments._ClassType__AggregateType /* 7 */,
			Fragments._ClassType__ClassType /* 8 */
		};
		private static final int @NonNull [] __ClassType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _CollectionType =
		{
			Fragments._CollectionType__OclAny /* 0 */,
			Fragments._CollectionType__OclElement /* 1 */,
			Fragments._CollectionType__Visitable /* 2 */,
			Fragments._CollectionType__GASTMObject /* 3 */,
			Fragments._CollectionType__GASTMSyntaxObject /* 4 */,
			Fragments._CollectionType__Type /* 5 */,
			Fragments._CollectionType__DataType /* 6 */,
			Fragments._CollectionType__ConstructedType /* 7 */,
			Fragments._CollectionType__CollectionType /* 8 */
		};
		private static final int @NonNull [] __CollectionType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Comment =
		{
			Fragments._Comment__OclAny /* 0 */,
			Fragments._Comment__OclElement /* 1 */,
			Fragments._Comment__Visitable /* 2 */,
			Fragments._Comment__GASTMObject /* 3 */,
			Fragments._Comment__GASTMSyntaxObject /* 4 */,
			Fragments._Comment__PreprocessorElement /* 5 */,
			Fragments._Comment__Comment /* 6 */
		};
		private static final int @NonNull [] __Comment = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _CompilationUnit =
		{
			Fragments._CompilationUnit__OclAny /* 0 */,
			Fragments._CompilationUnit__OclElement /* 1 */,
			Fragments._CompilationUnit__Visitable /* 2 */,
			Fragments._CompilationUnit__GASTMObject /* 3 */,
			Fragments._CompilationUnit__GASTMSyntaxObject /* 4 */,
			Fragments._CompilationUnit__OtherSyntaxObject /* 5 */,
			Fragments._CompilationUnit__CompilationUnit /* 6 */
		};
		private static final int @NonNull [] __CompilationUnit = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ConditionalExpression =
		{
			Fragments._ConditionalExpression__OclAny /* 0 */,
			Fragments._ConditionalExpression__OclElement /* 1 */,
			Fragments._ConditionalExpression__Visitable /* 2 */,
			Fragments._ConditionalExpression__GASTMObject /* 3 */,
			Fragments._ConditionalExpression__GASTMSyntaxObject /* 4 */,
			Fragments._ConditionalExpression__Expression /* 5 */,
			Fragments._ConditionalExpression__ConditionalExpression /* 6 */
		};
		private static final int @NonNull [] __ConditionalExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ConstructedType =
		{
			Fragments._ConstructedType__OclAny /* 0 */,
			Fragments._ConstructedType__OclElement /* 1 */,
			Fragments._ConstructedType__Visitable /* 2 */,
			Fragments._ConstructedType__GASTMObject /* 3 */,
			Fragments._ConstructedType__GASTMSyntaxObject /* 4 */,
			Fragments._ConstructedType__Type /* 5 */,
			Fragments._ConstructedType__DataType /* 6 */,
			Fragments._ConstructedType__ConstructedType /* 7 */
		};
		private static final int @NonNull [] __ConstructedType = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ContinueStatement =
		{
			Fragments._ContinueStatement__OclAny /* 0 */,
			Fragments._ContinueStatement__OclElement /* 1 */,
			Fragments._ContinueStatement__Visitable /* 2 */,
			Fragments._ContinueStatement__GASTMObject /* 3 */,
			Fragments._ContinueStatement__GASTMSyntaxObject /* 4 */,
			Fragments._ContinueStatement__Statement /* 5 */,
			Fragments._ContinueStatement__ContinueStatement /* 6 */
		};
		private static final int @NonNull [] __ContinueStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DataDefinition =
		{
			Fragments._DataDefinition__OclAny /* 0 */,
			Fragments._DataDefinition__OclElement /* 1 */,
			Fragments._DataDefinition__Visitable /* 2 */,
			Fragments._DataDefinition__GASTMObject /* 3 */,
			Fragments._DataDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._DataDefinition__DefinitionObject /* 5 */,
			Fragments._DataDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._DataDefinition__Definition /* 7 */,
			Fragments._DataDefinition__DataDefinition /* 8 */
		};
		private static final int @NonNull [] __DataDefinition = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DataType =
		{
			Fragments._DataType__OclAny /* 0 */,
			Fragments._DataType__OclElement /* 1 */,
			Fragments._DataType__Visitable /* 2 */,
			Fragments._DataType__GASTMObject /* 3 */,
			Fragments._DataType__GASTMSyntaxObject /* 4 */,
			Fragments._DataType__Type /* 5 */,
			Fragments._DataType__DataType /* 6 */
		};
		private static final int @NonNull [] __DataType = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Declaration =
		{
			Fragments._Declaration__OclAny /* 0 */,
			Fragments._Declaration__OclElement /* 1 */,
			Fragments._Declaration__Visitable /* 2 */,
			Fragments._Declaration__GASTMObject /* 3 */,
			Fragments._Declaration__GASTMSyntaxObject /* 4 */,
			Fragments._Declaration__DefinitionObject /* 5 */,
			Fragments._Declaration__DeclarationOrDefinition /* 6 */,
			Fragments._Declaration__Declaration /* 7 */
		};
		private static final int @NonNull [] __Declaration = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DeclarationOrDefinition =
		{
			Fragments._DeclarationOrDefinition__OclAny /* 0 */,
			Fragments._DeclarationOrDefinition__OclElement /* 1 */,
			Fragments._DeclarationOrDefinition__Visitable /* 2 */,
			Fragments._DeclarationOrDefinition__GASTMObject /* 3 */,
			Fragments._DeclarationOrDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._DeclarationOrDefinition__DefinitionObject /* 5 */,
			Fragments._DeclarationOrDefinition__DeclarationOrDefinition /* 6 */
		};
		private static final int @NonNull [] __DeclarationOrDefinition = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DeclarationOrDefinitionStatement =
		{
			Fragments._DeclarationOrDefinitionStatement__OclAny /* 0 */,
			Fragments._DeclarationOrDefinitionStatement__OclElement /* 1 */,
			Fragments._DeclarationOrDefinitionStatement__Visitable /* 2 */,
			Fragments._DeclarationOrDefinitionStatement__GASTMObject /* 3 */,
			Fragments._DeclarationOrDefinitionStatement__GASTMSyntaxObject /* 4 */,
			Fragments._DeclarationOrDefinitionStatement__Statement /* 5 */,
			Fragments._DeclarationOrDefinitionStatement__DeclarationOrDefinitionStatement /* 6 */
		};
		private static final int @NonNull [] __DeclarationOrDefinitionStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Decrement =
		{
			Fragments._Decrement__OclAny /* 0 */,
			Fragments._Decrement__OclElement /* 1 */,
			Fragments._Decrement__Visitable /* 2 */,
			Fragments._Decrement__GASTMObject /* 3 */,
			Fragments._Decrement__GASTMSyntaxObject /* 4 */,
			Fragments._Decrement__OtherSyntaxObject /* 5 */,
			Fragments._Decrement__Operator /* 6 */,
			Fragments._Decrement__UnaryOperator /* 7 */,
			Fragments._Decrement__Decrement /* 8 */
		};
		private static final int @NonNull [] __Decrement = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DefaultBlock =
		{
			Fragments._DefaultBlock__OclAny /* 0 */,
			Fragments._DefaultBlock__OclElement /* 1 */,
			Fragments._DefaultBlock__Visitable /* 2 */,
			Fragments._DefaultBlock__GASTMObject /* 3 */,
			Fragments._DefaultBlock__GASTMSyntaxObject /* 4 */,
			Fragments._DefaultBlock__OtherSyntaxObject /* 5 */,
			Fragments._DefaultBlock__SwitchCase /* 6 */,
			Fragments._DefaultBlock__DefaultBlock /* 7 */
		};
		private static final int @NonNull [] __DefaultBlock = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Definition =
		{
			Fragments._Definition__OclAny /* 0 */,
			Fragments._Definition__OclElement /* 1 */,
			Fragments._Definition__Visitable /* 2 */,
			Fragments._Definition__GASTMObject /* 3 */,
			Fragments._Definition__GASTMSyntaxObject /* 4 */,
			Fragments._Definition__DefinitionObject /* 5 */,
			Fragments._Definition__DeclarationOrDefinition /* 6 */,
			Fragments._Definition__Definition /* 7 */
		};
		private static final int @NonNull [] __Definition = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DefinitionObject =
		{
			Fragments._DefinitionObject__OclAny /* 0 */,
			Fragments._DefinitionObject__OclElement /* 1 */,
			Fragments._DefinitionObject__Visitable /* 2 */,
			Fragments._DefinitionObject__GASTMObject /* 3 */,
			Fragments._DefinitionObject__GASTMSyntaxObject /* 4 */,
			Fragments._DefinitionObject__DefinitionObject /* 5 */
		};
		private static final int @NonNull [] __DefinitionObject = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DeleteStatement =
		{
			Fragments._DeleteStatement__OclAny /* 0 */,
			Fragments._DeleteStatement__OclElement /* 1 */,
			Fragments._DeleteStatement__Visitable /* 2 */,
			Fragments._DeleteStatement__GASTMObject /* 3 */,
			Fragments._DeleteStatement__GASTMSyntaxObject /* 4 */,
			Fragments._DeleteStatement__Statement /* 5 */,
			Fragments._DeleteStatement__DeleteStatement /* 6 */
		};
		private static final int @NonNull [] __DeleteStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DelphiBlockStatement =
		{
			Fragments._DelphiBlockStatement__OclAny /* 0 */,
			Fragments._DelphiBlockStatement__OclElement /* 1 */,
			Fragments._DelphiBlockStatement__Visitable /* 2 */,
			Fragments._DelphiBlockStatement__GASTMObject /* 3 */,
			Fragments._DelphiBlockStatement__GASTMSyntaxObject /* 4 */,
			Fragments._DelphiBlockStatement__Statement /* 5 */,
			Fragments._DelphiBlockStatement__BlockStatement /* 6 */,
			Fragments._DelphiBlockStatement__DelphiBlockStatement /* 7 */
		};
		private static final int @NonNull [] __DelphiBlockStatement = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DelphiFunctionCallExpression =
		{
			Fragments._DelphiFunctionCallExpression__OclAny /* 0 */,
			Fragments._DelphiFunctionCallExpression__OclElement /* 1 */,
			Fragments._DelphiFunctionCallExpression__Visitable /* 2 */,
			Fragments._DelphiFunctionCallExpression__GASTMObject /* 3 */,
			Fragments._DelphiFunctionCallExpression__GASTMSyntaxObject /* 4 */,
			Fragments._DelphiFunctionCallExpression__Expression /* 5 */,
			Fragments._DelphiFunctionCallExpression__FunctionCallExpression /* 6 */,
			Fragments._DelphiFunctionCallExpression__DelphiFunctionCallExpression /* 7 */
		};
		private static final int @NonNull [] __DelphiFunctionCallExpression = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DelphiImplementationSection =
		{
			Fragments._DelphiImplementationSection__OclAny /* 0 */,
			Fragments._DelphiImplementationSection__OclElement /* 1 */,
			Fragments._DelphiImplementationSection__Visitable /* 2 */,
			Fragments._DelphiImplementationSection__GASTMObject /* 3 */,
			Fragments._DelphiImplementationSection__GASTMSyntaxObject /* 4 */,
			Fragments._DelphiImplementationSection__OtherSyntaxObject /* 5 */,
			Fragments._DelphiImplementationSection__CompilationUnit /* 6 */,
			Fragments._DelphiImplementationSection__DelphiImplementationSection /* 7 */
		};
		private static final int @NonNull [] __DelphiImplementationSection = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DelphiInterfaceSection =
		{
			Fragments._DelphiInterfaceSection__OclAny /* 0 */,
			Fragments._DelphiInterfaceSection__OclElement /* 1 */,
			Fragments._DelphiInterfaceSection__Visitable /* 2 */,
			Fragments._DelphiInterfaceSection__GASTMObject /* 3 */,
			Fragments._DelphiInterfaceSection__GASTMSyntaxObject /* 4 */,
			Fragments._DelphiInterfaceSection__OtherSyntaxObject /* 5 */,
			Fragments._DelphiInterfaceSection__CompilationUnit /* 6 */,
			Fragments._DelphiInterfaceSection__DelphiInterfaceSection /* 7 */
		};
		private static final int @NonNull [] __DelphiInterfaceSection = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DelphiUnit =
		{
			Fragments._DelphiUnit__OclAny /* 0 */,
			Fragments._DelphiUnit__OclElement /* 1 */,
			Fragments._DelphiUnit__Visitable /* 2 */,
			Fragments._DelphiUnit__GASTMObject /* 3 */,
			Fragments._DelphiUnit__GASTMSyntaxObject /* 4 */,
			Fragments._DelphiUnit__OtherSyntaxObject /* 5 */,
			Fragments._DelphiUnit__CompilationUnit /* 6 */,
			Fragments._DelphiUnit__DelphiUnit /* 7 */
		};
		private static final int @NonNull [] __DelphiUnit = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DelphiWithStatement =
		{
			Fragments._DelphiWithStatement__OclAny /* 0 */,
			Fragments._DelphiWithStatement__OclElement /* 1 */,
			Fragments._DelphiWithStatement__Visitable /* 2 */,
			Fragments._DelphiWithStatement__GASTMObject /* 3 */,
			Fragments._DelphiWithStatement__GASTMSyntaxObject /* 4 */,
			Fragments._DelphiWithStatement__Statement /* 5 */,
			Fragments._DelphiWithStatement__BlockStatement /* 6 */,
			Fragments._DelphiWithStatement__DelphiWithStatement /* 7 */
		};
		private static final int @NonNull [] __DelphiWithStatement = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Deref =
		{
			Fragments._Deref__OclAny /* 0 */,
			Fragments._Deref__OclElement /* 1 */,
			Fragments._Deref__Visitable /* 2 */,
			Fragments._Deref__GASTMObject /* 3 */,
			Fragments._Deref__GASTMSyntaxObject /* 4 */,
			Fragments._Deref__OtherSyntaxObject /* 5 */,
			Fragments._Deref__Operator /* 6 */,
			Fragments._Deref__UnaryOperator /* 7 */,
			Fragments._Deref__Deref /* 8 */
		};
		private static final int @NonNull [] __Deref = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DerivesFrom =
		{
			Fragments._DerivesFrom__OclAny /* 0 */,
			Fragments._DerivesFrom__OclElement /* 1 */,
			Fragments._DerivesFrom__Visitable /* 2 */,
			Fragments._DerivesFrom__GASTMObject /* 3 */,
			Fragments._DerivesFrom__GASTMSyntaxObject /* 4 */,
			Fragments._DerivesFrom__OtherSyntaxObject /* 5 */,
			Fragments._DerivesFrom__DerivesFrom /* 6 */
		};
		private static final int @NonNull [] __DerivesFrom = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Dimension =
		{
			Fragments._Dimension__OclAny /* 0 */,
			Fragments._Dimension__OclElement /* 1 */,
			Fragments._Dimension__Visitable /* 2 */,
			Fragments._Dimension__GASTMObject /* 3 */,
			Fragments._Dimension__GASTMSyntaxObject /* 4 */,
			Fragments._Dimension__OtherSyntaxObject /* 5 */,
			Fragments._Dimension__Dimension /* 6 */
		};
		private static final int @NonNull [] __Dimension = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Divide =
		{
			Fragments._Divide__OclAny /* 0 */,
			Fragments._Divide__OclElement /* 1 */,
			Fragments._Divide__Visitable /* 2 */,
			Fragments._Divide__GASTMObject /* 3 */,
			Fragments._Divide__GASTMSyntaxObject /* 4 */,
			Fragments._Divide__OtherSyntaxObject /* 5 */,
			Fragments._Divide__Operator /* 6 */,
			Fragments._Divide__BinaryOperator /* 7 */,
			Fragments._Divide__Divide /* 8 */
		};
		private static final int @NonNull [] __Divide = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _DoWhileStatement =
		{
			Fragments._DoWhileStatement__OclAny /* 0 */,
			Fragments._DoWhileStatement__OclElement /* 1 */,
			Fragments._DoWhileStatement__Visitable /* 2 */,
			Fragments._DoWhileStatement__GASTMObject /* 3 */,
			Fragments._DoWhileStatement__GASTMSyntaxObject /* 4 */,
			Fragments._DoWhileStatement__Statement /* 5 */,
			Fragments._DoWhileStatement__LoopStatement /* 6 */,
			Fragments._DoWhileStatement__DoWhileStatement /* 7 */
		};
		private static final int @NonNull [] __DoWhileStatement = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Double =
		{
			Fragments._Double__OclAny /* 0 */,
			Fragments._Double__OclElement /* 1 */,
			Fragments._Double__Visitable /* 2 */,
			Fragments._Double__GASTMObject /* 3 */,
			Fragments._Double__GASTMSyntaxObject /* 4 */,
			Fragments._Double__Type /* 5 */,
			Fragments._Double__DataType /* 6 */,
			Fragments._Double__PrimitiveType /* 7 */,
			Fragments._Double__Double /* 8 */
		};
		private static final int @NonNull [] __Double = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _EmptyStatement =
		{
			Fragments._EmptyStatement__OclAny /* 0 */,
			Fragments._EmptyStatement__OclElement /* 1 */,
			Fragments._EmptyStatement__Visitable /* 2 */,
			Fragments._EmptyStatement__GASTMObject /* 3 */,
			Fragments._EmptyStatement__GASTMSyntaxObject /* 4 */,
			Fragments._EmptyStatement__Statement /* 5 */,
			Fragments._EmptyStatement__EmptyStatement /* 6 */
		};
		private static final int @NonNull [] __EmptyStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _EntryDefinition =
		{
			Fragments._EntryDefinition__OclAny /* 0 */,
			Fragments._EntryDefinition__OclElement /* 1 */,
			Fragments._EntryDefinition__Visitable /* 2 */,
			Fragments._EntryDefinition__GASTMObject /* 3 */,
			Fragments._EntryDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._EntryDefinition__DefinitionObject /* 5 */,
			Fragments._EntryDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._EntryDefinition__Definition /* 7 */,
			Fragments._EntryDefinition__EntryDefinition /* 8 */
		};
		private static final int @NonNull [] __EntryDefinition = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _EnumLiteralDefinition =
		{
			Fragments._EnumLiteralDefinition__OclAny /* 0 */,
			Fragments._EnumLiteralDefinition__OclElement /* 1 */,
			Fragments._EnumLiteralDefinition__Visitable /* 2 */,
			Fragments._EnumLiteralDefinition__GASTMObject /* 3 */,
			Fragments._EnumLiteralDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._EnumLiteralDefinition__DefinitionObject /* 5 */,
			Fragments._EnumLiteralDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._EnumLiteralDefinition__Definition /* 7 */,
			Fragments._EnumLiteralDefinition__EnumLiteralDefinition /* 8 */
		};
		private static final int @NonNull [] __EnumLiteralDefinition = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _EnumType =
		{
			Fragments._EnumType__OclAny /* 0 */,
			Fragments._EnumType__OclElement /* 1 */,
			Fragments._EnumType__Visitable /* 2 */,
			Fragments._EnumType__GASTMObject /* 3 */,
			Fragments._EnumType__GASTMSyntaxObject /* 4 */,
			Fragments._EnumType__Type /* 5 */,
			Fragments._EnumType__DataType /* 6 */,
			Fragments._EnumType__EnumType /* 7 */
		};
		private static final int @NonNull [] __EnumType = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Equal =
		{
			Fragments._Equal__OclAny /* 0 */,
			Fragments._Equal__OclElement /* 1 */,
			Fragments._Equal__Visitable /* 2 */,
			Fragments._Equal__GASTMObject /* 3 */,
			Fragments._Equal__GASTMSyntaxObject /* 4 */,
			Fragments._Equal__OtherSyntaxObject /* 5 */,
			Fragments._Equal__Operator /* 6 */,
			Fragments._Equal__BinaryOperator /* 7 */,
			Fragments._Equal__Equal /* 8 */
		};
		private static final int @NonNull [] __Equal = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ExceptionType =
		{
			Fragments._ExceptionType__OclAny /* 0 */,
			Fragments._ExceptionType__OclElement /* 1 */,
			Fragments._ExceptionType__Visitable /* 2 */,
			Fragments._ExceptionType__GASTMObject /* 3 */,
			Fragments._ExceptionType__GASTMSyntaxObject /* 4 */,
			Fragments._ExceptionType__Type /* 5 */,
			Fragments._ExceptionType__DataType /* 6 */,
			Fragments._ExceptionType__ExceptionType /* 7 */
		};
		private static final int @NonNull [] __ExceptionType = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Exponent =
		{
			Fragments._Exponent__OclAny /* 0 */,
			Fragments._Exponent__OclElement /* 1 */,
			Fragments._Exponent__Visitable /* 2 */,
			Fragments._Exponent__GASTMObject /* 3 */,
			Fragments._Exponent__GASTMSyntaxObject /* 4 */,
			Fragments._Exponent__OtherSyntaxObject /* 5 */,
			Fragments._Exponent__Operator /* 6 */,
			Fragments._Exponent__BinaryOperator /* 7 */,
			Fragments._Exponent__Exponent /* 8 */
		};
		private static final int @NonNull [] __Exponent = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Expression =
		{
			Fragments._Expression__OclAny /* 0 */,
			Fragments._Expression__OclElement /* 1 */,
			Fragments._Expression__Visitable /* 2 */,
			Fragments._Expression__GASTMObject /* 3 */,
			Fragments._Expression__GASTMSyntaxObject /* 4 */,
			Fragments._Expression__Expression /* 5 */
		};
		private static final int @NonNull [] __Expression = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ExpressionStatement =
		{
			Fragments._ExpressionStatement__OclAny /* 0 */,
			Fragments._ExpressionStatement__OclElement /* 1 */,
			Fragments._ExpressionStatement__Visitable /* 2 */,
			Fragments._ExpressionStatement__GASTMObject /* 3 */,
			Fragments._ExpressionStatement__GASTMSyntaxObject /* 4 */,
			Fragments._ExpressionStatement__Statement /* 5 */,
			Fragments._ExpressionStatement__ExpressionStatement /* 6 */
		};
		private static final int @NonNull [] __ExpressionStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _External =
		{
			Fragments._External__OclAny /* 0 */,
			Fragments._External__OclElement /* 1 */,
			Fragments._External__Visitable /* 2 */,
			Fragments._External__StorageSpecification /* 3 */,
			Fragments._External__External /* 4 */
		};
		private static final int @NonNull [] __External = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FileLocal =
		{
			Fragments._FileLocal__OclAny /* 0 */,
			Fragments._FileLocal__OclElement /* 1 */,
			Fragments._FileLocal__Visitable /* 2 */,
			Fragments._FileLocal__StorageSpecification /* 3 */,
			Fragments._FileLocal__FileLocal /* 4 */
		};
		private static final int @NonNull [] __FileLocal = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Float =
		{
			Fragments._Float__OclAny /* 0 */,
			Fragments._Float__OclElement /* 1 */,
			Fragments._Float__Visitable /* 2 */,
			Fragments._Float__GASTMObject /* 3 */,
			Fragments._Float__GASTMSyntaxObject /* 4 */,
			Fragments._Float__Type /* 5 */,
			Fragments._Float__DataType /* 6 */,
			Fragments._Float__PrimitiveType /* 7 */,
			Fragments._Float__Float /* 8 */
		};
		private static final int @NonNull [] __Float = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ForCheckAfterStatement =
		{
			Fragments._ForCheckAfterStatement__OclAny /* 0 */,
			Fragments._ForCheckAfterStatement__OclElement /* 1 */,
			Fragments._ForCheckAfterStatement__Visitable /* 2 */,
			Fragments._ForCheckAfterStatement__GASTMObject /* 3 */,
			Fragments._ForCheckAfterStatement__GASTMSyntaxObject /* 4 */,
			Fragments._ForCheckAfterStatement__Statement /* 5 */,
			Fragments._ForCheckAfterStatement__LoopStatement /* 6 */,
			Fragments._ForCheckAfterStatement__ForStatement /* 7 */,
			Fragments._ForCheckAfterStatement__ForCheckAfterStatement /* 8 */
		};
		private static final int @NonNull [] __ForCheckAfterStatement = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ForCheckBeforeStatement =
		{
			Fragments._ForCheckBeforeStatement__OclAny /* 0 */,
			Fragments._ForCheckBeforeStatement__OclElement /* 1 */,
			Fragments._ForCheckBeforeStatement__Visitable /* 2 */,
			Fragments._ForCheckBeforeStatement__GASTMObject /* 3 */,
			Fragments._ForCheckBeforeStatement__GASTMSyntaxObject /* 4 */,
			Fragments._ForCheckBeforeStatement__Statement /* 5 */,
			Fragments._ForCheckBeforeStatement__LoopStatement /* 6 */,
			Fragments._ForCheckBeforeStatement__ForStatement /* 7 */,
			Fragments._ForCheckBeforeStatement__ForCheckBeforeStatement /* 8 */
		};
		private static final int @NonNull [] __ForCheckBeforeStatement = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ForStatement =
		{
			Fragments._ForStatement__OclAny /* 0 */,
			Fragments._ForStatement__OclElement /* 1 */,
			Fragments._ForStatement__Visitable /* 2 */,
			Fragments._ForStatement__GASTMObject /* 3 */,
			Fragments._ForStatement__GASTMSyntaxObject /* 4 */,
			Fragments._ForStatement__Statement /* 5 */,
			Fragments._ForStatement__LoopStatement /* 6 */,
			Fragments._ForStatement__ForStatement /* 7 */
		};
		private static final int @NonNull [] __ForStatement = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FormalParameterDeclaration =
		{
			Fragments._FormalParameterDeclaration__OclAny /* 0 */,
			Fragments._FormalParameterDeclaration__OclElement /* 1 */,
			Fragments._FormalParameterDeclaration__Visitable /* 2 */,
			Fragments._FormalParameterDeclaration__GASTMObject /* 3 */,
			Fragments._FormalParameterDeclaration__GASTMSyntaxObject /* 4 */,
			Fragments._FormalParameterDeclaration__DefinitionObject /* 5 */,
			Fragments._FormalParameterDeclaration__DeclarationOrDefinition /* 6 */,
			Fragments._FormalParameterDeclaration__Declaration /* 7 */,
			Fragments._FormalParameterDeclaration__FormalParameterDeclaration /* 8 */
		};
		private static final int @NonNull [] __FormalParameterDeclaration = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FormalParameterDefinition =
		{
			Fragments._FormalParameterDefinition__OclAny /* 0 */,
			Fragments._FormalParameterDefinition__OclElement /* 1 */,
			Fragments._FormalParameterDefinition__Visitable /* 2 */,
			Fragments._FormalParameterDefinition__GASTMObject /* 3 */,
			Fragments._FormalParameterDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._FormalParameterDefinition__DefinitionObject /* 5 */,
			Fragments._FormalParameterDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._FormalParameterDefinition__Definition /* 7 */,
			Fragments._FormalParameterDefinition__DataDefinition /* 8 */,
			Fragments._FormalParameterDefinition__FormalParameterDefinition /* 9 */
		};
		private static final int @NonNull [] __FormalParameterDefinition = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FormalParameterType =
		{
			Fragments._FormalParameterType__OclAny /* 0 */,
			Fragments._FormalParameterType__OclElement /* 1 */,
			Fragments._FormalParameterType__Visitable /* 2 */,
			Fragments._FormalParameterType__GASTMObject /* 3 */,
			Fragments._FormalParameterType__GASTMSyntaxObject /* 4 */,
			Fragments._FormalParameterType__Type /* 5 */,
			Fragments._FormalParameterType__DataType /* 6 */,
			Fragments._FormalParameterType__FormalParameterType /* 7 */
		};
		private static final int @NonNull [] __FormalParameterType = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionCallExpression =
		{
			Fragments._FunctionCallExpression__OclAny /* 0 */,
			Fragments._FunctionCallExpression__OclElement /* 1 */,
			Fragments._FunctionCallExpression__Visitable /* 2 */,
			Fragments._FunctionCallExpression__GASTMObject /* 3 */,
			Fragments._FunctionCallExpression__GASTMSyntaxObject /* 4 */,
			Fragments._FunctionCallExpression__Expression /* 5 */,
			Fragments._FunctionCallExpression__FunctionCallExpression /* 6 */
		};
		private static final int @NonNull [] __FunctionCallExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionDeclaration =
		{
			Fragments._FunctionDeclaration__OclAny /* 0 */,
			Fragments._FunctionDeclaration__OclElement /* 1 */,
			Fragments._FunctionDeclaration__Visitable /* 2 */,
			Fragments._FunctionDeclaration__GASTMObject /* 3 */,
			Fragments._FunctionDeclaration__GASTMSyntaxObject /* 4 */,
			Fragments._FunctionDeclaration__DefinitionObject /* 5 */,
			Fragments._FunctionDeclaration__DeclarationOrDefinition /* 6 */,
			Fragments._FunctionDeclaration__Declaration /* 7 */,
			Fragments._FunctionDeclaration__FunctionDeclaration /* 8 */
		};
		private static final int @NonNull [] __FunctionDeclaration = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionDefinition =
		{
			Fragments._FunctionDefinition__OclAny /* 0 */,
			Fragments._FunctionDefinition__OclElement /* 1 */,
			Fragments._FunctionDefinition__Visitable /* 2 */,
			Fragments._FunctionDefinition__GASTMObject /* 3 */,
			Fragments._FunctionDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._FunctionDefinition__DefinitionObject /* 5 */,
			Fragments._FunctionDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._FunctionDefinition__Definition /* 7 */,
			Fragments._FunctionDefinition__FunctionDefinition /* 8 */
		};
		private static final int @NonNull [] __FunctionDefinition = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionMemberAttribute =
		{
			Fragments._FunctionMemberAttribute__OclAny /* 0 */,
			Fragments._FunctionMemberAttribute__OclElement /* 1 */,
			Fragments._FunctionMemberAttribute__Visitable /* 2 */,
			Fragments._FunctionMemberAttribute__GASTMObject /* 3 */,
			Fragments._FunctionMemberAttribute__GASTMSyntaxObject /* 4 */,
			Fragments._FunctionMemberAttribute__OtherSyntaxObject /* 5 */,
			Fragments._FunctionMemberAttribute__FunctionMemberAttribute /* 6 */
		};
		private static final int @NonNull [] __FunctionMemberAttribute = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionMemberAttributes =
		{
			Fragments._FunctionMemberAttributes__OclAny /* 0 */,
			Fragments._FunctionMemberAttributes__OclElement /* 1 */,
			Fragments._FunctionMemberAttributes__Visitable /* 2 */,
			Fragments._FunctionMemberAttributes__FunctionMemberAttributes /* 3 */
		};
		private static final int @NonNull [] __FunctionMemberAttributes = { 1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionPersistent =
		{
			Fragments._FunctionPersistent__OclAny /* 0 */,
			Fragments._FunctionPersistent__OclElement /* 1 */,
			Fragments._FunctionPersistent__Visitable /* 2 */,
			Fragments._FunctionPersistent__StorageSpecification /* 3 */,
			Fragments._FunctionPersistent__FunctionPersistent /* 4 */
		};
		private static final int @NonNull [] __FunctionPersistent = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionScope =
		{
			Fragments._FunctionScope__OclAny /* 0 */,
			Fragments._FunctionScope__OclElement /* 1 */,
			Fragments._FunctionScope__Visitable /* 2 */,
			Fragments._FunctionScope__GASTMSemanticObject /* 3 */,
			Fragments._FunctionScope__Scope /* 4 */,
			Fragments._FunctionScope__FunctionScope /* 5 */
		};
		private static final int @NonNull [] __FunctionScope = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _FunctionType =
		{
			Fragments._FunctionType__OclAny /* 0 */,
			Fragments._FunctionType__OclElement /* 1 */,
			Fragments._FunctionType__Visitable /* 2 */,
			Fragments._FunctionType__GASTMObject /* 3 */,
			Fragments._FunctionType__GASTMSyntaxObject /* 4 */,
			Fragments._FunctionType__Type /* 5 */,
			Fragments._FunctionType__FunctionType /* 6 */
		};
		private static final int @NonNull [] __FunctionType = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _GASTMObject =
		{
			Fragments._GASTMObject__OclAny /* 0 */,
			Fragments._GASTMObject__OclElement /* 1 */,
			Fragments._GASTMObject__Visitable /* 2 */,
			Fragments._GASTMObject__GASTMObject /* 3 */
		};
		private static final int @NonNull [] __GASTMObject = { 1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _GASTMSemanticObject =
		{
			Fragments._GASTMSemanticObject__OclAny /* 0 */,
			Fragments._GASTMSemanticObject__OclElement /* 1 */,
			Fragments._GASTMSemanticObject__Visitable /* 2 */,
			Fragments._GASTMSemanticObject__GASTMSemanticObject /* 3 */
		};
		private static final int @NonNull [] __GASTMSemanticObject = { 1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _GASTMSourceObject =
		{
			Fragments._GASTMSourceObject__OclAny /* 0 */,
			Fragments._GASTMSourceObject__OclElement /* 1 */,
			Fragments._GASTMSourceObject__Visitable /* 2 */,
			Fragments._GASTMSourceObject__GASTMSourceObject /* 3 */
		};
		private static final int @NonNull [] __GASTMSourceObject = { 1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _GASTMSyntaxObject =
		{
			Fragments._GASTMSyntaxObject__OclAny /* 0 */,
			Fragments._GASTMSyntaxObject__OclElement /* 1 */,
			Fragments._GASTMSyntaxObject__Visitable /* 2 */,
			Fragments._GASTMSyntaxObject__GASTMObject /* 3 */,
			Fragments._GASTMSyntaxObject__GASTMSyntaxObject /* 4 */
		};
		private static final int @NonNull [] __GASTMSyntaxObject = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _GlobalScope =
		{
			Fragments._GlobalScope__OclAny /* 0 */,
			Fragments._GlobalScope__OclElement /* 1 */,
			Fragments._GlobalScope__Visitable /* 2 */,
			Fragments._GlobalScope__GASTMSemanticObject /* 3 */,
			Fragments._GlobalScope__Scope /* 4 */,
			Fragments._GlobalScope__GlobalScope /* 5 */
		};
		private static final int @NonNull [] __GlobalScope = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Greater =
		{
			Fragments._Greater__OclAny /* 0 */,
			Fragments._Greater__OclElement /* 1 */,
			Fragments._Greater__Visitable /* 2 */,
			Fragments._Greater__GASTMObject /* 3 */,
			Fragments._Greater__GASTMSyntaxObject /* 4 */,
			Fragments._Greater__OtherSyntaxObject /* 5 */,
			Fragments._Greater__Operator /* 6 */,
			Fragments._Greater__BinaryOperator /* 7 */,
			Fragments._Greater__Greater /* 8 */
		};
		private static final int @NonNull [] __Greater = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _IdentifierReference =
		{
			Fragments._IdentifierReference__OclAny /* 0 */,
			Fragments._IdentifierReference__OclElement /* 1 */,
			Fragments._IdentifierReference__Visitable /* 2 */,
			Fragments._IdentifierReference__GASTMObject /* 3 */,
			Fragments._IdentifierReference__GASTMSyntaxObject /* 4 */,
			Fragments._IdentifierReference__Expression /* 5 */,
			Fragments._IdentifierReference__NameReference /* 6 */,
			Fragments._IdentifierReference__IdentifierReference /* 7 */
		};
		private static final int @NonNull [] __IdentifierReference = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _IfStatement =
		{
			Fragments._IfStatement__OclAny /* 0 */,
			Fragments._IfStatement__OclElement /* 1 */,
			Fragments._IfStatement__Visitable /* 2 */,
			Fragments._IfStatement__GASTMObject /* 3 */,
			Fragments._IfStatement__GASTMSyntaxObject /* 4 */,
			Fragments._IfStatement__Statement /* 5 */,
			Fragments._IfStatement__IfStatement /* 6 */
		};
		private static final int @NonNull [] __IfStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _IncludeUnit =
		{
			Fragments._IncludeUnit__OclAny /* 0 */,
			Fragments._IncludeUnit__OclElement /* 1 */,
			Fragments._IncludeUnit__Visitable /* 2 */,
			Fragments._IncludeUnit__GASTMObject /* 3 */,
			Fragments._IncludeUnit__GASTMSyntaxObject /* 4 */,
			Fragments._IncludeUnit__PreprocessorElement /* 5 */,
			Fragments._IncludeUnit__IncludeUnit /* 6 */
		};
		private static final int @NonNull [] __IncludeUnit = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Increment =
		{
			Fragments._Increment__OclAny /* 0 */,
			Fragments._Increment__OclElement /* 1 */,
			Fragments._Increment__Visitable /* 2 */,
			Fragments._Increment__GASTMObject /* 3 */,
			Fragments._Increment__GASTMSyntaxObject /* 4 */,
			Fragments._Increment__OtherSyntaxObject /* 5 */,
			Fragments._Increment__Operator /* 6 */,
			Fragments._Increment__UnaryOperator /* 7 */,
			Fragments._Increment__Increment /* 8 */
		};
		private static final int @NonNull [] __Increment = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Integer =
		{
			Fragments._Integer__OclAny /* 0 */,
			Fragments._Integer__OclElement /* 1 */,
			Fragments._Integer__Visitable /* 2 */,
			Fragments._Integer__GASTMObject /* 3 */,
			Fragments._Integer__GASTMSyntaxObject /* 4 */,
			Fragments._Integer__Type /* 5 */,
			Fragments._Integer__DataType /* 6 */,
			Fragments._Integer__PrimitiveType /* 7 */,
			Fragments._Integer__Integer /* 8 */
		};
		private static final int @NonNull [] __Integer = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _IntegerLiteral =
		{
			Fragments._IntegerLiteral__OclAny /* 0 */,
			Fragments._IntegerLiteral__OclElement /* 1 */,
			Fragments._IntegerLiteral__Visitable /* 2 */,
			Fragments._IntegerLiteral__GASTMObject /* 3 */,
			Fragments._IntegerLiteral__GASTMSyntaxObject /* 4 */,
			Fragments._IntegerLiteral__Expression /* 5 */,
			Fragments._IntegerLiteral__Literal /* 6 */,
			Fragments._IntegerLiteral__IntegerLiteral /* 7 */
		};
		private static final int @NonNull [] __IntegerLiteral = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _JumpStatement =
		{
			Fragments._JumpStatement__OclAny /* 0 */,
			Fragments._JumpStatement__OclElement /* 1 */,
			Fragments._JumpStatement__Visitable /* 2 */,
			Fragments._JumpStatement__GASTMObject /* 3 */,
			Fragments._JumpStatement__GASTMSyntaxObject /* 4 */,
			Fragments._JumpStatement__Statement /* 5 */,
			Fragments._JumpStatement__JumpStatement /* 6 */
		};
		private static final int @NonNull [] __JumpStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _LabelAccess =
		{
			Fragments._LabelAccess__OclAny /* 0 */,
			Fragments._LabelAccess__OclElement /* 1 */,
			Fragments._LabelAccess__Visitable /* 2 */,
			Fragments._LabelAccess__GASTMObject /* 3 */,
			Fragments._LabelAccess__GASTMSyntaxObject /* 4 */,
			Fragments._LabelAccess__Expression /* 5 */,
			Fragments._LabelAccess__LabelAccess /* 6 */
		};
		private static final int @NonNull [] __LabelAccess = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _LabelDefinition =
		{
			Fragments._LabelDefinition__OclAny /* 0 */,
			Fragments._LabelDefinition__OclElement /* 1 */,
			Fragments._LabelDefinition__Visitable /* 2 */,
			Fragments._LabelDefinition__GASTMObject /* 3 */,
			Fragments._LabelDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._LabelDefinition__DefinitionObject /* 5 */,
			Fragments._LabelDefinition__LabelDefinition /* 6 */
		};
		private static final int @NonNull [] __LabelDefinition = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _LabelType =
		{
			Fragments._LabelType__OclAny /* 0 */,
			Fragments._LabelType__OclElement /* 1 */,
			Fragments._LabelType__Visitable /* 2 */,
			Fragments._LabelType__GASTMObject /* 3 */,
			Fragments._LabelType__GASTMSyntaxObject /* 4 */,
			Fragments._LabelType__Type /* 5 */,
			Fragments._LabelType__LabelType /* 6 */
		};
		private static final int @NonNull [] __LabelType = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _LabeledStatement =
		{
			Fragments._LabeledStatement__OclAny /* 0 */,
			Fragments._LabeledStatement__OclElement /* 1 */,
			Fragments._LabeledStatement__Visitable /* 2 */,
			Fragments._LabeledStatement__GASTMObject /* 3 */,
			Fragments._LabeledStatement__GASTMSyntaxObject /* 4 */,
			Fragments._LabeledStatement__Statement /* 5 */,
			Fragments._LabeledStatement__LabeledStatement /* 6 */
		};
		private static final int @NonNull [] __LabeledStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Less =
		{
			Fragments._Less__OclAny /* 0 */,
			Fragments._Less__OclElement /* 1 */,
			Fragments._Less__Visitable /* 2 */,
			Fragments._Less__GASTMObject /* 3 */,
			Fragments._Less__GASTMSyntaxObject /* 4 */,
			Fragments._Less__OtherSyntaxObject /* 5 */,
			Fragments._Less__Operator /* 6 */,
			Fragments._Less__BinaryOperator /* 7 */,
			Fragments._Less__Less /* 8 */
		};
		private static final int @NonNull [] __Less = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Literal =
		{
			Fragments._Literal__OclAny /* 0 */,
			Fragments._Literal__OclElement /* 1 */,
			Fragments._Literal__Visitable /* 2 */,
			Fragments._Literal__GASTMObject /* 3 */,
			Fragments._Literal__GASTMSyntaxObject /* 4 */,
			Fragments._Literal__Expression /* 5 */,
			Fragments._Literal__Literal /* 6 */
		};
		private static final int @NonNull [] __Literal = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _LongDouble =
		{
			Fragments._LongDouble__OclAny /* 0 */,
			Fragments._LongDouble__OclElement /* 1 */,
			Fragments._LongDouble__Visitable /* 2 */,
			Fragments._LongDouble__GASTMObject /* 3 */,
			Fragments._LongDouble__GASTMSyntaxObject /* 4 */,
			Fragments._LongDouble__Type /* 5 */,
			Fragments._LongDouble__DataType /* 6 */,
			Fragments._LongDouble__PrimitiveType /* 7 */,
			Fragments._LongDouble__LongDouble /* 8 */
		};
		private static final int @NonNull [] __LongDouble = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _LongInteger =
		{
			Fragments._LongInteger__OclAny /* 0 */,
			Fragments._LongInteger__OclElement /* 1 */,
			Fragments._LongInteger__Visitable /* 2 */,
			Fragments._LongInteger__GASTMObject /* 3 */,
			Fragments._LongInteger__GASTMSyntaxObject /* 4 */,
			Fragments._LongInteger__Type /* 5 */,
			Fragments._LongInteger__DataType /* 6 */,
			Fragments._LongInteger__PrimitiveType /* 7 */,
			Fragments._LongInteger__LongInteger /* 8 */
		};
		private static final int @NonNull [] __LongInteger = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _LoopStatement =
		{
			Fragments._LoopStatement__OclAny /* 0 */,
			Fragments._LoopStatement__OclElement /* 1 */,
			Fragments._LoopStatement__Visitable /* 2 */,
			Fragments._LoopStatement__GASTMObject /* 3 */,
			Fragments._LoopStatement__GASTMSyntaxObject /* 4 */,
			Fragments._LoopStatement__Statement /* 5 */,
			Fragments._LoopStatement__LoopStatement /* 6 */
		};
		private static final int @NonNull [] __LoopStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _MacroCall =
		{
			Fragments._MacroCall__OclAny /* 0 */,
			Fragments._MacroCall__OclElement /* 1 */,
			Fragments._MacroCall__Visitable /* 2 */,
			Fragments._MacroCall__GASTMObject /* 3 */,
			Fragments._MacroCall__GASTMSyntaxObject /* 4 */,
			Fragments._MacroCall__PreprocessorElement /* 5 */,
			Fragments._MacroCall__MacroCall /* 6 */
		};
		private static final int @NonNull [] __MacroCall = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _MacroDefinition =
		{
			Fragments._MacroDefinition__OclAny /* 0 */,
			Fragments._MacroDefinition__OclElement /* 1 */,
			Fragments._MacroDefinition__Visitable /* 2 */,
			Fragments._MacroDefinition__GASTMObject /* 3 */,
			Fragments._MacroDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._MacroDefinition__PreprocessorElement /* 5 */,
			Fragments._MacroDefinition__MacroDefinition /* 6 */
		};
		private static final int @NonNull [] __MacroDefinition = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _MissingActualParameter =
		{
			Fragments._MissingActualParameter__OclAny /* 0 */,
			Fragments._MissingActualParameter__OclElement /* 1 */,
			Fragments._MissingActualParameter__Visitable /* 2 */,
			Fragments._MissingActualParameter__ActualParameter /* 3 */,
			Fragments._MissingActualParameter__MissingActualParameter /* 4 */
		};
		private static final int @NonNull [] __MissingActualParameter = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Modulus =
		{
			Fragments._Modulus__OclAny /* 0 */,
			Fragments._Modulus__OclElement /* 1 */,
			Fragments._Modulus__Visitable /* 2 */,
			Fragments._Modulus__GASTMObject /* 3 */,
			Fragments._Modulus__GASTMSyntaxObject /* 4 */,
			Fragments._Modulus__OtherSyntaxObject /* 5 */,
			Fragments._Modulus__Operator /* 6 */,
			Fragments._Modulus__BinaryOperator /* 7 */,
			Fragments._Modulus__Modulus /* 8 */
		};
		private static final int @NonNull [] __Modulus = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Multiply =
		{
			Fragments._Multiply__OclAny /* 0 */,
			Fragments._Multiply__OclElement /* 1 */,
			Fragments._Multiply__Visitable /* 2 */,
			Fragments._Multiply__GASTMObject /* 3 */,
			Fragments._Multiply__GASTMSyntaxObject /* 4 */,
			Fragments._Multiply__OtherSyntaxObject /* 5 */,
			Fragments._Multiply__Operator /* 6 */,
			Fragments._Multiply__BinaryOperator /* 7 */,
			Fragments._Multiply__Multiply /* 8 */
		};
		private static final int @NonNull [] __Multiply = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Name =
		{
			Fragments._Name__OclAny /* 0 */,
			Fragments._Name__OclElement /* 1 */,
			Fragments._Name__Visitable /* 2 */,
			Fragments._Name__GASTMObject /* 3 */,
			Fragments._Name__GASTMSyntaxObject /* 4 */,
			Fragments._Name__OtherSyntaxObject /* 5 */,
			Fragments._Name__Name /* 6 */
		};
		private static final int @NonNull [] __Name = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NameReference =
		{
			Fragments._NameReference__OclAny /* 0 */,
			Fragments._NameReference__OclElement /* 1 */,
			Fragments._NameReference__Visitable /* 2 */,
			Fragments._NameReference__GASTMObject /* 3 */,
			Fragments._NameReference__GASTMSyntaxObject /* 4 */,
			Fragments._NameReference__Expression /* 5 */,
			Fragments._NameReference__NameReference /* 6 */
		};
		private static final int @NonNull [] __NameReference = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NameSpaceDefinition =
		{
			Fragments._NameSpaceDefinition__OclAny /* 0 */,
			Fragments._NameSpaceDefinition__OclElement /* 1 */,
			Fragments._NameSpaceDefinition__Visitable /* 2 */,
			Fragments._NameSpaceDefinition__GASTMObject /* 3 */,
			Fragments._NameSpaceDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._NameSpaceDefinition__DefinitionObject /* 5 */,
			Fragments._NameSpaceDefinition__NameSpaceDefinition /* 6 */
		};
		private static final int @NonNull [] __NameSpaceDefinition = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NameSpaceType =
		{
			Fragments._NameSpaceType__OclAny /* 0 */,
			Fragments._NameSpaceType__OclElement /* 1 */,
			Fragments._NameSpaceType__Visitable /* 2 */,
			Fragments._NameSpaceType__GASTMObject /* 3 */,
			Fragments._NameSpaceType__GASTMSyntaxObject /* 4 */,
			Fragments._NameSpaceType__Type /* 5 */,
			Fragments._NameSpaceType__NameSpaceType /* 6 */
		};
		private static final int @NonNull [] __NameSpaceType = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NamedType =
		{
			Fragments._NamedType__OclAny /* 0 */,
			Fragments._NamedType__OclElement /* 1 */,
			Fragments._NamedType__Visitable /* 2 */,
			Fragments._NamedType__GASTMObject /* 3 */,
			Fragments._NamedType__GASTMSyntaxObject /* 4 */,
			Fragments._NamedType__Type /* 5 */,
			Fragments._NamedType__DataType /* 6 */,
			Fragments._NamedType__NamedType /* 7 */
		};
		private static final int @NonNull [] __NamedType = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NamedTypeDefinition =
		{
			Fragments._NamedTypeDefinition__OclAny /* 0 */,
			Fragments._NamedTypeDefinition__OclElement /* 1 */,
			Fragments._NamedTypeDefinition__Visitable /* 2 */,
			Fragments._NamedTypeDefinition__GASTMObject /* 3 */,
			Fragments._NamedTypeDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._NamedTypeDefinition__DefinitionObject /* 5 */,
			Fragments._NamedTypeDefinition__TypeDefinition /* 6 */,
			Fragments._NamedTypeDefinition__NamedTypeDefinition /* 7 */
		};
		private static final int @NonNull [] __NamedTypeDefinition = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NamedTypeReference =
		{
			Fragments._NamedTypeReference__OclAny /* 0 */,
			Fragments._NamedTypeReference__OclElement /* 1 */,
			Fragments._NamedTypeReference__Visitable /* 2 */,
			Fragments._NamedTypeReference__GASTMObject /* 3 */,
			Fragments._NamedTypeReference__GASTMSyntaxObject /* 4 */,
			Fragments._NamedTypeReference__Type /* 5 */,
			Fragments._NamedTypeReference__TypeReference /* 6 */,
			Fragments._NamedTypeReference__NamedTypeReference /* 7 */
		};
		private static final int @NonNull [] __NamedTypeReference = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Negate =
		{
			Fragments._Negate__OclAny /* 0 */,
			Fragments._Negate__OclElement /* 1 */,
			Fragments._Negate__Visitable /* 2 */,
			Fragments._Negate__GASTMObject /* 3 */,
			Fragments._Negate__GASTMSyntaxObject /* 4 */,
			Fragments._Negate__OtherSyntaxObject /* 5 */,
			Fragments._Negate__Operator /* 6 */,
			Fragments._Negate__UnaryOperator /* 7 */,
			Fragments._Negate__Negate /* 8 */
		};
		private static final int @NonNull [] __Negate = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NewExpression =
		{
			Fragments._NewExpression__OclAny /* 0 */,
			Fragments._NewExpression__OclElement /* 1 */,
			Fragments._NewExpression__Visitable /* 2 */,
			Fragments._NewExpression__GASTMObject /* 3 */,
			Fragments._NewExpression__GASTMSyntaxObject /* 4 */,
			Fragments._NewExpression__Expression /* 5 */,
			Fragments._NewExpression__NewExpression /* 6 */
		};
		private static final int @NonNull [] __NewExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NoDef =
		{
			Fragments._NoDef__OclAny /* 0 */,
			Fragments._NoDef__OclElement /* 1 */,
			Fragments._NoDef__Visitable /* 2 */,
			Fragments._NoDef__StorageSpecification /* 3 */,
			Fragments._NoDef__NoDef /* 4 */
		};
		private static final int @NonNull [] __NoDef = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NonVirtual =
		{
			Fragments._NonVirtual__OclAny /* 0 */,
			Fragments._NonVirtual__OclElement /* 1 */,
			Fragments._NonVirtual__Visitable /* 2 */,
			Fragments._NonVirtual__GASTMObject /* 3 */,
			Fragments._NonVirtual__GASTMSyntaxObject /* 4 */,
			Fragments._NonVirtual__OtherSyntaxObject /* 5 */,
			Fragments._NonVirtual__VirtualSpecification /* 6 */,
			Fragments._NonVirtual__NonVirtual /* 7 */
		};
		private static final int @NonNull [] __NonVirtual = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Not =
		{
			Fragments._Not__OclAny /* 0 */,
			Fragments._Not__OclElement /* 1 */,
			Fragments._Not__Visitable /* 2 */,
			Fragments._Not__GASTMObject /* 3 */,
			Fragments._Not__GASTMSyntaxObject /* 4 */,
			Fragments._Not__OtherSyntaxObject /* 5 */,
			Fragments._Not__Operator /* 6 */,
			Fragments._Not__UnaryOperator /* 7 */,
			Fragments._Not__Not /* 8 */
		};
		private static final int @NonNull [] __Not = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NotEqual =
		{
			Fragments._NotEqual__OclAny /* 0 */,
			Fragments._NotEqual__OclElement /* 1 */,
			Fragments._NotEqual__Visitable /* 2 */,
			Fragments._NotEqual__GASTMObject /* 3 */,
			Fragments._NotEqual__GASTMSyntaxObject /* 4 */,
			Fragments._NotEqual__OtherSyntaxObject /* 5 */,
			Fragments._NotEqual__Operator /* 6 */,
			Fragments._NotEqual__BinaryOperator /* 7 */,
			Fragments._NotEqual__NotEqual /* 8 */
		};
		private static final int @NonNull [] __NotEqual = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NotGreater =
		{
			Fragments._NotGreater__OclAny /* 0 */,
			Fragments._NotGreater__OclElement /* 1 */,
			Fragments._NotGreater__Visitable /* 2 */,
			Fragments._NotGreater__GASTMObject /* 3 */,
			Fragments._NotGreater__GASTMSyntaxObject /* 4 */,
			Fragments._NotGreater__OtherSyntaxObject /* 5 */,
			Fragments._NotGreater__Operator /* 6 */,
			Fragments._NotGreater__BinaryOperator /* 7 */,
			Fragments._NotGreater__NotGreater /* 8 */
		};
		private static final int @NonNull [] __NotGreater = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _NotLess =
		{
			Fragments._NotLess__OclAny /* 0 */,
			Fragments._NotLess__OclElement /* 1 */,
			Fragments._NotLess__Visitable /* 2 */,
			Fragments._NotLess__GASTMObject /* 3 */,
			Fragments._NotLess__GASTMSyntaxObject /* 4 */,
			Fragments._NotLess__OtherSyntaxObject /* 5 */,
			Fragments._NotLess__Operator /* 6 */,
			Fragments._NotLess__BinaryOperator /* 7 */,
			Fragments._NotLess__NotLess /* 8 */
		};
		private static final int @NonNull [] __NotLess = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Operator =
		{
			Fragments._Operator__OclAny /* 0 */,
			Fragments._Operator__OclElement /* 1 */,
			Fragments._Operator__Visitable /* 2 */,
			Fragments._Operator__GASTMObject /* 3 */,
			Fragments._Operator__GASTMSyntaxObject /* 4 */,
			Fragments._Operator__OtherSyntaxObject /* 5 */,
			Fragments._Operator__Operator /* 6 */
		};
		private static final int @NonNull [] __Operator = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _OperatorAssign =
		{
			Fragments._OperatorAssign__OclAny /* 0 */,
			Fragments._OperatorAssign__OclElement /* 1 */,
			Fragments._OperatorAssign__Visitable /* 2 */,
			Fragments._OperatorAssign__GASTMObject /* 3 */,
			Fragments._OperatorAssign__GASTMSyntaxObject /* 4 */,
			Fragments._OperatorAssign__OtherSyntaxObject /* 5 */,
			Fragments._OperatorAssign__Operator /* 6 */,
			Fragments._OperatorAssign__BinaryOperator /* 7 */,
			Fragments._OperatorAssign__OperatorAssign /* 8 */
		};
		private static final int @NonNull [] __OperatorAssign = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Or =
		{
			Fragments._Or__OclAny /* 0 */,
			Fragments._Or__OclElement /* 1 */,
			Fragments._Or__Visitable /* 2 */,
			Fragments._Or__GASTMObject /* 3 */,
			Fragments._Or__GASTMSyntaxObject /* 4 */,
			Fragments._Or__OtherSyntaxObject /* 5 */,
			Fragments._Or__Operator /* 6 */,
			Fragments._Or__BinaryOperator /* 7 */,
			Fragments._Or__Or /* 8 */
		};
		private static final int @NonNull [] __Or = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _OtherSyntaxObject =
		{
			Fragments._OtherSyntaxObject__OclAny /* 0 */,
			Fragments._OtherSyntaxObject__OclElement /* 1 */,
			Fragments._OtherSyntaxObject__Visitable /* 2 */,
			Fragments._OtherSyntaxObject__GASTMObject /* 3 */,
			Fragments._OtherSyntaxObject__GASTMSyntaxObject /* 4 */,
			Fragments._OtherSyntaxObject__OtherSyntaxObject /* 5 */
		};
		private static final int @NonNull [] __OtherSyntaxObject = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _PerClassMember =
		{
			Fragments._PerClassMember__OclAny /* 0 */,
			Fragments._PerClassMember__OclElement /* 1 */,
			Fragments._PerClassMember__Visitable /* 2 */,
			Fragments._PerClassMember__StorageSpecification /* 3 */,
			Fragments._PerClassMember__PerClassMember /* 4 */
		};
		private static final int @NonNull [] __PerClassMember = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _PointerType =
		{
			Fragments._PointerType__OclAny /* 0 */,
			Fragments._PointerType__OclElement /* 1 */,
			Fragments._PointerType__Visitable /* 2 */,
			Fragments._PointerType__GASTMObject /* 3 */,
			Fragments._PointerType__GASTMSyntaxObject /* 4 */,
			Fragments._PointerType__Type /* 5 */,
			Fragments._PointerType__DataType /* 6 */,
			Fragments._PointerType__ConstructedType /* 7 */,
			Fragments._PointerType__PointerType /* 8 */
		};
		private static final int @NonNull [] __PointerType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _PostDecrement =
		{
			Fragments._PostDecrement__OclAny /* 0 */,
			Fragments._PostDecrement__OclElement /* 1 */,
			Fragments._PostDecrement__Visitable /* 2 */,
			Fragments._PostDecrement__GASTMObject /* 3 */,
			Fragments._PostDecrement__GASTMSyntaxObject /* 4 */,
			Fragments._PostDecrement__OtherSyntaxObject /* 5 */,
			Fragments._PostDecrement__Operator /* 6 */,
			Fragments._PostDecrement__UnaryOperator /* 7 */,
			Fragments._PostDecrement__PostDecrement /* 8 */
		};
		private static final int @NonNull [] __PostDecrement = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _PostIncrement =
		{
			Fragments._PostIncrement__OclAny /* 0 */,
			Fragments._PostIncrement__OclElement /* 1 */,
			Fragments._PostIncrement__Visitable /* 2 */,
			Fragments._PostIncrement__GASTMObject /* 3 */,
			Fragments._PostIncrement__GASTMSyntaxObject /* 4 */,
			Fragments._PostIncrement__OtherSyntaxObject /* 5 */,
			Fragments._PostIncrement__Operator /* 6 */,
			Fragments._PostIncrement__UnaryOperator /* 7 */,
			Fragments._PostIncrement__PostIncrement /* 8 */
		};
		private static final int @NonNull [] __PostIncrement = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _PreprocessorElement =
		{
			Fragments._PreprocessorElement__OclAny /* 0 */,
			Fragments._PreprocessorElement__OclElement /* 1 */,
			Fragments._PreprocessorElement__Visitable /* 2 */,
			Fragments._PreprocessorElement__GASTMObject /* 3 */,
			Fragments._PreprocessorElement__GASTMSyntaxObject /* 4 */,
			Fragments._PreprocessorElement__PreprocessorElement /* 5 */
		};
		private static final int @NonNull [] __PreprocessorElement = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _PrimitiveType =
		{
			Fragments._PrimitiveType__OclAny /* 0 */,
			Fragments._PrimitiveType__OclElement /* 1 */,
			Fragments._PrimitiveType__Visitable /* 2 */,
			Fragments._PrimitiveType__GASTMObject /* 3 */,
			Fragments._PrimitiveType__GASTMSyntaxObject /* 4 */,
			Fragments._PrimitiveType__Type /* 5 */,
			Fragments._PrimitiveType__DataType /* 6 */,
			Fragments._PrimitiveType__PrimitiveType /* 7 */
		};
		private static final int @NonNull [] __PrimitiveType = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Private =
		{
			Fragments._Private__OclAny /* 0 */,
			Fragments._Private__OclElement /* 1 */,
			Fragments._Private__Visitable /* 2 */,
			Fragments._Private__AccessKind /* 3 */,
			Fragments._Private__Private /* 4 */
		};
		private static final int @NonNull [] __Private = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ProgramScope =
		{
			Fragments._ProgramScope__OclAny /* 0 */,
			Fragments._ProgramScope__OclElement /* 1 */,
			Fragments._ProgramScope__Visitable /* 2 */,
			Fragments._ProgramScope__GASTMSemanticObject /* 3 */,
			Fragments._ProgramScope__Scope /* 4 */,
			Fragments._ProgramScope__ProgramScope /* 5 */
		};
		private static final int @NonNull [] __ProgramScope = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Project =
		{
			Fragments._Project__OclAny /* 0 */,
			Fragments._Project__OclElement /* 1 */,
			Fragments._Project__Visitable /* 2 */,
			Fragments._Project__GASTMSemanticObject /* 3 */,
			Fragments._Project__Project /* 4 */
		};
		private static final int @NonNull [] __Project = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Protected =
		{
			Fragments._Protected__OclAny /* 0 */,
			Fragments._Protected__OclElement /* 1 */,
			Fragments._Protected__Visitable /* 2 */,
			Fragments._Protected__AccessKind /* 3 */,
			Fragments._Protected__Protected /* 4 */
		};
		private static final int @NonNull [] __Protected = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Public =
		{
			Fragments._Public__OclAny /* 0 */,
			Fragments._Public__OclElement /* 1 */,
			Fragments._Public__Visitable /* 2 */,
			Fragments._Public__AccessKind /* 3 */,
			Fragments._Public__Public /* 4 */
		};
		private static final int @NonNull [] __Public = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _PureVirtual =
		{
			Fragments._PureVirtual__OclAny /* 0 */,
			Fragments._PureVirtual__OclElement /* 1 */,
			Fragments._PureVirtual__Visitable /* 2 */,
			Fragments._PureVirtual__GASTMObject /* 3 */,
			Fragments._PureVirtual__GASTMSyntaxObject /* 4 */,
			Fragments._PureVirtual__OtherSyntaxObject /* 5 */,
			Fragments._PureVirtual__VirtualSpecification /* 6 */,
			Fragments._PureVirtual__PureVirtual /* 7 */
		};
		private static final int @NonNull [] __PureVirtual = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _QualifiedIdentifierReference =
		{
			Fragments._QualifiedIdentifierReference__OclAny /* 0 */,
			Fragments._QualifiedIdentifierReference__OclElement /* 1 */,
			Fragments._QualifiedIdentifierReference__Visitable /* 2 */,
			Fragments._QualifiedIdentifierReference__GASTMObject /* 3 */,
			Fragments._QualifiedIdentifierReference__GASTMSyntaxObject /* 4 */,
			Fragments._QualifiedIdentifierReference__Expression /* 5 */,
			Fragments._QualifiedIdentifierReference__NameReference /* 6 */,
			Fragments._QualifiedIdentifierReference__QualifiedIdentifierReference /* 7 */
		};
		private static final int @NonNull [] __QualifiedIdentifierReference = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _QualifiedOverData =
		{
			Fragments._QualifiedOverData__OclAny /* 0 */,
			Fragments._QualifiedOverData__OclElement /* 1 */,
			Fragments._QualifiedOverData__Visitable /* 2 */,
			Fragments._QualifiedOverData__GASTMObject /* 3 */,
			Fragments._QualifiedOverData__GASTMSyntaxObject /* 4 */,
			Fragments._QualifiedOverData__Expression /* 5 */,
			Fragments._QualifiedOverData__NameReference /* 6 */,
			Fragments._QualifiedOverData__QualifiedIdentifierReference /* 7 */,
			Fragments._QualifiedOverData__QualifiedOverData /* 8 */
		};
		private static final int @NonNull [] __QualifiedOverData = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _QualifiedOverPointer =
		{
			Fragments._QualifiedOverPointer__OclAny /* 0 */,
			Fragments._QualifiedOverPointer__OclElement /* 1 */,
			Fragments._QualifiedOverPointer__Visitable /* 2 */,
			Fragments._QualifiedOverPointer__GASTMObject /* 3 */,
			Fragments._QualifiedOverPointer__GASTMSyntaxObject /* 4 */,
			Fragments._QualifiedOverPointer__Expression /* 5 */,
			Fragments._QualifiedOverPointer__NameReference /* 6 */,
			Fragments._QualifiedOverPointer__QualifiedIdentifierReference /* 7 */,
			Fragments._QualifiedOverPointer__QualifiedOverPointer /* 8 */
		};
		private static final int @NonNull [] __QualifiedOverPointer = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _RangeExpression =
		{
			Fragments._RangeExpression__OclAny /* 0 */,
			Fragments._RangeExpression__OclElement /* 1 */,
			Fragments._RangeExpression__Visitable /* 2 */,
			Fragments._RangeExpression__GASTMObject /* 3 */,
			Fragments._RangeExpression__GASTMSyntaxObject /* 4 */,
			Fragments._RangeExpression__Expression /* 5 */,
			Fragments._RangeExpression__RangeExpression /* 6 */
		};
		private static final int @NonNull [] __RangeExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _RangeType =
		{
			Fragments._RangeType__OclAny /* 0 */,
			Fragments._RangeType__OclElement /* 1 */,
			Fragments._RangeType__Visitable /* 2 */,
			Fragments._RangeType__GASTMObject /* 3 */,
			Fragments._RangeType__GASTMSyntaxObject /* 4 */,
			Fragments._RangeType__Type /* 5 */,
			Fragments._RangeType__DataType /* 6 */,
			Fragments._RangeType__ConstructedType /* 7 */,
			Fragments._RangeType__RangeType /* 8 */
		};
		private static final int @NonNull [] __RangeType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _RealLiteral =
		{
			Fragments._RealLiteral__OclAny /* 0 */,
			Fragments._RealLiteral__OclElement /* 1 */,
			Fragments._RealLiteral__Visitable /* 2 */,
			Fragments._RealLiteral__GASTMObject /* 3 */,
			Fragments._RealLiteral__GASTMSyntaxObject /* 4 */,
			Fragments._RealLiteral__Expression /* 5 */,
			Fragments._RealLiteral__Literal /* 6 */,
			Fragments._RealLiteral__RealLiteral /* 7 */
		};
		private static final int @NonNull [] __RealLiteral = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ReferenceType =
		{
			Fragments._ReferenceType__OclAny /* 0 */,
			Fragments._ReferenceType__OclElement /* 1 */,
			Fragments._ReferenceType__Visitable /* 2 */,
			Fragments._ReferenceType__GASTMObject /* 3 */,
			Fragments._ReferenceType__GASTMSyntaxObject /* 4 */,
			Fragments._ReferenceType__Type /* 5 */,
			Fragments._ReferenceType__DataType /* 6 */,
			Fragments._ReferenceType__ConstructedType /* 7 */,
			Fragments._ReferenceType__ReferenceType /* 8 */
		};
		private static final int @NonNull [] __ReferenceType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ReturnStatement =
		{
			Fragments._ReturnStatement__OclAny /* 0 */,
			Fragments._ReturnStatement__OclElement /* 1 */,
			Fragments._ReturnStatement__Visitable /* 2 */,
			Fragments._ReturnStatement__GASTMObject /* 3 */,
			Fragments._ReturnStatement__GASTMSyntaxObject /* 4 */,
			Fragments._ReturnStatement__Statement /* 5 */,
			Fragments._ReturnStatement__ReturnStatement /* 6 */
		};
		private static final int @NonNull [] __ReturnStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Scope =
		{
			Fragments._Scope__OclAny /* 0 */,
			Fragments._Scope__OclElement /* 1 */,
			Fragments._Scope__Visitable /* 2 */,
			Fragments._Scope__GASTMSemanticObject /* 3 */,
			Fragments._Scope__Scope /* 4 */
		};
		private static final int @NonNull [] __Scope = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ShortInteger =
		{
			Fragments._ShortInteger__OclAny /* 0 */,
			Fragments._ShortInteger__OclElement /* 1 */,
			Fragments._ShortInteger__Visitable /* 2 */,
			Fragments._ShortInteger__GASTMObject /* 3 */,
			Fragments._ShortInteger__GASTMSyntaxObject /* 4 */,
			Fragments._ShortInteger__Type /* 5 */,
			Fragments._ShortInteger__DataType /* 6 */,
			Fragments._ShortInteger__PrimitiveType /* 7 */,
			Fragments._ShortInteger__ShortInteger /* 8 */
		};
		private static final int @NonNull [] __ShortInteger = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SourceFile =
		{
			Fragments._SourceFile__OclAny /* 0 */,
			Fragments._SourceFile__OclElement /* 1 */,
			Fragments._SourceFile__Visitable /* 2 */,
			Fragments._SourceFile__GASTMSourceObject /* 3 */,
			Fragments._SourceFile__SourceFile /* 4 */
		};
		private static final int @NonNull [] __SourceFile = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SourceLocation =
		{
			Fragments._SourceLocation__OclAny /* 0 */,
			Fragments._SourceLocation__OclElement /* 1 */,
			Fragments._SourceLocation__Visitable /* 2 */,
			Fragments._SourceLocation__GASTMSourceObject /* 3 */,
			Fragments._SourceLocation__SourceLocation /* 4 */
		};
		private static final int @NonNull [] __SourceLocation = { 1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SpecificConcatString =
		{
			Fragments._SpecificConcatString__OclAny /* 0 */,
			Fragments._SpecificConcatString__OclElement /* 1 */,
			Fragments._SpecificConcatString__Visitable /* 2 */,
			Fragments._SpecificConcatString__GASTMObject /* 3 */,
			Fragments._SpecificConcatString__GASTMSyntaxObject /* 4 */,
			Fragments._SpecificConcatString__OtherSyntaxObject /* 5 */,
			Fragments._SpecificConcatString__Operator /* 6 */,
			Fragments._SpecificConcatString__BinaryOperator /* 7 */,
			Fragments._SpecificConcatString__SpecificConcatString /* 8 */
		};
		private static final int @NonNull [] __SpecificConcatString = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SpecificGreaterEqual =
		{
			Fragments._SpecificGreaterEqual__OclAny /* 0 */,
			Fragments._SpecificGreaterEqual__OclElement /* 1 */,
			Fragments._SpecificGreaterEqual__Visitable /* 2 */,
			Fragments._SpecificGreaterEqual__GASTMObject /* 3 */,
			Fragments._SpecificGreaterEqual__GASTMSyntaxObject /* 4 */,
			Fragments._SpecificGreaterEqual__OtherSyntaxObject /* 5 */,
			Fragments._SpecificGreaterEqual__Operator /* 6 */,
			Fragments._SpecificGreaterEqual__BinaryOperator /* 7 */,
			Fragments._SpecificGreaterEqual__SpecificGreaterEqual /* 8 */
		};
		private static final int @NonNull [] __SpecificGreaterEqual = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SpecificIn =
		{
			Fragments._SpecificIn__OclAny /* 0 */,
			Fragments._SpecificIn__OclElement /* 1 */,
			Fragments._SpecificIn__Visitable /* 2 */,
			Fragments._SpecificIn__GASTMObject /* 3 */,
			Fragments._SpecificIn__GASTMSyntaxObject /* 4 */,
			Fragments._SpecificIn__OtherSyntaxObject /* 5 */,
			Fragments._SpecificIn__Operator /* 6 */,
			Fragments._SpecificIn__BinaryOperator /* 7 */,
			Fragments._SpecificIn__SpecificIn /* 8 */
		};
		private static final int @NonNull [] __SpecificIn = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SpecificLessEqual =
		{
			Fragments._SpecificLessEqual__OclAny /* 0 */,
			Fragments._SpecificLessEqual__OclElement /* 1 */,
			Fragments._SpecificLessEqual__Visitable /* 2 */,
			Fragments._SpecificLessEqual__GASTMObject /* 3 */,
			Fragments._SpecificLessEqual__GASTMSyntaxObject /* 4 */,
			Fragments._SpecificLessEqual__OtherSyntaxObject /* 5 */,
			Fragments._SpecificLessEqual__Operator /* 6 */,
			Fragments._SpecificLessEqual__BinaryOperator /* 7 */,
			Fragments._SpecificLessEqual__SpecificLessEqual /* 8 */
		};
		private static final int @NonNull [] __SpecificLessEqual = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SpecificLike =
		{
			Fragments._SpecificLike__OclAny /* 0 */,
			Fragments._SpecificLike__OclElement /* 1 */,
			Fragments._SpecificLike__Visitable /* 2 */,
			Fragments._SpecificLike__GASTMObject /* 3 */,
			Fragments._SpecificLike__GASTMSyntaxObject /* 4 */,
			Fragments._SpecificLike__OtherSyntaxObject /* 5 */,
			Fragments._SpecificLike__Operator /* 6 */,
			Fragments._SpecificLike__BinaryOperator /* 7 */,
			Fragments._SpecificLike__SpecificLike /* 8 */
		};
		private static final int @NonNull [] __SpecificLike = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SpecificSelectStatement =
		{
			Fragments._SpecificSelectStatement__OclAny /* 0 */,
			Fragments._SpecificSelectStatement__OclElement /* 1 */,
			Fragments._SpecificSelectStatement__Visitable /* 2 */,
			Fragments._SpecificSelectStatement__GASTMObject /* 3 */,
			Fragments._SpecificSelectStatement__GASTMSyntaxObject /* 4 */,
			Fragments._SpecificSelectStatement__Statement /* 5 */,
			Fragments._SpecificSelectStatement__SpecificSelectStatement /* 6 */
		};
		private static final int @NonNull [] __SpecificSelectStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SpecificTriggerDefinition =
		{
			Fragments._SpecificTriggerDefinition__OclAny /* 0 */,
			Fragments._SpecificTriggerDefinition__OclElement /* 1 */,
			Fragments._SpecificTriggerDefinition__Visitable /* 2 */,
			Fragments._SpecificTriggerDefinition__GASTMObject /* 3 */,
			Fragments._SpecificTriggerDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._SpecificTriggerDefinition__DefinitionObject /* 5 */,
			Fragments._SpecificTriggerDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._SpecificTriggerDefinition__Definition /* 7 */,
			Fragments._SpecificTriggerDefinition__SpecificTriggerDefinition /* 8 */
		};
		private static final int @NonNull [] __SpecificTriggerDefinition = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Statement =
		{
			Fragments._Statement__OclAny /* 0 */,
			Fragments._Statement__OclElement /* 1 */,
			Fragments._Statement__Visitable /* 2 */,
			Fragments._Statement__GASTMObject /* 3 */,
			Fragments._Statement__GASTMSyntaxObject /* 4 */,
			Fragments._Statement__Statement /* 5 */
		};
		private static final int @NonNull [] __Statement = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _StorageSpecification =
		{
			Fragments._StorageSpecification__OclAny /* 0 */,
			Fragments._StorageSpecification__OclElement /* 1 */,
			Fragments._StorageSpecification__Visitable /* 2 */,
			Fragments._StorageSpecification__StorageSpecification /* 3 */
		};
		private static final int @NonNull [] __StorageSpecification = { 1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _String =
		{
			Fragments._String__OclAny /* 0 */,
			Fragments._String__OclElement /* 1 */,
			Fragments._String__Visitable /* 2 */,
			Fragments._String__GASTMObject /* 3 */,
			Fragments._String__GASTMSyntaxObject /* 4 */,
			Fragments._String__Type /* 5 */,
			Fragments._String__DataType /* 6 */,
			Fragments._String__PrimitiveType /* 7 */,
			Fragments._String__String /* 8 */
		};
		private static final int @NonNull [] __String = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _StringLiteral =
		{
			Fragments._StringLiteral__OclAny /* 0 */,
			Fragments._StringLiteral__OclElement /* 1 */,
			Fragments._StringLiteral__Visitable /* 2 */,
			Fragments._StringLiteral__GASTMObject /* 3 */,
			Fragments._StringLiteral__GASTMSyntaxObject /* 4 */,
			Fragments._StringLiteral__Expression /* 5 */,
			Fragments._StringLiteral__Literal /* 6 */,
			Fragments._StringLiteral__StringLiteral /* 7 */
		};
		private static final int @NonNull [] __StringLiteral = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _StructureType =
		{
			Fragments._StructureType__OclAny /* 0 */,
			Fragments._StructureType__OclElement /* 1 */,
			Fragments._StructureType__Visitable /* 2 */,
			Fragments._StructureType__GASTMObject /* 3 */,
			Fragments._StructureType__GASTMSyntaxObject /* 4 */,
			Fragments._StructureType__Type /* 5 */,
			Fragments._StructureType__DataType /* 6 */,
			Fragments._StructureType__AggregateType /* 7 */,
			Fragments._StructureType__StructureType /* 8 */
		};
		private static final int @NonNull [] __StructureType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Subtract =
		{
			Fragments._Subtract__OclAny /* 0 */,
			Fragments._Subtract__OclElement /* 1 */,
			Fragments._Subtract__Visitable /* 2 */,
			Fragments._Subtract__GASTMObject /* 3 */,
			Fragments._Subtract__GASTMSyntaxObject /* 4 */,
			Fragments._Subtract__OtherSyntaxObject /* 5 */,
			Fragments._Subtract__Operator /* 6 */,
			Fragments._Subtract__BinaryOperator /* 7 */,
			Fragments._Subtract__Subtract /* 8 */
		};
		private static final int @NonNull [] __Subtract = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SwitchCase =
		{
			Fragments._SwitchCase__OclAny /* 0 */,
			Fragments._SwitchCase__OclElement /* 1 */,
			Fragments._SwitchCase__Visitable /* 2 */,
			Fragments._SwitchCase__GASTMObject /* 3 */,
			Fragments._SwitchCase__GASTMSyntaxObject /* 4 */,
			Fragments._SwitchCase__OtherSyntaxObject /* 5 */,
			Fragments._SwitchCase__SwitchCase /* 6 */
		};
		private static final int @NonNull [] __SwitchCase = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _SwitchStatement =
		{
			Fragments._SwitchStatement__OclAny /* 0 */,
			Fragments._SwitchStatement__OclElement /* 1 */,
			Fragments._SwitchStatement__Visitable /* 2 */,
			Fragments._SwitchStatement__GASTMObject /* 3 */,
			Fragments._SwitchStatement__GASTMSyntaxObject /* 4 */,
			Fragments._SwitchStatement__Statement /* 5 */,
			Fragments._SwitchStatement__SwitchStatement /* 6 */
		};
		private static final int @NonNull [] __SwitchStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _TerminateStatement =
		{
			Fragments._TerminateStatement__OclAny /* 0 */,
			Fragments._TerminateStatement__OclElement /* 1 */,
			Fragments._TerminateStatement__Visitable /* 2 */,
			Fragments._TerminateStatement__GASTMObject /* 3 */,
			Fragments._TerminateStatement__GASTMSyntaxObject /* 4 */,
			Fragments._TerminateStatement__Statement /* 5 */,
			Fragments._TerminateStatement__TerminateStatement /* 6 */
		};
		private static final int @NonNull [] __TerminateStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _ThrowStatement =
		{
			Fragments._ThrowStatement__OclAny /* 0 */,
			Fragments._ThrowStatement__OclElement /* 1 */,
			Fragments._ThrowStatement__Visitable /* 2 */,
			Fragments._ThrowStatement__GASTMObject /* 3 */,
			Fragments._ThrowStatement__GASTMSyntaxObject /* 4 */,
			Fragments._ThrowStatement__Statement /* 5 */,
			Fragments._ThrowStatement__ThrowStatement /* 6 */
		};
		private static final int @NonNull [] __ThrowStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _TryStatement =
		{
			Fragments._TryStatement__OclAny /* 0 */,
			Fragments._TryStatement__OclElement /* 1 */,
			Fragments._TryStatement__Visitable /* 2 */,
			Fragments._TryStatement__GASTMObject /* 3 */,
			Fragments._TryStatement__GASTMSyntaxObject /* 4 */,
			Fragments._TryStatement__Statement /* 5 */,
			Fragments._TryStatement__TryStatement /* 6 */
		};
		private static final int @NonNull [] __TryStatement = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Type =
		{
			Fragments._Type__OclAny /* 0 */,
			Fragments._Type__OclElement /* 1 */,
			Fragments._Type__Visitable /* 2 */,
			Fragments._Type__GASTMObject /* 3 */,
			Fragments._Type__GASTMSyntaxObject /* 4 */,
			Fragments._Type__Type /* 5 */
		};
		private static final int @NonNull [] __Type = { 1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _TypeDefinition =
		{
			Fragments._TypeDefinition__OclAny /* 0 */,
			Fragments._TypeDefinition__OclElement /* 1 */,
			Fragments._TypeDefinition__Visitable /* 2 */,
			Fragments._TypeDefinition__GASTMObject /* 3 */,
			Fragments._TypeDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._TypeDefinition__DefinitionObject /* 5 */,
			Fragments._TypeDefinition__TypeDefinition /* 6 */
		};
		private static final int @NonNull [] __TypeDefinition = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _TypeQualifiedIdentifierReference =
		{
			Fragments._TypeQualifiedIdentifierReference__OclAny /* 0 */,
			Fragments._TypeQualifiedIdentifierReference__OclElement /* 1 */,
			Fragments._TypeQualifiedIdentifierReference__Visitable /* 2 */,
			Fragments._TypeQualifiedIdentifierReference__GASTMObject /* 3 */,
			Fragments._TypeQualifiedIdentifierReference__GASTMSyntaxObject /* 4 */,
			Fragments._TypeQualifiedIdentifierReference__Expression /* 5 */,
			Fragments._TypeQualifiedIdentifierReference__NameReference /* 6 */,
			Fragments._TypeQualifiedIdentifierReference__TypeQualifiedIdentifierReference /* 7 */
		};
		private static final int @NonNull [] __TypeQualifiedIdentifierReference = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _TypeReference =
		{
			Fragments._TypeReference__OclAny /* 0 */,
			Fragments._TypeReference__OclElement /* 1 */,
			Fragments._TypeReference__Visitable /* 2 */,
			Fragments._TypeReference__GASTMObject /* 3 */,
			Fragments._TypeReference__GASTMSyntaxObject /* 4 */,
			Fragments._TypeReference__Type /* 5 */,
			Fragments._TypeReference__TypeReference /* 6 */
		};
		private static final int @NonNull [] __TypeReference = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _TypesCatchBlock =
		{
			Fragments._TypesCatchBlock__OclAny /* 0 */,
			Fragments._TypesCatchBlock__OclElement /* 1 */,
			Fragments._TypesCatchBlock__Visitable /* 2 */,
			Fragments._TypesCatchBlock__GASTMObject /* 3 */,
			Fragments._TypesCatchBlock__GASTMSyntaxObject /* 4 */,
			Fragments._TypesCatchBlock__OtherSyntaxObject /* 5 */,
			Fragments._TypesCatchBlock__CatchBlock /* 6 */,
			Fragments._TypesCatchBlock__TypesCatchBlock /* 7 */
		};
		private static final int @NonNull [] __TypesCatchBlock = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _UnaryExpression =
		{
			Fragments._UnaryExpression__OclAny /* 0 */,
			Fragments._UnaryExpression__OclElement /* 1 */,
			Fragments._UnaryExpression__Visitable /* 2 */,
			Fragments._UnaryExpression__GASTMObject /* 3 */,
			Fragments._UnaryExpression__GASTMSyntaxObject /* 4 */,
			Fragments._UnaryExpression__Expression /* 5 */,
			Fragments._UnaryExpression__UnaryExpression /* 6 */
		};
		private static final int @NonNull [] __UnaryExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _UnaryOperator =
		{
			Fragments._UnaryOperator__OclAny /* 0 */,
			Fragments._UnaryOperator__OclElement /* 1 */,
			Fragments._UnaryOperator__Visitable /* 2 */,
			Fragments._UnaryOperator__GASTMObject /* 3 */,
			Fragments._UnaryOperator__GASTMSyntaxObject /* 4 */,
			Fragments._UnaryOperator__OtherSyntaxObject /* 5 */,
			Fragments._UnaryOperator__Operator /* 6 */,
			Fragments._UnaryOperator__UnaryOperator /* 7 */
		};
		private static final int @NonNull [] __UnaryOperator = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _UnaryPlus =
		{
			Fragments._UnaryPlus__OclAny /* 0 */,
			Fragments._UnaryPlus__OclElement /* 1 */,
			Fragments._UnaryPlus__Visitable /* 2 */,
			Fragments._UnaryPlus__GASTMObject /* 3 */,
			Fragments._UnaryPlus__GASTMSyntaxObject /* 4 */,
			Fragments._UnaryPlus__OtherSyntaxObject /* 5 */,
			Fragments._UnaryPlus__Operator /* 6 */,
			Fragments._UnaryPlus__UnaryOperator /* 7 */,
			Fragments._UnaryPlus__UnaryPlus /* 8 */
		};
		private static final int @NonNull [] __UnaryPlus = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _UnionType =
		{
			Fragments._UnionType__OclAny /* 0 */,
			Fragments._UnionType__OclElement /* 1 */,
			Fragments._UnionType__Visitable /* 2 */,
			Fragments._UnionType__GASTMObject /* 3 */,
			Fragments._UnionType__GASTMSyntaxObject /* 4 */,
			Fragments._UnionType__Type /* 5 */,
			Fragments._UnionType__DataType /* 6 */,
			Fragments._UnionType__AggregateType /* 7 */,
			Fragments._UnionType__UnionType /* 8 */
		};
		private static final int @NonNull [] __UnionType = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _UnnamedTypeReference =
		{
			Fragments._UnnamedTypeReference__OclAny /* 0 */,
			Fragments._UnnamedTypeReference__OclElement /* 1 */,
			Fragments._UnnamedTypeReference__Visitable /* 2 */,
			Fragments._UnnamedTypeReference__GASTMObject /* 3 */,
			Fragments._UnnamedTypeReference__GASTMSyntaxObject /* 4 */,
			Fragments._UnnamedTypeReference__Type /* 5 */,
			Fragments._UnnamedTypeReference__TypeReference /* 6 */,
			Fragments._UnnamedTypeReference__UnnamedTypeReference /* 7 */
		};
		private static final int @NonNull [] __UnnamedTypeReference = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _VariableCatchBlock =
		{
			Fragments._VariableCatchBlock__OclAny /* 0 */,
			Fragments._VariableCatchBlock__OclElement /* 1 */,
			Fragments._VariableCatchBlock__Visitable /* 2 */,
			Fragments._VariableCatchBlock__GASTMObject /* 3 */,
			Fragments._VariableCatchBlock__GASTMSyntaxObject /* 4 */,
			Fragments._VariableCatchBlock__OtherSyntaxObject /* 5 */,
			Fragments._VariableCatchBlock__CatchBlock /* 6 */,
			Fragments._VariableCatchBlock__VariableCatchBlock /* 7 */
		};
		private static final int @NonNull [] __VariableCatchBlock = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _VariableDeclaration =
		{
			Fragments._VariableDeclaration__OclAny /* 0 */,
			Fragments._VariableDeclaration__OclElement /* 1 */,
			Fragments._VariableDeclaration__Visitable /* 2 */,
			Fragments._VariableDeclaration__GASTMObject /* 3 */,
			Fragments._VariableDeclaration__GASTMSyntaxObject /* 4 */,
			Fragments._VariableDeclaration__DefinitionObject /* 5 */,
			Fragments._VariableDeclaration__DeclarationOrDefinition /* 6 */,
			Fragments._VariableDeclaration__Declaration /* 7 */,
			Fragments._VariableDeclaration__VariableDeclaration /* 8 */
		};
		private static final int @NonNull [] __VariableDeclaration = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _VariableDefinition =
		{
			Fragments._VariableDefinition__OclAny /* 0 */,
			Fragments._VariableDefinition__OclElement /* 1 */,
			Fragments._VariableDefinition__Visitable /* 2 */,
			Fragments._VariableDefinition__GASTMObject /* 3 */,
			Fragments._VariableDefinition__GASTMSyntaxObject /* 4 */,
			Fragments._VariableDefinition__DefinitionObject /* 5 */,
			Fragments._VariableDefinition__DeclarationOrDefinition /* 6 */,
			Fragments._VariableDefinition__Definition /* 7 */,
			Fragments._VariableDefinition__DataDefinition /* 8 */,
			Fragments._VariableDefinition__VariableDefinition /* 9 */
		};
		private static final int @NonNull [] __VariableDefinition = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Virtual =
		{
			Fragments._Virtual__OclAny /* 0 */,
			Fragments._Virtual__OclElement /* 1 */,
			Fragments._Virtual__Visitable /* 2 */,
			Fragments._Virtual__GASTMObject /* 3 */,
			Fragments._Virtual__GASTMSyntaxObject /* 4 */,
			Fragments._Virtual__OtherSyntaxObject /* 5 */,
			Fragments._Virtual__VirtualSpecification /* 6 */,
			Fragments._Virtual__Virtual /* 7 */
		};
		private static final int @NonNull [] __Virtual = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _VirtualSpecification =
		{
			Fragments._VirtualSpecification__OclAny /* 0 */,
			Fragments._VirtualSpecification__OclElement /* 1 */,
			Fragments._VirtualSpecification__Visitable /* 2 */,
			Fragments._VirtualSpecification__GASTMObject /* 3 */,
			Fragments._VirtualSpecification__GASTMSyntaxObject /* 4 */,
			Fragments._VirtualSpecification__OtherSyntaxObject /* 5 */,
			Fragments._VirtualSpecification__VirtualSpecification /* 6 */
		};
		private static final int @NonNull [] __VirtualSpecification = { 1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Visitable =
		{
			Fragments._Visitable__OclAny /* 0 */,
			Fragments._Visitable__OclElement /* 1 */,
			Fragments._Visitable__Visitable /* 2 */
		};
		private static final int @NonNull [] __Visitable = { 1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _Void =
		{
			Fragments._Void__OclAny /* 0 */,
			Fragments._Void__OclElement /* 1 */,
			Fragments._Void__Visitable /* 2 */,
			Fragments._Void__GASTMObject /* 3 */,
			Fragments._Void__GASTMSyntaxObject /* 4 */,
			Fragments._Void__Type /* 5 */,
			Fragments._Void__DataType /* 6 */,
			Fragments._Void__PrimitiveType /* 7 */,
			Fragments._Void__Void /* 8 */
		};
		private static final int @NonNull [] __Void = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _WhileStatement =
		{
			Fragments._WhileStatement__OclAny /* 0 */,
			Fragments._WhileStatement__OclElement /* 1 */,
			Fragments._WhileStatement__Visitable /* 2 */,
			Fragments._WhileStatement__GASTMObject /* 3 */,
			Fragments._WhileStatement__GASTMSyntaxObject /* 4 */,
			Fragments._WhileStatement__Statement /* 5 */,
			Fragments._WhileStatement__LoopStatement /* 6 */,
			Fragments._WhileStatement__WhileStatement /* 7 */
		};
		private static final int @NonNull [] __WhileStatement = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull ExecutorFragment @NonNull [] _WideCharacter =
		{
			Fragments._WideCharacter__OclAny /* 0 */,
			Fragments._WideCharacter__OclElement /* 1 */,
			Fragments._WideCharacter__Visitable /* 2 */,
			Fragments._WideCharacter__GASTMObject /* 3 */,
			Fragments._WideCharacter__GASTMSyntaxObject /* 4 */,
			Fragments._WideCharacter__Type /* 5 */,
			Fragments._WideCharacter__DataType /* 6 */,
			Fragments._WideCharacter__PrimitiveType /* 7 */,
			Fragments._WideCharacter__WideCharacter /* 8 */
		};
		private static final int @NonNull [] __WideCharacter = { 1,1,1,1,1,1,1,1,1 };

		/**
		 *	Install the fragment descriptors in the class descriptors.
		 */
		static {
			Types._AccessKind.initFragments(_AccessKind, __AccessKind);
			Types._ActualParameter.initFragments(_ActualParameter, __ActualParameter);
			Types._ActualParameterExpression.initFragments(_ActualParameterExpression, __ActualParameterExpression);
			Types._Add.initFragments(_Add, __Add);
			Types._AddressOf.initFragments(_AddressOf, __AddressOf);
			Types._AggregateExpression.initFragments(_AggregateExpression, __AggregateExpression);
			Types._AggregateScope.initFragments(_AggregateScope, __AggregateScope);
			Types._AggregateType.initFragments(_AggregateType, __AggregateType);
			Types._AggregateTypeDefinition.initFragments(_AggregateTypeDefinition, __AggregateTypeDefinition);
			Types._And.initFragments(_And, __And);
			Types._AnnotationExpression.initFragments(_AnnotationExpression, __AnnotationExpression);
			Types._AnnotationType.initFragments(_AnnotationType, __AnnotationType);
			Types._ArrayAccess.initFragments(_ArrayAccess, __ArrayAccess);
			Types._ArrayType.initFragments(_ArrayType, __ArrayType);
			Types._Assign.initFragments(_Assign, __Assign);
			Types._BinaryExpression.initFragments(_BinaryExpression, __BinaryExpression);
			Types._BinaryOperator.initFragments(_BinaryOperator, __BinaryOperator);
			Types._BitAnd.initFragments(_BitAnd, __BitAnd);
			Types._BitFieldDefinition.initFragments(_BitFieldDefinition, __BitFieldDefinition);
			Types._BitLeftShift.initFragments(_BitLeftShift, __BitLeftShift);
			Types._BitLiteral.initFragments(_BitLiteral, __BitLiteral);
			Types._BitNot.initFragments(_BitNot, __BitNot);
			Types._BitOr.initFragments(_BitOr, __BitOr);
			Types._BitRightShift.initFragments(_BitRightShift, __BitRightShift);
			Types._BitXor.initFragments(_BitXor, __BitXor);
			Types._BlockScope.initFragments(_BlockScope, __BlockScope);
			Types._BlockStatement.initFragments(_BlockStatement, __BlockStatement);
			Types._Boolean.initFragments(_Boolean, __Boolean);
			Types._BooleanLiteral.initFragments(_BooleanLiteral, __BooleanLiteral);
			Types._BreakStatement.initFragments(_BreakStatement, __BreakStatement);
			Types._ByReferenceActualParameterExpression.initFragments(_ByReferenceActualParameterExpression, __ByReferenceActualParameterExpression);
			Types._ByReferenceFormalParameterType.initFragments(_ByReferenceFormalParameterType, __ByReferenceFormalParameterType);
			Types._ByValueActualParameterExpression.initFragments(_ByValueActualParameterExpression, __ByValueActualParameterExpression);
			Types._ByValueFormalParameterType.initFragments(_ByValueFormalParameterType, __ByValueFormalParameterType);
			Types._Byte.initFragments(_Byte, __Byte);
			Types._CaseBlock.initFragments(_CaseBlock, __CaseBlock);
			Types._CastExpression.initFragments(_CastExpression, __CastExpression);
			Types._CatchBlock.initFragments(_CatchBlock, __CatchBlock);
			Types._CharLiteral.initFragments(_CharLiteral, __CharLiteral);
			Types._Character.initFragments(_Character, __Character);
			Types._ClassType.initFragments(_ClassType, __ClassType);
			Types._CollectionType.initFragments(_CollectionType, __CollectionType);
			Types._Comment.initFragments(_Comment, __Comment);
			Types._CompilationUnit.initFragments(_CompilationUnit, __CompilationUnit);
			Types._ConditionalExpression.initFragments(_ConditionalExpression, __ConditionalExpression);
			Types._ConstructedType.initFragments(_ConstructedType, __ConstructedType);
			Types._ContinueStatement.initFragments(_ContinueStatement, __ContinueStatement);
			Types._DataDefinition.initFragments(_DataDefinition, __DataDefinition);
			Types._DataType.initFragments(_DataType, __DataType);
			Types._Declaration.initFragments(_Declaration, __Declaration);
			Types._DeclarationOrDefinition.initFragments(_DeclarationOrDefinition, __DeclarationOrDefinition);
			Types._DeclarationOrDefinitionStatement.initFragments(_DeclarationOrDefinitionStatement, __DeclarationOrDefinitionStatement);
			Types._Decrement.initFragments(_Decrement, __Decrement);
			Types._DefaultBlock.initFragments(_DefaultBlock, __DefaultBlock);
			Types._Definition.initFragments(_Definition, __Definition);
			Types._DefinitionObject.initFragments(_DefinitionObject, __DefinitionObject);
			Types._DeleteStatement.initFragments(_DeleteStatement, __DeleteStatement);
			Types._DelphiBlockStatement.initFragments(_DelphiBlockStatement, __DelphiBlockStatement);
			Types._DelphiFunctionCallExpression.initFragments(_DelphiFunctionCallExpression, __DelphiFunctionCallExpression);
			Types._DelphiImplementationSection.initFragments(_DelphiImplementationSection, __DelphiImplementationSection);
			Types._DelphiInterfaceSection.initFragments(_DelphiInterfaceSection, __DelphiInterfaceSection);
			Types._DelphiUnit.initFragments(_DelphiUnit, __DelphiUnit);
			Types._DelphiWithStatement.initFragments(_DelphiWithStatement, __DelphiWithStatement);
			Types._Deref.initFragments(_Deref, __Deref);
			Types._DerivesFrom.initFragments(_DerivesFrom, __DerivesFrom);
			Types._Dimension.initFragments(_Dimension, __Dimension);
			Types._Divide.initFragments(_Divide, __Divide);
			Types._DoWhileStatement.initFragments(_DoWhileStatement, __DoWhileStatement);
			Types._Double.initFragments(_Double, __Double);
			Types._EmptyStatement.initFragments(_EmptyStatement, __EmptyStatement);
			Types._EntryDefinition.initFragments(_EntryDefinition, __EntryDefinition);
			Types._EnumLiteralDefinition.initFragments(_EnumLiteralDefinition, __EnumLiteralDefinition);
			Types._EnumType.initFragments(_EnumType, __EnumType);
			Types._Equal.initFragments(_Equal, __Equal);
			Types._ExceptionType.initFragments(_ExceptionType, __ExceptionType);
			Types._Exponent.initFragments(_Exponent, __Exponent);
			Types._Expression.initFragments(_Expression, __Expression);
			Types._ExpressionStatement.initFragments(_ExpressionStatement, __ExpressionStatement);
			Types._External.initFragments(_External, __External);
			Types._FileLocal.initFragments(_FileLocal, __FileLocal);
			Types._Float.initFragments(_Float, __Float);
			Types._ForCheckAfterStatement.initFragments(_ForCheckAfterStatement, __ForCheckAfterStatement);
			Types._ForCheckBeforeStatement.initFragments(_ForCheckBeforeStatement, __ForCheckBeforeStatement);
			Types._ForStatement.initFragments(_ForStatement, __ForStatement);
			Types._FormalParameterDeclaration.initFragments(_FormalParameterDeclaration, __FormalParameterDeclaration);
			Types._FormalParameterDefinition.initFragments(_FormalParameterDefinition, __FormalParameterDefinition);
			Types._FormalParameterType.initFragments(_FormalParameterType, __FormalParameterType);
			Types._FunctionCallExpression.initFragments(_FunctionCallExpression, __FunctionCallExpression);
			Types._FunctionDeclaration.initFragments(_FunctionDeclaration, __FunctionDeclaration);
			Types._FunctionDefinition.initFragments(_FunctionDefinition, __FunctionDefinition);
			Types._FunctionMemberAttribute.initFragments(_FunctionMemberAttribute, __FunctionMemberAttribute);
			Types._FunctionMemberAttributes.initFragments(_FunctionMemberAttributes, __FunctionMemberAttributes);
			Types._FunctionPersistent.initFragments(_FunctionPersistent, __FunctionPersistent);
			Types._FunctionScope.initFragments(_FunctionScope, __FunctionScope);
			Types._FunctionType.initFragments(_FunctionType, __FunctionType);
			Types._GASTMObject.initFragments(_GASTMObject, __GASTMObject);
			Types._GASTMSemanticObject.initFragments(_GASTMSemanticObject, __GASTMSemanticObject);
			Types._GASTMSourceObject.initFragments(_GASTMSourceObject, __GASTMSourceObject);
			Types._GASTMSyntaxObject.initFragments(_GASTMSyntaxObject, __GASTMSyntaxObject);
			Types._GlobalScope.initFragments(_GlobalScope, __GlobalScope);
			Types._Greater.initFragments(_Greater, __Greater);
			Types._IdentifierReference.initFragments(_IdentifierReference, __IdentifierReference);
			Types._IfStatement.initFragments(_IfStatement, __IfStatement);
			Types._IncludeUnit.initFragments(_IncludeUnit, __IncludeUnit);
			Types._Increment.initFragments(_Increment, __Increment);
			Types._Integer.initFragments(_Integer, __Integer);
			Types._IntegerLiteral.initFragments(_IntegerLiteral, __IntegerLiteral);
			Types._JumpStatement.initFragments(_JumpStatement, __JumpStatement);
			Types._LabelAccess.initFragments(_LabelAccess, __LabelAccess);
			Types._LabelDefinition.initFragments(_LabelDefinition, __LabelDefinition);
			Types._LabelType.initFragments(_LabelType, __LabelType);
			Types._LabeledStatement.initFragments(_LabeledStatement, __LabeledStatement);
			Types._Less.initFragments(_Less, __Less);
			Types._Literal.initFragments(_Literal, __Literal);
			Types._LongDouble.initFragments(_LongDouble, __LongDouble);
			Types._LongInteger.initFragments(_LongInteger, __LongInteger);
			Types._LoopStatement.initFragments(_LoopStatement, __LoopStatement);
			Types._MacroCall.initFragments(_MacroCall, __MacroCall);
			Types._MacroDefinition.initFragments(_MacroDefinition, __MacroDefinition);
			Types._MissingActualParameter.initFragments(_MissingActualParameter, __MissingActualParameter);
			Types._Modulus.initFragments(_Modulus, __Modulus);
			Types._Multiply.initFragments(_Multiply, __Multiply);
			Types._Name.initFragments(_Name, __Name);
			Types._NameReference.initFragments(_NameReference, __NameReference);
			Types._NameSpaceDefinition.initFragments(_NameSpaceDefinition, __NameSpaceDefinition);
			Types._NameSpaceType.initFragments(_NameSpaceType, __NameSpaceType);
			Types._NamedType.initFragments(_NamedType, __NamedType);
			Types._NamedTypeDefinition.initFragments(_NamedTypeDefinition, __NamedTypeDefinition);
			Types._NamedTypeReference.initFragments(_NamedTypeReference, __NamedTypeReference);
			Types._Negate.initFragments(_Negate, __Negate);
			Types._NewExpression.initFragments(_NewExpression, __NewExpression);
			Types._NoDef.initFragments(_NoDef, __NoDef);
			Types._NonVirtual.initFragments(_NonVirtual, __NonVirtual);
			Types._Not.initFragments(_Not, __Not);
			Types._NotEqual.initFragments(_NotEqual, __NotEqual);
			Types._NotGreater.initFragments(_NotGreater, __NotGreater);
			Types._NotLess.initFragments(_NotLess, __NotLess);
			Types._Operator.initFragments(_Operator, __Operator);
			Types._OperatorAssign.initFragments(_OperatorAssign, __OperatorAssign);
			Types._Or.initFragments(_Or, __Or);
			Types._OtherSyntaxObject.initFragments(_OtherSyntaxObject, __OtherSyntaxObject);
			Types._PerClassMember.initFragments(_PerClassMember, __PerClassMember);
			Types._PointerType.initFragments(_PointerType, __PointerType);
			Types._PostDecrement.initFragments(_PostDecrement, __PostDecrement);
			Types._PostIncrement.initFragments(_PostIncrement, __PostIncrement);
			Types._PreprocessorElement.initFragments(_PreprocessorElement, __PreprocessorElement);
			Types._PrimitiveType.initFragments(_PrimitiveType, __PrimitiveType);
			Types._Private.initFragments(_Private, __Private);
			Types._ProgramScope.initFragments(_ProgramScope, __ProgramScope);
			Types._Project.initFragments(_Project, __Project);
			Types._Protected.initFragments(_Protected, __Protected);
			Types._Public.initFragments(_Public, __Public);
			Types._PureVirtual.initFragments(_PureVirtual, __PureVirtual);
			Types._QualifiedIdentifierReference.initFragments(_QualifiedIdentifierReference, __QualifiedIdentifierReference);
			Types._QualifiedOverData.initFragments(_QualifiedOverData, __QualifiedOverData);
			Types._QualifiedOverPointer.initFragments(_QualifiedOverPointer, __QualifiedOverPointer);
			Types._RangeExpression.initFragments(_RangeExpression, __RangeExpression);
			Types._RangeType.initFragments(_RangeType, __RangeType);
			Types._RealLiteral.initFragments(_RealLiteral, __RealLiteral);
			Types._ReferenceType.initFragments(_ReferenceType, __ReferenceType);
			Types._ReturnStatement.initFragments(_ReturnStatement, __ReturnStatement);
			Types._Scope.initFragments(_Scope, __Scope);
			Types._ShortInteger.initFragments(_ShortInteger, __ShortInteger);
			Types._SourceFile.initFragments(_SourceFile, __SourceFile);
			Types._SourceLocation.initFragments(_SourceLocation, __SourceLocation);
			Types._SpecificConcatString.initFragments(_SpecificConcatString, __SpecificConcatString);
			Types._SpecificGreaterEqual.initFragments(_SpecificGreaterEqual, __SpecificGreaterEqual);
			Types._SpecificIn.initFragments(_SpecificIn, __SpecificIn);
			Types._SpecificLessEqual.initFragments(_SpecificLessEqual, __SpecificLessEqual);
			Types._SpecificLike.initFragments(_SpecificLike, __SpecificLike);
			Types._SpecificSelectStatement.initFragments(_SpecificSelectStatement, __SpecificSelectStatement);
			Types._SpecificTriggerDefinition.initFragments(_SpecificTriggerDefinition, __SpecificTriggerDefinition);
			Types._Statement.initFragments(_Statement, __Statement);
			Types._StorageSpecification.initFragments(_StorageSpecification, __StorageSpecification);
			Types._String.initFragments(_String, __String);
			Types._StringLiteral.initFragments(_StringLiteral, __StringLiteral);
			Types._StructureType.initFragments(_StructureType, __StructureType);
			Types._Subtract.initFragments(_Subtract, __Subtract);
			Types._SwitchCase.initFragments(_SwitchCase, __SwitchCase);
			Types._SwitchStatement.initFragments(_SwitchStatement, __SwitchStatement);
			Types._TerminateStatement.initFragments(_TerminateStatement, __TerminateStatement);
			Types._ThrowStatement.initFragments(_ThrowStatement, __ThrowStatement);
			Types._TryStatement.initFragments(_TryStatement, __TryStatement);
			Types._Type.initFragments(_Type, __Type);
			Types._TypeDefinition.initFragments(_TypeDefinition, __TypeDefinition);
			Types._TypeQualifiedIdentifierReference.initFragments(_TypeQualifiedIdentifierReference, __TypeQualifiedIdentifierReference);
			Types._TypeReference.initFragments(_TypeReference, __TypeReference);
			Types._TypesCatchBlock.initFragments(_TypesCatchBlock, __TypesCatchBlock);
			Types._UnaryExpression.initFragments(_UnaryExpression, __UnaryExpression);
			Types._UnaryOperator.initFragments(_UnaryOperator, __UnaryOperator);
			Types._UnaryPlus.initFragments(_UnaryPlus, __UnaryPlus);
			Types._UnionType.initFragments(_UnionType, __UnionType);
			Types._UnnamedTypeReference.initFragments(_UnnamedTypeReference, __UnnamedTypeReference);
			Types._VariableCatchBlock.initFragments(_VariableCatchBlock, __VariableCatchBlock);
			Types._VariableDeclaration.initFragments(_VariableDeclaration, __VariableDeclaration);
			Types._VariableDefinition.initFragments(_VariableDefinition, __VariableDefinition);
			Types._Virtual.initFragments(_Virtual, __Virtual);
			Types._VirtualSpecification.initFragments(_VirtualSpecification, __VirtualSpecification);
			Types._Visitable.initFragments(_Visitable, __Visitable);
			Types._Void.initFragments(_Void, __Void);
			Types._WhileStatement.initFragments(_WhileStatement, __WhileStatement);
			Types._WideCharacter.initFragments(_WideCharacter, __WideCharacter);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::TypeFragments and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of local operations or local operation overrides for each fragment of each type.
	 */
	public static class FragmentOperations1 {
		static {
			Init.initStart();
			TypeFragments.init();
		}

		private static final @NonNull ExecutorOperation @NonNull [] _AccessKind__AccessKind = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AccessKind__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AccessKind__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AccessKind__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameter__ActualParameter = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameter__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameter__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameter__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameterExpression__ActualParameterExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameterExpression__ActualParameter = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameterExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameterExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ActualParameterExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Add__Add = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Add__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__AddressOf = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AddressOf__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _AggregateExpression__AggregateExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _AggregateScope__AggregateScope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateScope__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateScope__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateScope__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateScope__Scope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateScope__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__AggregateType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__AggregateTypeDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__TypeDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AggregateTypeDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _And__And = {};
		private static final @NonNull ExecutorOperation @NonNull [] _And__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _And__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _And__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _And__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _And__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _And__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _And__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _And__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationExpression__AnnotationExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__AnnotationType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__AggregateType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _AnnotationType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ArrayAccess__ArrayAccess = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayAccess__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayAccess__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayAccess__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayAccess__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayAccess__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayAccess__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__ArrayType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__ConstructedType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ArrayType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Assign__Assign = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Assign__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BinaryExpression__BinaryExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BinaryOperator__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__BitAnd = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitAnd__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__BitFieldDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__DataDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitFieldDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__BitLeftShift = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLeftShift__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__BitLiteral = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__Literal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitLiteral__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__BitNot = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitNot__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__BitOr = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitOr__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__BitRightShift = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitRightShift__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__BitXor = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BitXor__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BlockScope__BlockScope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockScope__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockScope__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockScope__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockScope__Scope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockScope__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BlockStatement__BlockStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BlockStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__Boolean = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Boolean__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__BooleanLiteral = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__Literal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BooleanLiteral__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _BreakStatement__BreakStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BreakStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BreakStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BreakStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BreakStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _BreakStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _BreakStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceActualParameterExpression__ByReferenceActualParameterExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceActualParameterExpression__ActualParameter = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceActualParameterExpression__ActualParameterExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceActualParameterExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceActualParameterExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceActualParameterExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__ByReferenceFormalParameterType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__FormalParameterType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByReferenceFormalParameterType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ByValueActualParameterExpression__ByValueActualParameterExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueActualParameterExpression__ActualParameter = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueActualParameterExpression__ActualParameterExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueActualParameterExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueActualParameterExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueActualParameterExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__ByValueFormalParameterType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__FormalParameterType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ByValueFormalParameterType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Byte__Byte = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Byte__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__CaseBlock = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__SwitchCase = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CaseBlock__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _CastExpression__CastExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CastExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CastExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CastExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CastExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CastExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CastExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _CatchBlock__CatchBlock = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CatchBlock__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CatchBlock__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CatchBlock__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CatchBlock__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CatchBlock__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CatchBlock__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__CharLiteral = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__Literal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CharLiteral__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Character__Character = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Character__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__ClassType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__AggregateType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ClassType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__CollectionType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__ConstructedType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CollectionType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Comment__Comment = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Comment__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Comment__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Comment__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Comment__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Comment__PreprocessorElement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Comment__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _CompilationUnit__CompilationUnit = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CompilationUnit__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CompilationUnit__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CompilationUnit__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CompilationUnit__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _CompilationUnit__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _CompilationUnit__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ConditionalExpression__ConditionalExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConditionalExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConditionalExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConditionalExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConditionalExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ConditionalExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ConditionalExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__ConstructedType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ConstructedType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ContinueStatement__ContinueStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ContinueStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ContinueStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ContinueStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ContinueStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ContinueStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ContinueStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__DataDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DataDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DataType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DataType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DataType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DataType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__Declaration = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Declaration__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinitionStatement__DeclarationOrDefinitionStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinitionStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinitionStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinitionStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinitionStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinitionStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeclarationOrDefinitionStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__Decrement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Decrement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__DefaultBlock = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__SwitchCase = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefaultBlock__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Definition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Definition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Definition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Definition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Definition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Definition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Definition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Definition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DefinitionObject__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefinitionObject__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefinitionObject__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DefinitionObject__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DefinitionObject__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DefinitionObject__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DeleteStatement__DeleteStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeleteStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeleteStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeleteStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DeleteStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DeleteStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DeleteStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__DelphiBlockStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__BlockStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiBlockStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__DelphiFunctionCallExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__FunctionCallExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiFunctionCallExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__DelphiImplementationSection = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__CompilationUnit = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiImplementationSection__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__DelphiInterfaceSection = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__CompilationUnit = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiInterfaceSection__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__DelphiUnit = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__CompilationUnit = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiUnit__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__DelphiWithStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__BlockStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DelphiWithStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Deref__Deref = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Deref__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DerivesFrom__DerivesFrom = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DerivesFrom__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DerivesFrom__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DerivesFrom__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DerivesFrom__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DerivesFrom__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DerivesFrom__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Dimension__Dimension = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Dimension__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Dimension__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Dimension__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Dimension__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Dimension__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Dimension__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Divide__Divide = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Divide__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__DoWhileStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__LoopStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _DoWhileStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Double__Double = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Double__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _EmptyStatement__EmptyStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EmptyStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EmptyStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EmptyStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EmptyStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EmptyStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EmptyStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__EntryDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EntryDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__EnumLiteralDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumLiteralDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__EnumType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _EnumType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Equal__Equal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Equal__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__ExceptionType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExceptionType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__Exponent = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Exponent__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Expression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Expression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Expression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Expression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Expression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Expression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ExpressionStatement__ExpressionStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExpressionStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExpressionStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExpressionStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ExpressionStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ExpressionStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ExpressionStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _External__External = {};
		private static final @NonNull ExecutorOperation @NonNull [] _External__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _External__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _External__StorageSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _External__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FileLocal__FileLocal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FileLocal__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FileLocal__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FileLocal__StorageSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FileLocal__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Float__Float = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Float__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__ForCheckAfterStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__ForStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__LoopStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckAfterStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__ForCheckBeforeStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__ForStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__LoopStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForCheckBeforeStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__ForStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__LoopStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ForStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__FormalParameterDeclaration = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__Declaration = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDeclaration__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__FormalParameterDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__DataDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__FormalParameterType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FormalParameterType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionCallExpression__FunctionCallExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionCallExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionCallExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionCallExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionCallExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionCallExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionCallExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__FunctionDeclaration = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__Declaration = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDeclaration__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__FunctionDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttribute__FunctionMemberAttribute = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttribute__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttribute__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttribute__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttribute__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttribute__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttribute__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttributes__FunctionMemberAttributes = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttributes__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttributes__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionMemberAttributes__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionPersistent__FunctionPersistent = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionPersistent__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionPersistent__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionPersistent__StorageSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionPersistent__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionScope__FunctionScope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionScope__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionScope__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionScope__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionScope__Scope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionScope__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _FunctionType__FunctionType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _FunctionType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _GASTMObject__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMObject__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMObject__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMObject__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSemanticObject__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSemanticObject__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSemanticObject__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSemanticObject__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSourceObject__GASTMSourceObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSourceObject__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSourceObject__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSourceObject__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSyntaxObject__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSyntaxObject__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSyntaxObject__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSyntaxObject__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GASTMSyntaxObject__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _GlobalScope__GlobalScope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GlobalScope__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GlobalScope__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GlobalScope__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _GlobalScope__Scope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _GlobalScope__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Greater__Greater = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Greater__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__IdentifierReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__NameReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IdentifierReference__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _IfStatement__IfStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IfStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IfStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IfStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IfStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IfStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IfStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _IncludeUnit__IncludeUnit = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IncludeUnit__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IncludeUnit__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IncludeUnit__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IncludeUnit__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IncludeUnit__PreprocessorElement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IncludeUnit__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Increment__Increment = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Increment__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Integer__Integer = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Integer__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__IntegerLiteral = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__Literal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _IntegerLiteral__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _JumpStatement__JumpStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _JumpStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _JumpStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _JumpStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _JumpStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _JumpStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _JumpStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _LabelAccess__LabelAccess = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelAccess__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelAccess__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelAccess__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelAccess__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelAccess__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelAccess__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _LabelDefinition__LabelDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _LabelType__LabelType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabelType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _LabeledStatement__LabeledStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabeledStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabeledStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabeledStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabeledStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LabeledStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LabeledStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Less__Less = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Less__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Literal__Literal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Literal__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Literal__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Literal__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Literal__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Literal__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Literal__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__LongDouble = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongDouble__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__LongInteger = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LongInteger__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _LoopStatement__LoopStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LoopStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LoopStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LoopStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LoopStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _LoopStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _LoopStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _MacroCall__MacroCall = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroCall__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroCall__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroCall__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroCall__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroCall__PreprocessorElement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroCall__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _MacroDefinition__MacroDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroDefinition__PreprocessorElement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MacroDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _MissingActualParameter__MissingActualParameter = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MissingActualParameter__ActualParameter = {};
		private static final @NonNull ExecutorOperation @NonNull [] _MissingActualParameter__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _MissingActualParameter__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _MissingActualParameter__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__Modulus = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Modulus__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__Multiply = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Multiply__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Name__Name = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Name__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Name__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Name__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Name__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Name__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Name__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NameReference__NameReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameReference__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameReference__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameReference__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NameReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NameReference__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceDefinition__NameSpaceDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceType__NameSpaceType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NameSpaceType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__NamedType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__NamedTypeDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__TypeDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__NamedTypeReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__TypeReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NamedTypeReference__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Negate__Negate = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Negate__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NewExpression__NewExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NewExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NewExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NewExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NewExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NewExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NewExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NoDef__NoDef = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NoDef__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NoDef__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NoDef__StorageSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NoDef__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__NonVirtual = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__VirtualSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NonVirtual__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Not__Not = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Not__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__NotEqual = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotEqual__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__NotGreater = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotGreater__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__NotLess = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _NotLess__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Operator__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Operator__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Operator__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Operator__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Operator__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Operator__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Operator__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__OperatorAssign = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OperatorAssign__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Or__Or = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Or__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _OtherSyntaxObject__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OtherSyntaxObject__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OtherSyntaxObject__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _OtherSyntaxObject__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _OtherSyntaxObject__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _OtherSyntaxObject__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _PerClassMember__PerClassMember = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PerClassMember__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PerClassMember__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PerClassMember__StorageSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PerClassMember__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__PointerType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__ConstructedType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PointerType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__PostDecrement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostDecrement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__PostIncrement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PostIncrement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _PreprocessorElement__PreprocessorElement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PreprocessorElement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PreprocessorElement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PreprocessorElement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PreprocessorElement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PreprocessorElement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PrimitiveType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Private__Private = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Private__AccessKind = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Private__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Private__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Private__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ProgramScope__ProgramScope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ProgramScope__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ProgramScope__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ProgramScope__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ProgramScope__Scope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ProgramScope__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Project__Project = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Project__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Project__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Project__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Project__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Protected__Protected = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Protected__AccessKind = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Protected__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Protected__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Protected__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Public__Public = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Public__AccessKind = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Public__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Public__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Public__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__PureVirtual = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__VirtualSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _PureVirtual__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__QualifiedIdentifierReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__NameReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedIdentifierReference__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__QualifiedOverData = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__NameReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__QualifiedIdentifierReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverData__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__QualifiedOverPointer = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__NameReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__QualifiedIdentifierReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _QualifiedOverPointer__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _RangeExpression__RangeExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__RangeType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__ConstructedType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RangeType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__RealLiteral = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__Literal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _RealLiteral__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__ReferenceType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__ConstructedType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReferenceType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ReturnStatement__ReturnStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReturnStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReturnStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReturnStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ReturnStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ReturnStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ReturnStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Scope__Scope = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Scope__GASTMSemanticObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Scope__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Scope__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Scope__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__ShortInteger = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ShortInteger__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SourceFile__SourceFile = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceFile__GASTMSourceObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceFile__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceFile__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceFile__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SourceLocation__SourceLocation = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceLocation__GASTMSourceObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceLocation__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceLocation__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SourceLocation__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__SpecificConcatString = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificConcatString__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__SpecificGreaterEqual = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificGreaterEqual__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__SpecificIn = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificIn__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__SpecificLessEqual = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLessEqual__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__SpecificLike = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificLike__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SpecificSelectStatement__SpecificSelectStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificSelectStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificSelectStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificSelectStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificSelectStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificSelectStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificSelectStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__SpecificTriggerDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SpecificTriggerDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Statement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Statement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Statement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Statement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Statement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Statement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _StorageSpecification__StorageSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StorageSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _StorageSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _StorageSpecification__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _String__String = {};
		private static final @NonNull ExecutorOperation @NonNull [] _String__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _String__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _String__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _String__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _String__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _String__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _String__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _String__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__StringLiteral = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__Literal = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _StringLiteral__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__StructureType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__AggregateType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _StructureType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__Subtract = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__BinaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Subtract__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SwitchCase__SwitchCase = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchCase__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchCase__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchCase__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchCase__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchCase__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchCase__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _SwitchStatement__SwitchStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _SwitchStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _TerminateStatement__TerminateStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TerminateStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TerminateStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TerminateStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TerminateStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TerminateStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TerminateStatement__Visitable = {};

		/*
		 *	Install the operation descriptors in the fragment descriptors.
		 */
		static {
			Fragments._AccessKind__AccessKind.initOperations(_AccessKind__AccessKind);
			Fragments._AccessKind__OclAny.initOperations(_AccessKind__OclAny);
			Fragments._AccessKind__OclElement.initOperations(_AccessKind__OclElement);
			Fragments._AccessKind__Visitable.initOperations(_AccessKind__Visitable);

			Fragments._ActualParameter__ActualParameter.initOperations(_ActualParameter__ActualParameter);
			Fragments._ActualParameter__OclAny.initOperations(_ActualParameter__OclAny);
			Fragments._ActualParameter__OclElement.initOperations(_ActualParameter__OclElement);
			Fragments._ActualParameter__Visitable.initOperations(_ActualParameter__Visitable);

			Fragments._ActualParameterExpression__ActualParameter.initOperations(_ActualParameterExpression__ActualParameter);
			Fragments._ActualParameterExpression__ActualParameterExpression.initOperations(_ActualParameterExpression__ActualParameterExpression);
			Fragments._ActualParameterExpression__OclAny.initOperations(_ActualParameterExpression__OclAny);
			Fragments._ActualParameterExpression__OclElement.initOperations(_ActualParameterExpression__OclElement);
			Fragments._ActualParameterExpression__Visitable.initOperations(_ActualParameterExpression__Visitable);

			Fragments._Add__Add.initOperations(_Add__Add);
			Fragments._Add__BinaryOperator.initOperations(_Add__BinaryOperator);
			Fragments._Add__GASTMObject.initOperations(_Add__GASTMObject);
			Fragments._Add__GASTMSyntaxObject.initOperations(_Add__GASTMSyntaxObject);
			Fragments._Add__OclAny.initOperations(_Add__OclAny);
			Fragments._Add__OclElement.initOperations(_Add__OclElement);
			Fragments._Add__Operator.initOperations(_Add__Operator);
			Fragments._Add__OtherSyntaxObject.initOperations(_Add__OtherSyntaxObject);
			Fragments._Add__Visitable.initOperations(_Add__Visitable);

			Fragments._AddressOf__AddressOf.initOperations(_AddressOf__AddressOf);
			Fragments._AddressOf__GASTMObject.initOperations(_AddressOf__GASTMObject);
			Fragments._AddressOf__GASTMSyntaxObject.initOperations(_AddressOf__GASTMSyntaxObject);
			Fragments._AddressOf__OclAny.initOperations(_AddressOf__OclAny);
			Fragments._AddressOf__OclElement.initOperations(_AddressOf__OclElement);
			Fragments._AddressOf__Operator.initOperations(_AddressOf__Operator);
			Fragments._AddressOf__OtherSyntaxObject.initOperations(_AddressOf__OtherSyntaxObject);
			Fragments._AddressOf__UnaryOperator.initOperations(_AddressOf__UnaryOperator);
			Fragments._AddressOf__Visitable.initOperations(_AddressOf__Visitable);

			Fragments._AggregateExpression__AggregateExpression.initOperations(_AggregateExpression__AggregateExpression);
			Fragments._AggregateExpression__Expression.initOperations(_AggregateExpression__Expression);
			Fragments._AggregateExpression__GASTMObject.initOperations(_AggregateExpression__GASTMObject);
			Fragments._AggregateExpression__GASTMSyntaxObject.initOperations(_AggregateExpression__GASTMSyntaxObject);
			Fragments._AggregateExpression__OclAny.initOperations(_AggregateExpression__OclAny);
			Fragments._AggregateExpression__OclElement.initOperations(_AggregateExpression__OclElement);
			Fragments._AggregateExpression__Visitable.initOperations(_AggregateExpression__Visitable);

			Fragments._AggregateScope__AggregateScope.initOperations(_AggregateScope__AggregateScope);
			Fragments._AggregateScope__GASTMSemanticObject.initOperations(_AggregateScope__GASTMSemanticObject);
			Fragments._AggregateScope__OclAny.initOperations(_AggregateScope__OclAny);
			Fragments._AggregateScope__OclElement.initOperations(_AggregateScope__OclElement);
			Fragments._AggregateScope__Scope.initOperations(_AggregateScope__Scope);
			Fragments._AggregateScope__Visitable.initOperations(_AggregateScope__Visitable);

			Fragments._AggregateType__AggregateType.initOperations(_AggregateType__AggregateType);
			Fragments._AggregateType__DataType.initOperations(_AggregateType__DataType);
			Fragments._AggregateType__GASTMObject.initOperations(_AggregateType__GASTMObject);
			Fragments._AggregateType__GASTMSyntaxObject.initOperations(_AggregateType__GASTMSyntaxObject);
			Fragments._AggregateType__OclAny.initOperations(_AggregateType__OclAny);
			Fragments._AggregateType__OclElement.initOperations(_AggregateType__OclElement);
			Fragments._AggregateType__Type.initOperations(_AggregateType__Type);
			Fragments._AggregateType__Visitable.initOperations(_AggregateType__Visitable);

			Fragments._AggregateTypeDefinition__AggregateTypeDefinition.initOperations(_AggregateTypeDefinition__AggregateTypeDefinition);
			Fragments._AggregateTypeDefinition__DefinitionObject.initOperations(_AggregateTypeDefinition__DefinitionObject);
			Fragments._AggregateTypeDefinition__GASTMObject.initOperations(_AggregateTypeDefinition__GASTMObject);
			Fragments._AggregateTypeDefinition__GASTMSyntaxObject.initOperations(_AggregateTypeDefinition__GASTMSyntaxObject);
			Fragments._AggregateTypeDefinition__OclAny.initOperations(_AggregateTypeDefinition__OclAny);
			Fragments._AggregateTypeDefinition__OclElement.initOperations(_AggregateTypeDefinition__OclElement);
			Fragments._AggregateTypeDefinition__TypeDefinition.initOperations(_AggregateTypeDefinition__TypeDefinition);
			Fragments._AggregateTypeDefinition__Visitable.initOperations(_AggregateTypeDefinition__Visitable);

			Fragments._And__And.initOperations(_And__And);
			Fragments._And__BinaryOperator.initOperations(_And__BinaryOperator);
			Fragments._And__GASTMObject.initOperations(_And__GASTMObject);
			Fragments._And__GASTMSyntaxObject.initOperations(_And__GASTMSyntaxObject);
			Fragments._And__OclAny.initOperations(_And__OclAny);
			Fragments._And__OclElement.initOperations(_And__OclElement);
			Fragments._And__Operator.initOperations(_And__Operator);
			Fragments._And__OtherSyntaxObject.initOperations(_And__OtherSyntaxObject);
			Fragments._And__Visitable.initOperations(_And__Visitable);

			Fragments._AnnotationExpression__AnnotationExpression.initOperations(_AnnotationExpression__AnnotationExpression);
			Fragments._AnnotationExpression__Expression.initOperations(_AnnotationExpression__Expression);
			Fragments._AnnotationExpression__GASTMObject.initOperations(_AnnotationExpression__GASTMObject);
			Fragments._AnnotationExpression__GASTMSyntaxObject.initOperations(_AnnotationExpression__GASTMSyntaxObject);
			Fragments._AnnotationExpression__OclAny.initOperations(_AnnotationExpression__OclAny);
			Fragments._AnnotationExpression__OclElement.initOperations(_AnnotationExpression__OclElement);
			Fragments._AnnotationExpression__Visitable.initOperations(_AnnotationExpression__Visitable);

			Fragments._AnnotationType__AggregateType.initOperations(_AnnotationType__AggregateType);
			Fragments._AnnotationType__AnnotationType.initOperations(_AnnotationType__AnnotationType);
			Fragments._AnnotationType__DataType.initOperations(_AnnotationType__DataType);
			Fragments._AnnotationType__GASTMObject.initOperations(_AnnotationType__GASTMObject);
			Fragments._AnnotationType__GASTMSyntaxObject.initOperations(_AnnotationType__GASTMSyntaxObject);
			Fragments._AnnotationType__OclAny.initOperations(_AnnotationType__OclAny);
			Fragments._AnnotationType__OclElement.initOperations(_AnnotationType__OclElement);
			Fragments._AnnotationType__Type.initOperations(_AnnotationType__Type);
			Fragments._AnnotationType__Visitable.initOperations(_AnnotationType__Visitable);

			Fragments._ArrayAccess__ArrayAccess.initOperations(_ArrayAccess__ArrayAccess);
			Fragments._ArrayAccess__Expression.initOperations(_ArrayAccess__Expression);
			Fragments._ArrayAccess__GASTMObject.initOperations(_ArrayAccess__GASTMObject);
			Fragments._ArrayAccess__GASTMSyntaxObject.initOperations(_ArrayAccess__GASTMSyntaxObject);
			Fragments._ArrayAccess__OclAny.initOperations(_ArrayAccess__OclAny);
			Fragments._ArrayAccess__OclElement.initOperations(_ArrayAccess__OclElement);
			Fragments._ArrayAccess__Visitable.initOperations(_ArrayAccess__Visitable);

			Fragments._ArrayType__ArrayType.initOperations(_ArrayType__ArrayType);
			Fragments._ArrayType__ConstructedType.initOperations(_ArrayType__ConstructedType);
			Fragments._ArrayType__DataType.initOperations(_ArrayType__DataType);
			Fragments._ArrayType__GASTMObject.initOperations(_ArrayType__GASTMObject);
			Fragments._ArrayType__GASTMSyntaxObject.initOperations(_ArrayType__GASTMSyntaxObject);
			Fragments._ArrayType__OclAny.initOperations(_ArrayType__OclAny);
			Fragments._ArrayType__OclElement.initOperations(_ArrayType__OclElement);
			Fragments._ArrayType__Type.initOperations(_ArrayType__Type);
			Fragments._ArrayType__Visitable.initOperations(_ArrayType__Visitable);

			Fragments._Assign__Assign.initOperations(_Assign__Assign);
			Fragments._Assign__BinaryOperator.initOperations(_Assign__BinaryOperator);
			Fragments._Assign__GASTMObject.initOperations(_Assign__GASTMObject);
			Fragments._Assign__GASTMSyntaxObject.initOperations(_Assign__GASTMSyntaxObject);
			Fragments._Assign__OclAny.initOperations(_Assign__OclAny);
			Fragments._Assign__OclElement.initOperations(_Assign__OclElement);
			Fragments._Assign__Operator.initOperations(_Assign__Operator);
			Fragments._Assign__OtherSyntaxObject.initOperations(_Assign__OtherSyntaxObject);
			Fragments._Assign__Visitable.initOperations(_Assign__Visitable);

			Fragments._BinaryExpression__BinaryExpression.initOperations(_BinaryExpression__BinaryExpression);
			Fragments._BinaryExpression__Expression.initOperations(_BinaryExpression__Expression);
			Fragments._BinaryExpression__GASTMObject.initOperations(_BinaryExpression__GASTMObject);
			Fragments._BinaryExpression__GASTMSyntaxObject.initOperations(_BinaryExpression__GASTMSyntaxObject);
			Fragments._BinaryExpression__OclAny.initOperations(_BinaryExpression__OclAny);
			Fragments._BinaryExpression__OclElement.initOperations(_BinaryExpression__OclElement);
			Fragments._BinaryExpression__Visitable.initOperations(_BinaryExpression__Visitable);

			Fragments._BinaryOperator__BinaryOperator.initOperations(_BinaryOperator__BinaryOperator);
			Fragments._BinaryOperator__GASTMObject.initOperations(_BinaryOperator__GASTMObject);
			Fragments._BinaryOperator__GASTMSyntaxObject.initOperations(_BinaryOperator__GASTMSyntaxObject);
			Fragments._BinaryOperator__OclAny.initOperations(_BinaryOperator__OclAny);
			Fragments._BinaryOperator__OclElement.initOperations(_BinaryOperator__OclElement);
			Fragments._BinaryOperator__Operator.initOperations(_BinaryOperator__Operator);
			Fragments._BinaryOperator__OtherSyntaxObject.initOperations(_BinaryOperator__OtherSyntaxObject);
			Fragments._BinaryOperator__Visitable.initOperations(_BinaryOperator__Visitable);

			Fragments._BitAnd__BinaryOperator.initOperations(_BitAnd__BinaryOperator);
			Fragments._BitAnd__BitAnd.initOperations(_BitAnd__BitAnd);
			Fragments._BitAnd__GASTMObject.initOperations(_BitAnd__GASTMObject);
			Fragments._BitAnd__GASTMSyntaxObject.initOperations(_BitAnd__GASTMSyntaxObject);
			Fragments._BitAnd__OclAny.initOperations(_BitAnd__OclAny);
			Fragments._BitAnd__OclElement.initOperations(_BitAnd__OclElement);
			Fragments._BitAnd__Operator.initOperations(_BitAnd__Operator);
			Fragments._BitAnd__OtherSyntaxObject.initOperations(_BitAnd__OtherSyntaxObject);
			Fragments._BitAnd__Visitable.initOperations(_BitAnd__Visitable);

			Fragments._BitFieldDefinition__BitFieldDefinition.initOperations(_BitFieldDefinition__BitFieldDefinition);
			Fragments._BitFieldDefinition__DataDefinition.initOperations(_BitFieldDefinition__DataDefinition);
			Fragments._BitFieldDefinition__DeclarationOrDefinition.initOperations(_BitFieldDefinition__DeclarationOrDefinition);
			Fragments._BitFieldDefinition__Definition.initOperations(_BitFieldDefinition__Definition);
			Fragments._BitFieldDefinition__DefinitionObject.initOperations(_BitFieldDefinition__DefinitionObject);
			Fragments._BitFieldDefinition__GASTMObject.initOperations(_BitFieldDefinition__GASTMObject);
			Fragments._BitFieldDefinition__GASTMSyntaxObject.initOperations(_BitFieldDefinition__GASTMSyntaxObject);
			Fragments._BitFieldDefinition__OclAny.initOperations(_BitFieldDefinition__OclAny);
			Fragments._BitFieldDefinition__OclElement.initOperations(_BitFieldDefinition__OclElement);
			Fragments._BitFieldDefinition__Visitable.initOperations(_BitFieldDefinition__Visitable);

			Fragments._BitLeftShift__BinaryOperator.initOperations(_BitLeftShift__BinaryOperator);
			Fragments._BitLeftShift__BitLeftShift.initOperations(_BitLeftShift__BitLeftShift);
			Fragments._BitLeftShift__GASTMObject.initOperations(_BitLeftShift__GASTMObject);
			Fragments._BitLeftShift__GASTMSyntaxObject.initOperations(_BitLeftShift__GASTMSyntaxObject);
			Fragments._BitLeftShift__OclAny.initOperations(_BitLeftShift__OclAny);
			Fragments._BitLeftShift__OclElement.initOperations(_BitLeftShift__OclElement);
			Fragments._BitLeftShift__Operator.initOperations(_BitLeftShift__Operator);
			Fragments._BitLeftShift__OtherSyntaxObject.initOperations(_BitLeftShift__OtherSyntaxObject);
			Fragments._BitLeftShift__Visitable.initOperations(_BitLeftShift__Visitable);

			Fragments._BitLiteral__BitLiteral.initOperations(_BitLiteral__BitLiteral);
			Fragments._BitLiteral__Expression.initOperations(_BitLiteral__Expression);
			Fragments._BitLiteral__GASTMObject.initOperations(_BitLiteral__GASTMObject);
			Fragments._BitLiteral__GASTMSyntaxObject.initOperations(_BitLiteral__GASTMSyntaxObject);
			Fragments._BitLiteral__Literal.initOperations(_BitLiteral__Literal);
			Fragments._BitLiteral__OclAny.initOperations(_BitLiteral__OclAny);
			Fragments._BitLiteral__OclElement.initOperations(_BitLiteral__OclElement);
			Fragments._BitLiteral__Visitable.initOperations(_BitLiteral__Visitable);

			Fragments._BitNot__BitNot.initOperations(_BitNot__BitNot);
			Fragments._BitNot__GASTMObject.initOperations(_BitNot__GASTMObject);
			Fragments._BitNot__GASTMSyntaxObject.initOperations(_BitNot__GASTMSyntaxObject);
			Fragments._BitNot__OclAny.initOperations(_BitNot__OclAny);
			Fragments._BitNot__OclElement.initOperations(_BitNot__OclElement);
			Fragments._BitNot__Operator.initOperations(_BitNot__Operator);
			Fragments._BitNot__OtherSyntaxObject.initOperations(_BitNot__OtherSyntaxObject);
			Fragments._BitNot__UnaryOperator.initOperations(_BitNot__UnaryOperator);
			Fragments._BitNot__Visitable.initOperations(_BitNot__Visitable);

			Fragments._BitOr__BinaryOperator.initOperations(_BitOr__BinaryOperator);
			Fragments._BitOr__BitOr.initOperations(_BitOr__BitOr);
			Fragments._BitOr__GASTMObject.initOperations(_BitOr__GASTMObject);
			Fragments._BitOr__GASTMSyntaxObject.initOperations(_BitOr__GASTMSyntaxObject);
			Fragments._BitOr__OclAny.initOperations(_BitOr__OclAny);
			Fragments._BitOr__OclElement.initOperations(_BitOr__OclElement);
			Fragments._BitOr__Operator.initOperations(_BitOr__Operator);
			Fragments._BitOr__OtherSyntaxObject.initOperations(_BitOr__OtherSyntaxObject);
			Fragments._BitOr__Visitable.initOperations(_BitOr__Visitable);

			Fragments._BitRightShift__BinaryOperator.initOperations(_BitRightShift__BinaryOperator);
			Fragments._BitRightShift__BitRightShift.initOperations(_BitRightShift__BitRightShift);
			Fragments._BitRightShift__GASTMObject.initOperations(_BitRightShift__GASTMObject);
			Fragments._BitRightShift__GASTMSyntaxObject.initOperations(_BitRightShift__GASTMSyntaxObject);
			Fragments._BitRightShift__OclAny.initOperations(_BitRightShift__OclAny);
			Fragments._BitRightShift__OclElement.initOperations(_BitRightShift__OclElement);
			Fragments._BitRightShift__Operator.initOperations(_BitRightShift__Operator);
			Fragments._BitRightShift__OtherSyntaxObject.initOperations(_BitRightShift__OtherSyntaxObject);
			Fragments._BitRightShift__Visitable.initOperations(_BitRightShift__Visitable);

			Fragments._BitXor__BinaryOperator.initOperations(_BitXor__BinaryOperator);
			Fragments._BitXor__BitXor.initOperations(_BitXor__BitXor);
			Fragments._BitXor__GASTMObject.initOperations(_BitXor__GASTMObject);
			Fragments._BitXor__GASTMSyntaxObject.initOperations(_BitXor__GASTMSyntaxObject);
			Fragments._BitXor__OclAny.initOperations(_BitXor__OclAny);
			Fragments._BitXor__OclElement.initOperations(_BitXor__OclElement);
			Fragments._BitXor__Operator.initOperations(_BitXor__Operator);
			Fragments._BitXor__OtherSyntaxObject.initOperations(_BitXor__OtherSyntaxObject);
			Fragments._BitXor__Visitable.initOperations(_BitXor__Visitable);

			Fragments._BlockScope__BlockScope.initOperations(_BlockScope__BlockScope);
			Fragments._BlockScope__GASTMSemanticObject.initOperations(_BlockScope__GASTMSemanticObject);
			Fragments._BlockScope__OclAny.initOperations(_BlockScope__OclAny);
			Fragments._BlockScope__OclElement.initOperations(_BlockScope__OclElement);
			Fragments._BlockScope__Scope.initOperations(_BlockScope__Scope);
			Fragments._BlockScope__Visitable.initOperations(_BlockScope__Visitable);

			Fragments._BlockStatement__BlockStatement.initOperations(_BlockStatement__BlockStatement);
			Fragments._BlockStatement__GASTMObject.initOperations(_BlockStatement__GASTMObject);
			Fragments._BlockStatement__GASTMSyntaxObject.initOperations(_BlockStatement__GASTMSyntaxObject);
			Fragments._BlockStatement__OclAny.initOperations(_BlockStatement__OclAny);
			Fragments._BlockStatement__OclElement.initOperations(_BlockStatement__OclElement);
			Fragments._BlockStatement__Statement.initOperations(_BlockStatement__Statement);
			Fragments._BlockStatement__Visitable.initOperations(_BlockStatement__Visitable);

			Fragments._Boolean__Boolean.initOperations(_Boolean__Boolean);
			Fragments._Boolean__DataType.initOperations(_Boolean__DataType);
			Fragments._Boolean__GASTMObject.initOperations(_Boolean__GASTMObject);
			Fragments._Boolean__GASTMSyntaxObject.initOperations(_Boolean__GASTMSyntaxObject);
			Fragments._Boolean__OclAny.initOperations(_Boolean__OclAny);
			Fragments._Boolean__OclElement.initOperations(_Boolean__OclElement);
			Fragments._Boolean__PrimitiveType.initOperations(_Boolean__PrimitiveType);
			Fragments._Boolean__Type.initOperations(_Boolean__Type);
			Fragments._Boolean__Visitable.initOperations(_Boolean__Visitable);

			Fragments._BooleanLiteral__BooleanLiteral.initOperations(_BooleanLiteral__BooleanLiteral);
			Fragments._BooleanLiteral__Expression.initOperations(_BooleanLiteral__Expression);
			Fragments._BooleanLiteral__GASTMObject.initOperations(_BooleanLiteral__GASTMObject);
			Fragments._BooleanLiteral__GASTMSyntaxObject.initOperations(_BooleanLiteral__GASTMSyntaxObject);
			Fragments._BooleanLiteral__Literal.initOperations(_BooleanLiteral__Literal);
			Fragments._BooleanLiteral__OclAny.initOperations(_BooleanLiteral__OclAny);
			Fragments._BooleanLiteral__OclElement.initOperations(_BooleanLiteral__OclElement);
			Fragments._BooleanLiteral__Visitable.initOperations(_BooleanLiteral__Visitable);

			Fragments._BreakStatement__BreakStatement.initOperations(_BreakStatement__BreakStatement);
			Fragments._BreakStatement__GASTMObject.initOperations(_BreakStatement__GASTMObject);
			Fragments._BreakStatement__GASTMSyntaxObject.initOperations(_BreakStatement__GASTMSyntaxObject);
			Fragments._BreakStatement__OclAny.initOperations(_BreakStatement__OclAny);
			Fragments._BreakStatement__OclElement.initOperations(_BreakStatement__OclElement);
			Fragments._BreakStatement__Statement.initOperations(_BreakStatement__Statement);
			Fragments._BreakStatement__Visitable.initOperations(_BreakStatement__Visitable);

			Fragments._ByReferenceActualParameterExpression__ActualParameter.initOperations(_ByReferenceActualParameterExpression__ActualParameter);
			Fragments._ByReferenceActualParameterExpression__ActualParameterExpression.initOperations(_ByReferenceActualParameterExpression__ActualParameterExpression);
			Fragments._ByReferenceActualParameterExpression__ByReferenceActualParameterExpression.initOperations(_ByReferenceActualParameterExpression__ByReferenceActualParameterExpression);
			Fragments._ByReferenceActualParameterExpression__OclAny.initOperations(_ByReferenceActualParameterExpression__OclAny);
			Fragments._ByReferenceActualParameterExpression__OclElement.initOperations(_ByReferenceActualParameterExpression__OclElement);
			Fragments._ByReferenceActualParameterExpression__Visitable.initOperations(_ByReferenceActualParameterExpression__Visitable);

			Fragments._ByReferenceFormalParameterType__ByReferenceFormalParameterType.initOperations(_ByReferenceFormalParameterType__ByReferenceFormalParameterType);
			Fragments._ByReferenceFormalParameterType__DataType.initOperations(_ByReferenceFormalParameterType__DataType);
			Fragments._ByReferenceFormalParameterType__FormalParameterType.initOperations(_ByReferenceFormalParameterType__FormalParameterType);
			Fragments._ByReferenceFormalParameterType__GASTMObject.initOperations(_ByReferenceFormalParameterType__GASTMObject);
			Fragments._ByReferenceFormalParameterType__GASTMSyntaxObject.initOperations(_ByReferenceFormalParameterType__GASTMSyntaxObject);
			Fragments._ByReferenceFormalParameterType__OclAny.initOperations(_ByReferenceFormalParameterType__OclAny);
			Fragments._ByReferenceFormalParameterType__OclElement.initOperations(_ByReferenceFormalParameterType__OclElement);
			Fragments._ByReferenceFormalParameterType__Type.initOperations(_ByReferenceFormalParameterType__Type);
			Fragments._ByReferenceFormalParameterType__Visitable.initOperations(_ByReferenceFormalParameterType__Visitable);

			Fragments._ByValueActualParameterExpression__ActualParameter.initOperations(_ByValueActualParameterExpression__ActualParameter);
			Fragments._ByValueActualParameterExpression__ActualParameterExpression.initOperations(_ByValueActualParameterExpression__ActualParameterExpression);
			Fragments._ByValueActualParameterExpression__ByValueActualParameterExpression.initOperations(_ByValueActualParameterExpression__ByValueActualParameterExpression);
			Fragments._ByValueActualParameterExpression__OclAny.initOperations(_ByValueActualParameterExpression__OclAny);
			Fragments._ByValueActualParameterExpression__OclElement.initOperations(_ByValueActualParameterExpression__OclElement);
			Fragments._ByValueActualParameterExpression__Visitable.initOperations(_ByValueActualParameterExpression__Visitable);

			Fragments._ByValueFormalParameterType__ByValueFormalParameterType.initOperations(_ByValueFormalParameterType__ByValueFormalParameterType);
			Fragments._ByValueFormalParameterType__DataType.initOperations(_ByValueFormalParameterType__DataType);
			Fragments._ByValueFormalParameterType__FormalParameterType.initOperations(_ByValueFormalParameterType__FormalParameterType);
			Fragments._ByValueFormalParameterType__GASTMObject.initOperations(_ByValueFormalParameterType__GASTMObject);
			Fragments._ByValueFormalParameterType__GASTMSyntaxObject.initOperations(_ByValueFormalParameterType__GASTMSyntaxObject);
			Fragments._ByValueFormalParameterType__OclAny.initOperations(_ByValueFormalParameterType__OclAny);
			Fragments._ByValueFormalParameterType__OclElement.initOperations(_ByValueFormalParameterType__OclElement);
			Fragments._ByValueFormalParameterType__Type.initOperations(_ByValueFormalParameterType__Type);
			Fragments._ByValueFormalParameterType__Visitable.initOperations(_ByValueFormalParameterType__Visitable);

			Fragments._Byte__Byte.initOperations(_Byte__Byte);
			Fragments._Byte__DataType.initOperations(_Byte__DataType);
			Fragments._Byte__GASTMObject.initOperations(_Byte__GASTMObject);
			Fragments._Byte__GASTMSyntaxObject.initOperations(_Byte__GASTMSyntaxObject);
			Fragments._Byte__OclAny.initOperations(_Byte__OclAny);
			Fragments._Byte__OclElement.initOperations(_Byte__OclElement);
			Fragments._Byte__PrimitiveType.initOperations(_Byte__PrimitiveType);
			Fragments._Byte__Type.initOperations(_Byte__Type);
			Fragments._Byte__Visitable.initOperations(_Byte__Visitable);

			Fragments._CaseBlock__CaseBlock.initOperations(_CaseBlock__CaseBlock);
			Fragments._CaseBlock__GASTMObject.initOperations(_CaseBlock__GASTMObject);
			Fragments._CaseBlock__GASTMSyntaxObject.initOperations(_CaseBlock__GASTMSyntaxObject);
			Fragments._CaseBlock__OclAny.initOperations(_CaseBlock__OclAny);
			Fragments._CaseBlock__OclElement.initOperations(_CaseBlock__OclElement);
			Fragments._CaseBlock__OtherSyntaxObject.initOperations(_CaseBlock__OtherSyntaxObject);
			Fragments._CaseBlock__SwitchCase.initOperations(_CaseBlock__SwitchCase);
			Fragments._CaseBlock__Visitable.initOperations(_CaseBlock__Visitable);

			Fragments._CastExpression__CastExpression.initOperations(_CastExpression__CastExpression);
			Fragments._CastExpression__Expression.initOperations(_CastExpression__Expression);
			Fragments._CastExpression__GASTMObject.initOperations(_CastExpression__GASTMObject);
			Fragments._CastExpression__GASTMSyntaxObject.initOperations(_CastExpression__GASTMSyntaxObject);
			Fragments._CastExpression__OclAny.initOperations(_CastExpression__OclAny);
			Fragments._CastExpression__OclElement.initOperations(_CastExpression__OclElement);
			Fragments._CastExpression__Visitable.initOperations(_CastExpression__Visitable);

			Fragments._CatchBlock__CatchBlock.initOperations(_CatchBlock__CatchBlock);
			Fragments._CatchBlock__GASTMObject.initOperations(_CatchBlock__GASTMObject);
			Fragments._CatchBlock__GASTMSyntaxObject.initOperations(_CatchBlock__GASTMSyntaxObject);
			Fragments._CatchBlock__OclAny.initOperations(_CatchBlock__OclAny);
			Fragments._CatchBlock__OclElement.initOperations(_CatchBlock__OclElement);
			Fragments._CatchBlock__OtherSyntaxObject.initOperations(_CatchBlock__OtherSyntaxObject);
			Fragments._CatchBlock__Visitable.initOperations(_CatchBlock__Visitable);

			Fragments._CharLiteral__CharLiteral.initOperations(_CharLiteral__CharLiteral);
			Fragments._CharLiteral__Expression.initOperations(_CharLiteral__Expression);
			Fragments._CharLiteral__GASTMObject.initOperations(_CharLiteral__GASTMObject);
			Fragments._CharLiteral__GASTMSyntaxObject.initOperations(_CharLiteral__GASTMSyntaxObject);
			Fragments._CharLiteral__Literal.initOperations(_CharLiteral__Literal);
			Fragments._CharLiteral__OclAny.initOperations(_CharLiteral__OclAny);
			Fragments._CharLiteral__OclElement.initOperations(_CharLiteral__OclElement);
			Fragments._CharLiteral__Visitable.initOperations(_CharLiteral__Visitable);

			Fragments._Character__Character.initOperations(_Character__Character);
			Fragments._Character__DataType.initOperations(_Character__DataType);
			Fragments._Character__GASTMObject.initOperations(_Character__GASTMObject);
			Fragments._Character__GASTMSyntaxObject.initOperations(_Character__GASTMSyntaxObject);
			Fragments._Character__OclAny.initOperations(_Character__OclAny);
			Fragments._Character__OclElement.initOperations(_Character__OclElement);
			Fragments._Character__PrimitiveType.initOperations(_Character__PrimitiveType);
			Fragments._Character__Type.initOperations(_Character__Type);
			Fragments._Character__Visitable.initOperations(_Character__Visitable);

			Fragments._ClassType__AggregateType.initOperations(_ClassType__AggregateType);
			Fragments._ClassType__ClassType.initOperations(_ClassType__ClassType);
			Fragments._ClassType__DataType.initOperations(_ClassType__DataType);
			Fragments._ClassType__GASTMObject.initOperations(_ClassType__GASTMObject);
			Fragments._ClassType__GASTMSyntaxObject.initOperations(_ClassType__GASTMSyntaxObject);
			Fragments._ClassType__OclAny.initOperations(_ClassType__OclAny);
			Fragments._ClassType__OclElement.initOperations(_ClassType__OclElement);
			Fragments._ClassType__Type.initOperations(_ClassType__Type);
			Fragments._ClassType__Visitable.initOperations(_ClassType__Visitable);

			Fragments._CollectionType__CollectionType.initOperations(_CollectionType__CollectionType);
			Fragments._CollectionType__ConstructedType.initOperations(_CollectionType__ConstructedType);
			Fragments._CollectionType__DataType.initOperations(_CollectionType__DataType);
			Fragments._CollectionType__GASTMObject.initOperations(_CollectionType__GASTMObject);
			Fragments._CollectionType__GASTMSyntaxObject.initOperations(_CollectionType__GASTMSyntaxObject);
			Fragments._CollectionType__OclAny.initOperations(_CollectionType__OclAny);
			Fragments._CollectionType__OclElement.initOperations(_CollectionType__OclElement);
			Fragments._CollectionType__Type.initOperations(_CollectionType__Type);
			Fragments._CollectionType__Visitable.initOperations(_CollectionType__Visitable);

			Fragments._Comment__Comment.initOperations(_Comment__Comment);
			Fragments._Comment__GASTMObject.initOperations(_Comment__GASTMObject);
			Fragments._Comment__GASTMSyntaxObject.initOperations(_Comment__GASTMSyntaxObject);
			Fragments._Comment__OclAny.initOperations(_Comment__OclAny);
			Fragments._Comment__OclElement.initOperations(_Comment__OclElement);
			Fragments._Comment__PreprocessorElement.initOperations(_Comment__PreprocessorElement);
			Fragments._Comment__Visitable.initOperations(_Comment__Visitable);

			Fragments._CompilationUnit__CompilationUnit.initOperations(_CompilationUnit__CompilationUnit);
			Fragments._CompilationUnit__GASTMObject.initOperations(_CompilationUnit__GASTMObject);
			Fragments._CompilationUnit__GASTMSyntaxObject.initOperations(_CompilationUnit__GASTMSyntaxObject);
			Fragments._CompilationUnit__OclAny.initOperations(_CompilationUnit__OclAny);
			Fragments._CompilationUnit__OclElement.initOperations(_CompilationUnit__OclElement);
			Fragments._CompilationUnit__OtherSyntaxObject.initOperations(_CompilationUnit__OtherSyntaxObject);
			Fragments._CompilationUnit__Visitable.initOperations(_CompilationUnit__Visitable);

			Fragments._ConditionalExpression__ConditionalExpression.initOperations(_ConditionalExpression__ConditionalExpression);
			Fragments._ConditionalExpression__Expression.initOperations(_ConditionalExpression__Expression);
			Fragments._ConditionalExpression__GASTMObject.initOperations(_ConditionalExpression__GASTMObject);
			Fragments._ConditionalExpression__GASTMSyntaxObject.initOperations(_ConditionalExpression__GASTMSyntaxObject);
			Fragments._ConditionalExpression__OclAny.initOperations(_ConditionalExpression__OclAny);
			Fragments._ConditionalExpression__OclElement.initOperations(_ConditionalExpression__OclElement);
			Fragments._ConditionalExpression__Visitable.initOperations(_ConditionalExpression__Visitable);

			Fragments._ConstructedType__ConstructedType.initOperations(_ConstructedType__ConstructedType);
			Fragments._ConstructedType__DataType.initOperations(_ConstructedType__DataType);
			Fragments._ConstructedType__GASTMObject.initOperations(_ConstructedType__GASTMObject);
			Fragments._ConstructedType__GASTMSyntaxObject.initOperations(_ConstructedType__GASTMSyntaxObject);
			Fragments._ConstructedType__OclAny.initOperations(_ConstructedType__OclAny);
			Fragments._ConstructedType__OclElement.initOperations(_ConstructedType__OclElement);
			Fragments._ConstructedType__Type.initOperations(_ConstructedType__Type);
			Fragments._ConstructedType__Visitable.initOperations(_ConstructedType__Visitable);

			Fragments._ContinueStatement__ContinueStatement.initOperations(_ContinueStatement__ContinueStatement);
			Fragments._ContinueStatement__GASTMObject.initOperations(_ContinueStatement__GASTMObject);
			Fragments._ContinueStatement__GASTMSyntaxObject.initOperations(_ContinueStatement__GASTMSyntaxObject);
			Fragments._ContinueStatement__OclAny.initOperations(_ContinueStatement__OclAny);
			Fragments._ContinueStatement__OclElement.initOperations(_ContinueStatement__OclElement);
			Fragments._ContinueStatement__Statement.initOperations(_ContinueStatement__Statement);
			Fragments._ContinueStatement__Visitable.initOperations(_ContinueStatement__Visitable);

			Fragments._DataDefinition__DataDefinition.initOperations(_DataDefinition__DataDefinition);
			Fragments._DataDefinition__DeclarationOrDefinition.initOperations(_DataDefinition__DeclarationOrDefinition);
			Fragments._DataDefinition__Definition.initOperations(_DataDefinition__Definition);
			Fragments._DataDefinition__DefinitionObject.initOperations(_DataDefinition__DefinitionObject);
			Fragments._DataDefinition__GASTMObject.initOperations(_DataDefinition__GASTMObject);
			Fragments._DataDefinition__GASTMSyntaxObject.initOperations(_DataDefinition__GASTMSyntaxObject);
			Fragments._DataDefinition__OclAny.initOperations(_DataDefinition__OclAny);
			Fragments._DataDefinition__OclElement.initOperations(_DataDefinition__OclElement);
			Fragments._DataDefinition__Visitable.initOperations(_DataDefinition__Visitable);

			Fragments._DataType__DataType.initOperations(_DataType__DataType);
			Fragments._DataType__GASTMObject.initOperations(_DataType__GASTMObject);
			Fragments._DataType__GASTMSyntaxObject.initOperations(_DataType__GASTMSyntaxObject);
			Fragments._DataType__OclAny.initOperations(_DataType__OclAny);
			Fragments._DataType__OclElement.initOperations(_DataType__OclElement);
			Fragments._DataType__Type.initOperations(_DataType__Type);
			Fragments._DataType__Visitable.initOperations(_DataType__Visitable);

			Fragments._Declaration__Declaration.initOperations(_Declaration__Declaration);
			Fragments._Declaration__DeclarationOrDefinition.initOperations(_Declaration__DeclarationOrDefinition);
			Fragments._Declaration__DefinitionObject.initOperations(_Declaration__DefinitionObject);
			Fragments._Declaration__GASTMObject.initOperations(_Declaration__GASTMObject);
			Fragments._Declaration__GASTMSyntaxObject.initOperations(_Declaration__GASTMSyntaxObject);
			Fragments._Declaration__OclAny.initOperations(_Declaration__OclAny);
			Fragments._Declaration__OclElement.initOperations(_Declaration__OclElement);
			Fragments._Declaration__Visitable.initOperations(_Declaration__Visitable);

			Fragments._DeclarationOrDefinition__DeclarationOrDefinition.initOperations(_DeclarationOrDefinition__DeclarationOrDefinition);
			Fragments._DeclarationOrDefinition__DefinitionObject.initOperations(_DeclarationOrDefinition__DefinitionObject);
			Fragments._DeclarationOrDefinition__GASTMObject.initOperations(_DeclarationOrDefinition__GASTMObject);
			Fragments._DeclarationOrDefinition__GASTMSyntaxObject.initOperations(_DeclarationOrDefinition__GASTMSyntaxObject);
			Fragments._DeclarationOrDefinition__OclAny.initOperations(_DeclarationOrDefinition__OclAny);
			Fragments._DeclarationOrDefinition__OclElement.initOperations(_DeclarationOrDefinition__OclElement);
			Fragments._DeclarationOrDefinition__Visitable.initOperations(_DeclarationOrDefinition__Visitable);

			Fragments._DeclarationOrDefinitionStatement__DeclarationOrDefinitionStatement.initOperations(_DeclarationOrDefinitionStatement__DeclarationOrDefinitionStatement);
			Fragments._DeclarationOrDefinitionStatement__GASTMObject.initOperations(_DeclarationOrDefinitionStatement__GASTMObject);
			Fragments._DeclarationOrDefinitionStatement__GASTMSyntaxObject.initOperations(_DeclarationOrDefinitionStatement__GASTMSyntaxObject);
			Fragments._DeclarationOrDefinitionStatement__OclAny.initOperations(_DeclarationOrDefinitionStatement__OclAny);
			Fragments._DeclarationOrDefinitionStatement__OclElement.initOperations(_DeclarationOrDefinitionStatement__OclElement);
			Fragments._DeclarationOrDefinitionStatement__Statement.initOperations(_DeclarationOrDefinitionStatement__Statement);
			Fragments._DeclarationOrDefinitionStatement__Visitable.initOperations(_DeclarationOrDefinitionStatement__Visitable);

			Fragments._Decrement__Decrement.initOperations(_Decrement__Decrement);
			Fragments._Decrement__GASTMObject.initOperations(_Decrement__GASTMObject);
			Fragments._Decrement__GASTMSyntaxObject.initOperations(_Decrement__GASTMSyntaxObject);
			Fragments._Decrement__OclAny.initOperations(_Decrement__OclAny);
			Fragments._Decrement__OclElement.initOperations(_Decrement__OclElement);
			Fragments._Decrement__Operator.initOperations(_Decrement__Operator);
			Fragments._Decrement__OtherSyntaxObject.initOperations(_Decrement__OtherSyntaxObject);
			Fragments._Decrement__UnaryOperator.initOperations(_Decrement__UnaryOperator);
			Fragments._Decrement__Visitable.initOperations(_Decrement__Visitable);

			Fragments._DefaultBlock__DefaultBlock.initOperations(_DefaultBlock__DefaultBlock);
			Fragments._DefaultBlock__GASTMObject.initOperations(_DefaultBlock__GASTMObject);
			Fragments._DefaultBlock__GASTMSyntaxObject.initOperations(_DefaultBlock__GASTMSyntaxObject);
			Fragments._DefaultBlock__OclAny.initOperations(_DefaultBlock__OclAny);
			Fragments._DefaultBlock__OclElement.initOperations(_DefaultBlock__OclElement);
			Fragments._DefaultBlock__OtherSyntaxObject.initOperations(_DefaultBlock__OtherSyntaxObject);
			Fragments._DefaultBlock__SwitchCase.initOperations(_DefaultBlock__SwitchCase);
			Fragments._DefaultBlock__Visitable.initOperations(_DefaultBlock__Visitable);

			Fragments._Definition__DeclarationOrDefinition.initOperations(_Definition__DeclarationOrDefinition);
			Fragments._Definition__Definition.initOperations(_Definition__Definition);
			Fragments._Definition__DefinitionObject.initOperations(_Definition__DefinitionObject);
			Fragments._Definition__GASTMObject.initOperations(_Definition__GASTMObject);
			Fragments._Definition__GASTMSyntaxObject.initOperations(_Definition__GASTMSyntaxObject);
			Fragments._Definition__OclAny.initOperations(_Definition__OclAny);
			Fragments._Definition__OclElement.initOperations(_Definition__OclElement);
			Fragments._Definition__Visitable.initOperations(_Definition__Visitable);

			Fragments._DefinitionObject__DefinitionObject.initOperations(_DefinitionObject__DefinitionObject);
			Fragments._DefinitionObject__GASTMObject.initOperations(_DefinitionObject__GASTMObject);
			Fragments._DefinitionObject__GASTMSyntaxObject.initOperations(_DefinitionObject__GASTMSyntaxObject);
			Fragments._DefinitionObject__OclAny.initOperations(_DefinitionObject__OclAny);
			Fragments._DefinitionObject__OclElement.initOperations(_DefinitionObject__OclElement);
			Fragments._DefinitionObject__Visitable.initOperations(_DefinitionObject__Visitable);

			Fragments._DeleteStatement__DeleteStatement.initOperations(_DeleteStatement__DeleteStatement);
			Fragments._DeleteStatement__GASTMObject.initOperations(_DeleteStatement__GASTMObject);
			Fragments._DeleteStatement__GASTMSyntaxObject.initOperations(_DeleteStatement__GASTMSyntaxObject);
			Fragments._DeleteStatement__OclAny.initOperations(_DeleteStatement__OclAny);
			Fragments._DeleteStatement__OclElement.initOperations(_DeleteStatement__OclElement);
			Fragments._DeleteStatement__Statement.initOperations(_DeleteStatement__Statement);
			Fragments._DeleteStatement__Visitable.initOperations(_DeleteStatement__Visitable);

			Fragments._DelphiBlockStatement__BlockStatement.initOperations(_DelphiBlockStatement__BlockStatement);
			Fragments._DelphiBlockStatement__DelphiBlockStatement.initOperations(_DelphiBlockStatement__DelphiBlockStatement);
			Fragments._DelphiBlockStatement__GASTMObject.initOperations(_DelphiBlockStatement__GASTMObject);
			Fragments._DelphiBlockStatement__GASTMSyntaxObject.initOperations(_DelphiBlockStatement__GASTMSyntaxObject);
			Fragments._DelphiBlockStatement__OclAny.initOperations(_DelphiBlockStatement__OclAny);
			Fragments._DelphiBlockStatement__OclElement.initOperations(_DelphiBlockStatement__OclElement);
			Fragments._DelphiBlockStatement__Statement.initOperations(_DelphiBlockStatement__Statement);
			Fragments._DelphiBlockStatement__Visitable.initOperations(_DelphiBlockStatement__Visitable);

			Fragments._DelphiFunctionCallExpression__DelphiFunctionCallExpression.initOperations(_DelphiFunctionCallExpression__DelphiFunctionCallExpression);
			Fragments._DelphiFunctionCallExpression__Expression.initOperations(_DelphiFunctionCallExpression__Expression);
			Fragments._DelphiFunctionCallExpression__FunctionCallExpression.initOperations(_DelphiFunctionCallExpression__FunctionCallExpression);
			Fragments._DelphiFunctionCallExpression__GASTMObject.initOperations(_DelphiFunctionCallExpression__GASTMObject);
			Fragments._DelphiFunctionCallExpression__GASTMSyntaxObject.initOperations(_DelphiFunctionCallExpression__GASTMSyntaxObject);
			Fragments._DelphiFunctionCallExpression__OclAny.initOperations(_DelphiFunctionCallExpression__OclAny);
			Fragments._DelphiFunctionCallExpression__OclElement.initOperations(_DelphiFunctionCallExpression__OclElement);
			Fragments._DelphiFunctionCallExpression__Visitable.initOperations(_DelphiFunctionCallExpression__Visitable);

			Fragments._DelphiImplementationSection__CompilationUnit.initOperations(_DelphiImplementationSection__CompilationUnit);
			Fragments._DelphiImplementationSection__DelphiImplementationSection.initOperations(_DelphiImplementationSection__DelphiImplementationSection);
			Fragments._DelphiImplementationSection__GASTMObject.initOperations(_DelphiImplementationSection__GASTMObject);
			Fragments._DelphiImplementationSection__GASTMSyntaxObject.initOperations(_DelphiImplementationSection__GASTMSyntaxObject);
			Fragments._DelphiImplementationSection__OclAny.initOperations(_DelphiImplementationSection__OclAny);
			Fragments._DelphiImplementationSection__OclElement.initOperations(_DelphiImplementationSection__OclElement);
			Fragments._DelphiImplementationSection__OtherSyntaxObject.initOperations(_DelphiImplementationSection__OtherSyntaxObject);
			Fragments._DelphiImplementationSection__Visitable.initOperations(_DelphiImplementationSection__Visitable);

			Fragments._DelphiInterfaceSection__CompilationUnit.initOperations(_DelphiInterfaceSection__CompilationUnit);
			Fragments._DelphiInterfaceSection__DelphiInterfaceSection.initOperations(_DelphiInterfaceSection__DelphiInterfaceSection);
			Fragments._DelphiInterfaceSection__GASTMObject.initOperations(_DelphiInterfaceSection__GASTMObject);
			Fragments._DelphiInterfaceSection__GASTMSyntaxObject.initOperations(_DelphiInterfaceSection__GASTMSyntaxObject);
			Fragments._DelphiInterfaceSection__OclAny.initOperations(_DelphiInterfaceSection__OclAny);
			Fragments._DelphiInterfaceSection__OclElement.initOperations(_DelphiInterfaceSection__OclElement);
			Fragments._DelphiInterfaceSection__OtherSyntaxObject.initOperations(_DelphiInterfaceSection__OtherSyntaxObject);
			Fragments._DelphiInterfaceSection__Visitable.initOperations(_DelphiInterfaceSection__Visitable);

			Fragments._DelphiUnit__CompilationUnit.initOperations(_DelphiUnit__CompilationUnit);
			Fragments._DelphiUnit__DelphiUnit.initOperations(_DelphiUnit__DelphiUnit);
			Fragments._DelphiUnit__GASTMObject.initOperations(_DelphiUnit__GASTMObject);
			Fragments._DelphiUnit__GASTMSyntaxObject.initOperations(_DelphiUnit__GASTMSyntaxObject);
			Fragments._DelphiUnit__OclAny.initOperations(_DelphiUnit__OclAny);
			Fragments._DelphiUnit__OclElement.initOperations(_DelphiUnit__OclElement);
			Fragments._DelphiUnit__OtherSyntaxObject.initOperations(_DelphiUnit__OtherSyntaxObject);
			Fragments._DelphiUnit__Visitable.initOperations(_DelphiUnit__Visitable);

			Fragments._DelphiWithStatement__BlockStatement.initOperations(_DelphiWithStatement__BlockStatement);
			Fragments._DelphiWithStatement__DelphiWithStatement.initOperations(_DelphiWithStatement__DelphiWithStatement);
			Fragments._DelphiWithStatement__GASTMObject.initOperations(_DelphiWithStatement__GASTMObject);
			Fragments._DelphiWithStatement__GASTMSyntaxObject.initOperations(_DelphiWithStatement__GASTMSyntaxObject);
			Fragments._DelphiWithStatement__OclAny.initOperations(_DelphiWithStatement__OclAny);
			Fragments._DelphiWithStatement__OclElement.initOperations(_DelphiWithStatement__OclElement);
			Fragments._DelphiWithStatement__Statement.initOperations(_DelphiWithStatement__Statement);
			Fragments._DelphiWithStatement__Visitable.initOperations(_DelphiWithStatement__Visitable);

			Fragments._Deref__Deref.initOperations(_Deref__Deref);
			Fragments._Deref__GASTMObject.initOperations(_Deref__GASTMObject);
			Fragments._Deref__GASTMSyntaxObject.initOperations(_Deref__GASTMSyntaxObject);
			Fragments._Deref__OclAny.initOperations(_Deref__OclAny);
			Fragments._Deref__OclElement.initOperations(_Deref__OclElement);
			Fragments._Deref__Operator.initOperations(_Deref__Operator);
			Fragments._Deref__OtherSyntaxObject.initOperations(_Deref__OtherSyntaxObject);
			Fragments._Deref__UnaryOperator.initOperations(_Deref__UnaryOperator);
			Fragments._Deref__Visitable.initOperations(_Deref__Visitable);

			Fragments._DerivesFrom__DerivesFrom.initOperations(_DerivesFrom__DerivesFrom);
			Fragments._DerivesFrom__GASTMObject.initOperations(_DerivesFrom__GASTMObject);
			Fragments._DerivesFrom__GASTMSyntaxObject.initOperations(_DerivesFrom__GASTMSyntaxObject);
			Fragments._DerivesFrom__OclAny.initOperations(_DerivesFrom__OclAny);
			Fragments._DerivesFrom__OclElement.initOperations(_DerivesFrom__OclElement);
			Fragments._DerivesFrom__OtherSyntaxObject.initOperations(_DerivesFrom__OtherSyntaxObject);
			Fragments._DerivesFrom__Visitable.initOperations(_DerivesFrom__Visitable);

			Fragments._Dimension__Dimension.initOperations(_Dimension__Dimension);
			Fragments._Dimension__GASTMObject.initOperations(_Dimension__GASTMObject);
			Fragments._Dimension__GASTMSyntaxObject.initOperations(_Dimension__GASTMSyntaxObject);
			Fragments._Dimension__OclAny.initOperations(_Dimension__OclAny);
			Fragments._Dimension__OclElement.initOperations(_Dimension__OclElement);
			Fragments._Dimension__OtherSyntaxObject.initOperations(_Dimension__OtherSyntaxObject);
			Fragments._Dimension__Visitable.initOperations(_Dimension__Visitable);

			Fragments._Divide__BinaryOperator.initOperations(_Divide__BinaryOperator);
			Fragments._Divide__Divide.initOperations(_Divide__Divide);
			Fragments._Divide__GASTMObject.initOperations(_Divide__GASTMObject);
			Fragments._Divide__GASTMSyntaxObject.initOperations(_Divide__GASTMSyntaxObject);
			Fragments._Divide__OclAny.initOperations(_Divide__OclAny);
			Fragments._Divide__OclElement.initOperations(_Divide__OclElement);
			Fragments._Divide__Operator.initOperations(_Divide__Operator);
			Fragments._Divide__OtherSyntaxObject.initOperations(_Divide__OtherSyntaxObject);
			Fragments._Divide__Visitable.initOperations(_Divide__Visitable);

			Fragments._DoWhileStatement__DoWhileStatement.initOperations(_DoWhileStatement__DoWhileStatement);
			Fragments._DoWhileStatement__GASTMObject.initOperations(_DoWhileStatement__GASTMObject);
			Fragments._DoWhileStatement__GASTMSyntaxObject.initOperations(_DoWhileStatement__GASTMSyntaxObject);
			Fragments._DoWhileStatement__LoopStatement.initOperations(_DoWhileStatement__LoopStatement);
			Fragments._DoWhileStatement__OclAny.initOperations(_DoWhileStatement__OclAny);
			Fragments._DoWhileStatement__OclElement.initOperations(_DoWhileStatement__OclElement);
			Fragments._DoWhileStatement__Statement.initOperations(_DoWhileStatement__Statement);
			Fragments._DoWhileStatement__Visitable.initOperations(_DoWhileStatement__Visitable);

			Fragments._Double__DataType.initOperations(_Double__DataType);
			Fragments._Double__Double.initOperations(_Double__Double);
			Fragments._Double__GASTMObject.initOperations(_Double__GASTMObject);
			Fragments._Double__GASTMSyntaxObject.initOperations(_Double__GASTMSyntaxObject);
			Fragments._Double__OclAny.initOperations(_Double__OclAny);
			Fragments._Double__OclElement.initOperations(_Double__OclElement);
			Fragments._Double__PrimitiveType.initOperations(_Double__PrimitiveType);
			Fragments._Double__Type.initOperations(_Double__Type);
			Fragments._Double__Visitable.initOperations(_Double__Visitable);

			Fragments._EmptyStatement__EmptyStatement.initOperations(_EmptyStatement__EmptyStatement);
			Fragments._EmptyStatement__GASTMObject.initOperations(_EmptyStatement__GASTMObject);
			Fragments._EmptyStatement__GASTMSyntaxObject.initOperations(_EmptyStatement__GASTMSyntaxObject);
			Fragments._EmptyStatement__OclAny.initOperations(_EmptyStatement__OclAny);
			Fragments._EmptyStatement__OclElement.initOperations(_EmptyStatement__OclElement);
			Fragments._EmptyStatement__Statement.initOperations(_EmptyStatement__Statement);
			Fragments._EmptyStatement__Visitable.initOperations(_EmptyStatement__Visitable);

			Fragments._EntryDefinition__DeclarationOrDefinition.initOperations(_EntryDefinition__DeclarationOrDefinition);
			Fragments._EntryDefinition__Definition.initOperations(_EntryDefinition__Definition);
			Fragments._EntryDefinition__DefinitionObject.initOperations(_EntryDefinition__DefinitionObject);
			Fragments._EntryDefinition__EntryDefinition.initOperations(_EntryDefinition__EntryDefinition);
			Fragments._EntryDefinition__GASTMObject.initOperations(_EntryDefinition__GASTMObject);
			Fragments._EntryDefinition__GASTMSyntaxObject.initOperations(_EntryDefinition__GASTMSyntaxObject);
			Fragments._EntryDefinition__OclAny.initOperations(_EntryDefinition__OclAny);
			Fragments._EntryDefinition__OclElement.initOperations(_EntryDefinition__OclElement);
			Fragments._EntryDefinition__Visitable.initOperations(_EntryDefinition__Visitable);

			Fragments._EnumLiteralDefinition__DeclarationOrDefinition.initOperations(_EnumLiteralDefinition__DeclarationOrDefinition);
			Fragments._EnumLiteralDefinition__Definition.initOperations(_EnumLiteralDefinition__Definition);
			Fragments._EnumLiteralDefinition__DefinitionObject.initOperations(_EnumLiteralDefinition__DefinitionObject);
			Fragments._EnumLiteralDefinition__EnumLiteralDefinition.initOperations(_EnumLiteralDefinition__EnumLiteralDefinition);
			Fragments._EnumLiteralDefinition__GASTMObject.initOperations(_EnumLiteralDefinition__GASTMObject);
			Fragments._EnumLiteralDefinition__GASTMSyntaxObject.initOperations(_EnumLiteralDefinition__GASTMSyntaxObject);
			Fragments._EnumLiteralDefinition__OclAny.initOperations(_EnumLiteralDefinition__OclAny);
			Fragments._EnumLiteralDefinition__OclElement.initOperations(_EnumLiteralDefinition__OclElement);
			Fragments._EnumLiteralDefinition__Visitable.initOperations(_EnumLiteralDefinition__Visitable);

			Fragments._EnumType__DataType.initOperations(_EnumType__DataType);
			Fragments._EnumType__EnumType.initOperations(_EnumType__EnumType);
			Fragments._EnumType__GASTMObject.initOperations(_EnumType__GASTMObject);
			Fragments._EnumType__GASTMSyntaxObject.initOperations(_EnumType__GASTMSyntaxObject);
			Fragments._EnumType__OclAny.initOperations(_EnumType__OclAny);
			Fragments._EnumType__OclElement.initOperations(_EnumType__OclElement);
			Fragments._EnumType__Type.initOperations(_EnumType__Type);
			Fragments._EnumType__Visitable.initOperations(_EnumType__Visitable);

			Fragments._Equal__BinaryOperator.initOperations(_Equal__BinaryOperator);
			Fragments._Equal__Equal.initOperations(_Equal__Equal);
			Fragments._Equal__GASTMObject.initOperations(_Equal__GASTMObject);
			Fragments._Equal__GASTMSyntaxObject.initOperations(_Equal__GASTMSyntaxObject);
			Fragments._Equal__OclAny.initOperations(_Equal__OclAny);
			Fragments._Equal__OclElement.initOperations(_Equal__OclElement);
			Fragments._Equal__Operator.initOperations(_Equal__Operator);
			Fragments._Equal__OtherSyntaxObject.initOperations(_Equal__OtherSyntaxObject);
			Fragments._Equal__Visitable.initOperations(_Equal__Visitable);

			Fragments._ExceptionType__DataType.initOperations(_ExceptionType__DataType);
			Fragments._ExceptionType__ExceptionType.initOperations(_ExceptionType__ExceptionType);
			Fragments._ExceptionType__GASTMObject.initOperations(_ExceptionType__GASTMObject);
			Fragments._ExceptionType__GASTMSyntaxObject.initOperations(_ExceptionType__GASTMSyntaxObject);
			Fragments._ExceptionType__OclAny.initOperations(_ExceptionType__OclAny);
			Fragments._ExceptionType__OclElement.initOperations(_ExceptionType__OclElement);
			Fragments._ExceptionType__Type.initOperations(_ExceptionType__Type);
			Fragments._ExceptionType__Visitable.initOperations(_ExceptionType__Visitable);

			Fragments._Exponent__BinaryOperator.initOperations(_Exponent__BinaryOperator);
			Fragments._Exponent__Exponent.initOperations(_Exponent__Exponent);
			Fragments._Exponent__GASTMObject.initOperations(_Exponent__GASTMObject);
			Fragments._Exponent__GASTMSyntaxObject.initOperations(_Exponent__GASTMSyntaxObject);
			Fragments._Exponent__OclAny.initOperations(_Exponent__OclAny);
			Fragments._Exponent__OclElement.initOperations(_Exponent__OclElement);
			Fragments._Exponent__Operator.initOperations(_Exponent__Operator);
			Fragments._Exponent__OtherSyntaxObject.initOperations(_Exponent__OtherSyntaxObject);
			Fragments._Exponent__Visitable.initOperations(_Exponent__Visitable);

			Fragments._Expression__Expression.initOperations(_Expression__Expression);
			Fragments._Expression__GASTMObject.initOperations(_Expression__GASTMObject);
			Fragments._Expression__GASTMSyntaxObject.initOperations(_Expression__GASTMSyntaxObject);
			Fragments._Expression__OclAny.initOperations(_Expression__OclAny);
			Fragments._Expression__OclElement.initOperations(_Expression__OclElement);
			Fragments._Expression__Visitable.initOperations(_Expression__Visitable);

			Fragments._ExpressionStatement__ExpressionStatement.initOperations(_ExpressionStatement__ExpressionStatement);
			Fragments._ExpressionStatement__GASTMObject.initOperations(_ExpressionStatement__GASTMObject);
			Fragments._ExpressionStatement__GASTMSyntaxObject.initOperations(_ExpressionStatement__GASTMSyntaxObject);
			Fragments._ExpressionStatement__OclAny.initOperations(_ExpressionStatement__OclAny);
			Fragments._ExpressionStatement__OclElement.initOperations(_ExpressionStatement__OclElement);
			Fragments._ExpressionStatement__Statement.initOperations(_ExpressionStatement__Statement);
			Fragments._ExpressionStatement__Visitable.initOperations(_ExpressionStatement__Visitable);

			Fragments._External__External.initOperations(_External__External);
			Fragments._External__OclAny.initOperations(_External__OclAny);
			Fragments._External__OclElement.initOperations(_External__OclElement);
			Fragments._External__StorageSpecification.initOperations(_External__StorageSpecification);
			Fragments._External__Visitable.initOperations(_External__Visitable);

			Fragments._FileLocal__FileLocal.initOperations(_FileLocal__FileLocal);
			Fragments._FileLocal__OclAny.initOperations(_FileLocal__OclAny);
			Fragments._FileLocal__OclElement.initOperations(_FileLocal__OclElement);
			Fragments._FileLocal__StorageSpecification.initOperations(_FileLocal__StorageSpecification);
			Fragments._FileLocal__Visitable.initOperations(_FileLocal__Visitable);

			Fragments._Float__DataType.initOperations(_Float__DataType);
			Fragments._Float__Float.initOperations(_Float__Float);
			Fragments._Float__GASTMObject.initOperations(_Float__GASTMObject);
			Fragments._Float__GASTMSyntaxObject.initOperations(_Float__GASTMSyntaxObject);
			Fragments._Float__OclAny.initOperations(_Float__OclAny);
			Fragments._Float__OclElement.initOperations(_Float__OclElement);
			Fragments._Float__PrimitiveType.initOperations(_Float__PrimitiveType);
			Fragments._Float__Type.initOperations(_Float__Type);
			Fragments._Float__Visitable.initOperations(_Float__Visitable);

			Fragments._ForCheckAfterStatement__ForCheckAfterStatement.initOperations(_ForCheckAfterStatement__ForCheckAfterStatement);
			Fragments._ForCheckAfterStatement__ForStatement.initOperations(_ForCheckAfterStatement__ForStatement);
			Fragments._ForCheckAfterStatement__GASTMObject.initOperations(_ForCheckAfterStatement__GASTMObject);
			Fragments._ForCheckAfterStatement__GASTMSyntaxObject.initOperations(_ForCheckAfterStatement__GASTMSyntaxObject);
			Fragments._ForCheckAfterStatement__LoopStatement.initOperations(_ForCheckAfterStatement__LoopStatement);
			Fragments._ForCheckAfterStatement__OclAny.initOperations(_ForCheckAfterStatement__OclAny);
			Fragments._ForCheckAfterStatement__OclElement.initOperations(_ForCheckAfterStatement__OclElement);
			Fragments._ForCheckAfterStatement__Statement.initOperations(_ForCheckAfterStatement__Statement);
			Fragments._ForCheckAfterStatement__Visitable.initOperations(_ForCheckAfterStatement__Visitable);

			Fragments._ForCheckBeforeStatement__ForCheckBeforeStatement.initOperations(_ForCheckBeforeStatement__ForCheckBeforeStatement);
			Fragments._ForCheckBeforeStatement__ForStatement.initOperations(_ForCheckBeforeStatement__ForStatement);
			Fragments._ForCheckBeforeStatement__GASTMObject.initOperations(_ForCheckBeforeStatement__GASTMObject);
			Fragments._ForCheckBeforeStatement__GASTMSyntaxObject.initOperations(_ForCheckBeforeStatement__GASTMSyntaxObject);
			Fragments._ForCheckBeforeStatement__LoopStatement.initOperations(_ForCheckBeforeStatement__LoopStatement);
			Fragments._ForCheckBeforeStatement__OclAny.initOperations(_ForCheckBeforeStatement__OclAny);
			Fragments._ForCheckBeforeStatement__OclElement.initOperations(_ForCheckBeforeStatement__OclElement);
			Fragments._ForCheckBeforeStatement__Statement.initOperations(_ForCheckBeforeStatement__Statement);
			Fragments._ForCheckBeforeStatement__Visitable.initOperations(_ForCheckBeforeStatement__Visitable);

			Fragments._ForStatement__ForStatement.initOperations(_ForStatement__ForStatement);
			Fragments._ForStatement__GASTMObject.initOperations(_ForStatement__GASTMObject);
			Fragments._ForStatement__GASTMSyntaxObject.initOperations(_ForStatement__GASTMSyntaxObject);
			Fragments._ForStatement__LoopStatement.initOperations(_ForStatement__LoopStatement);
			Fragments._ForStatement__OclAny.initOperations(_ForStatement__OclAny);
			Fragments._ForStatement__OclElement.initOperations(_ForStatement__OclElement);
			Fragments._ForStatement__Statement.initOperations(_ForStatement__Statement);
			Fragments._ForStatement__Visitable.initOperations(_ForStatement__Visitable);

			Fragments._FormalParameterDeclaration__Declaration.initOperations(_FormalParameterDeclaration__Declaration);
			Fragments._FormalParameterDeclaration__DeclarationOrDefinition.initOperations(_FormalParameterDeclaration__DeclarationOrDefinition);
			Fragments._FormalParameterDeclaration__DefinitionObject.initOperations(_FormalParameterDeclaration__DefinitionObject);
			Fragments._FormalParameterDeclaration__FormalParameterDeclaration.initOperations(_FormalParameterDeclaration__FormalParameterDeclaration);
			Fragments._FormalParameterDeclaration__GASTMObject.initOperations(_FormalParameterDeclaration__GASTMObject);
			Fragments._FormalParameterDeclaration__GASTMSyntaxObject.initOperations(_FormalParameterDeclaration__GASTMSyntaxObject);
			Fragments._FormalParameterDeclaration__OclAny.initOperations(_FormalParameterDeclaration__OclAny);
			Fragments._FormalParameterDeclaration__OclElement.initOperations(_FormalParameterDeclaration__OclElement);
			Fragments._FormalParameterDeclaration__Visitable.initOperations(_FormalParameterDeclaration__Visitable);

			Fragments._FormalParameterDefinition__DataDefinition.initOperations(_FormalParameterDefinition__DataDefinition);
			Fragments._FormalParameterDefinition__DeclarationOrDefinition.initOperations(_FormalParameterDefinition__DeclarationOrDefinition);
			Fragments._FormalParameterDefinition__Definition.initOperations(_FormalParameterDefinition__Definition);
			Fragments._FormalParameterDefinition__DefinitionObject.initOperations(_FormalParameterDefinition__DefinitionObject);
			Fragments._FormalParameterDefinition__FormalParameterDefinition.initOperations(_FormalParameterDefinition__FormalParameterDefinition);
			Fragments._FormalParameterDefinition__GASTMObject.initOperations(_FormalParameterDefinition__GASTMObject);
			Fragments._FormalParameterDefinition__GASTMSyntaxObject.initOperations(_FormalParameterDefinition__GASTMSyntaxObject);
			Fragments._FormalParameterDefinition__OclAny.initOperations(_FormalParameterDefinition__OclAny);
			Fragments._FormalParameterDefinition__OclElement.initOperations(_FormalParameterDefinition__OclElement);
			Fragments._FormalParameterDefinition__Visitable.initOperations(_FormalParameterDefinition__Visitable);

			Fragments._FormalParameterType__DataType.initOperations(_FormalParameterType__DataType);
			Fragments._FormalParameterType__FormalParameterType.initOperations(_FormalParameterType__FormalParameterType);
			Fragments._FormalParameterType__GASTMObject.initOperations(_FormalParameterType__GASTMObject);
			Fragments._FormalParameterType__GASTMSyntaxObject.initOperations(_FormalParameterType__GASTMSyntaxObject);
			Fragments._FormalParameterType__OclAny.initOperations(_FormalParameterType__OclAny);
			Fragments._FormalParameterType__OclElement.initOperations(_FormalParameterType__OclElement);
			Fragments._FormalParameterType__Type.initOperations(_FormalParameterType__Type);
			Fragments._FormalParameterType__Visitable.initOperations(_FormalParameterType__Visitable);

			Fragments._FunctionCallExpression__Expression.initOperations(_FunctionCallExpression__Expression);
			Fragments._FunctionCallExpression__FunctionCallExpression.initOperations(_FunctionCallExpression__FunctionCallExpression);
			Fragments._FunctionCallExpression__GASTMObject.initOperations(_FunctionCallExpression__GASTMObject);
			Fragments._FunctionCallExpression__GASTMSyntaxObject.initOperations(_FunctionCallExpression__GASTMSyntaxObject);
			Fragments._FunctionCallExpression__OclAny.initOperations(_FunctionCallExpression__OclAny);
			Fragments._FunctionCallExpression__OclElement.initOperations(_FunctionCallExpression__OclElement);
			Fragments._FunctionCallExpression__Visitable.initOperations(_FunctionCallExpression__Visitable);

			Fragments._FunctionDeclaration__Declaration.initOperations(_FunctionDeclaration__Declaration);
			Fragments._FunctionDeclaration__DeclarationOrDefinition.initOperations(_FunctionDeclaration__DeclarationOrDefinition);
			Fragments._FunctionDeclaration__DefinitionObject.initOperations(_FunctionDeclaration__DefinitionObject);
			Fragments._FunctionDeclaration__FunctionDeclaration.initOperations(_FunctionDeclaration__FunctionDeclaration);
			Fragments._FunctionDeclaration__GASTMObject.initOperations(_FunctionDeclaration__GASTMObject);
			Fragments._FunctionDeclaration__GASTMSyntaxObject.initOperations(_FunctionDeclaration__GASTMSyntaxObject);
			Fragments._FunctionDeclaration__OclAny.initOperations(_FunctionDeclaration__OclAny);
			Fragments._FunctionDeclaration__OclElement.initOperations(_FunctionDeclaration__OclElement);
			Fragments._FunctionDeclaration__Visitable.initOperations(_FunctionDeclaration__Visitable);

			Fragments._FunctionDefinition__DeclarationOrDefinition.initOperations(_FunctionDefinition__DeclarationOrDefinition);
			Fragments._FunctionDefinition__Definition.initOperations(_FunctionDefinition__Definition);
			Fragments._FunctionDefinition__DefinitionObject.initOperations(_FunctionDefinition__DefinitionObject);
			Fragments._FunctionDefinition__FunctionDefinition.initOperations(_FunctionDefinition__FunctionDefinition);
			Fragments._FunctionDefinition__GASTMObject.initOperations(_FunctionDefinition__GASTMObject);
			Fragments._FunctionDefinition__GASTMSyntaxObject.initOperations(_FunctionDefinition__GASTMSyntaxObject);
			Fragments._FunctionDefinition__OclAny.initOperations(_FunctionDefinition__OclAny);
			Fragments._FunctionDefinition__OclElement.initOperations(_FunctionDefinition__OclElement);
			Fragments._FunctionDefinition__Visitable.initOperations(_FunctionDefinition__Visitable);

			Fragments._FunctionMemberAttribute__FunctionMemberAttribute.initOperations(_FunctionMemberAttribute__FunctionMemberAttribute);
			Fragments._FunctionMemberAttribute__GASTMObject.initOperations(_FunctionMemberAttribute__GASTMObject);
			Fragments._FunctionMemberAttribute__GASTMSyntaxObject.initOperations(_FunctionMemberAttribute__GASTMSyntaxObject);
			Fragments._FunctionMemberAttribute__OclAny.initOperations(_FunctionMemberAttribute__OclAny);
			Fragments._FunctionMemberAttribute__OclElement.initOperations(_FunctionMemberAttribute__OclElement);
			Fragments._FunctionMemberAttribute__OtherSyntaxObject.initOperations(_FunctionMemberAttribute__OtherSyntaxObject);
			Fragments._FunctionMemberAttribute__Visitable.initOperations(_FunctionMemberAttribute__Visitable);

			Fragments._FunctionMemberAttributes__FunctionMemberAttributes.initOperations(_FunctionMemberAttributes__FunctionMemberAttributes);
			Fragments._FunctionMemberAttributes__OclAny.initOperations(_FunctionMemberAttributes__OclAny);
			Fragments._FunctionMemberAttributes__OclElement.initOperations(_FunctionMemberAttributes__OclElement);
			Fragments._FunctionMemberAttributes__Visitable.initOperations(_FunctionMemberAttributes__Visitable);

			Fragments._FunctionPersistent__FunctionPersistent.initOperations(_FunctionPersistent__FunctionPersistent);
			Fragments._FunctionPersistent__OclAny.initOperations(_FunctionPersistent__OclAny);
			Fragments._FunctionPersistent__OclElement.initOperations(_FunctionPersistent__OclElement);
			Fragments._FunctionPersistent__StorageSpecification.initOperations(_FunctionPersistent__StorageSpecification);
			Fragments._FunctionPersistent__Visitable.initOperations(_FunctionPersistent__Visitable);

			Fragments._FunctionScope__FunctionScope.initOperations(_FunctionScope__FunctionScope);
			Fragments._FunctionScope__GASTMSemanticObject.initOperations(_FunctionScope__GASTMSemanticObject);
			Fragments._FunctionScope__OclAny.initOperations(_FunctionScope__OclAny);
			Fragments._FunctionScope__OclElement.initOperations(_FunctionScope__OclElement);
			Fragments._FunctionScope__Scope.initOperations(_FunctionScope__Scope);
			Fragments._FunctionScope__Visitable.initOperations(_FunctionScope__Visitable);

			Fragments._FunctionType__FunctionType.initOperations(_FunctionType__FunctionType);
			Fragments._FunctionType__GASTMObject.initOperations(_FunctionType__GASTMObject);
			Fragments._FunctionType__GASTMSyntaxObject.initOperations(_FunctionType__GASTMSyntaxObject);
			Fragments._FunctionType__OclAny.initOperations(_FunctionType__OclAny);
			Fragments._FunctionType__OclElement.initOperations(_FunctionType__OclElement);
			Fragments._FunctionType__Type.initOperations(_FunctionType__Type);
			Fragments._FunctionType__Visitable.initOperations(_FunctionType__Visitable);

			Fragments._GASTMObject__GASTMObject.initOperations(_GASTMObject__GASTMObject);
			Fragments._GASTMObject__OclAny.initOperations(_GASTMObject__OclAny);
			Fragments._GASTMObject__OclElement.initOperations(_GASTMObject__OclElement);
			Fragments._GASTMObject__Visitable.initOperations(_GASTMObject__Visitable);

			Fragments._GASTMSemanticObject__GASTMSemanticObject.initOperations(_GASTMSemanticObject__GASTMSemanticObject);
			Fragments._GASTMSemanticObject__OclAny.initOperations(_GASTMSemanticObject__OclAny);
			Fragments._GASTMSemanticObject__OclElement.initOperations(_GASTMSemanticObject__OclElement);
			Fragments._GASTMSemanticObject__Visitable.initOperations(_GASTMSemanticObject__Visitable);

			Fragments._GASTMSourceObject__GASTMSourceObject.initOperations(_GASTMSourceObject__GASTMSourceObject);
			Fragments._GASTMSourceObject__OclAny.initOperations(_GASTMSourceObject__OclAny);
			Fragments._GASTMSourceObject__OclElement.initOperations(_GASTMSourceObject__OclElement);
			Fragments._GASTMSourceObject__Visitable.initOperations(_GASTMSourceObject__Visitable);

			Fragments._GASTMSyntaxObject__GASTMObject.initOperations(_GASTMSyntaxObject__GASTMObject);
			Fragments._GASTMSyntaxObject__GASTMSyntaxObject.initOperations(_GASTMSyntaxObject__GASTMSyntaxObject);
			Fragments._GASTMSyntaxObject__OclAny.initOperations(_GASTMSyntaxObject__OclAny);
			Fragments._GASTMSyntaxObject__OclElement.initOperations(_GASTMSyntaxObject__OclElement);
			Fragments._GASTMSyntaxObject__Visitable.initOperations(_GASTMSyntaxObject__Visitable);

			Fragments._GlobalScope__GASTMSemanticObject.initOperations(_GlobalScope__GASTMSemanticObject);
			Fragments._GlobalScope__GlobalScope.initOperations(_GlobalScope__GlobalScope);
			Fragments._GlobalScope__OclAny.initOperations(_GlobalScope__OclAny);
			Fragments._GlobalScope__OclElement.initOperations(_GlobalScope__OclElement);
			Fragments._GlobalScope__Scope.initOperations(_GlobalScope__Scope);
			Fragments._GlobalScope__Visitable.initOperations(_GlobalScope__Visitable);

			Fragments._Greater__BinaryOperator.initOperations(_Greater__BinaryOperator);
			Fragments._Greater__GASTMObject.initOperations(_Greater__GASTMObject);
			Fragments._Greater__GASTMSyntaxObject.initOperations(_Greater__GASTMSyntaxObject);
			Fragments._Greater__Greater.initOperations(_Greater__Greater);
			Fragments._Greater__OclAny.initOperations(_Greater__OclAny);
			Fragments._Greater__OclElement.initOperations(_Greater__OclElement);
			Fragments._Greater__Operator.initOperations(_Greater__Operator);
			Fragments._Greater__OtherSyntaxObject.initOperations(_Greater__OtherSyntaxObject);
			Fragments._Greater__Visitable.initOperations(_Greater__Visitable);

			Fragments._IdentifierReference__Expression.initOperations(_IdentifierReference__Expression);
			Fragments._IdentifierReference__GASTMObject.initOperations(_IdentifierReference__GASTMObject);
			Fragments._IdentifierReference__GASTMSyntaxObject.initOperations(_IdentifierReference__GASTMSyntaxObject);
			Fragments._IdentifierReference__IdentifierReference.initOperations(_IdentifierReference__IdentifierReference);
			Fragments._IdentifierReference__NameReference.initOperations(_IdentifierReference__NameReference);
			Fragments._IdentifierReference__OclAny.initOperations(_IdentifierReference__OclAny);
			Fragments._IdentifierReference__OclElement.initOperations(_IdentifierReference__OclElement);
			Fragments._IdentifierReference__Visitable.initOperations(_IdentifierReference__Visitable);

			Fragments._IfStatement__GASTMObject.initOperations(_IfStatement__GASTMObject);
			Fragments._IfStatement__GASTMSyntaxObject.initOperations(_IfStatement__GASTMSyntaxObject);
			Fragments._IfStatement__IfStatement.initOperations(_IfStatement__IfStatement);
			Fragments._IfStatement__OclAny.initOperations(_IfStatement__OclAny);
			Fragments._IfStatement__OclElement.initOperations(_IfStatement__OclElement);
			Fragments._IfStatement__Statement.initOperations(_IfStatement__Statement);
			Fragments._IfStatement__Visitable.initOperations(_IfStatement__Visitable);

			Fragments._IncludeUnit__GASTMObject.initOperations(_IncludeUnit__GASTMObject);
			Fragments._IncludeUnit__GASTMSyntaxObject.initOperations(_IncludeUnit__GASTMSyntaxObject);
			Fragments._IncludeUnit__IncludeUnit.initOperations(_IncludeUnit__IncludeUnit);
			Fragments._IncludeUnit__OclAny.initOperations(_IncludeUnit__OclAny);
			Fragments._IncludeUnit__OclElement.initOperations(_IncludeUnit__OclElement);
			Fragments._IncludeUnit__PreprocessorElement.initOperations(_IncludeUnit__PreprocessorElement);
			Fragments._IncludeUnit__Visitable.initOperations(_IncludeUnit__Visitable);

			Fragments._Increment__GASTMObject.initOperations(_Increment__GASTMObject);
			Fragments._Increment__GASTMSyntaxObject.initOperations(_Increment__GASTMSyntaxObject);
			Fragments._Increment__Increment.initOperations(_Increment__Increment);
			Fragments._Increment__OclAny.initOperations(_Increment__OclAny);
			Fragments._Increment__OclElement.initOperations(_Increment__OclElement);
			Fragments._Increment__Operator.initOperations(_Increment__Operator);
			Fragments._Increment__OtherSyntaxObject.initOperations(_Increment__OtherSyntaxObject);
			Fragments._Increment__UnaryOperator.initOperations(_Increment__UnaryOperator);
			Fragments._Increment__Visitable.initOperations(_Increment__Visitable);

			Fragments._Integer__DataType.initOperations(_Integer__DataType);
			Fragments._Integer__GASTMObject.initOperations(_Integer__GASTMObject);
			Fragments._Integer__GASTMSyntaxObject.initOperations(_Integer__GASTMSyntaxObject);
			Fragments._Integer__Integer.initOperations(_Integer__Integer);
			Fragments._Integer__OclAny.initOperations(_Integer__OclAny);
			Fragments._Integer__OclElement.initOperations(_Integer__OclElement);
			Fragments._Integer__PrimitiveType.initOperations(_Integer__PrimitiveType);
			Fragments._Integer__Type.initOperations(_Integer__Type);
			Fragments._Integer__Visitable.initOperations(_Integer__Visitable);

			Fragments._IntegerLiteral__Expression.initOperations(_IntegerLiteral__Expression);
			Fragments._IntegerLiteral__GASTMObject.initOperations(_IntegerLiteral__GASTMObject);
			Fragments._IntegerLiteral__GASTMSyntaxObject.initOperations(_IntegerLiteral__GASTMSyntaxObject);
			Fragments._IntegerLiteral__IntegerLiteral.initOperations(_IntegerLiteral__IntegerLiteral);
			Fragments._IntegerLiteral__Literal.initOperations(_IntegerLiteral__Literal);
			Fragments._IntegerLiteral__OclAny.initOperations(_IntegerLiteral__OclAny);
			Fragments._IntegerLiteral__OclElement.initOperations(_IntegerLiteral__OclElement);
			Fragments._IntegerLiteral__Visitable.initOperations(_IntegerLiteral__Visitable);

			Fragments._JumpStatement__GASTMObject.initOperations(_JumpStatement__GASTMObject);
			Fragments._JumpStatement__GASTMSyntaxObject.initOperations(_JumpStatement__GASTMSyntaxObject);
			Fragments._JumpStatement__JumpStatement.initOperations(_JumpStatement__JumpStatement);
			Fragments._JumpStatement__OclAny.initOperations(_JumpStatement__OclAny);
			Fragments._JumpStatement__OclElement.initOperations(_JumpStatement__OclElement);
			Fragments._JumpStatement__Statement.initOperations(_JumpStatement__Statement);
			Fragments._JumpStatement__Visitable.initOperations(_JumpStatement__Visitable);

			Fragments._LabelAccess__Expression.initOperations(_LabelAccess__Expression);
			Fragments._LabelAccess__GASTMObject.initOperations(_LabelAccess__GASTMObject);
			Fragments._LabelAccess__GASTMSyntaxObject.initOperations(_LabelAccess__GASTMSyntaxObject);
			Fragments._LabelAccess__LabelAccess.initOperations(_LabelAccess__LabelAccess);
			Fragments._LabelAccess__OclAny.initOperations(_LabelAccess__OclAny);
			Fragments._LabelAccess__OclElement.initOperations(_LabelAccess__OclElement);
			Fragments._LabelAccess__Visitable.initOperations(_LabelAccess__Visitable);

			Fragments._LabelDefinition__DefinitionObject.initOperations(_LabelDefinition__DefinitionObject);
			Fragments._LabelDefinition__GASTMObject.initOperations(_LabelDefinition__GASTMObject);
			Fragments._LabelDefinition__GASTMSyntaxObject.initOperations(_LabelDefinition__GASTMSyntaxObject);
			Fragments._LabelDefinition__LabelDefinition.initOperations(_LabelDefinition__LabelDefinition);
			Fragments._LabelDefinition__OclAny.initOperations(_LabelDefinition__OclAny);
			Fragments._LabelDefinition__OclElement.initOperations(_LabelDefinition__OclElement);
			Fragments._LabelDefinition__Visitable.initOperations(_LabelDefinition__Visitable);

			Fragments._LabelType__GASTMObject.initOperations(_LabelType__GASTMObject);
			Fragments._LabelType__GASTMSyntaxObject.initOperations(_LabelType__GASTMSyntaxObject);
			Fragments._LabelType__LabelType.initOperations(_LabelType__LabelType);
			Fragments._LabelType__OclAny.initOperations(_LabelType__OclAny);
			Fragments._LabelType__OclElement.initOperations(_LabelType__OclElement);
			Fragments._LabelType__Type.initOperations(_LabelType__Type);
			Fragments._LabelType__Visitable.initOperations(_LabelType__Visitable);

			Fragments._LabeledStatement__GASTMObject.initOperations(_LabeledStatement__GASTMObject);
			Fragments._LabeledStatement__GASTMSyntaxObject.initOperations(_LabeledStatement__GASTMSyntaxObject);
			Fragments._LabeledStatement__LabeledStatement.initOperations(_LabeledStatement__LabeledStatement);
			Fragments._LabeledStatement__OclAny.initOperations(_LabeledStatement__OclAny);
			Fragments._LabeledStatement__OclElement.initOperations(_LabeledStatement__OclElement);
			Fragments._LabeledStatement__Statement.initOperations(_LabeledStatement__Statement);
			Fragments._LabeledStatement__Visitable.initOperations(_LabeledStatement__Visitable);

			Fragments._Less__BinaryOperator.initOperations(_Less__BinaryOperator);
			Fragments._Less__GASTMObject.initOperations(_Less__GASTMObject);
			Fragments._Less__GASTMSyntaxObject.initOperations(_Less__GASTMSyntaxObject);
			Fragments._Less__Less.initOperations(_Less__Less);
			Fragments._Less__OclAny.initOperations(_Less__OclAny);
			Fragments._Less__OclElement.initOperations(_Less__OclElement);
			Fragments._Less__Operator.initOperations(_Less__Operator);
			Fragments._Less__OtherSyntaxObject.initOperations(_Less__OtherSyntaxObject);
			Fragments._Less__Visitable.initOperations(_Less__Visitable);

			Fragments._Literal__Expression.initOperations(_Literal__Expression);
			Fragments._Literal__GASTMObject.initOperations(_Literal__GASTMObject);
			Fragments._Literal__GASTMSyntaxObject.initOperations(_Literal__GASTMSyntaxObject);
			Fragments._Literal__Literal.initOperations(_Literal__Literal);
			Fragments._Literal__OclAny.initOperations(_Literal__OclAny);
			Fragments._Literal__OclElement.initOperations(_Literal__OclElement);
			Fragments._Literal__Visitable.initOperations(_Literal__Visitable);

			Fragments._LongDouble__DataType.initOperations(_LongDouble__DataType);
			Fragments._LongDouble__GASTMObject.initOperations(_LongDouble__GASTMObject);
			Fragments._LongDouble__GASTMSyntaxObject.initOperations(_LongDouble__GASTMSyntaxObject);
			Fragments._LongDouble__LongDouble.initOperations(_LongDouble__LongDouble);
			Fragments._LongDouble__OclAny.initOperations(_LongDouble__OclAny);
			Fragments._LongDouble__OclElement.initOperations(_LongDouble__OclElement);
			Fragments._LongDouble__PrimitiveType.initOperations(_LongDouble__PrimitiveType);
			Fragments._LongDouble__Type.initOperations(_LongDouble__Type);
			Fragments._LongDouble__Visitable.initOperations(_LongDouble__Visitable);

			Fragments._LongInteger__DataType.initOperations(_LongInteger__DataType);
			Fragments._LongInteger__GASTMObject.initOperations(_LongInteger__GASTMObject);
			Fragments._LongInteger__GASTMSyntaxObject.initOperations(_LongInteger__GASTMSyntaxObject);
			Fragments._LongInteger__LongInteger.initOperations(_LongInteger__LongInteger);
			Fragments._LongInteger__OclAny.initOperations(_LongInteger__OclAny);
			Fragments._LongInteger__OclElement.initOperations(_LongInteger__OclElement);
			Fragments._LongInteger__PrimitiveType.initOperations(_LongInteger__PrimitiveType);
			Fragments._LongInteger__Type.initOperations(_LongInteger__Type);
			Fragments._LongInteger__Visitable.initOperations(_LongInteger__Visitable);

			Fragments._LoopStatement__GASTMObject.initOperations(_LoopStatement__GASTMObject);
			Fragments._LoopStatement__GASTMSyntaxObject.initOperations(_LoopStatement__GASTMSyntaxObject);
			Fragments._LoopStatement__LoopStatement.initOperations(_LoopStatement__LoopStatement);
			Fragments._LoopStatement__OclAny.initOperations(_LoopStatement__OclAny);
			Fragments._LoopStatement__OclElement.initOperations(_LoopStatement__OclElement);
			Fragments._LoopStatement__Statement.initOperations(_LoopStatement__Statement);
			Fragments._LoopStatement__Visitable.initOperations(_LoopStatement__Visitable);

			Fragments._MacroCall__GASTMObject.initOperations(_MacroCall__GASTMObject);
			Fragments._MacroCall__GASTMSyntaxObject.initOperations(_MacroCall__GASTMSyntaxObject);
			Fragments._MacroCall__MacroCall.initOperations(_MacroCall__MacroCall);
			Fragments._MacroCall__OclAny.initOperations(_MacroCall__OclAny);
			Fragments._MacroCall__OclElement.initOperations(_MacroCall__OclElement);
			Fragments._MacroCall__PreprocessorElement.initOperations(_MacroCall__PreprocessorElement);
			Fragments._MacroCall__Visitable.initOperations(_MacroCall__Visitable);

			Fragments._MacroDefinition__GASTMObject.initOperations(_MacroDefinition__GASTMObject);
			Fragments._MacroDefinition__GASTMSyntaxObject.initOperations(_MacroDefinition__GASTMSyntaxObject);
			Fragments._MacroDefinition__MacroDefinition.initOperations(_MacroDefinition__MacroDefinition);
			Fragments._MacroDefinition__OclAny.initOperations(_MacroDefinition__OclAny);
			Fragments._MacroDefinition__OclElement.initOperations(_MacroDefinition__OclElement);
			Fragments._MacroDefinition__PreprocessorElement.initOperations(_MacroDefinition__PreprocessorElement);
			Fragments._MacroDefinition__Visitable.initOperations(_MacroDefinition__Visitable);

			Fragments._MissingActualParameter__ActualParameter.initOperations(_MissingActualParameter__ActualParameter);
			Fragments._MissingActualParameter__MissingActualParameter.initOperations(_MissingActualParameter__MissingActualParameter);
			Fragments._MissingActualParameter__OclAny.initOperations(_MissingActualParameter__OclAny);
			Fragments._MissingActualParameter__OclElement.initOperations(_MissingActualParameter__OclElement);
			Fragments._MissingActualParameter__Visitable.initOperations(_MissingActualParameter__Visitable);

			Fragments._Modulus__BinaryOperator.initOperations(_Modulus__BinaryOperator);
			Fragments._Modulus__GASTMObject.initOperations(_Modulus__GASTMObject);
			Fragments._Modulus__GASTMSyntaxObject.initOperations(_Modulus__GASTMSyntaxObject);
			Fragments._Modulus__Modulus.initOperations(_Modulus__Modulus);
			Fragments._Modulus__OclAny.initOperations(_Modulus__OclAny);
			Fragments._Modulus__OclElement.initOperations(_Modulus__OclElement);
			Fragments._Modulus__Operator.initOperations(_Modulus__Operator);
			Fragments._Modulus__OtherSyntaxObject.initOperations(_Modulus__OtherSyntaxObject);
			Fragments._Modulus__Visitable.initOperations(_Modulus__Visitable);

			Fragments._Multiply__BinaryOperator.initOperations(_Multiply__BinaryOperator);
			Fragments._Multiply__GASTMObject.initOperations(_Multiply__GASTMObject);
			Fragments._Multiply__GASTMSyntaxObject.initOperations(_Multiply__GASTMSyntaxObject);
			Fragments._Multiply__Multiply.initOperations(_Multiply__Multiply);
			Fragments._Multiply__OclAny.initOperations(_Multiply__OclAny);
			Fragments._Multiply__OclElement.initOperations(_Multiply__OclElement);
			Fragments._Multiply__Operator.initOperations(_Multiply__Operator);
			Fragments._Multiply__OtherSyntaxObject.initOperations(_Multiply__OtherSyntaxObject);
			Fragments._Multiply__Visitable.initOperations(_Multiply__Visitable);

			Fragments._Name__GASTMObject.initOperations(_Name__GASTMObject);
			Fragments._Name__GASTMSyntaxObject.initOperations(_Name__GASTMSyntaxObject);
			Fragments._Name__Name.initOperations(_Name__Name);
			Fragments._Name__OclAny.initOperations(_Name__OclAny);
			Fragments._Name__OclElement.initOperations(_Name__OclElement);
			Fragments._Name__OtherSyntaxObject.initOperations(_Name__OtherSyntaxObject);
			Fragments._Name__Visitable.initOperations(_Name__Visitable);

			Fragments._NameReference__Expression.initOperations(_NameReference__Expression);
			Fragments._NameReference__GASTMObject.initOperations(_NameReference__GASTMObject);
			Fragments._NameReference__GASTMSyntaxObject.initOperations(_NameReference__GASTMSyntaxObject);
			Fragments._NameReference__NameReference.initOperations(_NameReference__NameReference);
			Fragments._NameReference__OclAny.initOperations(_NameReference__OclAny);
			Fragments._NameReference__OclElement.initOperations(_NameReference__OclElement);
			Fragments._NameReference__Visitable.initOperations(_NameReference__Visitable);

			Fragments._NameSpaceDefinition__DefinitionObject.initOperations(_NameSpaceDefinition__DefinitionObject);
			Fragments._NameSpaceDefinition__GASTMObject.initOperations(_NameSpaceDefinition__GASTMObject);
			Fragments._NameSpaceDefinition__GASTMSyntaxObject.initOperations(_NameSpaceDefinition__GASTMSyntaxObject);
			Fragments._NameSpaceDefinition__NameSpaceDefinition.initOperations(_NameSpaceDefinition__NameSpaceDefinition);
			Fragments._NameSpaceDefinition__OclAny.initOperations(_NameSpaceDefinition__OclAny);
			Fragments._NameSpaceDefinition__OclElement.initOperations(_NameSpaceDefinition__OclElement);
			Fragments._NameSpaceDefinition__Visitable.initOperations(_NameSpaceDefinition__Visitable);

			Fragments._NameSpaceType__GASTMObject.initOperations(_NameSpaceType__GASTMObject);
			Fragments._NameSpaceType__GASTMSyntaxObject.initOperations(_NameSpaceType__GASTMSyntaxObject);
			Fragments._NameSpaceType__NameSpaceType.initOperations(_NameSpaceType__NameSpaceType);
			Fragments._NameSpaceType__OclAny.initOperations(_NameSpaceType__OclAny);
			Fragments._NameSpaceType__OclElement.initOperations(_NameSpaceType__OclElement);
			Fragments._NameSpaceType__Type.initOperations(_NameSpaceType__Type);
			Fragments._NameSpaceType__Visitable.initOperations(_NameSpaceType__Visitable);

			Fragments._NamedType__DataType.initOperations(_NamedType__DataType);
			Fragments._NamedType__GASTMObject.initOperations(_NamedType__GASTMObject);
			Fragments._NamedType__GASTMSyntaxObject.initOperations(_NamedType__GASTMSyntaxObject);
			Fragments._NamedType__NamedType.initOperations(_NamedType__NamedType);
			Fragments._NamedType__OclAny.initOperations(_NamedType__OclAny);
			Fragments._NamedType__OclElement.initOperations(_NamedType__OclElement);
			Fragments._NamedType__Type.initOperations(_NamedType__Type);
			Fragments._NamedType__Visitable.initOperations(_NamedType__Visitable);

			Fragments._NamedTypeDefinition__DefinitionObject.initOperations(_NamedTypeDefinition__DefinitionObject);
			Fragments._NamedTypeDefinition__GASTMObject.initOperations(_NamedTypeDefinition__GASTMObject);
			Fragments._NamedTypeDefinition__GASTMSyntaxObject.initOperations(_NamedTypeDefinition__GASTMSyntaxObject);
			Fragments._NamedTypeDefinition__NamedTypeDefinition.initOperations(_NamedTypeDefinition__NamedTypeDefinition);
			Fragments._NamedTypeDefinition__OclAny.initOperations(_NamedTypeDefinition__OclAny);
			Fragments._NamedTypeDefinition__OclElement.initOperations(_NamedTypeDefinition__OclElement);
			Fragments._NamedTypeDefinition__TypeDefinition.initOperations(_NamedTypeDefinition__TypeDefinition);
			Fragments._NamedTypeDefinition__Visitable.initOperations(_NamedTypeDefinition__Visitable);

			Fragments._NamedTypeReference__GASTMObject.initOperations(_NamedTypeReference__GASTMObject);
			Fragments._NamedTypeReference__GASTMSyntaxObject.initOperations(_NamedTypeReference__GASTMSyntaxObject);
			Fragments._NamedTypeReference__NamedTypeReference.initOperations(_NamedTypeReference__NamedTypeReference);
			Fragments._NamedTypeReference__OclAny.initOperations(_NamedTypeReference__OclAny);
			Fragments._NamedTypeReference__OclElement.initOperations(_NamedTypeReference__OclElement);
			Fragments._NamedTypeReference__Type.initOperations(_NamedTypeReference__Type);
			Fragments._NamedTypeReference__TypeReference.initOperations(_NamedTypeReference__TypeReference);
			Fragments._NamedTypeReference__Visitable.initOperations(_NamedTypeReference__Visitable);

			Fragments._Negate__GASTMObject.initOperations(_Negate__GASTMObject);
			Fragments._Negate__GASTMSyntaxObject.initOperations(_Negate__GASTMSyntaxObject);
			Fragments._Negate__Negate.initOperations(_Negate__Negate);
			Fragments._Negate__OclAny.initOperations(_Negate__OclAny);
			Fragments._Negate__OclElement.initOperations(_Negate__OclElement);
			Fragments._Negate__Operator.initOperations(_Negate__Operator);
			Fragments._Negate__OtherSyntaxObject.initOperations(_Negate__OtherSyntaxObject);
			Fragments._Negate__UnaryOperator.initOperations(_Negate__UnaryOperator);
			Fragments._Negate__Visitable.initOperations(_Negate__Visitable);

			Fragments._NewExpression__Expression.initOperations(_NewExpression__Expression);
			Fragments._NewExpression__GASTMObject.initOperations(_NewExpression__GASTMObject);
			Fragments._NewExpression__GASTMSyntaxObject.initOperations(_NewExpression__GASTMSyntaxObject);
			Fragments._NewExpression__NewExpression.initOperations(_NewExpression__NewExpression);
			Fragments._NewExpression__OclAny.initOperations(_NewExpression__OclAny);
			Fragments._NewExpression__OclElement.initOperations(_NewExpression__OclElement);
			Fragments._NewExpression__Visitable.initOperations(_NewExpression__Visitable);

			Fragments._NoDef__NoDef.initOperations(_NoDef__NoDef);
			Fragments._NoDef__OclAny.initOperations(_NoDef__OclAny);
			Fragments._NoDef__OclElement.initOperations(_NoDef__OclElement);
			Fragments._NoDef__StorageSpecification.initOperations(_NoDef__StorageSpecification);
			Fragments._NoDef__Visitable.initOperations(_NoDef__Visitable);

			Fragments._NonVirtual__GASTMObject.initOperations(_NonVirtual__GASTMObject);
			Fragments._NonVirtual__GASTMSyntaxObject.initOperations(_NonVirtual__GASTMSyntaxObject);
			Fragments._NonVirtual__NonVirtual.initOperations(_NonVirtual__NonVirtual);
			Fragments._NonVirtual__OclAny.initOperations(_NonVirtual__OclAny);
			Fragments._NonVirtual__OclElement.initOperations(_NonVirtual__OclElement);
			Fragments._NonVirtual__OtherSyntaxObject.initOperations(_NonVirtual__OtherSyntaxObject);
			Fragments._NonVirtual__VirtualSpecification.initOperations(_NonVirtual__VirtualSpecification);
			Fragments._NonVirtual__Visitable.initOperations(_NonVirtual__Visitable);

			Fragments._Not__GASTMObject.initOperations(_Not__GASTMObject);
			Fragments._Not__GASTMSyntaxObject.initOperations(_Not__GASTMSyntaxObject);
			Fragments._Not__Not.initOperations(_Not__Not);
			Fragments._Not__OclAny.initOperations(_Not__OclAny);
			Fragments._Not__OclElement.initOperations(_Not__OclElement);
			Fragments._Not__Operator.initOperations(_Not__Operator);
			Fragments._Not__OtherSyntaxObject.initOperations(_Not__OtherSyntaxObject);
			Fragments._Not__UnaryOperator.initOperations(_Not__UnaryOperator);
			Fragments._Not__Visitable.initOperations(_Not__Visitable);

			Fragments._NotEqual__BinaryOperator.initOperations(_NotEqual__BinaryOperator);
			Fragments._NotEqual__GASTMObject.initOperations(_NotEqual__GASTMObject);
			Fragments._NotEqual__GASTMSyntaxObject.initOperations(_NotEqual__GASTMSyntaxObject);
			Fragments._NotEqual__NotEqual.initOperations(_NotEqual__NotEqual);
			Fragments._NotEqual__OclAny.initOperations(_NotEqual__OclAny);
			Fragments._NotEqual__OclElement.initOperations(_NotEqual__OclElement);
			Fragments._NotEqual__Operator.initOperations(_NotEqual__Operator);
			Fragments._NotEqual__OtherSyntaxObject.initOperations(_NotEqual__OtherSyntaxObject);
			Fragments._NotEqual__Visitable.initOperations(_NotEqual__Visitable);

			Fragments._NotGreater__BinaryOperator.initOperations(_NotGreater__BinaryOperator);
			Fragments._NotGreater__GASTMObject.initOperations(_NotGreater__GASTMObject);
			Fragments._NotGreater__GASTMSyntaxObject.initOperations(_NotGreater__GASTMSyntaxObject);
			Fragments._NotGreater__NotGreater.initOperations(_NotGreater__NotGreater);
			Fragments._NotGreater__OclAny.initOperations(_NotGreater__OclAny);
			Fragments._NotGreater__OclElement.initOperations(_NotGreater__OclElement);
			Fragments._NotGreater__Operator.initOperations(_NotGreater__Operator);
			Fragments._NotGreater__OtherSyntaxObject.initOperations(_NotGreater__OtherSyntaxObject);
			Fragments._NotGreater__Visitable.initOperations(_NotGreater__Visitable);

			Fragments._NotLess__BinaryOperator.initOperations(_NotLess__BinaryOperator);
			Fragments._NotLess__GASTMObject.initOperations(_NotLess__GASTMObject);
			Fragments._NotLess__GASTMSyntaxObject.initOperations(_NotLess__GASTMSyntaxObject);
			Fragments._NotLess__NotLess.initOperations(_NotLess__NotLess);
			Fragments._NotLess__OclAny.initOperations(_NotLess__OclAny);
			Fragments._NotLess__OclElement.initOperations(_NotLess__OclElement);
			Fragments._NotLess__Operator.initOperations(_NotLess__Operator);
			Fragments._NotLess__OtherSyntaxObject.initOperations(_NotLess__OtherSyntaxObject);
			Fragments._NotLess__Visitable.initOperations(_NotLess__Visitable);

			Fragments._Operator__GASTMObject.initOperations(_Operator__GASTMObject);
			Fragments._Operator__GASTMSyntaxObject.initOperations(_Operator__GASTMSyntaxObject);
			Fragments._Operator__OclAny.initOperations(_Operator__OclAny);
			Fragments._Operator__OclElement.initOperations(_Operator__OclElement);
			Fragments._Operator__Operator.initOperations(_Operator__Operator);
			Fragments._Operator__OtherSyntaxObject.initOperations(_Operator__OtherSyntaxObject);
			Fragments._Operator__Visitable.initOperations(_Operator__Visitable);

			Fragments._OperatorAssign__BinaryOperator.initOperations(_OperatorAssign__BinaryOperator);
			Fragments._OperatorAssign__GASTMObject.initOperations(_OperatorAssign__GASTMObject);
			Fragments._OperatorAssign__GASTMSyntaxObject.initOperations(_OperatorAssign__GASTMSyntaxObject);
			Fragments._OperatorAssign__OclAny.initOperations(_OperatorAssign__OclAny);
			Fragments._OperatorAssign__OclElement.initOperations(_OperatorAssign__OclElement);
			Fragments._OperatorAssign__Operator.initOperations(_OperatorAssign__Operator);
			Fragments._OperatorAssign__OperatorAssign.initOperations(_OperatorAssign__OperatorAssign);
			Fragments._OperatorAssign__OtherSyntaxObject.initOperations(_OperatorAssign__OtherSyntaxObject);
			Fragments._OperatorAssign__Visitable.initOperations(_OperatorAssign__Visitable);

			Fragments._Or__BinaryOperator.initOperations(_Or__BinaryOperator);
			Fragments._Or__GASTMObject.initOperations(_Or__GASTMObject);
			Fragments._Or__GASTMSyntaxObject.initOperations(_Or__GASTMSyntaxObject);
			Fragments._Or__OclAny.initOperations(_Or__OclAny);
			Fragments._Or__OclElement.initOperations(_Or__OclElement);
			Fragments._Or__Operator.initOperations(_Or__Operator);
			Fragments._Or__Or.initOperations(_Or__Or);
			Fragments._Or__OtherSyntaxObject.initOperations(_Or__OtherSyntaxObject);
			Fragments._Or__Visitable.initOperations(_Or__Visitable);

			Fragments._OtherSyntaxObject__GASTMObject.initOperations(_OtherSyntaxObject__GASTMObject);
			Fragments._OtherSyntaxObject__GASTMSyntaxObject.initOperations(_OtherSyntaxObject__GASTMSyntaxObject);
			Fragments._OtherSyntaxObject__OclAny.initOperations(_OtherSyntaxObject__OclAny);
			Fragments._OtherSyntaxObject__OclElement.initOperations(_OtherSyntaxObject__OclElement);
			Fragments._OtherSyntaxObject__OtherSyntaxObject.initOperations(_OtherSyntaxObject__OtherSyntaxObject);
			Fragments._OtherSyntaxObject__Visitable.initOperations(_OtherSyntaxObject__Visitable);

			Fragments._PerClassMember__OclAny.initOperations(_PerClassMember__OclAny);
			Fragments._PerClassMember__OclElement.initOperations(_PerClassMember__OclElement);
			Fragments._PerClassMember__PerClassMember.initOperations(_PerClassMember__PerClassMember);
			Fragments._PerClassMember__StorageSpecification.initOperations(_PerClassMember__StorageSpecification);
			Fragments._PerClassMember__Visitable.initOperations(_PerClassMember__Visitable);

			Fragments._PointerType__ConstructedType.initOperations(_PointerType__ConstructedType);
			Fragments._PointerType__DataType.initOperations(_PointerType__DataType);
			Fragments._PointerType__GASTMObject.initOperations(_PointerType__GASTMObject);
			Fragments._PointerType__GASTMSyntaxObject.initOperations(_PointerType__GASTMSyntaxObject);
			Fragments._PointerType__OclAny.initOperations(_PointerType__OclAny);
			Fragments._PointerType__OclElement.initOperations(_PointerType__OclElement);
			Fragments._PointerType__PointerType.initOperations(_PointerType__PointerType);
			Fragments._PointerType__Type.initOperations(_PointerType__Type);
			Fragments._PointerType__Visitable.initOperations(_PointerType__Visitable);

			Fragments._PostDecrement__GASTMObject.initOperations(_PostDecrement__GASTMObject);
			Fragments._PostDecrement__GASTMSyntaxObject.initOperations(_PostDecrement__GASTMSyntaxObject);
			Fragments._PostDecrement__OclAny.initOperations(_PostDecrement__OclAny);
			Fragments._PostDecrement__OclElement.initOperations(_PostDecrement__OclElement);
			Fragments._PostDecrement__Operator.initOperations(_PostDecrement__Operator);
			Fragments._PostDecrement__OtherSyntaxObject.initOperations(_PostDecrement__OtherSyntaxObject);
			Fragments._PostDecrement__PostDecrement.initOperations(_PostDecrement__PostDecrement);
			Fragments._PostDecrement__UnaryOperator.initOperations(_PostDecrement__UnaryOperator);
			Fragments._PostDecrement__Visitable.initOperations(_PostDecrement__Visitable);

			Fragments._PostIncrement__GASTMObject.initOperations(_PostIncrement__GASTMObject);
			Fragments._PostIncrement__GASTMSyntaxObject.initOperations(_PostIncrement__GASTMSyntaxObject);
			Fragments._PostIncrement__OclAny.initOperations(_PostIncrement__OclAny);
			Fragments._PostIncrement__OclElement.initOperations(_PostIncrement__OclElement);
			Fragments._PostIncrement__Operator.initOperations(_PostIncrement__Operator);
			Fragments._PostIncrement__OtherSyntaxObject.initOperations(_PostIncrement__OtherSyntaxObject);
			Fragments._PostIncrement__PostIncrement.initOperations(_PostIncrement__PostIncrement);
			Fragments._PostIncrement__UnaryOperator.initOperations(_PostIncrement__UnaryOperator);
			Fragments._PostIncrement__Visitable.initOperations(_PostIncrement__Visitable);

			Fragments._PreprocessorElement__GASTMObject.initOperations(_PreprocessorElement__GASTMObject);
			Fragments._PreprocessorElement__GASTMSyntaxObject.initOperations(_PreprocessorElement__GASTMSyntaxObject);
			Fragments._PreprocessorElement__OclAny.initOperations(_PreprocessorElement__OclAny);
			Fragments._PreprocessorElement__OclElement.initOperations(_PreprocessorElement__OclElement);
			Fragments._PreprocessorElement__PreprocessorElement.initOperations(_PreprocessorElement__PreprocessorElement);
			Fragments._PreprocessorElement__Visitable.initOperations(_PreprocessorElement__Visitable);

			Fragments._PrimitiveType__DataType.initOperations(_PrimitiveType__DataType);
			Fragments._PrimitiveType__GASTMObject.initOperations(_PrimitiveType__GASTMObject);
			Fragments._PrimitiveType__GASTMSyntaxObject.initOperations(_PrimitiveType__GASTMSyntaxObject);
			Fragments._PrimitiveType__OclAny.initOperations(_PrimitiveType__OclAny);
			Fragments._PrimitiveType__OclElement.initOperations(_PrimitiveType__OclElement);
			Fragments._PrimitiveType__PrimitiveType.initOperations(_PrimitiveType__PrimitiveType);
			Fragments._PrimitiveType__Type.initOperations(_PrimitiveType__Type);
			Fragments._PrimitiveType__Visitable.initOperations(_PrimitiveType__Visitable);

			Fragments._Private__AccessKind.initOperations(_Private__AccessKind);
			Fragments._Private__OclAny.initOperations(_Private__OclAny);
			Fragments._Private__OclElement.initOperations(_Private__OclElement);
			Fragments._Private__Private.initOperations(_Private__Private);
			Fragments._Private__Visitable.initOperations(_Private__Visitable);

			Fragments._ProgramScope__GASTMSemanticObject.initOperations(_ProgramScope__GASTMSemanticObject);
			Fragments._ProgramScope__OclAny.initOperations(_ProgramScope__OclAny);
			Fragments._ProgramScope__OclElement.initOperations(_ProgramScope__OclElement);
			Fragments._ProgramScope__ProgramScope.initOperations(_ProgramScope__ProgramScope);
			Fragments._ProgramScope__Scope.initOperations(_ProgramScope__Scope);
			Fragments._ProgramScope__Visitable.initOperations(_ProgramScope__Visitable);

			Fragments._Project__GASTMSemanticObject.initOperations(_Project__GASTMSemanticObject);
			Fragments._Project__OclAny.initOperations(_Project__OclAny);
			Fragments._Project__OclElement.initOperations(_Project__OclElement);
			Fragments._Project__Project.initOperations(_Project__Project);
			Fragments._Project__Visitable.initOperations(_Project__Visitable);

			Fragments._Protected__AccessKind.initOperations(_Protected__AccessKind);
			Fragments._Protected__OclAny.initOperations(_Protected__OclAny);
			Fragments._Protected__OclElement.initOperations(_Protected__OclElement);
			Fragments._Protected__Protected.initOperations(_Protected__Protected);
			Fragments._Protected__Visitable.initOperations(_Protected__Visitable);

			Fragments._Public__AccessKind.initOperations(_Public__AccessKind);
			Fragments._Public__OclAny.initOperations(_Public__OclAny);
			Fragments._Public__OclElement.initOperations(_Public__OclElement);
			Fragments._Public__Public.initOperations(_Public__Public);
			Fragments._Public__Visitable.initOperations(_Public__Visitable);

			Fragments._PureVirtual__GASTMObject.initOperations(_PureVirtual__GASTMObject);
			Fragments._PureVirtual__GASTMSyntaxObject.initOperations(_PureVirtual__GASTMSyntaxObject);
			Fragments._PureVirtual__OclAny.initOperations(_PureVirtual__OclAny);
			Fragments._PureVirtual__OclElement.initOperations(_PureVirtual__OclElement);
			Fragments._PureVirtual__OtherSyntaxObject.initOperations(_PureVirtual__OtherSyntaxObject);
			Fragments._PureVirtual__PureVirtual.initOperations(_PureVirtual__PureVirtual);
			Fragments._PureVirtual__VirtualSpecification.initOperations(_PureVirtual__VirtualSpecification);
			Fragments._PureVirtual__Visitable.initOperations(_PureVirtual__Visitable);

			Fragments._QualifiedIdentifierReference__Expression.initOperations(_QualifiedIdentifierReference__Expression);
			Fragments._QualifiedIdentifierReference__GASTMObject.initOperations(_QualifiedIdentifierReference__GASTMObject);
			Fragments._QualifiedIdentifierReference__GASTMSyntaxObject.initOperations(_QualifiedIdentifierReference__GASTMSyntaxObject);
			Fragments._QualifiedIdentifierReference__NameReference.initOperations(_QualifiedIdentifierReference__NameReference);
			Fragments._QualifiedIdentifierReference__OclAny.initOperations(_QualifiedIdentifierReference__OclAny);
			Fragments._QualifiedIdentifierReference__OclElement.initOperations(_QualifiedIdentifierReference__OclElement);
			Fragments._QualifiedIdentifierReference__QualifiedIdentifierReference.initOperations(_QualifiedIdentifierReference__QualifiedIdentifierReference);
			Fragments._QualifiedIdentifierReference__Visitable.initOperations(_QualifiedIdentifierReference__Visitable);

			Fragments._QualifiedOverData__Expression.initOperations(_QualifiedOverData__Expression);
			Fragments._QualifiedOverData__GASTMObject.initOperations(_QualifiedOverData__GASTMObject);
			Fragments._QualifiedOverData__GASTMSyntaxObject.initOperations(_QualifiedOverData__GASTMSyntaxObject);
			Fragments._QualifiedOverData__NameReference.initOperations(_QualifiedOverData__NameReference);
			Fragments._QualifiedOverData__OclAny.initOperations(_QualifiedOverData__OclAny);
			Fragments._QualifiedOverData__OclElement.initOperations(_QualifiedOverData__OclElement);
			Fragments._QualifiedOverData__QualifiedIdentifierReference.initOperations(_QualifiedOverData__QualifiedIdentifierReference);
			Fragments._QualifiedOverData__QualifiedOverData.initOperations(_QualifiedOverData__QualifiedOverData);
			Fragments._QualifiedOverData__Visitable.initOperations(_QualifiedOverData__Visitable);

			Fragments._QualifiedOverPointer__Expression.initOperations(_QualifiedOverPointer__Expression);
			Fragments._QualifiedOverPointer__GASTMObject.initOperations(_QualifiedOverPointer__GASTMObject);
			Fragments._QualifiedOverPointer__GASTMSyntaxObject.initOperations(_QualifiedOverPointer__GASTMSyntaxObject);
			Fragments._QualifiedOverPointer__NameReference.initOperations(_QualifiedOverPointer__NameReference);
			Fragments._QualifiedOverPointer__OclAny.initOperations(_QualifiedOverPointer__OclAny);
			Fragments._QualifiedOverPointer__OclElement.initOperations(_QualifiedOverPointer__OclElement);
			Fragments._QualifiedOverPointer__QualifiedIdentifierReference.initOperations(_QualifiedOverPointer__QualifiedIdentifierReference);
			Fragments._QualifiedOverPointer__QualifiedOverPointer.initOperations(_QualifiedOverPointer__QualifiedOverPointer);
			Fragments._QualifiedOverPointer__Visitable.initOperations(_QualifiedOverPointer__Visitable);

			Fragments._RangeExpression__Expression.initOperations(_RangeExpression__Expression);
			Fragments._RangeExpression__GASTMObject.initOperations(_RangeExpression__GASTMObject);
			Fragments._RangeExpression__GASTMSyntaxObject.initOperations(_RangeExpression__GASTMSyntaxObject);
			Fragments._RangeExpression__OclAny.initOperations(_RangeExpression__OclAny);
			Fragments._RangeExpression__OclElement.initOperations(_RangeExpression__OclElement);
			Fragments._RangeExpression__RangeExpression.initOperations(_RangeExpression__RangeExpression);
			Fragments._RangeExpression__Visitable.initOperations(_RangeExpression__Visitable);

			Fragments._RangeType__ConstructedType.initOperations(_RangeType__ConstructedType);
			Fragments._RangeType__DataType.initOperations(_RangeType__DataType);
			Fragments._RangeType__GASTMObject.initOperations(_RangeType__GASTMObject);
			Fragments._RangeType__GASTMSyntaxObject.initOperations(_RangeType__GASTMSyntaxObject);
			Fragments._RangeType__OclAny.initOperations(_RangeType__OclAny);
			Fragments._RangeType__OclElement.initOperations(_RangeType__OclElement);
			Fragments._RangeType__RangeType.initOperations(_RangeType__RangeType);
			Fragments._RangeType__Type.initOperations(_RangeType__Type);
			Fragments._RangeType__Visitable.initOperations(_RangeType__Visitable);

			Fragments._RealLiteral__Expression.initOperations(_RealLiteral__Expression);
			Fragments._RealLiteral__GASTMObject.initOperations(_RealLiteral__GASTMObject);
			Fragments._RealLiteral__GASTMSyntaxObject.initOperations(_RealLiteral__GASTMSyntaxObject);
			Fragments._RealLiteral__Literal.initOperations(_RealLiteral__Literal);
			Fragments._RealLiteral__OclAny.initOperations(_RealLiteral__OclAny);
			Fragments._RealLiteral__OclElement.initOperations(_RealLiteral__OclElement);
			Fragments._RealLiteral__RealLiteral.initOperations(_RealLiteral__RealLiteral);
			Fragments._RealLiteral__Visitable.initOperations(_RealLiteral__Visitable);

			Fragments._ReferenceType__ConstructedType.initOperations(_ReferenceType__ConstructedType);
			Fragments._ReferenceType__DataType.initOperations(_ReferenceType__DataType);
			Fragments._ReferenceType__GASTMObject.initOperations(_ReferenceType__GASTMObject);
			Fragments._ReferenceType__GASTMSyntaxObject.initOperations(_ReferenceType__GASTMSyntaxObject);
			Fragments._ReferenceType__OclAny.initOperations(_ReferenceType__OclAny);
			Fragments._ReferenceType__OclElement.initOperations(_ReferenceType__OclElement);
			Fragments._ReferenceType__ReferenceType.initOperations(_ReferenceType__ReferenceType);
			Fragments._ReferenceType__Type.initOperations(_ReferenceType__Type);
			Fragments._ReferenceType__Visitable.initOperations(_ReferenceType__Visitable);

			Fragments._ReturnStatement__GASTMObject.initOperations(_ReturnStatement__GASTMObject);
			Fragments._ReturnStatement__GASTMSyntaxObject.initOperations(_ReturnStatement__GASTMSyntaxObject);
			Fragments._ReturnStatement__OclAny.initOperations(_ReturnStatement__OclAny);
			Fragments._ReturnStatement__OclElement.initOperations(_ReturnStatement__OclElement);
			Fragments._ReturnStatement__ReturnStatement.initOperations(_ReturnStatement__ReturnStatement);
			Fragments._ReturnStatement__Statement.initOperations(_ReturnStatement__Statement);
			Fragments._ReturnStatement__Visitable.initOperations(_ReturnStatement__Visitable);

			Fragments._Scope__GASTMSemanticObject.initOperations(_Scope__GASTMSemanticObject);
			Fragments._Scope__OclAny.initOperations(_Scope__OclAny);
			Fragments._Scope__OclElement.initOperations(_Scope__OclElement);
			Fragments._Scope__Scope.initOperations(_Scope__Scope);
			Fragments._Scope__Visitable.initOperations(_Scope__Visitable);

			Fragments._ShortInteger__DataType.initOperations(_ShortInteger__DataType);
			Fragments._ShortInteger__GASTMObject.initOperations(_ShortInteger__GASTMObject);
			Fragments._ShortInteger__GASTMSyntaxObject.initOperations(_ShortInteger__GASTMSyntaxObject);
			Fragments._ShortInteger__OclAny.initOperations(_ShortInteger__OclAny);
			Fragments._ShortInteger__OclElement.initOperations(_ShortInteger__OclElement);
			Fragments._ShortInteger__PrimitiveType.initOperations(_ShortInteger__PrimitiveType);
			Fragments._ShortInteger__ShortInteger.initOperations(_ShortInteger__ShortInteger);
			Fragments._ShortInteger__Type.initOperations(_ShortInteger__Type);
			Fragments._ShortInteger__Visitable.initOperations(_ShortInteger__Visitable);

			Fragments._SourceFile__GASTMSourceObject.initOperations(_SourceFile__GASTMSourceObject);
			Fragments._SourceFile__OclAny.initOperations(_SourceFile__OclAny);
			Fragments._SourceFile__OclElement.initOperations(_SourceFile__OclElement);
			Fragments._SourceFile__SourceFile.initOperations(_SourceFile__SourceFile);
			Fragments._SourceFile__Visitable.initOperations(_SourceFile__Visitable);

			Fragments._SourceLocation__GASTMSourceObject.initOperations(_SourceLocation__GASTMSourceObject);
			Fragments._SourceLocation__OclAny.initOperations(_SourceLocation__OclAny);
			Fragments._SourceLocation__OclElement.initOperations(_SourceLocation__OclElement);
			Fragments._SourceLocation__SourceLocation.initOperations(_SourceLocation__SourceLocation);
			Fragments._SourceLocation__Visitable.initOperations(_SourceLocation__Visitable);

			Fragments._SpecificConcatString__BinaryOperator.initOperations(_SpecificConcatString__BinaryOperator);
			Fragments._SpecificConcatString__GASTMObject.initOperations(_SpecificConcatString__GASTMObject);
			Fragments._SpecificConcatString__GASTMSyntaxObject.initOperations(_SpecificConcatString__GASTMSyntaxObject);
			Fragments._SpecificConcatString__OclAny.initOperations(_SpecificConcatString__OclAny);
			Fragments._SpecificConcatString__OclElement.initOperations(_SpecificConcatString__OclElement);
			Fragments._SpecificConcatString__Operator.initOperations(_SpecificConcatString__Operator);
			Fragments._SpecificConcatString__OtherSyntaxObject.initOperations(_SpecificConcatString__OtherSyntaxObject);
			Fragments._SpecificConcatString__SpecificConcatString.initOperations(_SpecificConcatString__SpecificConcatString);
			Fragments._SpecificConcatString__Visitable.initOperations(_SpecificConcatString__Visitable);

			Fragments._SpecificGreaterEqual__BinaryOperator.initOperations(_SpecificGreaterEqual__BinaryOperator);
			Fragments._SpecificGreaterEqual__GASTMObject.initOperations(_SpecificGreaterEqual__GASTMObject);
			Fragments._SpecificGreaterEqual__GASTMSyntaxObject.initOperations(_SpecificGreaterEqual__GASTMSyntaxObject);
			Fragments._SpecificGreaterEqual__OclAny.initOperations(_SpecificGreaterEqual__OclAny);
			Fragments._SpecificGreaterEqual__OclElement.initOperations(_SpecificGreaterEqual__OclElement);
			Fragments._SpecificGreaterEqual__Operator.initOperations(_SpecificGreaterEqual__Operator);
			Fragments._SpecificGreaterEqual__OtherSyntaxObject.initOperations(_SpecificGreaterEqual__OtherSyntaxObject);
			Fragments._SpecificGreaterEqual__SpecificGreaterEqual.initOperations(_SpecificGreaterEqual__SpecificGreaterEqual);
			Fragments._SpecificGreaterEqual__Visitable.initOperations(_SpecificGreaterEqual__Visitable);

			Fragments._SpecificIn__BinaryOperator.initOperations(_SpecificIn__BinaryOperator);
			Fragments._SpecificIn__GASTMObject.initOperations(_SpecificIn__GASTMObject);
			Fragments._SpecificIn__GASTMSyntaxObject.initOperations(_SpecificIn__GASTMSyntaxObject);
			Fragments._SpecificIn__OclAny.initOperations(_SpecificIn__OclAny);
			Fragments._SpecificIn__OclElement.initOperations(_SpecificIn__OclElement);
			Fragments._SpecificIn__Operator.initOperations(_SpecificIn__Operator);
			Fragments._SpecificIn__OtherSyntaxObject.initOperations(_SpecificIn__OtherSyntaxObject);
			Fragments._SpecificIn__SpecificIn.initOperations(_SpecificIn__SpecificIn);
			Fragments._SpecificIn__Visitable.initOperations(_SpecificIn__Visitable);

			Fragments._SpecificLessEqual__BinaryOperator.initOperations(_SpecificLessEqual__BinaryOperator);
			Fragments._SpecificLessEqual__GASTMObject.initOperations(_SpecificLessEqual__GASTMObject);
			Fragments._SpecificLessEqual__GASTMSyntaxObject.initOperations(_SpecificLessEqual__GASTMSyntaxObject);
			Fragments._SpecificLessEqual__OclAny.initOperations(_SpecificLessEqual__OclAny);
			Fragments._SpecificLessEqual__OclElement.initOperations(_SpecificLessEqual__OclElement);
			Fragments._SpecificLessEqual__Operator.initOperations(_SpecificLessEqual__Operator);
			Fragments._SpecificLessEqual__OtherSyntaxObject.initOperations(_SpecificLessEqual__OtherSyntaxObject);
			Fragments._SpecificLessEqual__SpecificLessEqual.initOperations(_SpecificLessEqual__SpecificLessEqual);
			Fragments._SpecificLessEqual__Visitable.initOperations(_SpecificLessEqual__Visitable);

			Fragments._SpecificLike__BinaryOperator.initOperations(_SpecificLike__BinaryOperator);
			Fragments._SpecificLike__GASTMObject.initOperations(_SpecificLike__GASTMObject);
			Fragments._SpecificLike__GASTMSyntaxObject.initOperations(_SpecificLike__GASTMSyntaxObject);
			Fragments._SpecificLike__OclAny.initOperations(_SpecificLike__OclAny);
			Fragments._SpecificLike__OclElement.initOperations(_SpecificLike__OclElement);
			Fragments._SpecificLike__Operator.initOperations(_SpecificLike__Operator);
			Fragments._SpecificLike__OtherSyntaxObject.initOperations(_SpecificLike__OtherSyntaxObject);
			Fragments._SpecificLike__SpecificLike.initOperations(_SpecificLike__SpecificLike);
			Fragments._SpecificLike__Visitable.initOperations(_SpecificLike__Visitable);

			Fragments._SpecificSelectStatement__GASTMObject.initOperations(_SpecificSelectStatement__GASTMObject);
			Fragments._SpecificSelectStatement__GASTMSyntaxObject.initOperations(_SpecificSelectStatement__GASTMSyntaxObject);
			Fragments._SpecificSelectStatement__OclAny.initOperations(_SpecificSelectStatement__OclAny);
			Fragments._SpecificSelectStatement__OclElement.initOperations(_SpecificSelectStatement__OclElement);
			Fragments._SpecificSelectStatement__SpecificSelectStatement.initOperations(_SpecificSelectStatement__SpecificSelectStatement);
			Fragments._SpecificSelectStatement__Statement.initOperations(_SpecificSelectStatement__Statement);
			Fragments._SpecificSelectStatement__Visitable.initOperations(_SpecificSelectStatement__Visitable);

			Fragments._SpecificTriggerDefinition__DeclarationOrDefinition.initOperations(_SpecificTriggerDefinition__DeclarationOrDefinition);
			Fragments._SpecificTriggerDefinition__Definition.initOperations(_SpecificTriggerDefinition__Definition);
			Fragments._SpecificTriggerDefinition__DefinitionObject.initOperations(_SpecificTriggerDefinition__DefinitionObject);
			Fragments._SpecificTriggerDefinition__GASTMObject.initOperations(_SpecificTriggerDefinition__GASTMObject);
			Fragments._SpecificTriggerDefinition__GASTMSyntaxObject.initOperations(_SpecificTriggerDefinition__GASTMSyntaxObject);
			Fragments._SpecificTriggerDefinition__OclAny.initOperations(_SpecificTriggerDefinition__OclAny);
			Fragments._SpecificTriggerDefinition__OclElement.initOperations(_SpecificTriggerDefinition__OclElement);
			Fragments._SpecificTriggerDefinition__SpecificTriggerDefinition.initOperations(_SpecificTriggerDefinition__SpecificTriggerDefinition);
			Fragments._SpecificTriggerDefinition__Visitable.initOperations(_SpecificTriggerDefinition__Visitable);

			Fragments._Statement__GASTMObject.initOperations(_Statement__GASTMObject);
			Fragments._Statement__GASTMSyntaxObject.initOperations(_Statement__GASTMSyntaxObject);
			Fragments._Statement__OclAny.initOperations(_Statement__OclAny);
			Fragments._Statement__OclElement.initOperations(_Statement__OclElement);
			Fragments._Statement__Statement.initOperations(_Statement__Statement);
			Fragments._Statement__Visitable.initOperations(_Statement__Visitable);

			Fragments._StorageSpecification__OclAny.initOperations(_StorageSpecification__OclAny);
			Fragments._StorageSpecification__OclElement.initOperations(_StorageSpecification__OclElement);
			Fragments._StorageSpecification__StorageSpecification.initOperations(_StorageSpecification__StorageSpecification);
			Fragments._StorageSpecification__Visitable.initOperations(_StorageSpecification__Visitable);

			Fragments._String__DataType.initOperations(_String__DataType);
			Fragments._String__GASTMObject.initOperations(_String__GASTMObject);
			Fragments._String__GASTMSyntaxObject.initOperations(_String__GASTMSyntaxObject);
			Fragments._String__OclAny.initOperations(_String__OclAny);
			Fragments._String__OclElement.initOperations(_String__OclElement);
			Fragments._String__PrimitiveType.initOperations(_String__PrimitiveType);
			Fragments._String__String.initOperations(_String__String);
			Fragments._String__Type.initOperations(_String__Type);
			Fragments._String__Visitable.initOperations(_String__Visitable);

			Fragments._StringLiteral__Expression.initOperations(_StringLiteral__Expression);
			Fragments._StringLiteral__GASTMObject.initOperations(_StringLiteral__GASTMObject);
			Fragments._StringLiteral__GASTMSyntaxObject.initOperations(_StringLiteral__GASTMSyntaxObject);
			Fragments._StringLiteral__Literal.initOperations(_StringLiteral__Literal);
			Fragments._StringLiteral__OclAny.initOperations(_StringLiteral__OclAny);
			Fragments._StringLiteral__OclElement.initOperations(_StringLiteral__OclElement);
			Fragments._StringLiteral__StringLiteral.initOperations(_StringLiteral__StringLiteral);
			Fragments._StringLiteral__Visitable.initOperations(_StringLiteral__Visitable);

			Fragments._StructureType__AggregateType.initOperations(_StructureType__AggregateType);
			Fragments._StructureType__DataType.initOperations(_StructureType__DataType);
			Fragments._StructureType__GASTMObject.initOperations(_StructureType__GASTMObject);
			Fragments._StructureType__GASTMSyntaxObject.initOperations(_StructureType__GASTMSyntaxObject);
			Fragments._StructureType__OclAny.initOperations(_StructureType__OclAny);
			Fragments._StructureType__OclElement.initOperations(_StructureType__OclElement);
			Fragments._StructureType__StructureType.initOperations(_StructureType__StructureType);
			Fragments._StructureType__Type.initOperations(_StructureType__Type);
			Fragments._StructureType__Visitable.initOperations(_StructureType__Visitable);

			Fragments._Subtract__BinaryOperator.initOperations(_Subtract__BinaryOperator);
			Fragments._Subtract__GASTMObject.initOperations(_Subtract__GASTMObject);
			Fragments._Subtract__GASTMSyntaxObject.initOperations(_Subtract__GASTMSyntaxObject);
			Fragments._Subtract__OclAny.initOperations(_Subtract__OclAny);
			Fragments._Subtract__OclElement.initOperations(_Subtract__OclElement);
			Fragments._Subtract__Operator.initOperations(_Subtract__Operator);
			Fragments._Subtract__OtherSyntaxObject.initOperations(_Subtract__OtherSyntaxObject);
			Fragments._Subtract__Subtract.initOperations(_Subtract__Subtract);
			Fragments._Subtract__Visitable.initOperations(_Subtract__Visitable);

			Fragments._SwitchCase__GASTMObject.initOperations(_SwitchCase__GASTMObject);
			Fragments._SwitchCase__GASTMSyntaxObject.initOperations(_SwitchCase__GASTMSyntaxObject);
			Fragments._SwitchCase__OclAny.initOperations(_SwitchCase__OclAny);
			Fragments._SwitchCase__OclElement.initOperations(_SwitchCase__OclElement);
			Fragments._SwitchCase__OtherSyntaxObject.initOperations(_SwitchCase__OtherSyntaxObject);
			Fragments._SwitchCase__SwitchCase.initOperations(_SwitchCase__SwitchCase);
			Fragments._SwitchCase__Visitable.initOperations(_SwitchCase__Visitable);

			Fragments._SwitchStatement__GASTMObject.initOperations(_SwitchStatement__GASTMObject);
			Fragments._SwitchStatement__GASTMSyntaxObject.initOperations(_SwitchStatement__GASTMSyntaxObject);
			Fragments._SwitchStatement__OclAny.initOperations(_SwitchStatement__OclAny);
			Fragments._SwitchStatement__OclElement.initOperations(_SwitchStatement__OclElement);
			Fragments._SwitchStatement__Statement.initOperations(_SwitchStatement__Statement);
			Fragments._SwitchStatement__SwitchStatement.initOperations(_SwitchStatement__SwitchStatement);
			Fragments._SwitchStatement__Visitable.initOperations(_SwitchStatement__Visitable);

			Fragments._TerminateStatement__GASTMObject.initOperations(_TerminateStatement__GASTMObject);
			Fragments._TerminateStatement__GASTMSyntaxObject.initOperations(_TerminateStatement__GASTMSyntaxObject);
			Fragments._TerminateStatement__OclAny.initOperations(_TerminateStatement__OclAny);
			Fragments._TerminateStatement__OclElement.initOperations(_TerminateStatement__OclElement);
			Fragments._TerminateStatement__Statement.initOperations(_TerminateStatement__Statement);
			Fragments._TerminateStatement__TerminateStatement.initOperations(_TerminateStatement__TerminateStatement);
			Fragments._TerminateStatement__Visitable.initOperations(_TerminateStatement__Visitable);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::FragmentOperations1 and all preceding sub-packages.
		 */
		public static void init() {}
	}

	public static class FragmentOperations {
		static {
			Init.initStart();
			FragmentOperations1.init();
		}

		private static final @NonNull ExecutorOperation @NonNull [] _ThrowStatement__ThrowStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ThrowStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ThrowStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ThrowStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ThrowStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _ThrowStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _ThrowStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _TryStatement__TryStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TryStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TryStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TryStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TryStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TryStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TryStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Type__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Type__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Type__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Type__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Type__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Type__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _TypeDefinition__TypeDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__TypeQualifiedIdentifierReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__NameReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeQualifiedIdentifierReference__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _TypeReference__TypeReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeReference__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeReference__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeReference__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypeReference__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__TypesCatchBlock = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__CatchBlock = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _TypesCatchBlock__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _UnaryExpression__UnaryExpression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryExpression__Expression = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryExpression__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryExpression__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryExpression__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryOperator__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__UnaryPlus = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__Operator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__UnaryOperator = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnaryPlus__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__UnionType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__AggregateType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnionType__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__UnnamedTypeReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__TypeReference = {};
		private static final @NonNull ExecutorOperation @NonNull [] _UnnamedTypeReference__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__VariableCatchBlock = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__CatchBlock = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableCatchBlock__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__VariableDeclaration = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__Declaration = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDeclaration__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__VariableDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__DataDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__DeclarationOrDefinition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__Definition = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__DefinitionObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VariableDefinition__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__Virtual = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__VirtualSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Virtual__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _VirtualSpecification__VirtualSpecification = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VirtualSpecification__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VirtualSpecification__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VirtualSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VirtualSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _VirtualSpecification__OtherSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _VirtualSpecification__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _Visitable__Visitable = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Visitable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Visitable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull ExecutorOperation @NonNull [] _Void__Void = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _Void__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__WhileStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__LoopStatement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__Statement = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WhileStatement__Visitable = {};

		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__WideCharacter = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__DataType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__GASTMObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__GASTMSyntaxObject = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__PrimitiveType = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__Type = {};
		private static final @NonNull ExecutorOperation @NonNull [] _WideCharacter__Visitable = {};

		/*
		 *	Install the operation descriptors in the fragment descriptors.
		 */
		static {
			Fragments._ThrowStatement__GASTMObject.initOperations(_ThrowStatement__GASTMObject);
			Fragments._ThrowStatement__GASTMSyntaxObject.initOperations(_ThrowStatement__GASTMSyntaxObject);
			Fragments._ThrowStatement__OclAny.initOperations(_ThrowStatement__OclAny);
			Fragments._ThrowStatement__OclElement.initOperations(_ThrowStatement__OclElement);
			Fragments._ThrowStatement__Statement.initOperations(_ThrowStatement__Statement);
			Fragments._ThrowStatement__ThrowStatement.initOperations(_ThrowStatement__ThrowStatement);
			Fragments._ThrowStatement__Visitable.initOperations(_ThrowStatement__Visitable);

			Fragments._TryStatement__GASTMObject.initOperations(_TryStatement__GASTMObject);
			Fragments._TryStatement__GASTMSyntaxObject.initOperations(_TryStatement__GASTMSyntaxObject);
			Fragments._TryStatement__OclAny.initOperations(_TryStatement__OclAny);
			Fragments._TryStatement__OclElement.initOperations(_TryStatement__OclElement);
			Fragments._TryStatement__Statement.initOperations(_TryStatement__Statement);
			Fragments._TryStatement__TryStatement.initOperations(_TryStatement__TryStatement);
			Fragments._TryStatement__Visitable.initOperations(_TryStatement__Visitable);

			Fragments._Type__GASTMObject.initOperations(_Type__GASTMObject);
			Fragments._Type__GASTMSyntaxObject.initOperations(_Type__GASTMSyntaxObject);
			Fragments._Type__OclAny.initOperations(_Type__OclAny);
			Fragments._Type__OclElement.initOperations(_Type__OclElement);
			Fragments._Type__Type.initOperations(_Type__Type);
			Fragments._Type__Visitable.initOperations(_Type__Visitable);

			Fragments._TypeDefinition__DefinitionObject.initOperations(_TypeDefinition__DefinitionObject);
			Fragments._TypeDefinition__GASTMObject.initOperations(_TypeDefinition__GASTMObject);
			Fragments._TypeDefinition__GASTMSyntaxObject.initOperations(_TypeDefinition__GASTMSyntaxObject);
			Fragments._TypeDefinition__OclAny.initOperations(_TypeDefinition__OclAny);
			Fragments._TypeDefinition__OclElement.initOperations(_TypeDefinition__OclElement);
			Fragments._TypeDefinition__TypeDefinition.initOperations(_TypeDefinition__TypeDefinition);
			Fragments._TypeDefinition__Visitable.initOperations(_TypeDefinition__Visitable);

			Fragments._TypeQualifiedIdentifierReference__Expression.initOperations(_TypeQualifiedIdentifierReference__Expression);
			Fragments._TypeQualifiedIdentifierReference__GASTMObject.initOperations(_TypeQualifiedIdentifierReference__GASTMObject);
			Fragments._TypeQualifiedIdentifierReference__GASTMSyntaxObject.initOperations(_TypeQualifiedIdentifierReference__GASTMSyntaxObject);
			Fragments._TypeQualifiedIdentifierReference__NameReference.initOperations(_TypeQualifiedIdentifierReference__NameReference);
			Fragments._TypeQualifiedIdentifierReference__OclAny.initOperations(_TypeQualifiedIdentifierReference__OclAny);
			Fragments._TypeQualifiedIdentifierReference__OclElement.initOperations(_TypeQualifiedIdentifierReference__OclElement);
			Fragments._TypeQualifiedIdentifierReference__TypeQualifiedIdentifierReference.initOperations(_TypeQualifiedIdentifierReference__TypeQualifiedIdentifierReference);
			Fragments._TypeQualifiedIdentifierReference__Visitable.initOperations(_TypeQualifiedIdentifierReference__Visitable);

			Fragments._TypeReference__GASTMObject.initOperations(_TypeReference__GASTMObject);
			Fragments._TypeReference__GASTMSyntaxObject.initOperations(_TypeReference__GASTMSyntaxObject);
			Fragments._TypeReference__OclAny.initOperations(_TypeReference__OclAny);
			Fragments._TypeReference__OclElement.initOperations(_TypeReference__OclElement);
			Fragments._TypeReference__Type.initOperations(_TypeReference__Type);
			Fragments._TypeReference__TypeReference.initOperations(_TypeReference__TypeReference);
			Fragments._TypeReference__Visitable.initOperations(_TypeReference__Visitable);

			Fragments._TypesCatchBlock__CatchBlock.initOperations(_TypesCatchBlock__CatchBlock);
			Fragments._TypesCatchBlock__GASTMObject.initOperations(_TypesCatchBlock__GASTMObject);
			Fragments._TypesCatchBlock__GASTMSyntaxObject.initOperations(_TypesCatchBlock__GASTMSyntaxObject);
			Fragments._TypesCatchBlock__OclAny.initOperations(_TypesCatchBlock__OclAny);
			Fragments._TypesCatchBlock__OclElement.initOperations(_TypesCatchBlock__OclElement);
			Fragments._TypesCatchBlock__OtherSyntaxObject.initOperations(_TypesCatchBlock__OtherSyntaxObject);
			Fragments._TypesCatchBlock__TypesCatchBlock.initOperations(_TypesCatchBlock__TypesCatchBlock);
			Fragments._TypesCatchBlock__Visitable.initOperations(_TypesCatchBlock__Visitable);

			Fragments._UnaryExpression__Expression.initOperations(_UnaryExpression__Expression);
			Fragments._UnaryExpression__GASTMObject.initOperations(_UnaryExpression__GASTMObject);
			Fragments._UnaryExpression__GASTMSyntaxObject.initOperations(_UnaryExpression__GASTMSyntaxObject);
			Fragments._UnaryExpression__OclAny.initOperations(_UnaryExpression__OclAny);
			Fragments._UnaryExpression__OclElement.initOperations(_UnaryExpression__OclElement);
			Fragments._UnaryExpression__UnaryExpression.initOperations(_UnaryExpression__UnaryExpression);
			Fragments._UnaryExpression__Visitable.initOperations(_UnaryExpression__Visitable);

			Fragments._UnaryOperator__GASTMObject.initOperations(_UnaryOperator__GASTMObject);
			Fragments._UnaryOperator__GASTMSyntaxObject.initOperations(_UnaryOperator__GASTMSyntaxObject);
			Fragments._UnaryOperator__OclAny.initOperations(_UnaryOperator__OclAny);
			Fragments._UnaryOperator__OclElement.initOperations(_UnaryOperator__OclElement);
			Fragments._UnaryOperator__Operator.initOperations(_UnaryOperator__Operator);
			Fragments._UnaryOperator__OtherSyntaxObject.initOperations(_UnaryOperator__OtherSyntaxObject);
			Fragments._UnaryOperator__UnaryOperator.initOperations(_UnaryOperator__UnaryOperator);
			Fragments._UnaryOperator__Visitable.initOperations(_UnaryOperator__Visitable);

			Fragments._UnaryPlus__GASTMObject.initOperations(_UnaryPlus__GASTMObject);
			Fragments._UnaryPlus__GASTMSyntaxObject.initOperations(_UnaryPlus__GASTMSyntaxObject);
			Fragments._UnaryPlus__OclAny.initOperations(_UnaryPlus__OclAny);
			Fragments._UnaryPlus__OclElement.initOperations(_UnaryPlus__OclElement);
			Fragments._UnaryPlus__Operator.initOperations(_UnaryPlus__Operator);
			Fragments._UnaryPlus__OtherSyntaxObject.initOperations(_UnaryPlus__OtherSyntaxObject);
			Fragments._UnaryPlus__UnaryOperator.initOperations(_UnaryPlus__UnaryOperator);
			Fragments._UnaryPlus__UnaryPlus.initOperations(_UnaryPlus__UnaryPlus);
			Fragments._UnaryPlus__Visitable.initOperations(_UnaryPlus__Visitable);

			Fragments._UnionType__AggregateType.initOperations(_UnionType__AggregateType);
			Fragments._UnionType__DataType.initOperations(_UnionType__DataType);
			Fragments._UnionType__GASTMObject.initOperations(_UnionType__GASTMObject);
			Fragments._UnionType__GASTMSyntaxObject.initOperations(_UnionType__GASTMSyntaxObject);
			Fragments._UnionType__OclAny.initOperations(_UnionType__OclAny);
			Fragments._UnionType__OclElement.initOperations(_UnionType__OclElement);
			Fragments._UnionType__Type.initOperations(_UnionType__Type);
			Fragments._UnionType__UnionType.initOperations(_UnionType__UnionType);
			Fragments._UnionType__Visitable.initOperations(_UnionType__Visitable);

			Fragments._UnnamedTypeReference__GASTMObject.initOperations(_UnnamedTypeReference__GASTMObject);
			Fragments._UnnamedTypeReference__GASTMSyntaxObject.initOperations(_UnnamedTypeReference__GASTMSyntaxObject);
			Fragments._UnnamedTypeReference__OclAny.initOperations(_UnnamedTypeReference__OclAny);
			Fragments._UnnamedTypeReference__OclElement.initOperations(_UnnamedTypeReference__OclElement);
			Fragments._UnnamedTypeReference__Type.initOperations(_UnnamedTypeReference__Type);
			Fragments._UnnamedTypeReference__TypeReference.initOperations(_UnnamedTypeReference__TypeReference);
			Fragments._UnnamedTypeReference__UnnamedTypeReference.initOperations(_UnnamedTypeReference__UnnamedTypeReference);
			Fragments._UnnamedTypeReference__Visitable.initOperations(_UnnamedTypeReference__Visitable);

			Fragments._VariableCatchBlock__CatchBlock.initOperations(_VariableCatchBlock__CatchBlock);
			Fragments._VariableCatchBlock__GASTMObject.initOperations(_VariableCatchBlock__GASTMObject);
			Fragments._VariableCatchBlock__GASTMSyntaxObject.initOperations(_VariableCatchBlock__GASTMSyntaxObject);
			Fragments._VariableCatchBlock__OclAny.initOperations(_VariableCatchBlock__OclAny);
			Fragments._VariableCatchBlock__OclElement.initOperations(_VariableCatchBlock__OclElement);
			Fragments._VariableCatchBlock__OtherSyntaxObject.initOperations(_VariableCatchBlock__OtherSyntaxObject);
			Fragments._VariableCatchBlock__VariableCatchBlock.initOperations(_VariableCatchBlock__VariableCatchBlock);
			Fragments._VariableCatchBlock__Visitable.initOperations(_VariableCatchBlock__Visitable);

			Fragments._VariableDeclaration__Declaration.initOperations(_VariableDeclaration__Declaration);
			Fragments._VariableDeclaration__DeclarationOrDefinition.initOperations(_VariableDeclaration__DeclarationOrDefinition);
			Fragments._VariableDeclaration__DefinitionObject.initOperations(_VariableDeclaration__DefinitionObject);
			Fragments._VariableDeclaration__GASTMObject.initOperations(_VariableDeclaration__GASTMObject);
			Fragments._VariableDeclaration__GASTMSyntaxObject.initOperations(_VariableDeclaration__GASTMSyntaxObject);
			Fragments._VariableDeclaration__OclAny.initOperations(_VariableDeclaration__OclAny);
			Fragments._VariableDeclaration__OclElement.initOperations(_VariableDeclaration__OclElement);
			Fragments._VariableDeclaration__VariableDeclaration.initOperations(_VariableDeclaration__VariableDeclaration);
			Fragments._VariableDeclaration__Visitable.initOperations(_VariableDeclaration__Visitable);

			Fragments._VariableDefinition__DataDefinition.initOperations(_VariableDefinition__DataDefinition);
			Fragments._VariableDefinition__DeclarationOrDefinition.initOperations(_VariableDefinition__DeclarationOrDefinition);
			Fragments._VariableDefinition__Definition.initOperations(_VariableDefinition__Definition);
			Fragments._VariableDefinition__DefinitionObject.initOperations(_VariableDefinition__DefinitionObject);
			Fragments._VariableDefinition__GASTMObject.initOperations(_VariableDefinition__GASTMObject);
			Fragments._VariableDefinition__GASTMSyntaxObject.initOperations(_VariableDefinition__GASTMSyntaxObject);
			Fragments._VariableDefinition__OclAny.initOperations(_VariableDefinition__OclAny);
			Fragments._VariableDefinition__OclElement.initOperations(_VariableDefinition__OclElement);
			Fragments._VariableDefinition__VariableDefinition.initOperations(_VariableDefinition__VariableDefinition);
			Fragments._VariableDefinition__Visitable.initOperations(_VariableDefinition__Visitable);

			Fragments._Virtual__GASTMObject.initOperations(_Virtual__GASTMObject);
			Fragments._Virtual__GASTMSyntaxObject.initOperations(_Virtual__GASTMSyntaxObject);
			Fragments._Virtual__OclAny.initOperations(_Virtual__OclAny);
			Fragments._Virtual__OclElement.initOperations(_Virtual__OclElement);
			Fragments._Virtual__OtherSyntaxObject.initOperations(_Virtual__OtherSyntaxObject);
			Fragments._Virtual__Virtual.initOperations(_Virtual__Virtual);
			Fragments._Virtual__VirtualSpecification.initOperations(_Virtual__VirtualSpecification);
			Fragments._Virtual__Visitable.initOperations(_Virtual__Visitable);

			Fragments._VirtualSpecification__GASTMObject.initOperations(_VirtualSpecification__GASTMObject);
			Fragments._VirtualSpecification__GASTMSyntaxObject.initOperations(_VirtualSpecification__GASTMSyntaxObject);
			Fragments._VirtualSpecification__OclAny.initOperations(_VirtualSpecification__OclAny);
			Fragments._VirtualSpecification__OclElement.initOperations(_VirtualSpecification__OclElement);
			Fragments._VirtualSpecification__OtherSyntaxObject.initOperations(_VirtualSpecification__OtherSyntaxObject);
			Fragments._VirtualSpecification__VirtualSpecification.initOperations(_VirtualSpecification__VirtualSpecification);
			Fragments._VirtualSpecification__Visitable.initOperations(_VirtualSpecification__Visitable);

			Fragments._Visitable__OclAny.initOperations(_Visitable__OclAny);
			Fragments._Visitable__OclElement.initOperations(_Visitable__OclElement);
			Fragments._Visitable__Visitable.initOperations(_Visitable__Visitable);

			Fragments._Void__DataType.initOperations(_Void__DataType);
			Fragments._Void__GASTMObject.initOperations(_Void__GASTMObject);
			Fragments._Void__GASTMSyntaxObject.initOperations(_Void__GASTMSyntaxObject);
			Fragments._Void__OclAny.initOperations(_Void__OclAny);
			Fragments._Void__OclElement.initOperations(_Void__OclElement);
			Fragments._Void__PrimitiveType.initOperations(_Void__PrimitiveType);
			Fragments._Void__Type.initOperations(_Void__Type);
			Fragments._Void__Visitable.initOperations(_Void__Visitable);
			Fragments._Void__Void.initOperations(_Void__Void);

			Fragments._WhileStatement__GASTMObject.initOperations(_WhileStatement__GASTMObject);
			Fragments._WhileStatement__GASTMSyntaxObject.initOperations(_WhileStatement__GASTMSyntaxObject);
			Fragments._WhileStatement__LoopStatement.initOperations(_WhileStatement__LoopStatement);
			Fragments._WhileStatement__OclAny.initOperations(_WhileStatement__OclAny);
			Fragments._WhileStatement__OclElement.initOperations(_WhileStatement__OclElement);
			Fragments._WhileStatement__Statement.initOperations(_WhileStatement__Statement);
			Fragments._WhileStatement__Visitable.initOperations(_WhileStatement__Visitable);
			Fragments._WhileStatement__WhileStatement.initOperations(_WhileStatement__WhileStatement);

			Fragments._WideCharacter__DataType.initOperations(_WideCharacter__DataType);
			Fragments._WideCharacter__GASTMObject.initOperations(_WideCharacter__GASTMObject);
			Fragments._WideCharacter__GASTMSyntaxObject.initOperations(_WideCharacter__GASTMSyntaxObject);
			Fragments._WideCharacter__OclAny.initOperations(_WideCharacter__OclAny);
			Fragments._WideCharacter__OclElement.initOperations(_WideCharacter__OclElement);
			Fragments._WideCharacter__PrimitiveType.initOperations(_WideCharacter__PrimitiveType);
			Fragments._WideCharacter__Type.initOperations(_WideCharacter__Type);
			Fragments._WideCharacter__Visitable.initOperations(_WideCharacter__Visitable);
			Fragments._WideCharacter__WideCharacter.initOperations(_WideCharacter__WideCharacter);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::FragmentOperations and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of local properties for the local fragment of each type.
	 */
	public static class FragmentProperties {
		static {
			Init.initStart();
			FragmentOperations.init();
		}

		private static final @NonNull ExecutorProperty @NonNull [] _AccessKind = {};

		private static final @NonNull ExecutorProperty @NonNull [] _ActualParameter = {
			AstmTables.Properties._ActualParameter__FunctionCallExpression__actualParams
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ActualParameterExpression = {
			AstmTables.Properties._ActualParameterExpression__value,
			AstmTables.Properties._ActualParameter__FunctionCallExpression__actualParams
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Add = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _AddressOf = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _AggregateExpression = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _AggregateScope = {
			AstmTables.Properties._Scope__childScope,
			AstmTables.Properties._Scope__definitionObject,
			AstmTables.Properties._AggregateScope__AggregateType__opensScope,
			AstmTables.Properties._Scope__Scope__childScope
		};

		private static final @NonNull ExecutorProperty @NonNull [] _AggregateType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._AggregateType__members,
			AstmTables.Properties._AggregateType__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._AggregateType__AggregateTypeDefinition__aggregateType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _AggregateTypeDefinition = {
			AstmTables.Properties._AggregateTypeDefinition__aggregateType,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._TypeDefinition__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._TypeDefinition__NamedTypeReference__type,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _And = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _AnnotationExpression = {
			AstmTables.Properties._AnnotationExpression__annotationType,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._AnnotationExpression__memberValues,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._AnnotationExpression__GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _AnnotationType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._AggregateType__members,
			AstmTables.Properties._AggregateType__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._AggregateType__AggregateTypeDefinition__aggregateType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ArrayAccess = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ArrayAccess__arrayName,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._ArrayAccess__subscripts,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ArrayType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ConstructedType__baseType,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._ArrayType__ranks,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Assign = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BinaryExpression = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._BinaryExpression__leftOperand,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._BinaryExpression__operator,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BinaryOperator = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitAnd = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitFieldDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DataDefinition__initialValue,
			AstmTables.Properties._DataDefinition__isMutable,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject,
			AstmTables.Properties._DataDefinition__VariableCatchBlock__exceptionVariable
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitLeftShift = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitLiteral = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Literal__value,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitNot = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitOr = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitRightShift = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BitXor = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BlockScope = {
			AstmTables.Properties._Scope__childScope,
			AstmTables.Properties._Scope__definitionObject,
			AstmTables.Properties._BlockScope__BlockStatement__opensScope,
			AstmTables.Properties._Scope__Scope__childScope
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BlockStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._BlockStatement__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._BlockStatement__subStatements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Boolean = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BooleanLiteral = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Literal__value,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _BreakStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._BreakStatement__target,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ByReferenceActualParameterExpression = {
			AstmTables.Properties._ActualParameterExpression__value,
			AstmTables.Properties._ActualParameter__FunctionCallExpression__actualParams
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ByReferenceFormalParameterType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._FormalParameterType__type,
			AstmTables.Properties._FormalParameterType__FunctionType__parameterTypes,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ByValueActualParameterExpression = {
			AstmTables.Properties._ActualParameterExpression__value,
			AstmTables.Properties._ActualParameter__FunctionCallExpression__actualParams
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ByValueFormalParameterType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._FormalParameterType__type,
			AstmTables.Properties._FormalParameterType__FunctionType__parameterTypes,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Byte = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _CaseBlock = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._SwitchCase__body,
			AstmTables.Properties._CaseBlock__caseExpressions,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._SwitchCase__SwitchStatement__cases,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _CastExpression = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._CastExpression__castType,
			AstmTables.Properties._CastExpression__expression,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _CatchBlock = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._CatchBlock__body,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._CatchBlock__TryStatement__catchBlocks,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _CharLiteral = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Literal__value,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Character = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ClassType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ClassType__derivesFrom,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._AggregateType__members,
			AstmTables.Properties._AggregateType__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._AggregateType__AggregateTypeDefinition__aggregateType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _CollectionType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ConstructedType__baseType,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Comment = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Comment__text,
			AstmTables.Properties._PreprocessorElement__GASTMSyntaxObject__preProcessorElements
		};

		private static final @NonNull ExecutorProperty @NonNull [] _CompilationUnit = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._CompilationUnit__fragments,
			AstmTables.Properties._CompilationUnit__language,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._CompilationUnit__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._CompilationUnit__Project__files,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ConditionalExpression = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ConditionalExpression__condition,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._ConditionalExpression__onFalseOperand,
			AstmTables.Properties._ConditionalExpression__onTrueOperand,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ConstructedType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ConstructedType__baseType,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ContinueStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._ContinueStatement__target,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DataDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DataDefinition__initialValue,
			AstmTables.Properties._DataDefinition__isMutable,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject,
			AstmTables.Properties._DataDefinition__VariableCatchBlock__exceptionVariable
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DataType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Declaration = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Declaration__declarationType,
			AstmTables.Properties._Declaration__defRef,
			AstmTables.Properties._Declaration__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DeclarationOrDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DeclarationOrDefinitionStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Decrement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DefaultBlock = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._SwitchCase__body,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._SwitchCase__SwitchStatement__cases,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Definition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DefinitionObject = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DeleteStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._DeleteStatement__operand,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DelphiBlockStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._DelphiBlockStatement__declarations,
			AstmTables.Properties._DelphiBlockStatement__exports,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._BlockStatement__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._BlockStatement__subStatements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DelphiFunctionCallExpression = {
			AstmTables.Properties._FunctionCallExpression__actualParams,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DelphiImplementationSection = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._DelphiImplementationSection__exports,
			AstmTables.Properties._CompilationUnit__fragments,
			AstmTables.Properties._CompilationUnit__language,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._CompilationUnit__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DelphiImplementationSection__uses,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DelphiImplementationSection__DelphiUnit__implementation,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._CompilationUnit__Project__files,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DelphiInterfaceSection = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._CompilationUnit__fragments,
			AstmTables.Properties._CompilationUnit__language,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._CompilationUnit__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DelphiInterfaceSection__uses,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DelphiInterfaceSection__DelphiUnit__interface,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._CompilationUnit__Project__files,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DelphiUnit = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._CompilationUnit__fragments,
			AstmTables.Properties._DelphiUnit__implementation,
			AstmTables.Properties._DelphiUnit__interface,
			AstmTables.Properties._CompilationUnit__language,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._DelphiUnit__name,
			AstmTables.Properties._CompilationUnit__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._CompilationUnit__Project__files,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DelphiWithStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._BlockStatement__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._BlockStatement__subStatements,
			AstmTables.Properties._DelphiWithStatement__withs,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Deref = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DerivesFrom = {
			AstmTables.Properties._DerivesFrom__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._DerivesFrom__className,
			AstmTables.Properties._DerivesFrom__isVirtual,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._DerivesFrom__ClassType__derivesFrom,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Dimension = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Dimension__highBound,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._Dimension__lowBound,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Dimension__ArrayType__ranks,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Divide = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _DoWhileStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LoopStatement__body,
			AstmTables.Properties._LoopStatement__condition,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Double = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _EmptyStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _EntryDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._EntryDefinition__body,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._EntryDefinition__formalParameters,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _EnumLiteralDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._EnumLiteralDefinition__value,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._EnumLiteralDefinition__EnumType__enumLiterals,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _EnumType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._EnumType__enumLiterals,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Equal = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ExceptionType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Exponent = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Expression = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ExpressionStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ExpressionStatement__expression,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _External = {};

		private static final @NonNull ExecutorProperty @NonNull [] _FileLocal = {};

		private static final @NonNull ExecutorProperty @NonNull [] _Float = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ForCheckAfterStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LoopStatement__body,
			AstmTables.Properties._LoopStatement__condition,
			AstmTables.Properties._ForStatement__initBody,
			AstmTables.Properties._ForStatement__iterationBody,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ForCheckBeforeStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LoopStatement__body,
			AstmTables.Properties._LoopStatement__condition,
			AstmTables.Properties._ForStatement__initBody,
			AstmTables.Properties._ForStatement__iterationBody,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ForStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LoopStatement__body,
			AstmTables.Properties._LoopStatement__condition,
			AstmTables.Properties._ForStatement__initBody,
			AstmTables.Properties._ForStatement__iterationBody,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FormalParameterDeclaration = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Declaration__declarationType,
			AstmTables.Properties._Declaration__defRef,
			AstmTables.Properties._Declaration__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._FormalParameterDeclaration__FunctionDeclaration__formalParameters,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FormalParameterDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DataDefinition__initialValue,
			AstmTables.Properties._DataDefinition__isMutable,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._FormalParameterDefinition__EntryDefinition__formalParameters,
			AstmTables.Properties._FormalParameterDefinition__FunctionDefinition__formalParameters,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject,
			AstmTables.Properties._DataDefinition__VariableCatchBlock__exceptionVariable
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FormalParameterType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._FormalParameterType__type,
			AstmTables.Properties._FormalParameterType__FunctionType__parameterTypes,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionCallExpression = {
			AstmTables.Properties._FunctionCallExpression__actualParams,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionDeclaration = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Declaration__declarationType,
			AstmTables.Properties._Declaration__defRef,
			AstmTables.Properties._FunctionDeclaration__formalParameters,
			AstmTables.Properties._FunctionDeclaration__functionMemberAttributes,
			AstmTables.Properties._Declaration__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._FunctionDeclaration__returnType,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._FunctionDefinition__body,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._FunctionDefinition__formalParameters,
			AstmTables.Properties._FunctionDefinition__functionMemberAttributes,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._FunctionDefinition__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._FunctionDefinition__returnType,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionMemberAttribute = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionMemberAttributes = {
			AstmTables.Properties._FunctionMemberAttributes__isFriend,
			AstmTables.Properties._FunctionMemberAttributes__isInline,
			AstmTables.Properties._FunctionMemberAttributes__isThisConst,
			AstmTables.Properties._FunctionMemberAttributes__virtualSpecifier,
			AstmTables.Properties._FunctionMemberAttributes__FunctionDeclaration__functionMemberAttributes,
			AstmTables.Properties._FunctionMemberAttributes__FunctionDefinition__functionMemberAttributes
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionPersistent = {};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionScope = {
			AstmTables.Properties._Scope__childScope,
			AstmTables.Properties._Scope__definitionObject,
			AstmTables.Properties._FunctionScope__FunctionDefinition__opensScope,
			AstmTables.Properties._Scope__Scope__childScope
		};

		private static final @NonNull ExecutorProperty @NonNull [] _FunctionType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._FunctionType__parameterTypes,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._FunctionType__returnType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _GASTMObject = {};

		private static final @NonNull ExecutorProperty @NonNull [] _GASTMSemanticObject = {};

		private static final @NonNull ExecutorProperty @NonNull [] _GASTMSourceObject = {};

		private static final @NonNull ExecutorProperty @NonNull [] _GASTMSyntaxObject = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements
		};

		private static final @NonNull ExecutorProperty @NonNull [] _GlobalScope = {
			AstmTables.Properties._Scope__childScope,
			AstmTables.Properties._Scope__definitionObject,
			AstmTables.Properties._GlobalScope__Project__outerScope,
			AstmTables.Properties._Scope__Scope__childScope
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Greater = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _IdentifierReference = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._NameReference__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._NameReference__refersTo,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._IdentifierReference__QualifiedIdentifierReference__member,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._IdentifierReference__TypeQualifiedIdentifierReference__member,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _IfStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._IfStatement__condition,
			AstmTables.Properties._IfStatement__elseBody,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._IfStatement__thenBody,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _IncludeUnit = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._IncludeUnit__file,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._PreprocessorElement__GASTMSyntaxObject__preProcessorElements
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Increment = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Integer = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _IntegerLiteral = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Literal__value,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _JumpStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._JumpStatement__target,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _LabelAccess = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LabelAccess__definition,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._LabelAccess__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._LabelAccess__BreakStatement__target,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._LabelAccess__ContinueStatement__target,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _LabelDefinition = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LabelDefinition__labelName,
			AstmTables.Properties._LabelDefinition__labelType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._LabelDefinition__LabelAccess__definition,
			AstmTables.Properties._LabelDefinition__LabeledStatement__label,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _LabelType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._LabelType__LabelDefinition__labelType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _LabeledStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LabeledStatement__label,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._LabeledStatement__statement,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Less = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Literal = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Literal__value,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _LongDouble = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _LongInteger = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _LoopStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LoopStatement__body,
			AstmTables.Properties._LoopStatement__condition,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _MacroCall = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._MacroCall__refersTo,
			AstmTables.Properties._PreprocessorElement__GASTMSyntaxObject__preProcessorElements
		};

		private static final @NonNull ExecutorProperty @NonNull [] _MacroDefinition = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._MacroDefinition__body,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._MacroDefinition__macroName,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._PreprocessorElement__GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._MacroDefinition__MacroCall__refersTo
		};

		private static final @NonNull ExecutorProperty @NonNull [] _MissingActualParameter = {
			AstmTables.Properties._ActualParameter__FunctionCallExpression__actualParams
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Modulus = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Multiply = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Name = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._Name__nameString,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._Name__Declaration__identifierName,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._Name__Definition__identifierName,
			AstmTables.Properties._Name__DelphiUnit__name,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._Name__LabelAccess__name,
			AstmTables.Properties._Name__LabelDefinition__labelName,
			AstmTables.Properties._Name__NameReference__name,
			AstmTables.Properties._Name__NameSpaceDefinition__nameSpace,
			AstmTables.Properties._Name__NamedTypeReference__name,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._Name__TypeDefinition__name,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NameReference = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._NameReference__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._NameReference__refersTo,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NameSpaceDefinition = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._NameSpaceDefinition__body,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._NameSpaceDefinition__nameSpace,
			AstmTables.Properties._NameSpaceDefinition__nameSpaceType,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NameSpaceType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._NameSpaceType__NameSpaceDefinition__nameSpaceType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NamedType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._NamedType__body,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._NamedType__DerivesFrom__className,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._NamedType__NamedTypeDefinition__definitionType,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NamedTypeDefinition = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._NamedTypeDefinition__definitionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._TypeDefinition__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._TypeDefinition__NamedTypeReference__type,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NamedTypeReference = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._NamedTypeReference__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._NamedTypeReference__type,
			AstmTables.Properties._TypeReference__AnnotationExpression__annotationType,
			AstmTables.Properties._TypeReference__CastExpression__castType,
			AstmTables.Properties._TypeReference__ConstructedType__baseType,
			AstmTables.Properties._TypeReference__Declaration__declarationType,
			AstmTables.Properties._TypeReference__Definition__definitionType,
			AstmTables.Properties._NamedTypeReference__DelphiBlockStatement__exports,
			AstmTables.Properties._NamedTypeReference__DelphiImplementationSection__exports,
			AstmTables.Properties._NamedTypeReference__DelphiImplementationSection__uses,
			AstmTables.Properties._NamedTypeReference__DelphiInterfaceSection__uses,
			AstmTables.Properties._TypeReference__Expression__expressionType,
			AstmTables.Properties._TypeReference__FormalParameterType__type,
			AstmTables.Properties._TypeReference__FunctionDeclaration__returnType,
			AstmTables.Properties._TypeReference__FunctionDefinition__returnType,
			AstmTables.Properties._TypeReference__FunctionType__returnType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._TypeReference__NewExpression__newType,
			AstmTables.Properties._TypeReference__TypeQualifiedIdentifierReference__aggregateType,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Negate = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NewExpression = {
			AstmTables.Properties._NewExpression__actualParams,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._NewExpression__newType,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NoDef = {};

		private static final @NonNull ExecutorProperty @NonNull [] _NonVirtual = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._VirtualSpecification__FunctionMemberAttributes__virtualSpecifier,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Not = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NotEqual = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NotGreater = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _NotLess = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Operator = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _OperatorAssign = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._OperatorAssign__operator,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Or = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _OtherSyntaxObject = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _PerClassMember = {};

		private static final @NonNull ExecutorProperty @NonNull [] _PointerType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ConstructedType__baseType,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _PostDecrement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _PostIncrement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _PreprocessorElement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._PreprocessorElement__GASTMSyntaxObject__preProcessorElements
		};

		private static final @NonNull ExecutorProperty @NonNull [] _PrimitiveType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Private = {};

		private static final @NonNull ExecutorProperty @NonNull [] _ProgramScope = {
			AstmTables.Properties._Scope__childScope,
			AstmTables.Properties._Scope__definitionObject,
			AstmTables.Properties._ProgramScope__CompilationUnit__opensScope,
			AstmTables.Properties._Scope__Scope__childScope
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Project = {
			AstmTables.Properties._Project__files,
			AstmTables.Properties._Project__outerScope
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Protected = {};

		private static final @NonNull ExecutorProperty @NonNull [] _Public = {};

		private static final @NonNull ExecutorProperty @NonNull [] _PureVirtual = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._VirtualSpecification__FunctionMemberAttributes__virtualSpecifier,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _QualifiedIdentifierReference = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._QualifiedIdentifierReference__member,
			AstmTables.Properties._NameReference__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._NameReference__refersTo,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _QualifiedOverData = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._QualifiedIdentifierReference__member,
			AstmTables.Properties._NameReference__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._NameReference__refersTo,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _QualifiedOverPointer = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._QualifiedIdentifierReference__member,
			AstmTables.Properties._NameReference__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._NameReference__refersTo,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _RangeExpression = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._RangeExpression__fromExpression,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._RangeExpression__toExpression,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _RangeType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ConstructedType__baseType,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _RealLiteral = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Literal__value,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ReferenceType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ConstructedType__baseType,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ReturnStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._ReturnStatement__returnValue,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Scope = {
			AstmTables.Properties._Scope__childScope,
			AstmTables.Properties._Scope__definitionObject,
			AstmTables.Properties._Scope__Scope__childScope
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ShortInteger = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SourceFile = {
			AstmTables.Properties._SourceFile__pathName,
			AstmTables.Properties._SourceFile__IncludeUnit__file,
			AstmTables.Properties._SourceFile__SourceLocation__inSourceFile
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SourceLocation = {
			AstmTables.Properties._SourceLocation__endColumn,
			AstmTables.Properties._SourceLocation__endLine,
			AstmTables.Properties._SourceLocation__inSourceFile,
			AstmTables.Properties._SourceLocation__startColumn,
			AstmTables.Properties._SourceLocation__startLine,
			AstmTables.Properties._SourceLocation__GASTMSyntaxObject__locationInfo
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SpecificConcatString = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SpecificGreaterEqual = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SpecificIn = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SpecificLessEqual = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SpecificLike = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SpecificSelectStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SpecificTriggerDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._SpecificTriggerDefinition__body,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Statement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _StorageSpecification = {};

		private static final @NonNull ExecutorProperty @NonNull [] _String = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _StringLiteral = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Literal__value,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _StructureType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._AggregateType__members,
			AstmTables.Properties._AggregateType__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._AggregateType__AggregateTypeDefinition__aggregateType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Subtract = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SwitchCase = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._SwitchCase__body,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._SwitchCase__SwitchStatement__cases,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _SwitchStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._SwitchStatement__cases,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._SwitchStatement__switchExpression,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _TerminateStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _ThrowStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._ThrowStatement__exception,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _TryStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._TryStatement__catchBlocks,
			AstmTables.Properties._TryStatement__finalStatement,
			AstmTables.Properties._TryStatement__guardedStatement,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Type = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _TypeDefinition = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._TypeDefinition__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._TypeDefinition__NamedTypeReference__type,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _TypeQualifiedIdentifierReference = {
			AstmTables.Properties._TypeQualifiedIdentifierReference__aggregateType,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._TypeQualifiedIdentifierReference__member,
			AstmTables.Properties._NameReference__name,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._NameReference__refersTo,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _TypeReference = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._TypeReference__AnnotationExpression__annotationType,
			AstmTables.Properties._TypeReference__CastExpression__castType,
			AstmTables.Properties._TypeReference__ConstructedType__baseType,
			AstmTables.Properties._TypeReference__Declaration__declarationType,
			AstmTables.Properties._TypeReference__Definition__definitionType,
			AstmTables.Properties._TypeReference__Expression__expressionType,
			AstmTables.Properties._TypeReference__FormalParameterType__type,
			AstmTables.Properties._TypeReference__FunctionDeclaration__returnType,
			AstmTables.Properties._TypeReference__FunctionDefinition__returnType,
			AstmTables.Properties._TypeReference__FunctionType__returnType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._TypeReference__NewExpression__newType,
			AstmTables.Properties._TypeReference__TypeQualifiedIdentifierReference__aggregateType,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _TypesCatchBlock = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._CatchBlock__body,
			AstmTables.Properties._TypesCatchBlock__exceptions,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._CatchBlock__TryStatement__catchBlocks,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _UnaryExpression = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Expression__expressionType,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._UnaryExpression__operand,
			AstmTables.Properties._UnaryExpression__operator,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Expression__ActualParameterExpression__value,
			AstmTables.Properties._Expression__AnnotationExpression__memberValues,
			AstmTables.Properties._Expression__ArrayAccess__arrayName,
			AstmTables.Properties._Expression__ArrayAccess__subscripts,
			AstmTables.Properties._Expression__BinaryExpression__leftOperand,
			AstmTables.Properties._Expression__BinaryExpression__rightOperand,
			AstmTables.Properties._Expression__BitFieldDefinition__bitFieldSize,
			AstmTables.Properties._Expression__CaseBlock__caseExpressions,
			AstmTables.Properties._Expression__CastExpression__expression,
			AstmTables.Properties._Expression__ConditionalExpression__condition,
			AstmTables.Properties._Expression__ConditionalExpression__onFalseOperand,
			AstmTables.Properties._Expression__ConditionalExpression__onTrueOperand,
			AstmTables.Properties._Expression__DataDefinition__initialValue,
			AstmTables.Properties._Expression__DeleteStatement__operand,
			AstmTables.Properties._Expression__Dimension__highBound,
			AstmTables.Properties._Expression__Dimension__lowBound,
			AstmTables.Properties._Expression__EnumLiteralDefinition__value,
			AstmTables.Properties._Expression__ExpressionStatement__expression,
			AstmTables.Properties._Expression__ForStatement__initBody,
			AstmTables.Properties._Expression__ForStatement__iterationBody,
			AstmTables.Properties._Expression__FunctionCallExpression__calledFunction,
			AstmTables.Properties._Expression__IfStatement__condition,
			AstmTables.Properties._Expression__JumpStatement__target,
			AstmTables.Properties._Expression__LoopStatement__condition,
			AstmTables.Properties._Expression__QualifiedIdentifierReference__qualifiers,
			AstmTables.Properties._Expression__RangeExpression__fromExpression,
			AstmTables.Properties._Expression__RangeExpression__toExpression,
			AstmTables.Properties._Expression__ReturnStatement__returnValue,
			AstmTables.Properties._Expression__SwitchStatement__switchExpression,
			AstmTables.Properties._Expression__ThrowStatement__exception,
			AstmTables.Properties._Expression__UnaryExpression__operand
		};

		private static final @NonNull ExecutorProperty @NonNull [] _UnaryOperator = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _UnaryPlus = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _UnionType = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._AggregateType__members,
			AstmTables.Properties._AggregateType__opensScope,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._AggregateType__AggregateTypeDefinition__aggregateType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _UnnamedTypeReference = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._UnnamedTypeReference__type,
			AstmTables.Properties._TypeReference__AnnotationExpression__annotationType,
			AstmTables.Properties._TypeReference__CastExpression__castType,
			AstmTables.Properties._TypeReference__ConstructedType__baseType,
			AstmTables.Properties._TypeReference__Declaration__declarationType,
			AstmTables.Properties._TypeReference__Definition__definitionType,
			AstmTables.Properties._TypeReference__Expression__expressionType,
			AstmTables.Properties._TypeReference__FormalParameterType__type,
			AstmTables.Properties._TypeReference__FunctionDeclaration__returnType,
			AstmTables.Properties._TypeReference__FunctionDefinition__returnType,
			AstmTables.Properties._TypeReference__FunctionType__returnType,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._TypeReference__NewExpression__newType,
			AstmTables.Properties._TypeReference__TypeQualifiedIdentifierReference__aggregateType,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _VariableCatchBlock = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._CatchBlock__body,
			AstmTables.Properties._VariableCatchBlock__exceptionVariable,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._CatchBlock__TryStatement__catchBlocks,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _VariableDeclaration = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Declaration__declarationType,
			AstmTables.Properties._Declaration__defRef,
			AstmTables.Properties._Declaration__identifierName,
			AstmTables.Properties._VariableDeclaration__isMutable,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject
		};

		private static final @NonNull ExecutorProperty @NonNull [] _VariableDefinition = {
			AstmTables.Properties._DeclarationOrDefinition__accessKind,
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Definition__definitionType,
			AstmTables.Properties._Definition__identifierName,
			AstmTables.Properties._DataDefinition__initialValue,
			AstmTables.Properties._DataDefinition__isMutable,
			AstmTables.Properties._DeclarationOrDefinition__isRegister,
			AstmTables.Properties._DeclarationOrDefinition__linkageSpecifier,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._DefinitionObject__AggregateType__members,
			AstmTables.Properties._DefinitionObject__CompilationUnit__fragments,
			AstmTables.Properties._Definition__Declaration__defRef,
			AstmTables.Properties._DefinitionObject__DeclarationOrDefinitionStatement__declOrDefn,
			AstmTables.Properties._DefinitionObject__DelphiBlockStatement__declarations,
			AstmTables.Properties._DefinitionObject__DelphiFunctionCallExpression__applyTo,
			AstmTables.Properties._DefinitionObject__DelphiWithStatement__withs,
			AstmTables.Properties._DefinitionObject__NameReference__refersTo,
			AstmTables.Properties._DefinitionObject__NameSpaceDefinition__body,
			AstmTables.Properties._DefinitionObject__Scope__definitionObject,
			AstmTables.Properties._DataDefinition__VariableCatchBlock__exceptionVariable
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Virtual = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._VirtualSpecification__FunctionMemberAttributes__virtualSpecifier,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _VirtualSpecification = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._OtherSyntaxObject__BinaryExpression__operator,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__accessKind,
			AstmTables.Properties._OtherSyntaxObject__DeclarationOrDefinition__storageSpecifiers,
			AstmTables.Properties._OtherSyntaxObject__DerivesFrom__accessKind,
			AstmTables.Properties._VirtualSpecification__FunctionMemberAttributes__virtualSpecifier,
			AstmTables.Properties._OtherSyntaxObject__NewExpression__actualParams,
			AstmTables.Properties._OtherSyntaxObject__OperatorAssign__operator,
			AstmTables.Properties._OtherSyntaxObject__UnaryExpression__operator
		};

		private static final @NonNull ExecutorProperty @NonNull [] _Visitable = {};

		private static final @NonNull ExecutorProperty @NonNull [] _Void = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		private static final @NonNull ExecutorProperty @NonNull [] _WhileStatement = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._LoopStatement__body,
			AstmTables.Properties._LoopStatement__condition,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Statement__BlockStatement__subStatements,
			AstmTables.Properties._Statement__CatchBlock__body,
			AstmTables.Properties._Statement__EntryDefinition__body,
			AstmTables.Properties._Statement__FunctionDefinition__body,
			AstmTables.Properties._Statement__IfStatement__elseBody,
			AstmTables.Properties._Statement__IfStatement__thenBody,
			AstmTables.Properties._Statement__LabeledStatement__statement,
			AstmTables.Properties._Statement__LoopStatement__body,
			AstmTables.Properties._Statement__SpecificTriggerDefinition__body,
			AstmTables.Properties._Statement__SwitchCase__body,
			AstmTables.Properties._Statement__TryStatement__finalStatement,
			AstmTables.Properties._Statement__TryStatement__guardedStatement
		};

		private static final @NonNull ExecutorProperty @NonNull [] _WideCharacter = {
			AstmTables.Properties._GASTMSyntaxObject__annotations,
			AstmTables.Properties._Type__isConst,
			AstmTables.Properties._PrimitiveType__isSigned,
			AstmTables.Properties._Type__isVolatile,
			AstmTables.Properties._GASTMSyntaxObject__locationInfo,
			AstmTables.Properties._GASTMSyntaxObject__preProcessorElements,
			AstmTables.Properties._Type__NamedType__body,
			AstmTables.Properties._Type__TypesCatchBlock__exceptions,
			AstmTables.Properties._Type__UnnamedTypeReference__type
		};

		/**
		 *	Install the property descriptors in the fragment descriptors.
		 */
		static {
			Fragments._AccessKind__AccessKind.initProperties(_AccessKind);
			Fragments._ActualParameter__ActualParameter.initProperties(_ActualParameter);
			Fragments._ActualParameterExpression__ActualParameterExpression.initProperties(_ActualParameterExpression);
			Fragments._Add__Add.initProperties(_Add);
			Fragments._AddressOf__AddressOf.initProperties(_AddressOf);
			Fragments._AggregateExpression__AggregateExpression.initProperties(_AggregateExpression);
			Fragments._AggregateScope__AggregateScope.initProperties(_AggregateScope);
			Fragments._AggregateType__AggregateType.initProperties(_AggregateType);
			Fragments._AggregateTypeDefinition__AggregateTypeDefinition.initProperties(_AggregateTypeDefinition);
			Fragments._And__And.initProperties(_And);
			Fragments._AnnotationExpression__AnnotationExpression.initProperties(_AnnotationExpression);
			Fragments._AnnotationType__AnnotationType.initProperties(_AnnotationType);
			Fragments._ArrayAccess__ArrayAccess.initProperties(_ArrayAccess);
			Fragments._ArrayType__ArrayType.initProperties(_ArrayType);
			Fragments._Assign__Assign.initProperties(_Assign);
			Fragments._BinaryExpression__BinaryExpression.initProperties(_BinaryExpression);
			Fragments._BinaryOperator__BinaryOperator.initProperties(_BinaryOperator);
			Fragments._BitAnd__BitAnd.initProperties(_BitAnd);
			Fragments._BitFieldDefinition__BitFieldDefinition.initProperties(_BitFieldDefinition);
			Fragments._BitLeftShift__BitLeftShift.initProperties(_BitLeftShift);
			Fragments._BitLiteral__BitLiteral.initProperties(_BitLiteral);
			Fragments._BitNot__BitNot.initProperties(_BitNot);
			Fragments._BitOr__BitOr.initProperties(_BitOr);
			Fragments._BitRightShift__BitRightShift.initProperties(_BitRightShift);
			Fragments._BitXor__BitXor.initProperties(_BitXor);
			Fragments._BlockScope__BlockScope.initProperties(_BlockScope);
			Fragments._BlockStatement__BlockStatement.initProperties(_BlockStatement);
			Fragments._Boolean__Boolean.initProperties(_Boolean);
			Fragments._BooleanLiteral__BooleanLiteral.initProperties(_BooleanLiteral);
			Fragments._BreakStatement__BreakStatement.initProperties(_BreakStatement);
			Fragments._ByReferenceActualParameterExpression__ByReferenceActualParameterExpression.initProperties(_ByReferenceActualParameterExpression);
			Fragments._ByReferenceFormalParameterType__ByReferenceFormalParameterType.initProperties(_ByReferenceFormalParameterType);
			Fragments._ByValueActualParameterExpression__ByValueActualParameterExpression.initProperties(_ByValueActualParameterExpression);
			Fragments._ByValueFormalParameterType__ByValueFormalParameterType.initProperties(_ByValueFormalParameterType);
			Fragments._Byte__Byte.initProperties(_Byte);
			Fragments._CaseBlock__CaseBlock.initProperties(_CaseBlock);
			Fragments._CastExpression__CastExpression.initProperties(_CastExpression);
			Fragments._CatchBlock__CatchBlock.initProperties(_CatchBlock);
			Fragments._CharLiteral__CharLiteral.initProperties(_CharLiteral);
			Fragments._Character__Character.initProperties(_Character);
			Fragments._ClassType__ClassType.initProperties(_ClassType);
			Fragments._CollectionType__CollectionType.initProperties(_CollectionType);
			Fragments._Comment__Comment.initProperties(_Comment);
			Fragments._CompilationUnit__CompilationUnit.initProperties(_CompilationUnit);
			Fragments._ConditionalExpression__ConditionalExpression.initProperties(_ConditionalExpression);
			Fragments._ConstructedType__ConstructedType.initProperties(_ConstructedType);
			Fragments._ContinueStatement__ContinueStatement.initProperties(_ContinueStatement);
			Fragments._DataDefinition__DataDefinition.initProperties(_DataDefinition);
			Fragments._DataType__DataType.initProperties(_DataType);
			Fragments._Declaration__Declaration.initProperties(_Declaration);
			Fragments._DeclarationOrDefinition__DeclarationOrDefinition.initProperties(_DeclarationOrDefinition);
			Fragments._DeclarationOrDefinitionStatement__DeclarationOrDefinitionStatement.initProperties(_DeclarationOrDefinitionStatement);
			Fragments._Decrement__Decrement.initProperties(_Decrement);
			Fragments._DefaultBlock__DefaultBlock.initProperties(_DefaultBlock);
			Fragments._Definition__Definition.initProperties(_Definition);
			Fragments._DefinitionObject__DefinitionObject.initProperties(_DefinitionObject);
			Fragments._DeleteStatement__DeleteStatement.initProperties(_DeleteStatement);
			Fragments._DelphiBlockStatement__DelphiBlockStatement.initProperties(_DelphiBlockStatement);
			Fragments._DelphiFunctionCallExpression__DelphiFunctionCallExpression.initProperties(_DelphiFunctionCallExpression);
			Fragments._DelphiImplementationSection__DelphiImplementationSection.initProperties(_DelphiImplementationSection);
			Fragments._DelphiInterfaceSection__DelphiInterfaceSection.initProperties(_DelphiInterfaceSection);
			Fragments._DelphiUnit__DelphiUnit.initProperties(_DelphiUnit);
			Fragments._DelphiWithStatement__DelphiWithStatement.initProperties(_DelphiWithStatement);
			Fragments._Deref__Deref.initProperties(_Deref);
			Fragments._DerivesFrom__DerivesFrom.initProperties(_DerivesFrom);
			Fragments._Dimension__Dimension.initProperties(_Dimension);
			Fragments._Divide__Divide.initProperties(_Divide);
			Fragments._DoWhileStatement__DoWhileStatement.initProperties(_DoWhileStatement);
			Fragments._Double__Double.initProperties(_Double);
			Fragments._EmptyStatement__EmptyStatement.initProperties(_EmptyStatement);
			Fragments._EntryDefinition__EntryDefinition.initProperties(_EntryDefinition);
			Fragments._EnumLiteralDefinition__EnumLiteralDefinition.initProperties(_EnumLiteralDefinition);
			Fragments._EnumType__EnumType.initProperties(_EnumType);
			Fragments._Equal__Equal.initProperties(_Equal);
			Fragments._ExceptionType__ExceptionType.initProperties(_ExceptionType);
			Fragments._Exponent__Exponent.initProperties(_Exponent);
			Fragments._Expression__Expression.initProperties(_Expression);
			Fragments._ExpressionStatement__ExpressionStatement.initProperties(_ExpressionStatement);
			Fragments._External__External.initProperties(_External);
			Fragments._FileLocal__FileLocal.initProperties(_FileLocal);
			Fragments._Float__Float.initProperties(_Float);
			Fragments._ForCheckAfterStatement__ForCheckAfterStatement.initProperties(_ForCheckAfterStatement);
			Fragments._ForCheckBeforeStatement__ForCheckBeforeStatement.initProperties(_ForCheckBeforeStatement);
			Fragments._ForStatement__ForStatement.initProperties(_ForStatement);
			Fragments._FormalParameterDeclaration__FormalParameterDeclaration.initProperties(_FormalParameterDeclaration);
			Fragments._FormalParameterDefinition__FormalParameterDefinition.initProperties(_FormalParameterDefinition);
			Fragments._FormalParameterType__FormalParameterType.initProperties(_FormalParameterType);
			Fragments._FunctionCallExpression__FunctionCallExpression.initProperties(_FunctionCallExpression);
			Fragments._FunctionDeclaration__FunctionDeclaration.initProperties(_FunctionDeclaration);
			Fragments._FunctionDefinition__FunctionDefinition.initProperties(_FunctionDefinition);
			Fragments._FunctionMemberAttribute__FunctionMemberAttribute.initProperties(_FunctionMemberAttribute);
			Fragments._FunctionMemberAttributes__FunctionMemberAttributes.initProperties(_FunctionMemberAttributes);
			Fragments._FunctionPersistent__FunctionPersistent.initProperties(_FunctionPersistent);
			Fragments._FunctionScope__FunctionScope.initProperties(_FunctionScope);
			Fragments._FunctionType__FunctionType.initProperties(_FunctionType);
			Fragments._GASTMObject__GASTMObject.initProperties(_GASTMObject);
			Fragments._GASTMSemanticObject__GASTMSemanticObject.initProperties(_GASTMSemanticObject);
			Fragments._GASTMSourceObject__GASTMSourceObject.initProperties(_GASTMSourceObject);
			Fragments._GASTMSyntaxObject__GASTMSyntaxObject.initProperties(_GASTMSyntaxObject);
			Fragments._GlobalScope__GlobalScope.initProperties(_GlobalScope);
			Fragments._Greater__Greater.initProperties(_Greater);
			Fragments._IdentifierReference__IdentifierReference.initProperties(_IdentifierReference);
			Fragments._IfStatement__IfStatement.initProperties(_IfStatement);
			Fragments._IncludeUnit__IncludeUnit.initProperties(_IncludeUnit);
			Fragments._Increment__Increment.initProperties(_Increment);
			Fragments._Integer__Integer.initProperties(_Integer);
			Fragments._IntegerLiteral__IntegerLiteral.initProperties(_IntegerLiteral);
			Fragments._JumpStatement__JumpStatement.initProperties(_JumpStatement);
			Fragments._LabelAccess__LabelAccess.initProperties(_LabelAccess);
			Fragments._LabelDefinition__LabelDefinition.initProperties(_LabelDefinition);
			Fragments._LabelType__LabelType.initProperties(_LabelType);
			Fragments._LabeledStatement__LabeledStatement.initProperties(_LabeledStatement);
			Fragments._Less__Less.initProperties(_Less);
			Fragments._Literal__Literal.initProperties(_Literal);
			Fragments._LongDouble__LongDouble.initProperties(_LongDouble);
			Fragments._LongInteger__LongInteger.initProperties(_LongInteger);
			Fragments._LoopStatement__LoopStatement.initProperties(_LoopStatement);
			Fragments._MacroCall__MacroCall.initProperties(_MacroCall);
			Fragments._MacroDefinition__MacroDefinition.initProperties(_MacroDefinition);
			Fragments._MissingActualParameter__MissingActualParameter.initProperties(_MissingActualParameter);
			Fragments._Modulus__Modulus.initProperties(_Modulus);
			Fragments._Multiply__Multiply.initProperties(_Multiply);
			Fragments._Name__Name.initProperties(_Name);
			Fragments._NameReference__NameReference.initProperties(_NameReference);
			Fragments._NameSpaceDefinition__NameSpaceDefinition.initProperties(_NameSpaceDefinition);
			Fragments._NameSpaceType__NameSpaceType.initProperties(_NameSpaceType);
			Fragments._NamedType__NamedType.initProperties(_NamedType);
			Fragments._NamedTypeDefinition__NamedTypeDefinition.initProperties(_NamedTypeDefinition);
			Fragments._NamedTypeReference__NamedTypeReference.initProperties(_NamedTypeReference);
			Fragments._Negate__Negate.initProperties(_Negate);
			Fragments._NewExpression__NewExpression.initProperties(_NewExpression);
			Fragments._NoDef__NoDef.initProperties(_NoDef);
			Fragments._NonVirtual__NonVirtual.initProperties(_NonVirtual);
			Fragments._Not__Not.initProperties(_Not);
			Fragments._NotEqual__NotEqual.initProperties(_NotEqual);
			Fragments._NotGreater__NotGreater.initProperties(_NotGreater);
			Fragments._NotLess__NotLess.initProperties(_NotLess);
			Fragments._Operator__Operator.initProperties(_Operator);
			Fragments._OperatorAssign__OperatorAssign.initProperties(_OperatorAssign);
			Fragments._Or__Or.initProperties(_Or);
			Fragments._OtherSyntaxObject__OtherSyntaxObject.initProperties(_OtherSyntaxObject);
			Fragments._PerClassMember__PerClassMember.initProperties(_PerClassMember);
			Fragments._PointerType__PointerType.initProperties(_PointerType);
			Fragments._PostDecrement__PostDecrement.initProperties(_PostDecrement);
			Fragments._PostIncrement__PostIncrement.initProperties(_PostIncrement);
			Fragments._PreprocessorElement__PreprocessorElement.initProperties(_PreprocessorElement);
			Fragments._PrimitiveType__PrimitiveType.initProperties(_PrimitiveType);
			Fragments._Private__Private.initProperties(_Private);
			Fragments._ProgramScope__ProgramScope.initProperties(_ProgramScope);
			Fragments._Project__Project.initProperties(_Project);
			Fragments._Protected__Protected.initProperties(_Protected);
			Fragments._Public__Public.initProperties(_Public);
			Fragments._PureVirtual__PureVirtual.initProperties(_PureVirtual);
			Fragments._QualifiedIdentifierReference__QualifiedIdentifierReference.initProperties(_QualifiedIdentifierReference);
			Fragments._QualifiedOverData__QualifiedOverData.initProperties(_QualifiedOverData);
			Fragments._QualifiedOverPointer__QualifiedOverPointer.initProperties(_QualifiedOverPointer);
			Fragments._RangeExpression__RangeExpression.initProperties(_RangeExpression);
			Fragments._RangeType__RangeType.initProperties(_RangeType);
			Fragments._RealLiteral__RealLiteral.initProperties(_RealLiteral);
			Fragments._ReferenceType__ReferenceType.initProperties(_ReferenceType);
			Fragments._ReturnStatement__ReturnStatement.initProperties(_ReturnStatement);
			Fragments._Scope__Scope.initProperties(_Scope);
			Fragments._ShortInteger__ShortInteger.initProperties(_ShortInteger);
			Fragments._SourceFile__SourceFile.initProperties(_SourceFile);
			Fragments._SourceLocation__SourceLocation.initProperties(_SourceLocation);
			Fragments._SpecificConcatString__SpecificConcatString.initProperties(_SpecificConcatString);
			Fragments._SpecificGreaterEqual__SpecificGreaterEqual.initProperties(_SpecificGreaterEqual);
			Fragments._SpecificIn__SpecificIn.initProperties(_SpecificIn);
			Fragments._SpecificLessEqual__SpecificLessEqual.initProperties(_SpecificLessEqual);
			Fragments._SpecificLike__SpecificLike.initProperties(_SpecificLike);
			Fragments._SpecificSelectStatement__SpecificSelectStatement.initProperties(_SpecificSelectStatement);
			Fragments._SpecificTriggerDefinition__SpecificTriggerDefinition.initProperties(_SpecificTriggerDefinition);
			Fragments._Statement__Statement.initProperties(_Statement);
			Fragments._StorageSpecification__StorageSpecification.initProperties(_StorageSpecification);
			Fragments._String__String.initProperties(_String);
			Fragments._StringLiteral__StringLiteral.initProperties(_StringLiteral);
			Fragments._StructureType__StructureType.initProperties(_StructureType);
			Fragments._Subtract__Subtract.initProperties(_Subtract);
			Fragments._SwitchCase__SwitchCase.initProperties(_SwitchCase);
			Fragments._SwitchStatement__SwitchStatement.initProperties(_SwitchStatement);
			Fragments._TerminateStatement__TerminateStatement.initProperties(_TerminateStatement);
			Fragments._ThrowStatement__ThrowStatement.initProperties(_ThrowStatement);
			Fragments._TryStatement__TryStatement.initProperties(_TryStatement);
			Fragments._Type__Type.initProperties(_Type);
			Fragments._TypeDefinition__TypeDefinition.initProperties(_TypeDefinition);
			Fragments._TypeQualifiedIdentifierReference__TypeQualifiedIdentifierReference.initProperties(_TypeQualifiedIdentifierReference);
			Fragments._TypeReference__TypeReference.initProperties(_TypeReference);
			Fragments._TypesCatchBlock__TypesCatchBlock.initProperties(_TypesCatchBlock);
			Fragments._UnaryExpression__UnaryExpression.initProperties(_UnaryExpression);
			Fragments._UnaryOperator__UnaryOperator.initProperties(_UnaryOperator);
			Fragments._UnaryPlus__UnaryPlus.initProperties(_UnaryPlus);
			Fragments._UnionType__UnionType.initProperties(_UnionType);
			Fragments._UnnamedTypeReference__UnnamedTypeReference.initProperties(_UnnamedTypeReference);
			Fragments._VariableCatchBlock__VariableCatchBlock.initProperties(_VariableCatchBlock);
			Fragments._VariableDeclaration__VariableDeclaration.initProperties(_VariableDeclaration);
			Fragments._VariableDefinition__VariableDefinition.initProperties(_VariableDefinition);
			Fragments._Virtual__Virtual.initProperties(_Virtual);
			Fragments._VirtualSpecification__VirtualSpecification.initProperties(_VirtualSpecification);
			Fragments._Visitable__Visitable.initProperties(_Visitable);
			Fragments._Void__Void.initProperties(_Void);
			Fragments._WhileStatement__WhileStatement.initProperties(_WhileStatement);
			Fragments._WideCharacter__WideCharacter.initProperties(_WideCharacter);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::FragmentProperties and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of enumeration literals for each enumeration.
	 */
	public static class EnumerationLiterals {
		static {
			Init.initStart();
			FragmentProperties.init();
		}

		/**
		 *	Install the enumeration literals in the enumerations.
		 */
		static {

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of AstmTables::EnumerationLiterals and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 * The multiple packages above avoid problems with the Java 65536 byte limit but introduce a difficulty in ensuring that
	 * static construction occurs in the disciplined order of the packages when construction may start in any of the packages.
	 * The problem is resolved by ensuring that the static construction of each package first initializes its immediate predecessor.
	 * On completion of predecessor initialization, the residual packages are initialized by starting an initialization in the last package.
	 * This class maintains a count so that the various predecessors can distinguish whether they are the starting point and so
	 * ensure that residual construction occurs just once after all predecessors.
	 */
	private static class Init {
		/**
		 * Counter of nested static constructions. On return to zero residual construction starts. -ve once residual construction started.
		 */
		private static int initCount = 0;

		/**
		 * Invoked at the start of a static construction to defer residual cobstruction until primary constructions complete.
		 */
		private static void initStart() {
			if (initCount >= 0) {
				initCount++;
			}
		}

		/**
		 * Invoked at the end of a static construction to activate residual cobstruction once primary constructions complete.
		 */
		private static void initEnd() {
			if (initCount > 0) {
				if (--initCount == 0) {
					initCount = -1;
					EnumerationLiterals.init();
				}
			}
		}
	}

	static {
		Init.initEnd();
	}

	/*
	 * Force initialization of outer fields. Inner fields are lazily initialized.
	 */
	public static void init() {}
}
