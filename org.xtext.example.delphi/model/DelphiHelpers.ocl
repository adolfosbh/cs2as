import  cs : 'generated/Delphi.ecore#/' 
import  as : 'astm.ecore#/'
	 
package cs
context cs::ident
def : extract() :String =
	null -- to be overriden

context cs::MultipleId
def : extract() : String =	
	id->iterate(x ; acc : String = '' |
		if self.id->indexOf(x) = 1
		then acc + x
		else acc + '.' + x
		endif
	)
	
context cs::ReservedId
def : extract() :String =
	reservedWord.id
	
context cs::MineID
def : extract() :String =
	first
	
context cs::identList
def : extract() :String =
	ids->first().extract()

context cs::designatorPart
def : extract() :String =
	id
		
context cs::exprList
def : createActualParams() : Sequence(as::ActualParameterExpression) =
	self.exps->collect(x | 
		as::ActualParameterExpression { value = x.ast.oclAsType(as::Expression) }
	)

-- fragments

context interfaceDecl
def : getFragments() : Sequence(as::DefinitionObject) =
	Sequence{} -- to be overriden

context declSection
def : getFragments() : Sequence(as::DefinitionObject) =
   Sequence{}  -- to be overriden
   
context constSection
def : getFragments() : Sequence(as::VariableDefinition) =
	self.constantDecl.ast.oclAsType(as::VariableDefinition)

context varSection
def : getFragments() : Sequence(as::VariableDefinition) =
	self.varDecls.ast.oclAsType(as::VariableDefinition)
context typeSection
def : getFragments() : Sequence(as::TypeDefinition) =
	self.typeDecl.ast.oclAsType(as::TypeDefinition)
context procedureDecl
def : getFragments() : Sequence(as::FunctionDefinition) =
	Sequence{self.ast.oclAsType(as::FunctionDefinition)}

context functionDecl
def : getFragments() : Sequence(as::FunctionDefinition) =
	Sequence{self.ast.oclAsType(as::FunctionDefinition)}
	
-- statements

--context statement
--def : getStatements() : OrderedSet(as::Statement) =
--	self.statement.getStatements()
--context unlabelledStatement
--def : getStatements() : OrderedSet(as::Statement) =
--	OrderedSet{self.ast.oclAsType(as::Statement)}
--context compoundStmt
--def : getStatements() : OrderedSet(as::Statement) =
--	self.stamtList.getStatements()
--context stmtList
--def : getStatements() : OrderedSet(as::Statement) =
--	self.statments.getStatements()
endpackage
