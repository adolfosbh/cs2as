source cs : 'generated/Delphi.ecore#/'
target as : 'astm.ecore#/'

helpers {
	cs::ident {
	    extract() : String := null; -- to be overriden
	}
	cs::MultipleId {
	    extract() : String :=	
			id->iterate(x ; acc : String = '' |
				if self.id->indexOf(x) = 1
				then acc + x
				else acc + '.' + x
				endif);
	}
	cs::ReservedId {
		extract() : String :=
			reservedWord.id;
	}
	cs::MineID {
		extract() : String :=
			first;
	}
	cs::identList {
	    extract() : String := 
	    	ids->first().extract();
	}
	cs::designatorPart {
		extract() : String := id;
	}
	cs::exprList {
		createActualParams() : Sequence(as::ActualParameterExpression) :=
			self.exps->collect(x | 
				as::ActualParameterExpression { 
					value = x.ast.oclAsType(as::Expression) });
	}
	-- Helpers to deal with fragments
	cs::interfaceDecl {
		getFragments() : Sequence(as::DefinitionObject) :=
			Sequence{}; -- to be overriden
	}
	cs::declSection {
		getFragments() : Sequence(as::DefinitionObject) :=
   			Sequence{};  -- to be overriden
   	}
	cs::constSection {
		getFragments() : Sequence(as::VariableDefinition) :=
			self.constantDecl.ast.oclAsType(as::VariableDefinition);
	}
	cs::varSection {
		getFragments() : Sequence(as::VariableDefinition) :=
			self.varDecls.ast.oclAsType(as::VariableDefinition);
	}
	cs::typeSection {
		getFragments() : Sequence(as::TypeDefinition) :=
			self.typeDecl.ast.oclAsType(as::TypeDefinition);
	}
	cs::procedureDecl {
		getFragments() : Sequence(as::FunctionDefinition) :=
			Sequence{self.ast.oclAsType(as::FunctionDefinition)};
	}
	cs::functionDecl {
		getFragments() : Sequence(as::FunctionDefinition) :=
			Sequence{self.ast.oclAsType(as::FunctionDefinition)};
	}
	cs::designator {
		getDefinition() : astm::Definition :=
			let method  = lookup(FunctionDefinition, subpart.part.id)
			in if method <> null then method else lookup(VariableDefinition, subpart.part.id) endif;
	}
	cs::withStmt {
		getDefinitions() : Sequence(astm::Definition) :=
			self._vars.ids->collect(x |
   				let method  = lookup(FunctionDefinition, x.extract())
				in if method <> null then method else lookup(VariableDefinition, x.extract()) endif)->excluding(null);
	}
}
mappings {
	create Project from mainRule {
		files := OrderedSet{self.file.trace}; 
	} 
	create DelphiUnit from unit {
		name := as::Name { nameString = id.extract()};
		language := 'Delphi';
		interface := interfaceSect.trace;
		implementation := implementationSect.trace;
		-- openScope TODO: deals with the scope
		locationInfo := as::SourceLocation {
							inSourceFile = as::SourceFile {
							-- ISSUE pathName = path
							}};
	}
	create DelphiInterfaceSection from interfaceSection {
		-- ISSUE uses := uses?.trace;
		fragments := self.interfaceDecl.getFragments();
	}
	create VariableDefinition from constantDecl {
		identifierName := as::Name { nameString = id.extract() };
		initialValue := const.trace;
	}
	create DelphiImplementationSection from implementationSection {
		-- ISSUE uses := uses?.trace;
		-- ISSUE exports := exports.trace;
		fragments := self.declSect.getFragments();
	}
	create LabelDefinition from labelDeclSection {
		-- No additional mappings in Gra2Mol example
	}
	refer Expression from ConstExp :=
		exp.trace;
	refer Expression from MultipleConstExp :=
		exps.trace->first();
	refer Expression from RecordConstExp :=
		exps.constExp.trace->first();
	create TypeDefinition from typeDecl {
		name := as::Name { nameString = id.extract() };
	}
	create VariableDefinition from varDecl  {
		identifierName := as::Name { nameString = idList.extract() };
		definitionType := self.type.trace;
		isMutable := true;
	}
	create FunctionDefinition from procedureDecl {
		identifierName := as::Name{ nameString = heading.id.extract() };
		-- ISSUE formalParameters := heading.formalParams?.params?.trace;
		body := OrderedSet{self.block.trace};
	}
	create FunctionDefinition from functionDecl {
		identifierName := as::Name{ nameString = heading.id.extract() };
		body := OrderedSet{self.block.trace};
	}
	create DelphiBlockStatement from	block {
		declarations := declSect->asSequence()?->collect(getFragments());
		subStatements := OrderedSet{compound.trace};
	}
	refer Statement from statement :=
		self.statement.trace; 
	create BlockStatement from compoundStmt {
		subStatements := stamtList.statments.trace;	
	}
	create ExpressionStatement from assignmentStmnt {
		expression := as::BinaryExpression {
						leftOperand = self.designator.trace,
						operator = as::Assign {},
						rightOperand = exp.trace
			};
	}
	create ExpressionStatement from callStmnt {
		expression := as::FunctionCallExpression {
						calledFunction = self.designator.trace,
						actualParams = args->asSequence()?->collect(createActualParams())
					};
	}
	create DelphiWithStatement from withStmt {
		withs := getDefinitions();
		subStatements :=  OrderedSet{stmt.trace};
	}
	create IfStatement from ifStmt  {
		condition := condition.trace;
		thenBody := _then.trace;
		elseBody := _else?.trace;
	}
	
	create SwitchStatement from caseStmt {
		switchExpression := self.expression.trace;
		cases            := cases.trace;
	}
	create CaseBlock from caseSelector {
--		caseExpressions := labels->collect(x | let first = x.first.trace 
--			                                  in if x.last=null 
--			                                     then first  
--			                                     else first->including(x.last.trace)
--			                                     endif);
		caseExpressions := labels->collect(x | x.first.trace->including(x.last.trace));
		body:= OrderedSet{stmt.trace};
	}

	create TryStatement from tryStmt { 
		guardedStatement := as::BlockStatement{subStatements = self.stmtList.statments.trace};
		finalStatement   := if final = null then null else final.statments->first().ast() endif;
		catchBlocks := OrderedSet{exception.ast()};
	}
	
	create CatchBlock from exceptionBlock {
		_body := as::BlockStatement{
			subStatements = self.elseStmts.statments.trace
		}; 
	}
	
	create IdentifierReference from designator 
		when isIdentifierRef {
		name := as::Name {
					nameString = subpart.part.extract() 
				};
		refersTo := getDefinition();
		
	}
	create QualifiedOverData from designator 
		when isQualifiedOverData {
		name := as::Name {
					nameString = subpart.part.extract() 
				};
		member := self.designator.trace.oclAsType(as::IdentifierReference);
		refersTo := getDefinition();
	}
--	refer as::DefinitionObject from ident :=
--		let method = lookup(FunctionDefinition, subpart.part)
--		in if method <> null 
--		   then method
--		   else lookup(VariableDefinition, subpart.part)
--		   endif;
	create BinaryExpression from relExp {
		leftOperand := left.trace;
		rightOperand := right.trace;
		operator := if self.relOp.op = '=' 
					then as::Equal{}
					else null -- other cases missing
					endif;
	}
	create BinaryExpression from multExp {
		leftOperand := left.trace;
		operator := as::Multiply{};
		rightOperand := right.trace; 
	}
	
	create BinaryExpression from addExp {
		leftOperand := left.trace;
		operator := astm::Add{};
		rightOperand := right.trace; 
	}
	
	refer Expression from simpleFactor :=
		self.designator.trace;
	create IntegerLiteral from factor
		when isANumber {
		value := number;
	}
	create StringLiteral from factor
		when isAString {
		value := string;
	}
	create DelphiFunctionCallExpression from factor
		when isAFunctionCall {
		calledFunction := self.designator.trace;
		actualParams   := expList.createActualParams();
	}
	create UnaryExpression from factor 
		when isNotExp {
				operator := as::Not {};
				operand := exp.trace;
	}
	create NewExpression from factor
		when fall_back {
	}
}

disambiguation {
	factor {
		isANumber := numer <> null;
		isAString := string <> null;
		isAFunctionCall := expList <> null;
		isNotExp := exp <> null;
	}
	designator {
		isIdentifierRef := designator = null;
		isQualifiedOverData := designator <> null;
	}
}

name_resolution {
	targets {
		VariableDefinition using identifierName;
		FunctionDefinition using identifierName;
	}
	
	providers {
		CompilationUnit {
			in current_scope provides
				VariableDefinition using fragments->selectByKind(VariableDefinition)
				FunctionDefinition using fragments->selectByKind(FunctionDefinition);
		}
		
		DelphiBlockStatement {
			in current_scope provides
				VariableDefinition using declarations->selectByKind(VariableDefinition)
				FunctionDefinition using declarations->selectByKind(FunctionDefinition);
		}
	}
}