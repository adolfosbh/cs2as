/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.delphi.services.DelphiGrammarAccess;

@SuppressWarnings("all")
public class DelphiSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DelphiGrammarAccess grammarAccess;
	protected AbstractElementAlias match_caseSelector_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_designatorSubPart_CircumflexAccentKeyword_1_1_a;
	protected AbstractElementAlias match_exceptionBlock_ElseKeyword_2_0_q;
	protected AbstractElementAlias match_exceptionBlock_SemicolonKeyword_1_6_q;
	protected AbstractElementAlias match_exportsItem_IndexKeyword_3_0_q;
	protected AbstractElementAlias match_exportsItem_NameKeyword_2_0_q;
	protected AbstractElementAlias match_fieldList_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_forStmt_DowntoKeyword_4_1_or_ToKeyword_4_0;
	protected AbstractElementAlias match_forStmt_SemicolonKeyword_8_q;
	protected AbstractElementAlias match_formalParm___ConstKeyword_0_1_or_OutKeyword_0_2_or_VarKeyword_0_0__q;
	protected AbstractElementAlias match_functionHeading_ClassKeyword_0_q;
	protected AbstractElementAlias match_ifStmt_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_ifStmt_SemicolonKeyword_5_2_q;
	protected AbstractElementAlias match_methodList___SemicolonKeyword_0_1_0_VirtualKeyword_0_1_1__q;
	protected AbstractElementAlias match_ordIdent_BooleanKeyword_1_7_or_ByteKeyword_1_3_or_CharKeyword_1_8_or_Int64Keyword_1_5_or_IntegerKeyword_1_2_or_LongintKeyword_1_4_or_LongwordKeyword_1_10_or_PcharKeyword_1_11_or_ShortintKeyword_1_0_or_SmallintKeyword_1_1_or_WidecharKeyword_1_9_or_WordKeyword_1_6;
	protected AbstractElementAlias match_parameter___ArrayKeyword_0_2_1_0_0_0_OfKeyword_0_2_1_0_0_1__q;
	protected AbstractElementAlias match_parameter___ColonKeyword_0_2_0_FileKeyword_0_2_1_1__q;
	protected AbstractElementAlias match_pointerType_CircumflexAccentKeyword_0_q;
	protected AbstractElementAlias match_pointerType_PortabilityDirectiveParserRuleCall_2_q;
	protected AbstractElementAlias match_procedureHeading_ClassKeyword_0_q;
	protected AbstractElementAlias match_procedureType___OfKeyword_1_0_ObjectKeyword_1_1__q;
	protected AbstractElementAlias match_propertySpecifiers_NodefaultKeyword_5_1_q;
	protected AbstractElementAlias match_realType_CompKeyword_1_6_or_CurrencyKeyword_1_5_or_DoubleKeyword_1_3_or_ExtendedKeyword_1_4_or_Real48Keyword_1_0_or_RealKeyword_1_1_or_SingleKeyword_1_2;
	protected AbstractElementAlias match_repeatStmt_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_simpleExpression___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q;
	protected AbstractElementAlias match_stmtList_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_stringType_AnsistringKeyword_1_1_or_StringKeyword_1_0_or_WidestringKeyword_1_2;
	protected AbstractElementAlias match_strucType_PackedKeyword_0_q;
	protected AbstractElementAlias match_strucType_PackedKeyword_1_3_1_q;
	protected AbstractElementAlias match_tryStmt_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_typeDecl_TypeKeyword_0_2_q;
	protected AbstractElementAlias match_typeDecl_TypeKeyword_1_2_q;
	protected AbstractElementAlias match_varDecl_PortabilityDirectiveParserRuleCall_4_q;
	protected AbstractElementAlias match_variantType_OlevariantKeyword_1_1_or_VariantKeyword_1_0;
	protected AbstractElementAlias match_whileStmt_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_withStmt_SemicolonKeyword_4_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DelphiGrammarAccess) access;
		match_caseSelector_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getCaseSelectorAccess().getSemicolonKeyword_4());
		match_designatorSubPart_CircumflexAccentKeyword_1_1_a = new TokenAlias(true, true, grammarAccess.getDesignatorSubPartAccess().getCircumflexAccentKeyword_1_1());
		match_exceptionBlock_ElseKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getExceptionBlockAccess().getElseKeyword_2_0());
		match_exceptionBlock_SemicolonKeyword_1_6_q = new TokenAlias(false, true, grammarAccess.getExceptionBlockAccess().getSemicolonKeyword_1_6());
		match_exportsItem_IndexKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getExportsItemAccess().getIndexKeyword_3_0());
		match_exportsItem_NameKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getExportsItemAccess().getNameKeyword_2_0());
		match_fieldList_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getFieldListAccess().getSemicolonKeyword_2());
		match_forStmt_DowntoKeyword_4_1_or_ToKeyword_4_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getForStmtAccess().getDowntoKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getForStmtAccess().getToKeyword_4_0()));
		match_forStmt_SemicolonKeyword_8_q = new TokenAlias(false, true, grammarAccess.getForStmtAccess().getSemicolonKeyword_8());
		match_formalParm___ConstKeyword_0_1_or_OutKeyword_0_2_or_VarKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getFormalParmAccess().getConstKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getFormalParmAccess().getOutKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getFormalParmAccess().getVarKeyword_0_0()));
		match_functionHeading_ClassKeyword_0_q = new TokenAlias(false, true, grammarAccess.getFunctionHeadingAccess().getClassKeyword_0());
		match_ifStmt_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getIfStmtAccess().getSemicolonKeyword_4());
		match_ifStmt_SemicolonKeyword_5_2_q = new TokenAlias(false, true, grammarAccess.getIfStmtAccess().getSemicolonKeyword_5_2());
		match_methodList___SemicolonKeyword_0_1_0_VirtualKeyword_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMethodListAccess().getSemicolonKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getMethodListAccess().getVirtualKeyword_0_1_1()));
		match_ordIdent_BooleanKeyword_1_7_or_ByteKeyword_1_3_or_CharKeyword_1_8_or_Int64Keyword_1_5_or_IntegerKeyword_1_2_or_LongintKeyword_1_4_or_LongwordKeyword_1_10_or_PcharKeyword_1_11_or_ShortintKeyword_1_0_or_SmallintKeyword_1_1_or_WidecharKeyword_1_9_or_WordKeyword_1_6 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getBooleanKeyword_1_7()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getByteKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getCharKeyword_1_8()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getInt64Keyword_1_5()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getIntegerKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getLongintKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getLongwordKeyword_1_10()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getPcharKeyword_1_11()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getShortintKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getSmallintKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getWidecharKeyword_1_9()), new TokenAlias(false, false, grammarAccess.getOrdIdentAccess().getWordKeyword_1_6()));
		match_parameter___ArrayKeyword_0_2_1_0_0_0_OfKeyword_0_2_1_0_0_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getParameterAccess().getArrayKeyword_0_2_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getParameterAccess().getOfKeyword_0_2_1_0_0_1()));
		match_parameter___ColonKeyword_0_2_0_FileKeyword_0_2_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getParameterAccess().getColonKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getParameterAccess().getFileKeyword_0_2_1_1()));
		match_pointerType_CircumflexAccentKeyword_0_q = new TokenAlias(false, true, grammarAccess.getPointerTypeAccess().getCircumflexAccentKeyword_0());
		match_pointerType_PortabilityDirectiveParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getPointerTypeAccess().getPortabilityDirectiveParserRuleCall_2());
		match_procedureHeading_ClassKeyword_0_q = new TokenAlias(false, true, grammarAccess.getProcedureHeadingAccess().getClassKeyword_0());
		match_procedureType___OfKeyword_1_0_ObjectKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getProcedureTypeAccess().getOfKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getProcedureTypeAccess().getObjectKeyword_1_1()));
		match_propertySpecifiers_NodefaultKeyword_5_1_q = new TokenAlias(false, true, grammarAccess.getPropertySpecifiersAccess().getNodefaultKeyword_5_1());
		match_realType_CompKeyword_1_6_or_CurrencyKeyword_1_5_or_DoubleKeyword_1_3_or_ExtendedKeyword_1_4_or_Real48Keyword_1_0_or_RealKeyword_1_1_or_SingleKeyword_1_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRealTypeAccess().getCompKeyword_1_6()), new TokenAlias(false, false, grammarAccess.getRealTypeAccess().getCurrencyKeyword_1_5()), new TokenAlias(false, false, grammarAccess.getRealTypeAccess().getDoubleKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getRealTypeAccess().getExtendedKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getRealTypeAccess().getReal48Keyword_1_0()), new TokenAlias(false, false, grammarAccess.getRealTypeAccess().getRealKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getRealTypeAccess().getSingleKeyword_1_2()));
		match_repeatStmt_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRepeatStmtAccess().getSemicolonKeyword_2());
		match_simpleExpression___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getSimpleExpressionAccess().getHyphenMinusKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSimpleExpressionAccess().getPlusSignKeyword_0_0()));
		match_stmtList_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getStmtListAccess().getSemicolonKeyword_1_1());
		match_stringType_AnsistringKeyword_1_1_or_StringKeyword_1_0_or_WidestringKeyword_1_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStringTypeAccess().getAnsistringKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getStringTypeAccess().getStringKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getStringTypeAccess().getWidestringKeyword_1_2()));
		match_strucType_PackedKeyword_0_q = new TokenAlias(false, true, grammarAccess.getStrucTypeAccess().getPackedKeyword_0());
		match_strucType_PackedKeyword_1_3_1_q = new TokenAlias(false, true, grammarAccess.getStrucTypeAccess().getPackedKeyword_1_3_1());
		match_tryStmt_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getTryStmtAccess().getSemicolonKeyword_2());
		match_typeDecl_TypeKeyword_0_2_q = new TokenAlias(false, true, grammarAccess.getTypeDeclAccess().getTypeKeyword_0_2());
		match_typeDecl_TypeKeyword_1_2_q = new TokenAlias(false, true, grammarAccess.getTypeDeclAccess().getTypeKeyword_1_2());
		match_varDecl_PortabilityDirectiveParserRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getVarDeclAccess().getPortabilityDirectiveParserRuleCall_4());
		match_variantType_OlevariantKeyword_1_1_or_VariantKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVariantTypeAccess().getOlevariantKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getVariantTypeAccess().getVariantKeyword_1_0()));
		match_whileStmt_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getWhileStmtAccess().getSemicolonKeyword_4());
		match_withStmt_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getWithStmtAccess().getSemicolonKeyword_4());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getPortabilityDirectiveRule())
			return getportabilityDirectiveToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * portabilityDirective 
	 * 	: 	'platform'
	 *     	|	'deprecated'
	 *     	|	'library'
	 * 	;
	 */
	protected String getportabilityDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "platform";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_caseSelector_SemicolonKeyword_4_q.equals(syntax))
				emit_caseSelector_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_designatorSubPart_CircumflexAccentKeyword_1_1_a.equals(syntax))
				emit_designatorSubPart_CircumflexAccentKeyword_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_exceptionBlock_ElseKeyword_2_0_q.equals(syntax))
				emit_exceptionBlock_ElseKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_exceptionBlock_SemicolonKeyword_1_6_q.equals(syntax))
				emit_exceptionBlock_SemicolonKeyword_1_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_exportsItem_IndexKeyword_3_0_q.equals(syntax))
				emit_exportsItem_IndexKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_exportsItem_NameKeyword_2_0_q.equals(syntax))
				emit_exportsItem_NameKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_fieldList_SemicolonKeyword_2_q.equals(syntax))
				emit_fieldList_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_forStmt_DowntoKeyword_4_1_or_ToKeyword_4_0.equals(syntax))
				emit_forStmt_DowntoKeyword_4_1_or_ToKeyword_4_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_forStmt_SemicolonKeyword_8_q.equals(syntax))
				emit_forStmt_SemicolonKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_formalParm___ConstKeyword_0_1_or_OutKeyword_0_2_or_VarKeyword_0_0__q.equals(syntax))
				emit_formalParm___ConstKeyword_0_1_or_OutKeyword_0_2_or_VarKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_functionHeading_ClassKeyword_0_q.equals(syntax))
				emit_functionHeading_ClassKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ifStmt_SemicolonKeyword_4_q.equals(syntax))
				emit_ifStmt_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ifStmt_SemicolonKeyword_5_2_q.equals(syntax))
				emit_ifStmt_SemicolonKeyword_5_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_methodList___SemicolonKeyword_0_1_0_VirtualKeyword_0_1_1__q.equals(syntax))
				emit_methodList___SemicolonKeyword_0_1_0_VirtualKeyword_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ordIdent_BooleanKeyword_1_7_or_ByteKeyword_1_3_or_CharKeyword_1_8_or_Int64Keyword_1_5_or_IntegerKeyword_1_2_or_LongintKeyword_1_4_or_LongwordKeyword_1_10_or_PcharKeyword_1_11_or_ShortintKeyword_1_0_or_SmallintKeyword_1_1_or_WidecharKeyword_1_9_or_WordKeyword_1_6.equals(syntax))
				emit_ordIdent_BooleanKeyword_1_7_or_ByteKeyword_1_3_or_CharKeyword_1_8_or_Int64Keyword_1_5_or_IntegerKeyword_1_2_or_LongintKeyword_1_4_or_LongwordKeyword_1_10_or_PcharKeyword_1_11_or_ShortintKeyword_1_0_or_SmallintKeyword_1_1_or_WidecharKeyword_1_9_or_WordKeyword_1_6(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_parameter___ArrayKeyword_0_2_1_0_0_0_OfKeyword_0_2_1_0_0_1__q.equals(syntax))
				emit_parameter___ArrayKeyword_0_2_1_0_0_0_OfKeyword_0_2_1_0_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_parameter___ColonKeyword_0_2_0_FileKeyword_0_2_1_1__q.equals(syntax))
				emit_parameter___ColonKeyword_0_2_0_FileKeyword_0_2_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_pointerType_CircumflexAccentKeyword_0_q.equals(syntax))
				emit_pointerType_CircumflexAccentKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_pointerType_PortabilityDirectiveParserRuleCall_2_q.equals(syntax))
				emit_pointerType_PortabilityDirectiveParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_procedureHeading_ClassKeyword_0_q.equals(syntax))
				emit_procedureHeading_ClassKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_procedureType___OfKeyword_1_0_ObjectKeyword_1_1__q.equals(syntax))
				emit_procedureType___OfKeyword_1_0_ObjectKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_propertySpecifiers_NodefaultKeyword_5_1_q.equals(syntax))
				emit_propertySpecifiers_NodefaultKeyword_5_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_realType_CompKeyword_1_6_or_CurrencyKeyword_1_5_or_DoubleKeyword_1_3_or_ExtendedKeyword_1_4_or_Real48Keyword_1_0_or_RealKeyword_1_1_or_SingleKeyword_1_2.equals(syntax))
				emit_realType_CompKeyword_1_6_or_CurrencyKeyword_1_5_or_DoubleKeyword_1_3_or_ExtendedKeyword_1_4_or_Real48Keyword_1_0_or_RealKeyword_1_1_or_SingleKeyword_1_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_repeatStmt_SemicolonKeyword_2_q.equals(syntax))
				emit_repeatStmt_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_simpleExpression___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q.equals(syntax))
				emit_simpleExpression___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_stmtList_SemicolonKeyword_1_1_q.equals(syntax))
				emit_stmtList_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_stringType_AnsistringKeyword_1_1_or_StringKeyword_1_0_or_WidestringKeyword_1_2.equals(syntax))
				emit_stringType_AnsistringKeyword_1_1_or_StringKeyword_1_0_or_WidestringKeyword_1_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_strucType_PackedKeyword_0_q.equals(syntax))
				emit_strucType_PackedKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_strucType_PackedKeyword_1_3_1_q.equals(syntax))
				emit_strucType_PackedKeyword_1_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_tryStmt_SemicolonKeyword_2_q.equals(syntax))
				emit_tryStmt_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_typeDecl_TypeKeyword_0_2_q.equals(syntax))
				emit_typeDecl_TypeKeyword_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_typeDecl_TypeKeyword_1_2_q.equals(syntax))
				emit_typeDecl_TypeKeyword_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_varDecl_PortabilityDirectiveParserRuleCall_4_q.equals(syntax))
				emit_varDecl_PortabilityDirectiveParserRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variantType_OlevariantKeyword_1_1_or_VariantKeyword_1_0.equals(syntax))
				emit_variantType_OlevariantKeyword_1_1_or_VariantKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_whileStmt_SemicolonKeyword_4_q.equals(syntax))
				emit_whileStmt_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_withStmt_SemicolonKeyword_4_q.equals(syntax))
				emit_withStmt_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmt=statement (ambiguity) (rule end)
	 */
	protected void emit_caseSelector_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'*
	 *
	 * This ambiguous syntax occurs at:
	 *     exprList+=exprList ']' (ambiguity) '[' exprList+=exprList
	 *     exprList+=exprList ']' (ambiguity) (rule end)
	 *     part=designatorPart (ambiguity) '[' exprList+=exprList
	 *     part=designatorPart (ambiguity) (rule end)
	 */
	protected void emit_designatorSubPart_CircumflexAccentKeyword_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) elseStmts=stmtList
	 *     doStmt+=statement ';'? (ambiguity) elseStmts=stmtList
	 */
	protected void emit_exceptionBlock_ElseKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     doStmt+=statement (ambiguity) 'else'? elseStmts=stmtList
	 *     doStmt+=statement (ambiguity) 'on' exceptionId+=ident
	 *     doStmt+=statement (ambiguity) 'on' type+=type
	 *     doStmt+=statement (ambiguity) (rule end)
	 */
	protected void emit_exceptionBlock_SemicolonKeyword_1_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'index'?
	 *
	 * This ambiguous syntax occurs at:
	 *     constExp+=constExpr (ambiguity) (rule end)
	 *     id=ident 'name'? (ambiguity) (rule end)
	 */
	protected void emit_exportsItem_IndexKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'name'?
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ident (ambiguity) 'index'? (rule end)
	 *     id=ident (ambiguity) 'name' constExp+=constExpr
	 */
	protected void emit_exportsItem_NameKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     field+=fieldDecl ';' (ambiguity) (rule end)
	 *     variantSect=variantSection (ambiguity) (rule end)
	 */
	protected void emit_fieldList_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'to' | 'downto'
	 *
	 * This ambiguous syntax occurs at:
	 *     varInit=expression (ambiguity) condition=expression
	 */
	protected void emit_forStmt_DowntoKeyword_4_1_or_ToKeyword_4_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmt=statement (ambiguity) (rule end)
	 */
	protected void emit_forStmt_SemicolonKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('var' | 'const' | 'out')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) param=parameter
	 */
	protected void emit_formalParm___ConstKeyword_0_1_or_OutKeyword_0_2_or_VarKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'class'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'function' id=ident
	 */
	protected void emit_functionHeading_ClassKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     then=statement (ambiguity) 'else' else=statement
	 *     then=statement (ambiguity) (rule end)
	 */
	protected void emit_ifStmt_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     else=statement (ambiguity) (rule end)
	 */
	protected void emit_ifStmt_SemicolonKeyword_5_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (';' 'virtual')?
	 *
	 * This ambiguous syntax occurs at:
	 *     heading=methodHeading (ambiguity) ';' (rule end)
	 *     heading=methodHeading (ambiguity) ';' directive+=directive
	 */
	protected void emit_methodList___SemicolonKeyword_0_1_0_VirtualKeyword_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'shortint' | 
	  *         'smallint' | 
	  *         'integer' | 
	  *         'byte' | 
	  *         'longint' | 
	  *         'int64' | 
	  *         'word' | 
	  *         'boolean' | 
	  *         'char' | 
	  *         'widechar' | 
	  *         'longword' | 
	  *         'pchar'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ordIdent_BooleanKeyword_1_7_or_ByteKeyword_1_3_or_CharKeyword_1_8_or_Int64Keyword_1_5_or_IntegerKeyword_1_2_or_LongintKeyword_1_4_or_LongwordKeyword_1_10_or_PcharKeyword_1_11_or_ShortintKeyword_1_0_or_SmallintKeyword_1_1_or_WidecharKeyword_1_9_or_WordKeyword_1_6(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('array' 'of')?
	 *
	 * This ambiguous syntax occurs at:
	 *     idList=identList ':' (ambiguity) type=type
	 */
	protected void emit_parameter___ArrayKeyword_0_2_1_0_0_0_OfKeyword_0_2_1_0_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':' 'file')?
	 *
	 * This ambiguous syntax occurs at:
	 *     idList=identList (ambiguity) (rule end)
	 */
	protected void emit_parameter___ColonKeyword_0_2_0_FileKeyword_0_2_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) id=qualId
	 *     (rule start) (ambiguity) unitId=unitId
	 */
	protected void emit_pointerType_CircumflexAccentKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     portabilityDirective?
	 *
	 * This ambiguous syntax occurs at:
	 *     id=qualId (ambiguity) (rule end)
	 */
	protected void emit_pointerType_PortabilityDirectiveParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'class'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'procedure' id=ident
	 */
	protected void emit_procedureHeading_ClassKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('of' 'object')?
	 *
	 * This ambiguous syntax occurs at:
	 *     fHeading=functionHeading (ambiguity) (rule end)
	 *     pHeading=procedureHeading (ambiguity) (rule end)
	 */
	protected void emit_procedureType___OfKeyword_1_0_ObjectKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'nodefault'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'implements' implement=typeId
	 *     (rule start) (ambiguity) (rule start)
	 *     index=constExpr (ambiguity) 'implements' implement=typeId
	 *     index=constExpr (ambiguity) (rule end)
	 *     readId=ident (ambiguity) 'implements' implement=typeId
	 *     readId=ident (ambiguity) (rule end)
	 *     storeExp=constExpr (ambiguity) 'implements' implement=typeId
	 *     storeExp=constExpr (ambiguity) (rule end)
	 *     storeId=ident (ambiguity) 'implements' implement=typeId
	 *     storeId=ident (ambiguity) (rule end)
	 *     writeId=ident (ambiguity) 'implements' implement=typeId
	 *     writeId=ident (ambiguity) (rule end)
	 */
	protected void emit_propertySpecifiers_NodefaultKeyword_5_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'real48' | 
	  *         'real' | 
	  *         'single' | 
	  *         'double' | 
	  *         'extended' | 
	  *         'currency' | 
	  *         'comp'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_realType_CompKeyword_1_6_or_CurrencyKeyword_1_5_or_DoubleKeyword_1_3_or_ExtendedKeyword_1_4_or_Real48Keyword_1_0_or_RealKeyword_1_1_or_SingleKeyword_1_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmt=statement (ambiguity) 'until' condition=expression
	 */
	protected void emit_repeatStmt_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' exp=expression
	 *     (rule start) (ambiguity) '@' designator=designator
	 *     (rule start) (ambiguity) 'nil' (rule start)
	 *     (rule start) (ambiguity) 'not' exp=factor
	 *     (rule start) (ambiguity) designator=designator
	 *     (rule start) (ambiguity) number=number
	 *     (rule start) (ambiguity) setConstuctor=setConstructor
	 *     (rule start) (ambiguity) string=string
	 *     (rule start) (ambiguity) typeRef=typeId
	 *     (rule start) (ambiguity) {multExp.left=}
	 */
	protected void emit_simpleExpression___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     statments+=statement (ambiguity) (rule end)
	 *     statments+=statement (ambiguity) statments+=statement
	 */
	protected void emit_stmtList_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'string' | 'ansistring' | 'widestring'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_stringType_AnsistringKeyword_1_1_or_StringKeyword_1_0_or_WidestringKeyword_1_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'packed'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'array' '[' ordinalType+=ordinalType
	 *     (rule start) (ambiguity) 'array' 'of' type=type
	 *     (rule start) (ambiguity) 'file' 'of' typeRef=typeId
	 *     (rule start) (ambiguity) 'record' 'end' 'packed'? (rule start)
	 *     (rule start) (ambiguity) 'record' 'end' port=portabilityDirective
	 *     (rule start) (ambiguity) 'record' fields=fieldList
	 *     (rule start) (ambiguity) 'set' 'of' ordinal=ordinalType
	 */
	protected void emit_strucType_PackedKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'packed'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'packed'? 'record' 'end' (ambiguity) (rule start)
	 *     fields=fieldList 'end' (ambiguity) (rule end)
	 *     port=portabilityDirective (ambiguity) (rule end)
	 */
	protected void emit_strucType_PackedKeyword_1_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmtList=stmtList (ambiguity) 'except' exception=exceptionBlock
	 *     stmtList=stmtList (ambiguity) 'finally' final=stmtList
	 */
	protected void emit_tryStmt_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'type'?
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ident '=' (ambiguity) type=type
	 */
	protected void emit_typeDecl_TypeKeyword_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'type'?
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ident '=' (ambiguity) restrictedType=restrictedType
	 */
	protected void emit_typeDecl_TypeKeyword_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     portabilityDirective?
	 *
	 * This ambiguous syntax occurs at:
	 *     absConst=constExpr (ambiguity) (rule end)
	 *     absId=ident (ambiguity) (rule end)
	 *     absIniti=constExpr (ambiguity) (rule end)
	 *     type=type (ambiguity) (rule end)
	 */
	protected void emit_varDecl_PortabilityDirectiveParserRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'variant' | 'olevariant'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_variantType_OlevariantKeyword_1_1_or_VariantKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmt=statement (ambiguity) (rule end)
	 */
	protected void emit_whileStmt_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmt=statement (ambiguity) (rule end)
	 */
	protected void emit_withStmt_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
