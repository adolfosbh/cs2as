/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.ident;
import org.xtext.example.delphi.delphi.recVariant;
import org.xtext.example.delphi.delphi.typeId;
import org.xtext.example.delphi.delphi.variantSection;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>variant Section</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.variantSectionImpl#getId <em>Id</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.variantSectionImpl#getTypeRef <em>Type Ref</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.variantSectionImpl#getRecVariants <em>Rec Variants</em>}</li>
 * </ul>
 *
 * @generated
 */
public class variantSectionImpl extends CSTraceImpl implements variantSection
{
  /**
	 * The cached value of the '{@link #getId() <em>Id</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getId()
	 * @generated
	 * @ordered
	 */
  protected ident id;

  /**
	 * The cached value of the '{@link #getTypeRef() <em>Type Ref</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getTypeRef()
	 * @generated
	 * @ordered
	 */
  protected typeId typeRef;

  /**
	 * The cached value of the '{@link #getRecVariants() <em>Rec Variants</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getRecVariants()
	 * @generated
	 * @ordered
	 */
  protected EList<recVariant> recVariants;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected variantSectionImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return DelphiPackage.Literals.VARIANT_SECTION;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ident getId()
  {
		return id;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetId(ident newId, NotificationChain msgs)
  {
		ident oldId = id;
		id = newId;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.VARIANT_SECTION__ID, oldId, newId);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setId(ident newId)
  {
		if (newId != id) {
			NotificationChain msgs = null;
			if (id != null)
				msgs = ((InternalEObject)id).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.VARIANT_SECTION__ID, null, msgs);
			if (newId != null)
				msgs = ((InternalEObject)newId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.VARIANT_SECTION__ID, null, msgs);
			msgs = basicSetId(newId, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.VARIANT_SECTION__ID, newId, newId));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public typeId getTypeRef()
  {
		return typeRef;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetTypeRef(typeId newTypeRef, NotificationChain msgs)
  {
		typeId oldTypeRef = typeRef;
		typeRef = newTypeRef;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.VARIANT_SECTION__TYPE_REF, oldTypeRef, newTypeRef);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setTypeRef(typeId newTypeRef)
  {
		if (newTypeRef != typeRef) {
			NotificationChain msgs = null;
			if (typeRef != null)
				msgs = ((InternalEObject)typeRef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.VARIANT_SECTION__TYPE_REF, null, msgs);
			if (newTypeRef != null)
				msgs = ((InternalEObject)newTypeRef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.VARIANT_SECTION__TYPE_REF, null, msgs);
			msgs = basicSetTypeRef(newTypeRef, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.VARIANT_SECTION__TYPE_REF, newTypeRef, newTypeRef));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public EList<recVariant> getRecVariants()
  {
		if (recVariants == null) {
			recVariants = new EObjectContainmentEList<recVariant>(recVariant.class, this, DelphiPackage.VARIANT_SECTION__REC_VARIANTS);
		}
		return recVariants;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case DelphiPackage.VARIANT_SECTION__ID:
				return basicSetId(null, msgs);
			case DelphiPackage.VARIANT_SECTION__TYPE_REF:
				return basicSetTypeRef(null, msgs);
			case DelphiPackage.VARIANT_SECTION__REC_VARIANTS:
				return ((InternalEList<?>)getRecVariants()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case DelphiPackage.VARIANT_SECTION__ID:
				return getId();
			case DelphiPackage.VARIANT_SECTION__TYPE_REF:
				return getTypeRef();
			case DelphiPackage.VARIANT_SECTION__REC_VARIANTS:
				return getRecVariants();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case DelphiPackage.VARIANT_SECTION__ID:
				setId((ident)newValue);
				return;
			case DelphiPackage.VARIANT_SECTION__TYPE_REF:
				setTypeRef((typeId)newValue);
				return;
			case DelphiPackage.VARIANT_SECTION__REC_VARIANTS:
				getRecVariants().clear();
				getRecVariants().addAll((Collection<? extends recVariant>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.VARIANT_SECTION__ID:
				setId((ident)null);
				return;
			case DelphiPackage.VARIANT_SECTION__TYPE_REF:
				setTypeRef((typeId)null);
				return;
			case DelphiPackage.VARIANT_SECTION__REC_VARIANTS:
				getRecVariants().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.VARIANT_SECTION__ID:
				return id != null;
			case DelphiPackage.VARIANT_SECTION__TYPE_REF:
				return typeRef != null;
			case DelphiPackage.VARIANT_SECTION__REC_VARIANTS:
				return recVariants != null && !recVariants.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //variantSectionImpl
