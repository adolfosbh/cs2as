/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.exceptionBlock;
import org.xtext.example.delphi.delphi.stmtList;
import org.xtext.example.delphi.delphi.tryStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>try Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.tryStmtImpl#getStmtList <em>Stmt List</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.tryStmtImpl#getException <em>Exception</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.tryStmtImpl#getFinal <em>Final</em>}</li>
 * </ul>
 *
 * @generated
 */
public class tryStmtImpl extends structStmtImpl implements tryStmt
{
  /**
   * The cached value of the '{@link #getStmtList() <em>Stmt List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmtList()
   * @generated
   * @ordered
   */
  protected stmtList stmtList;

  /**
   * The cached value of the '{@link #getException() <em>Exception</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getException()
   * @generated
   * @ordered
   */
  protected exceptionBlock exception;

  /**
   * The cached value of the '{@link #getFinal() <em>Final</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinal()
   * @generated
   * @ordered
   */
  protected stmtList final_;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected tryStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DelphiPackage.Literals.TRY_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public stmtList getStmtList()
  {
    return stmtList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmtList(stmtList newStmtList, NotificationChain msgs)
  {
    stmtList oldStmtList = stmtList;
    stmtList = newStmtList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.TRY_STMT__STMT_LIST, oldStmtList, newStmtList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStmtList(stmtList newStmtList)
  {
    if (newStmtList != stmtList)
    {
      NotificationChain msgs = null;
      if (stmtList != null)
        msgs = ((InternalEObject)stmtList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TRY_STMT__STMT_LIST, null, msgs);
      if (newStmtList != null)
        msgs = ((InternalEObject)newStmtList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TRY_STMT__STMT_LIST, null, msgs);
      msgs = basicSetStmtList(newStmtList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.TRY_STMT__STMT_LIST, newStmtList, newStmtList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public exceptionBlock getException()
  {
    return exception;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetException(exceptionBlock newException, NotificationChain msgs)
  {
    exceptionBlock oldException = exception;
    exception = newException;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.TRY_STMT__EXCEPTION, oldException, newException);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setException(exceptionBlock newException)
  {
    if (newException != exception)
    {
      NotificationChain msgs = null;
      if (exception != null)
        msgs = ((InternalEObject)exception).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TRY_STMT__EXCEPTION, null, msgs);
      if (newException != null)
        msgs = ((InternalEObject)newException).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TRY_STMT__EXCEPTION, null, msgs);
      msgs = basicSetException(newException, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.TRY_STMT__EXCEPTION, newException, newException));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public stmtList getFinal()
  {
    return final_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFinal(stmtList newFinal, NotificationChain msgs)
  {
    stmtList oldFinal = final_;
    final_ = newFinal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.TRY_STMT__FINAL, oldFinal, newFinal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFinal(stmtList newFinal)
  {
    if (newFinal != final_)
    {
      NotificationChain msgs = null;
      if (final_ != null)
        msgs = ((InternalEObject)final_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TRY_STMT__FINAL, null, msgs);
      if (newFinal != null)
        msgs = ((InternalEObject)newFinal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TRY_STMT__FINAL, null, msgs);
      msgs = basicSetFinal(newFinal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.TRY_STMT__FINAL, newFinal, newFinal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DelphiPackage.TRY_STMT__STMT_LIST:
        return basicSetStmtList(null, msgs);
      case DelphiPackage.TRY_STMT__EXCEPTION:
        return basicSetException(null, msgs);
      case DelphiPackage.TRY_STMT__FINAL:
        return basicSetFinal(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DelphiPackage.TRY_STMT__STMT_LIST:
        return getStmtList();
      case DelphiPackage.TRY_STMT__EXCEPTION:
        return getException();
      case DelphiPackage.TRY_STMT__FINAL:
        return getFinal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DelphiPackage.TRY_STMT__STMT_LIST:
        setStmtList((stmtList)newValue);
        return;
      case DelphiPackage.TRY_STMT__EXCEPTION:
        setException((exceptionBlock)newValue);
        return;
      case DelphiPackage.TRY_STMT__FINAL:
        setFinal((stmtList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.TRY_STMT__STMT_LIST:
        setStmtList((stmtList)null);
        return;
      case DelphiPackage.TRY_STMT__EXCEPTION:
        setException((exceptionBlock)null);
        return;
      case DelphiPackage.TRY_STMT__FINAL:
        setFinal((stmtList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.TRY_STMT__STMT_LIST:
        return stmtList != null;
      case DelphiPackage.TRY_STMT__EXCEPTION:
        return exception != null;
      case DelphiPackage.TRY_STMT__FINAL:
        return final_ != null;
    }
    return super.eIsSet(featureID);
  }

} //tryStmtImpl
