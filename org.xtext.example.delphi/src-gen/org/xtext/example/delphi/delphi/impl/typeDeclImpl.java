/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.ident;
import org.xtext.example.delphi.delphi.restrictedType;
import org.xtext.example.delphi.delphi.type;
import org.xtext.example.delphi.delphi.typeDecl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>type Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.typeDeclImpl#getId <em>Id</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.typeDeclImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.typeDeclImpl#getPort <em>Port</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.typeDeclImpl#getRestrictedType <em>Restricted Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class typeDeclImpl extends CSTraceImpl implements typeDecl
{
  /**
	 * The cached value of the '{@link #getId() <em>Id</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getId()
	 * @generated
	 * @ordered
	 */
  protected ident id;

  /**
	 * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getType()
	 * @generated
	 * @ordered
	 */
  protected type type;

  /**
	 * The default value of the '{@link #getPort() <em>Port</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getPort()
	 * @generated
	 * @ordered
	 */
  protected static final String PORT_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getPort() <em>Port</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getPort()
	 * @generated
	 * @ordered
	 */
  protected String port = PORT_EDEFAULT;

  /**
	 * The cached value of the '{@link #getRestrictedType() <em>Restricted Type</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getRestrictedType()
	 * @generated
	 * @ordered
	 */
  protected restrictedType restrictedType;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected typeDeclImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return DelphiPackage.Literals.TYPE_DECL;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ident getId()
  {
		return id;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetId(ident newId, NotificationChain msgs)
  {
		ident oldId = id;
		id = newId;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.TYPE_DECL__ID, oldId, newId);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setId(ident newId)
  {
		if (newId != id) {
			NotificationChain msgs = null;
			if (id != null)
				msgs = ((InternalEObject)id).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TYPE_DECL__ID, null, msgs);
			if (newId != null)
				msgs = ((InternalEObject)newId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TYPE_DECL__ID, null, msgs);
			msgs = basicSetId(newId, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.TYPE_DECL__ID, newId, newId));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public type getType()
  {
		return type;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetType(type newType, NotificationChain msgs)
  {
		type oldType = type;
		type = newType;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.TYPE_DECL__TYPE, oldType, newType);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setType(type newType)
  {
		if (newType != type) {
			NotificationChain msgs = null;
			if (type != null)
				msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TYPE_DECL__TYPE, null, msgs);
			if (newType != null)
				msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TYPE_DECL__TYPE, null, msgs);
			msgs = basicSetType(newType, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.TYPE_DECL__TYPE, newType, newType));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String getPort()
  {
		return port;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setPort(String newPort)
  {
		String oldPort = port;
		port = newPort;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.TYPE_DECL__PORT, oldPort, port));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public restrictedType getRestrictedType()
  {
		return restrictedType;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetRestrictedType(restrictedType newRestrictedType, NotificationChain msgs)
  {
		restrictedType oldRestrictedType = restrictedType;
		restrictedType = newRestrictedType;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.TYPE_DECL__RESTRICTED_TYPE, oldRestrictedType, newRestrictedType);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setRestrictedType(restrictedType newRestrictedType)
  {
		if (newRestrictedType != restrictedType) {
			NotificationChain msgs = null;
			if (restrictedType != null)
				msgs = ((InternalEObject)restrictedType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TYPE_DECL__RESTRICTED_TYPE, null, msgs);
			if (newRestrictedType != null)
				msgs = ((InternalEObject)newRestrictedType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.TYPE_DECL__RESTRICTED_TYPE, null, msgs);
			msgs = basicSetRestrictedType(newRestrictedType, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.TYPE_DECL__RESTRICTED_TYPE, newRestrictedType, newRestrictedType));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case DelphiPackage.TYPE_DECL__ID:
				return basicSetId(null, msgs);
			case DelphiPackage.TYPE_DECL__TYPE:
				return basicSetType(null, msgs);
			case DelphiPackage.TYPE_DECL__RESTRICTED_TYPE:
				return basicSetRestrictedType(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case DelphiPackage.TYPE_DECL__ID:
				return getId();
			case DelphiPackage.TYPE_DECL__TYPE:
				return getType();
			case DelphiPackage.TYPE_DECL__PORT:
				return getPort();
			case DelphiPackage.TYPE_DECL__RESTRICTED_TYPE:
				return getRestrictedType();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case DelphiPackage.TYPE_DECL__ID:
				setId((ident)newValue);
				return;
			case DelphiPackage.TYPE_DECL__TYPE:
				setType((type)newValue);
				return;
			case DelphiPackage.TYPE_DECL__PORT:
				setPort((String)newValue);
				return;
			case DelphiPackage.TYPE_DECL__RESTRICTED_TYPE:
				setRestrictedType((restrictedType)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.TYPE_DECL__ID:
				setId((ident)null);
				return;
			case DelphiPackage.TYPE_DECL__TYPE:
				setType((type)null);
				return;
			case DelphiPackage.TYPE_DECL__PORT:
				setPort(PORT_EDEFAULT);
				return;
			case DelphiPackage.TYPE_DECL__RESTRICTED_TYPE:
				setRestrictedType((restrictedType)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.TYPE_DECL__ID:
				return id != null;
			case DelphiPackage.TYPE_DECL__TYPE:
				return type != null;
			case DelphiPackage.TYPE_DECL__PORT:
				return PORT_EDEFAULT == null ? port != null : !PORT_EDEFAULT.equals(port);
			case DelphiPackage.TYPE_DECL__RESTRICTED_TYPE:
				return restrictedType != null;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (port: ");
		result.append(port);
		result.append(')');
		return result.toString();
	}

} //typeDeclImpl
