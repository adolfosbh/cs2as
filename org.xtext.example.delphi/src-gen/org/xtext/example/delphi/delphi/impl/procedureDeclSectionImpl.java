/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.block;
import org.xtext.example.delphi.delphi.directive;
import org.xtext.example.delphi.delphi.procedureDeclSection;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>procedure Decl Section</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.procedureDeclSectionImpl#getDirective <em>Directive</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.procedureDeclSectionImpl#getPort <em>Port</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.procedureDeclSectionImpl#getBlock <em>Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class procedureDeclSectionImpl extends declSectionImpl implements procedureDeclSection
{
  /**
	 * The cached value of the '{@link #getDirective() <em>Directive</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDirective()
	 * @generated
	 * @ordered
	 */
  protected directive directive;

  /**
	 * The default value of the '{@link #getPort() <em>Port</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getPort()
	 * @generated
	 * @ordered
	 */
  protected static final String PORT_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getPort() <em>Port</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getPort()
	 * @generated
	 * @ordered
	 */
  protected String port = PORT_EDEFAULT;

  /**
	 * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getBlock()
	 * @generated
	 * @ordered
	 */
  protected block block;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected procedureDeclSectionImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return DelphiPackage.Literals.PROCEDURE_DECL_SECTION;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public directive getDirective()
  {
		return directive;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetDirective(directive newDirective, NotificationChain msgs)
  {
		directive oldDirective = directive;
		directive = newDirective;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE, oldDirective, newDirective);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setDirective(directive newDirective)
  {
		if (newDirective != directive) {
			NotificationChain msgs = null;
			if (directive != null)
				msgs = ((InternalEObject)directive).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE, null, msgs);
			if (newDirective != null)
				msgs = ((InternalEObject)newDirective).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE, null, msgs);
			msgs = basicSetDirective(newDirective, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE, newDirective, newDirective));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String getPort()
  {
		return port;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setPort(String newPort)
  {
		String oldPort = port;
		port = newPort;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.PROCEDURE_DECL_SECTION__PORT, oldPort, port));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public block getBlock()
  {
		return block;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetBlock(block newBlock, NotificationChain msgs)
  {
		block oldBlock = block;
		block = newBlock;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK, oldBlock, newBlock);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setBlock(block newBlock)
  {
		if (newBlock != block) {
			NotificationChain msgs = null;
			if (block != null)
				msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK, null, msgs);
			if (newBlock != null)
				msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK, null, msgs);
			msgs = basicSetBlock(newBlock, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK, newBlock, newBlock));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE:
				return basicSetDirective(null, msgs);
			case DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK:
				return basicSetBlock(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE:
				return getDirective();
			case DelphiPackage.PROCEDURE_DECL_SECTION__PORT:
				return getPort();
			case DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK:
				return getBlock();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE:
				setDirective((directive)newValue);
				return;
			case DelphiPackage.PROCEDURE_DECL_SECTION__PORT:
				setPort((String)newValue);
				return;
			case DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK:
				setBlock((block)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE:
				setDirective((directive)null);
				return;
			case DelphiPackage.PROCEDURE_DECL_SECTION__PORT:
				setPort(PORT_EDEFAULT);
				return;
			case DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK:
				setBlock((block)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.PROCEDURE_DECL_SECTION__DIRECTIVE:
				return directive != null;
			case DelphiPackage.PROCEDURE_DECL_SECTION__PORT:
				return PORT_EDEFAULT == null ? port != null : !PORT_EDEFAULT.equals(port);
			case DelphiPackage.PROCEDURE_DECL_SECTION__BLOCK:
				return block != null;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (port: ");
		result.append(port);
		result.append(')');
		return result.toString();
	}

} //procedureDeclSectionImpl
