/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.ident;
import org.xtext.example.delphi.delphi.propertyInterface;
import org.xtext.example.delphi.delphi.propertyList;
import org.xtext.example.delphi.delphi.propertySpecifiers;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>property List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.propertyListImpl#getId <em>Id</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.propertyListImpl#getInterface <em>Interface</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.propertyListImpl#getSpecifiers <em>Specifiers</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.propertyListImpl#getPort <em>Port</em>}</li>
 * </ul>
 *
 * @generated
 */
public class propertyListImpl extends MinimalEObjectImpl.Container implements propertyList
{
  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected ident id;

  /**
   * The cached value of the '{@link #getInterface() <em>Interface</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterface()
   * @generated
   * @ordered
   */
  protected propertyInterface interface_;

  /**
   * The cached value of the '{@link #getSpecifiers() <em>Specifiers</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecifiers()
   * @generated
   * @ordered
   */
  protected propertySpecifiers specifiers;

  /**
   * The default value of the '{@link #getPort() <em>Port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected static final String PORT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPort() <em>Port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected String port = PORT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected propertyListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DelphiPackage.Literals.PROPERTY_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ident getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetId(ident newId, NotificationChain msgs)
  {
    ident oldId = id;
    id = newId;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.PROPERTY_LIST__ID, oldId, newId);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setId(ident newId)
  {
    if (newId != id)
    {
      NotificationChain msgs = null;
      if (id != null)
        msgs = ((InternalEObject)id).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROPERTY_LIST__ID, null, msgs);
      if (newId != null)
        msgs = ((InternalEObject)newId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROPERTY_LIST__ID, null, msgs);
      msgs = basicSetId(newId, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.PROPERTY_LIST__ID, newId, newId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public propertyInterface getInterface()
  {
    return interface_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInterface(propertyInterface newInterface, NotificationChain msgs)
  {
    propertyInterface oldInterface = interface_;
    interface_ = newInterface;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.PROPERTY_LIST__INTERFACE, oldInterface, newInterface);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInterface(propertyInterface newInterface)
  {
    if (newInterface != interface_)
    {
      NotificationChain msgs = null;
      if (interface_ != null)
        msgs = ((InternalEObject)interface_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROPERTY_LIST__INTERFACE, null, msgs);
      if (newInterface != null)
        msgs = ((InternalEObject)newInterface).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROPERTY_LIST__INTERFACE, null, msgs);
      msgs = basicSetInterface(newInterface, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.PROPERTY_LIST__INTERFACE, newInterface, newInterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public propertySpecifiers getSpecifiers()
  {
    return specifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSpecifiers(propertySpecifiers newSpecifiers, NotificationChain msgs)
  {
    propertySpecifiers oldSpecifiers = specifiers;
    specifiers = newSpecifiers;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.PROPERTY_LIST__SPECIFIERS, oldSpecifiers, newSpecifiers);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSpecifiers(propertySpecifiers newSpecifiers)
  {
    if (newSpecifiers != specifiers)
    {
      NotificationChain msgs = null;
      if (specifiers != null)
        msgs = ((InternalEObject)specifiers).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROPERTY_LIST__SPECIFIERS, null, msgs);
      if (newSpecifiers != null)
        msgs = ((InternalEObject)newSpecifiers).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.PROPERTY_LIST__SPECIFIERS, null, msgs);
      msgs = basicSetSpecifiers(newSpecifiers, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.PROPERTY_LIST__SPECIFIERS, newSpecifiers, newSpecifiers));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPort()
  {
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPort(String newPort)
  {
    String oldPort = port;
    port = newPort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.PROPERTY_LIST__PORT, oldPort, port));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DelphiPackage.PROPERTY_LIST__ID:
        return basicSetId(null, msgs);
      case DelphiPackage.PROPERTY_LIST__INTERFACE:
        return basicSetInterface(null, msgs);
      case DelphiPackage.PROPERTY_LIST__SPECIFIERS:
        return basicSetSpecifiers(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DelphiPackage.PROPERTY_LIST__ID:
        return getId();
      case DelphiPackage.PROPERTY_LIST__INTERFACE:
        return getInterface();
      case DelphiPackage.PROPERTY_LIST__SPECIFIERS:
        return getSpecifiers();
      case DelphiPackage.PROPERTY_LIST__PORT:
        return getPort();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DelphiPackage.PROPERTY_LIST__ID:
        setId((ident)newValue);
        return;
      case DelphiPackage.PROPERTY_LIST__INTERFACE:
        setInterface((propertyInterface)newValue);
        return;
      case DelphiPackage.PROPERTY_LIST__SPECIFIERS:
        setSpecifiers((propertySpecifiers)newValue);
        return;
      case DelphiPackage.PROPERTY_LIST__PORT:
        setPort((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.PROPERTY_LIST__ID:
        setId((ident)null);
        return;
      case DelphiPackage.PROPERTY_LIST__INTERFACE:
        setInterface((propertyInterface)null);
        return;
      case DelphiPackage.PROPERTY_LIST__SPECIFIERS:
        setSpecifiers((propertySpecifiers)null);
        return;
      case DelphiPackage.PROPERTY_LIST__PORT:
        setPort(PORT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.PROPERTY_LIST__ID:
        return id != null;
      case DelphiPackage.PROPERTY_LIST__INTERFACE:
        return interface_ != null;
      case DelphiPackage.PROPERTY_LIST__SPECIFIERS:
        return specifiers != null;
      case DelphiPackage.PROPERTY_LIST__PORT:
        return PORT_EDEFAULT == null ? port != null : !PORT_EDEFAULT.equals(port);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (port: ");
    result.append(port);
    result.append(')');
    return result.toString();
  }

} //propertyListImpl
