/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.constExpr;
import org.xtext.example.delphi.delphi.directive;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>directive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.directiveImpl#getDir <em>Dir</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.directiveImpl#getMessageExp <em>Message Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class directiveImpl extends MinimalEObjectImpl.Container implements directive
{
  /**
   * The default value of the '{@link #getDir() <em>Dir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDir()
   * @generated
   * @ordered
   */
  protected static final String DIR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDir() <em>Dir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDir()
   * @generated
   * @ordered
   */
  protected String dir = DIR_EDEFAULT;

  /**
   * The cached value of the '{@link #getMessageExp() <em>Message Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessageExp()
   * @generated
   * @ordered
   */
  protected constExpr messageExp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected directiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DelphiPackage.Literals.DIRECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDir()
  {
    return dir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDir(String newDir)
  {
    String oldDir = dir;
    dir = newDir;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.DIRECTIVE__DIR, oldDir, dir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public constExpr getMessageExp()
  {
    return messageExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMessageExp(constExpr newMessageExp, NotificationChain msgs)
  {
    constExpr oldMessageExp = messageExp;
    messageExp = newMessageExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.DIRECTIVE__MESSAGE_EXP, oldMessageExp, newMessageExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMessageExp(constExpr newMessageExp)
  {
    if (newMessageExp != messageExp)
    {
      NotificationChain msgs = null;
      if (messageExp != null)
        msgs = ((InternalEObject)messageExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.DIRECTIVE__MESSAGE_EXP, null, msgs);
      if (newMessageExp != null)
        msgs = ((InternalEObject)newMessageExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.DIRECTIVE__MESSAGE_EXP, null, msgs);
      msgs = basicSetMessageExp(newMessageExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.DIRECTIVE__MESSAGE_EXP, newMessageExp, newMessageExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DelphiPackage.DIRECTIVE__MESSAGE_EXP:
        return basicSetMessageExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DelphiPackage.DIRECTIVE__DIR:
        return getDir();
      case DelphiPackage.DIRECTIVE__MESSAGE_EXP:
        return getMessageExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DelphiPackage.DIRECTIVE__DIR:
        setDir((String)newValue);
        return;
      case DelphiPackage.DIRECTIVE__MESSAGE_EXP:
        setMessageExp((constExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.DIRECTIVE__DIR:
        setDir(DIR_EDEFAULT);
        return;
      case DelphiPackage.DIRECTIVE__MESSAGE_EXP:
        setMessageExp((constExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.DIRECTIVE__DIR:
        return DIR_EDEFAULT == null ? dir != null : !DIR_EDEFAULT.equals(dir);
      case DelphiPackage.DIRECTIVE__MESSAGE_EXP:
        return messageExp != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (dir: ");
    result.append(dir);
    result.append(')');
    return result.toString();
  }

} //directiveImpl
