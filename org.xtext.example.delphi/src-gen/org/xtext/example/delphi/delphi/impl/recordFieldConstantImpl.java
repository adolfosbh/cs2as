/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.ident;
import org.xtext.example.delphi.delphi.recordFieldConstant;
import org.xtext.example.delphi.delphi.typedConstant;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>record Field Constant</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.recordFieldConstantImpl#getId <em>Id</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.recordFieldConstantImpl#getTpedConstant <em>Tped Constant</em>}</li>
 * </ul>
 *
 * @generated
 */
public class recordFieldConstantImpl extends MinimalEObjectImpl.Container implements recordFieldConstant
{
  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected ident id;

  /**
   * The cached value of the '{@link #getTpedConstant() <em>Tped Constant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTpedConstant()
   * @generated
   * @ordered
   */
  protected typedConstant tpedConstant;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected recordFieldConstantImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DelphiPackage.Literals.RECORD_FIELD_CONSTANT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ident getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetId(ident newId, NotificationChain msgs)
  {
    ident oldId = id;
    id = newId;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.RECORD_FIELD_CONSTANT__ID, oldId, newId);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setId(ident newId)
  {
    if (newId != id)
    {
      NotificationChain msgs = null;
      if (id != null)
        msgs = ((InternalEObject)id).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.RECORD_FIELD_CONSTANT__ID, null, msgs);
      if (newId != null)
        msgs = ((InternalEObject)newId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.RECORD_FIELD_CONSTANT__ID, null, msgs);
      msgs = basicSetId(newId, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.RECORD_FIELD_CONSTANT__ID, newId, newId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typedConstant getTpedConstant()
  {
    return tpedConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTpedConstant(typedConstant newTpedConstant, NotificationChain msgs)
  {
    typedConstant oldTpedConstant = tpedConstant;
    tpedConstant = newTpedConstant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT, oldTpedConstant, newTpedConstant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTpedConstant(typedConstant newTpedConstant)
  {
    if (newTpedConstant != tpedConstant)
    {
      NotificationChain msgs = null;
      if (tpedConstant != null)
        msgs = ((InternalEObject)tpedConstant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT, null, msgs);
      if (newTpedConstant != null)
        msgs = ((InternalEObject)newTpedConstant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT, null, msgs);
      msgs = basicSetTpedConstant(newTpedConstant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT, newTpedConstant, newTpedConstant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DelphiPackage.RECORD_FIELD_CONSTANT__ID:
        return basicSetId(null, msgs);
      case DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT:
        return basicSetTpedConstant(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DelphiPackage.RECORD_FIELD_CONSTANT__ID:
        return getId();
      case DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT:
        return getTpedConstant();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DelphiPackage.RECORD_FIELD_CONSTANT__ID:
        setId((ident)newValue);
        return;
      case DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT:
        setTpedConstant((typedConstant)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.RECORD_FIELD_CONSTANT__ID:
        setId((ident)null);
        return;
      case DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT:
        setTpedConstant((typedConstant)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.RECORD_FIELD_CONSTANT__ID:
        return id != null;
      case DelphiPackage.RECORD_FIELD_CONSTANT__TPED_CONSTANT:
        return tpedConstant != null;
    }
    return super.eIsSet(featureID);
  }

} //recordFieldConstantImpl
