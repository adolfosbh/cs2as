/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.addExp;
import org.xtext.example.delphi.delphi.addOp;
import org.xtext.example.delphi.delphi.simpleExpression;
import org.xtext.example.delphi.delphi.term;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>add Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.addExpImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.addExpImpl#getAddOp <em>Add Op</em>}</li>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.addExpImpl#getRight <em>Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class addExpImpl extends simpleExpressionImpl implements addExp
{
  /**
	 * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLeft()
	 * @generated
	 * @ordered
	 */
  protected simpleExpression left;

  /**
	 * The cached value of the '{@link #getAddOp() <em>Add Op</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAddOp()
	 * @generated
	 * @ordered
	 */
  protected addOp addOp;

  /**
	 * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getRight()
	 * @generated
	 * @ordered
	 */
  protected term right;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected addExpImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return DelphiPackage.Literals.ADD_EXP;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public simpleExpression getLeft()
  {
		return left;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetLeft(simpleExpression newLeft, NotificationChain msgs)
  {
		simpleExpression oldLeft = left;
		left = newLeft;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.ADD_EXP__LEFT, oldLeft, newLeft);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setLeft(simpleExpression newLeft)
  {
		if (newLeft != left) {
			NotificationChain msgs = null;
			if (left != null)
				msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.ADD_EXP__LEFT, null, msgs);
			if (newLeft != null)
				msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.ADD_EXP__LEFT, null, msgs);
			msgs = basicSetLeft(newLeft, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.ADD_EXP__LEFT, newLeft, newLeft));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public addOp getAddOp()
  {
		return addOp;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetAddOp(addOp newAddOp, NotificationChain msgs)
  {
		addOp oldAddOp = addOp;
		addOp = newAddOp;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.ADD_EXP__ADD_OP, oldAddOp, newAddOp);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setAddOp(addOp newAddOp)
  {
		if (newAddOp != addOp) {
			NotificationChain msgs = null;
			if (addOp != null)
				msgs = ((InternalEObject)addOp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.ADD_EXP__ADD_OP, null, msgs);
			if (newAddOp != null)
				msgs = ((InternalEObject)newAddOp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.ADD_EXP__ADD_OP, null, msgs);
			msgs = basicSetAddOp(newAddOp, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.ADD_EXP__ADD_OP, newAddOp, newAddOp));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public term getRight()
  {
		return right;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetRight(term newRight, NotificationChain msgs)
  {
		term oldRight = right;
		right = newRight;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.ADD_EXP__RIGHT, oldRight, newRight);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setRight(term newRight)
  {
		if (newRight != right) {
			NotificationChain msgs = null;
			if (right != null)
				msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.ADD_EXP__RIGHT, null, msgs);
			if (newRight != null)
				msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.ADD_EXP__RIGHT, null, msgs);
			msgs = basicSetRight(newRight, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.ADD_EXP__RIGHT, newRight, newRight));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case DelphiPackage.ADD_EXP__LEFT:
				return basicSetLeft(null, msgs);
			case DelphiPackage.ADD_EXP__ADD_OP:
				return basicSetAddOp(null, msgs);
			case DelphiPackage.ADD_EXP__RIGHT:
				return basicSetRight(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case DelphiPackage.ADD_EXP__LEFT:
				return getLeft();
			case DelphiPackage.ADD_EXP__ADD_OP:
				return getAddOp();
			case DelphiPackage.ADD_EXP__RIGHT:
				return getRight();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case DelphiPackage.ADD_EXP__LEFT:
				setLeft((simpleExpression)newValue);
				return;
			case DelphiPackage.ADD_EXP__ADD_OP:
				setAddOp((addOp)newValue);
				return;
			case DelphiPackage.ADD_EXP__RIGHT:
				setRight((term)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.ADD_EXP__LEFT:
				setLeft((simpleExpression)null);
				return;
			case DelphiPackage.ADD_EXP__ADD_OP:
				setAddOp((addOp)null);
				return;
			case DelphiPackage.ADD_EXP__RIGHT:
				setRight((term)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case DelphiPackage.ADD_EXP__LEFT:
				return left != null;
			case DelphiPackage.ADD_EXP__ADD_OP:
				return addOp != null;
			case DelphiPackage.ADD_EXP__RIGHT:
				return right != null;
		}
		return super.eIsSet(featureID);
	}

} //addExpImpl
