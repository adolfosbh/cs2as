/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.delphi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.delphi.delphi.DelphiPackage;
import org.xtext.example.delphi.delphi.constExpr;
import org.xtext.example.delphi.delphi.stringType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>string Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.delphi.delphi.impl.stringTypeImpl#getConstExp <em>Const Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class stringTypeImpl extends typeImpl implements stringType
{
  /**
   * The cached value of the '{@link #getConstExp() <em>Const Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstExp()
   * @generated
   * @ordered
   */
  protected constExpr constExp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected stringTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DelphiPackage.Literals.STRING_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public constExpr getConstExp()
  {
    return constExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstExp(constExpr newConstExp, NotificationChain msgs)
  {
    constExpr oldConstExp = constExp;
    constExp = newConstExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DelphiPackage.STRING_TYPE__CONST_EXP, oldConstExp, newConstExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConstExp(constExpr newConstExp)
  {
    if (newConstExp != constExp)
    {
      NotificationChain msgs = null;
      if (constExp != null)
        msgs = ((InternalEObject)constExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.STRING_TYPE__CONST_EXP, null, msgs);
      if (newConstExp != null)
        msgs = ((InternalEObject)newConstExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DelphiPackage.STRING_TYPE__CONST_EXP, null, msgs);
      msgs = basicSetConstExp(newConstExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DelphiPackage.STRING_TYPE__CONST_EXP, newConstExp, newConstExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DelphiPackage.STRING_TYPE__CONST_EXP:
        return basicSetConstExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DelphiPackage.STRING_TYPE__CONST_EXP:
        return getConstExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DelphiPackage.STRING_TYPE__CONST_EXP:
        setConstExp((constExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.STRING_TYPE__CONST_EXP:
        setConstExp((constExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DelphiPackage.STRING_TYPE__CONST_EXP:
        return constExp != null;
    }
    return super.eIsSet(featureID);
  }

} //stringTypeImpl
