/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.delphi.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DelphiGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MainRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.mainRule");
		private final Assignment cFileAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFileFileParserRuleCall_0 = (RuleCall)cFileAssignment.eContents().get(0);
		
		//mainRule:
		//	file=file // ASBH modified
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//file=file
		public Assignment getFileAssignment() { return cFileAssignment; }
		
		//file
		public RuleCall getFileFileParserRuleCall_0() { return cFileFileParserRuleCall_0; }
	}
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.file");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProgramParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLibraryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//file:
		//	program
		//	| packageDecl
		//	| library
		//	| unit;
		@Override public ParserRule getRule() { return rule; }
		
		//program | packageDecl | library | unit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//program
		public RuleCall getProgramParserRuleCall_0() { return cProgramParserRuleCall_0; }
		
		//packageDecl
		public RuleCall getPackageDeclParserRuleCall_1() { return cPackageDeclParserRuleCall_1; }
		
		//library
		public RuleCall getLibraryParserRuleCall_2() { return cLibraryParserRuleCall_2; }
		
		//unit
		public RuleCall getUnitParserRuleCall_3() { return cUnitParserRuleCall_3; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cParamsListAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cParamsListIdentListParserRuleCall_0_2_1_0 = (RuleCall)cParamsListAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockProgramBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//program:
		//	('program' id=ident ('(' paramsList=identList ')')? ';')? block=programBlock '.';
		@Override public ParserRule getRule() { return rule; }
		
		//('program' id=ident ('(' paramsList=identList ')')? ';')? block=programBlock '.'
		public Group getGroup() { return cGroup; }
		
		//('program' id=ident ('(' paramsList=identList ')')? ';')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'program'
		public Keyword getProgramKeyword_0_0() { return cProgramKeyword_0_0; }
		
		//id=ident
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_0_1_0() { return cIdIdentParserRuleCall_0_1_0; }
		
		//('(' paramsList=identList ')')?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }
		
		//paramsList=identList
		public Assignment getParamsListAssignment_0_2_1() { return cParamsListAssignment_0_2_1; }
		
		//identList
		public RuleCall getParamsListIdentListParserRuleCall_0_2_1_0() { return cParamsListIdentListParserRuleCall_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }
		
		//';'
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }
		
		//block=programBlock
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//programBlock
		public RuleCall getBlockProgramBlockParserRuleCall_1_0() { return cBlockProgramBlockParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_2_0 = (RuleCall)cPortAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInterfaceSectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInterfaceSectInterfaceSectionParserRuleCall_4_0 = (RuleCall)cInterfaceSectAssignment_4.eContents().get(0);
		private final Assignment cImplementationSectAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImplementationSectImplementationSectionParserRuleCall_5_0 = (RuleCall)cImplementationSectAssignment_5.eContents().get(0);
		private final Assignment cInitSectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitSectInitSectionParserRuleCall_6_0 = (RuleCall)cInitSectAssignment_6.eContents().get(0);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//unit:
		//	'unit' id=ident port=portabilityDirective? ';' interfaceSect=interfaceSection
		//	implementationSect=implementationSection initSect=initSection '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'unit' id=ident port=portabilityDirective? ';' interfaceSect=interfaceSection implementationSect=implementationSection
		//initSect=initSection '.'
		public Group getGroup() { return cGroup; }
		
		//'unit'
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_2() { return cPortAssignment_2; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_2_0() { return cPortPortabilityDirectiveParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//interfaceSect=interfaceSection
		public Assignment getInterfaceSectAssignment_4() { return cInterfaceSectAssignment_4; }
		
		//interfaceSection
		public RuleCall getInterfaceSectInterfaceSectionParserRuleCall_4_0() { return cInterfaceSectInterfaceSectionParserRuleCall_4_0; }
		
		//implementationSect=implementationSection
		public Assignment getImplementationSectAssignment_5() { return cImplementationSectAssignment_5; }
		
		//implementationSection
		public RuleCall getImplementationSectImplementationSectionParserRuleCall_5_0() { return cImplementationSectImplementationSectionParserRuleCall_5_0; }
		
		//initSect=initSection
		public Assignment getInitSectAssignment_6() { return cInitSectAssignment_6; }
		
		//initSection
		public RuleCall getInitSectInitSectionParserRuleCall_6_0() { return cInitSectInitSectionParserRuleCall_6_0; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
	}
	public class PackageDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.packageDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequiresAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequiresRequiresClauseParserRuleCall_3_0 = (RuleCall)cRequiresAssignment_3.eContents().get(0);
		private final Assignment cContainsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContainsContainsClauseParserRuleCall_4_0 = (RuleCall)cContainsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//packageDecl:
		//	'package' id=ident ';' requires=requiresClause? contains=containsClause? 'end' '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' id=ident ';' requires=requiresClause? contains=containsClause? 'end' '.'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//requires=requiresClause?
		public Assignment getRequiresAssignment_3() { return cRequiresAssignment_3; }
		
		//requiresClause
		public RuleCall getRequiresRequiresClauseParserRuleCall_3_0() { return cRequiresRequiresClauseParserRuleCall_3_0; }
		
		//contains=containsClause?
		public Assignment getContainsAssignment_4() { return cContainsAssignment_4; }
		
		//containsClause
		public RuleCall getContainsContainsClauseParserRuleCall_4_0() { return cContainsContainsClauseParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPBlockProgramBlockParserRuleCall_3_0 = (RuleCall)cPBlockAssignment_3.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//library:
		//	'library' id=ident ';' pBlock=programBlock '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'library' id=ident ';' pBlock=programBlock '.'
		public Group getGroup() { return cGroup; }
		
		//'library'
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//pBlock=programBlock
		public Assignment getPBlockAssignment_3() { return cPBlockAssignment_3; }
		
		//programBlock
		public RuleCall getPBlockProgramBlockParserRuleCall_3_0() { return cPBlockProgramBlockParserRuleCall_3_0; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}
	public class ProgramBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.programBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUsesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUsesUsesClauseParserRuleCall_0_0 = (RuleCall)cUsesAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//programBlock:
		//	uses=usesClause? block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//uses=usesClause? block=block
		public Group getGroup() { return cGroup; }
		
		//uses=usesClause?
		public Assignment getUsesAssignment_0() { return cUsesAssignment_0; }
		
		//usesClause
		public RuleCall getUsesUsesClauseParserRuleCall_0_0() { return cUsesUsesClauseParserRuleCall_0_0; }
		
		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class UsesClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.usesClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdListIdentListParserRuleCall_1_0 = (RuleCall)cIdListAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//usesClause:
		//	'uses' idList=identList ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'uses' idList=identList ';'
		public Group getGroup() { return cGroup; }
		
		//'uses'
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//idList=identList
		public Assignment getIdListAssignment_1() { return cIdListAssignment_1; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_1_0() { return cIdListIdentListParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PortabilityDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.portabilityDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlatformKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDeprecatedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLibraryKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//portabilityDirective:
		//	'platform'
		//	| 'deprecated'
		//	| 'library';
		@Override public ParserRule getRule() { return rule; }
		
		//'platform' | 'deprecated' | 'library'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'platform'
		public Keyword getPlatformKeyword_0() { return cPlatformKeyword_0; }
		
		//'deprecated'
		public Keyword getDeprecatedKeyword_1() { return cDeprecatedKeyword_1; }
		
		//'library'
		public Keyword getLibraryKeyword_2() { return cLibraryKeyword_2; }
	}
	public class InterfaceSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.interfaceSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsesUsesClauseParserRuleCall_2_0 = (RuleCall)cUsesAssignment_2.eContents().get(0);
		private final Assignment cInterfaceDeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterfaceDeclInterfaceDeclParserRuleCall_3_0 = (RuleCall)cInterfaceDeclAssignment_3.eContents().get(0);
		
		//interfaceSection:
		//	{interfaceSection} 'interface' uses=usesClause? interfaceDecl+=interfaceDecl*;
		@Override public ParserRule getRule() { return rule; }
		
		//{interfaceSection} 'interface' uses=usesClause? interfaceDecl+=interfaceDecl*
		public Group getGroup() { return cGroup; }
		
		//{interfaceSection}
		public Action getInterfaceSectionAction_0() { return cInterfaceSectionAction_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//uses=usesClause?
		public Assignment getUsesAssignment_2() { return cUsesAssignment_2; }
		
		//usesClause
		public RuleCall getUsesUsesClauseParserRuleCall_2_0() { return cUsesUsesClauseParserRuleCall_2_0; }
		
		//interfaceDecl+=interfaceDecl*
		public Assignment getInterfaceDeclAssignment_3() { return cInterfaceDeclAssignment_3; }
		
		//interfaceDecl
		public RuleCall getInterfaceDeclInterfaceDeclParserRuleCall_3_0() { return cInterfaceDeclInterfaceDeclParserRuleCall_3_0; }
	}
	public class InterfaceDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.interfaceDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstSectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeSectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarSectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExportedHeadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//interfaceDecl:
		//	constSection
		//	| typeSection
		//	| varSection
		//	| exportedHeading;
		@Override public ParserRule getRule() { return rule; }
		
		//constSection | typeSection | varSection | exportedHeading
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constSection
		public RuleCall getConstSectionParserRuleCall_0() { return cConstSectionParserRuleCall_0; }
		
		//typeSection
		public RuleCall getTypeSectionParserRuleCall_1() { return cTypeSectionParserRuleCall_1; }
		
		//varSection
		public RuleCall getVarSectionParserRuleCall_2() { return cVarSectionParserRuleCall_2; }
		
		//exportedHeading
		public RuleCall getExportedHeadingParserRuleCall_3() { return cExportedHeadingParserRuleCall_3; }
	}
	public class ExportedHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.exportedHeading");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPHeadingAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPHeadingProcedureHeadingParserRuleCall_0_0_0 = (RuleCall)cPHeadingAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDirectiveAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDirectiveDirectiveParserRuleCall_0_2_0 = (RuleCall)cDirectiveAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFHeadingAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFHeadingFunctionHeadingParserRuleCall_1_0_0 = (RuleCall)cFHeadingAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDirectiveAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDirectiveDirectiveParserRuleCall_1_2_0 = (RuleCall)cDirectiveAssignment_1_2.eContents().get(0);
		
		//exportedHeading:
		//	pHeading=procedureHeading ';' directive=directive?
		//	| fHeading=functionHeading ';' directive=directive?;
		@Override public ParserRule getRule() { return rule; }
		
		//pHeading=procedureHeading ';' directive=directive? | fHeading=functionHeading ';' directive=directive?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pHeading=procedureHeading ';' directive=directive?
		public Group getGroup_0() { return cGroup_0; }
		
		//pHeading=procedureHeading
		public Assignment getPHeadingAssignment_0_0() { return cPHeadingAssignment_0_0; }
		
		//procedureHeading
		public RuleCall getPHeadingProcedureHeadingParserRuleCall_0_0_0() { return cPHeadingProcedureHeadingParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//directive=directive?
		public Assignment getDirectiveAssignment_0_2() { return cDirectiveAssignment_0_2; }
		
		//directive
		public RuleCall getDirectiveDirectiveParserRuleCall_0_2_0() { return cDirectiveDirectiveParserRuleCall_0_2_0; }
		
		//fHeading=functionHeading ';' directive=directive?
		public Group getGroup_1() { return cGroup_1; }
		
		//fHeading=functionHeading
		public Assignment getFHeadingAssignment_1_0() { return cFHeadingAssignment_1_0; }
		
		//functionHeading
		public RuleCall getFHeadingFunctionHeadingParserRuleCall_1_0_0() { return cFHeadingFunctionHeadingParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//directive=directive?
		public Assignment getDirectiveAssignment_1_2() { return cDirectiveAssignment_1_2; }
		
		//directive
		public RuleCall getDirectiveDirectiveParserRuleCall_1_2_0() { return cDirectiveDirectiveParserRuleCall_1_2_0; }
	}
	public class ImplementationSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.implementationSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementationSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImplementationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsesUsesClauseParserRuleCall_2_0 = (RuleCall)cUsesAssignment_2.eContents().get(0);
		private final Assignment cDeclSectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclSectDeclSectionParserRuleCall_3_0 = (RuleCall)cDeclSectAssignment_3.eContents().get(0);
		private final Assignment cExportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExportsExportsStmtParserRuleCall_4_0 = (RuleCall)cExportsAssignment_4.eContents().get(0);
		
		//implementationSection:
		//	{implementationSection} 'implementation' uses=usesClause? declSect+=declSection* exports+=exportsStmt*;
		@Override public ParserRule getRule() { return rule; }
		
		//{implementationSection} 'implementation' uses=usesClause? declSect+=declSection* exports+=exportsStmt*
		public Group getGroup() { return cGroup; }
		
		//{implementationSection}
		public Action getImplementationSectionAction_0() { return cImplementationSectionAction_0; }
		
		//'implementation'
		public Keyword getImplementationKeyword_1() { return cImplementationKeyword_1; }
		
		//uses=usesClause?
		public Assignment getUsesAssignment_2() { return cUsesAssignment_2; }
		
		//usesClause
		public RuleCall getUsesUsesClauseParserRuleCall_2_0() { return cUsesUsesClauseParserRuleCall_2_0; }
		
		//declSect+=declSection*
		public Assignment getDeclSectAssignment_3() { return cDeclSectAssignment_3; }
		
		//declSection
		public RuleCall getDeclSectDeclSectionParserRuleCall_3_0() { return cDeclSectDeclSectionParserRuleCall_3_0; }
		
		//exports+=exportsStmt*
		public Assignment getExportsAssignment_4() { return cExportsAssignment_4; }
		
		//exportsStmt
		public RuleCall getExportsExportsStmtParserRuleCall_4_0() { return cExportsExportsStmtParserRuleCall_4_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclSectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclSectDeclSectionParserRuleCall_0_0 = (RuleCall)cDeclSectAssignment_0.eContents().get(0);
		private final Assignment cExportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExportsExportsStmtParserRuleCall_1_0 = (RuleCall)cExportsAssignment_1.eContents().get(0);
		private final Assignment cCompoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompoundCompoundStmtParserRuleCall_2_0 = (RuleCall)cCompoundAssignment_2.eContents().get(0);
		private final Assignment cExportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExportsExportsStmtParserRuleCall_3_0 = (RuleCall)cExportsAssignment_3.eContents().get(0);
		
		//block:
		//	declSect=declSection? exports+=exportsStmt* compound=compoundStmt exports+=exportsStmt*;
		@Override public ParserRule getRule() { return rule; }
		
		//declSect=declSection? exports+=exportsStmt* compound=compoundStmt exports+=exportsStmt*
		public Group getGroup() { return cGroup; }
		
		//declSect=declSection?
		public Assignment getDeclSectAssignment_0() { return cDeclSectAssignment_0; }
		
		//declSection
		public RuleCall getDeclSectDeclSectionParserRuleCall_0_0() { return cDeclSectDeclSectionParserRuleCall_0_0; }
		
		//exports+=exportsStmt*
		public Assignment getExportsAssignment_1() { return cExportsAssignment_1; }
		
		//exportsStmt
		public RuleCall getExportsExportsStmtParserRuleCall_1_0() { return cExportsExportsStmtParserRuleCall_1_0; }
		
		//compound=compoundStmt
		public Assignment getCompoundAssignment_2() { return cCompoundAssignment_2; }
		
		//compoundStmt
		public RuleCall getCompoundCompoundStmtParserRuleCall_2_0() { return cCompoundCompoundStmtParserRuleCall_2_0; }
		
		//exports+=exportsStmt*
		public Assignment getExportsAssignment_3() { return cExportsAssignment_3; }
		
		//exportsStmt
		public RuleCall getExportsExportsStmtParserRuleCall_3_0() { return cExportsExportsStmtParserRuleCall_3_0; }
	}
	public class ExportsItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.exportsItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExportsItemAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cIndexKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cConstExpAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConstExpConstExprParserRuleCall_2_1_1_0 = (RuleCall)cConstExpAssignment_2_1_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cIndexKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cNameKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cConstExpAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cConstExpConstExprParserRuleCall_3_1_1_0 = (RuleCall)cConstExpAssignment_3_1_1.eContents().get(0);
		
		//exportsItem // modified	
		//:
		//	{exportsItem} id=ident ('name' | 'index' constExp+=constExpr)? ('index' | 'name' constExp+=constExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{exportsItem} id=ident ('name' | 'index' constExp+=constExpr)? ('index' | 'name' constExp+=constExpr)?
		public Group getGroup() { return cGroup; }
		
		//{exportsItem}
		public Action getExportsItemAction_0() { return cExportsItemAction_0; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
		
		//('name' | 'index' constExp+=constExpr)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'name'
		public Keyword getNameKeyword_2_0() { return cNameKeyword_2_0; }
		
		//'index' constExp+=constExpr
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'index'
		public Keyword getIndexKeyword_2_1_0() { return cIndexKeyword_2_1_0; }
		
		//constExp+=constExpr
		public Assignment getConstExpAssignment_2_1_1() { return cConstExpAssignment_2_1_1; }
		
		//constExpr
		public RuleCall getConstExpConstExprParserRuleCall_2_1_1_0() { return cConstExpConstExprParserRuleCall_2_1_1_0; }
		
		//('index' | 'name' constExp+=constExpr)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'index'
		public Keyword getIndexKeyword_3_0() { return cIndexKeyword_3_0; }
		
		//'name' constExp+=constExpr
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'name'
		public Keyword getNameKeyword_3_1_0() { return cNameKeyword_3_1_0; }
		
		//constExp+=constExpr
		public Assignment getConstExpAssignment_3_1_1() { return cConstExpAssignment_3_1_1; }
		
		//constExpr
		public RuleCall getConstExpConstExprParserRuleCall_3_1_1_0() { return cConstExpConstExprParserRuleCall_3_1_1_0; }
	}
	public class ExportsStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.exportsStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsExportsItemParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsExportsItemParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		
		//exportsStmt:
		//	'exports' items+=exportsItem (',' items+=exportsItem)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'exports' items+=exportsItem (',' items+=exportsItem)*
		public Group getGroup() { return cGroup; }
		
		//'exports'
		public Keyword getExportsKeyword_0() { return cExportsKeyword_0; }
		
		//items+=exportsItem
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//exportsItem
		public RuleCall getItemsExportsItemParserRuleCall_1_0() { return cItemsExportsItemParserRuleCall_1_0; }
		
		//(',' items+=exportsItem)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//items+=exportsItem
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }
		
		//exportsItem
		public RuleCall getItemsExportsItemParserRuleCall_2_1_0() { return cItemsExportsItemParserRuleCall_2_1_0; }
	}
	public class DeclSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.declSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelDeclSectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstSectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeSectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVarSectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProcedureDeclSectionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//declSection:
		//	labelDeclSection
		//	| constSection
		//	| typeSection
		//	| varSection
		//	| procedureDeclSection;
		@Override public ParserRule getRule() { return rule; }
		
		//labelDeclSection | constSection | typeSection | varSection | procedureDeclSection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//labelDeclSection
		public RuleCall getLabelDeclSectionParserRuleCall_0() { return cLabelDeclSectionParserRuleCall_0; }
		
		//constSection
		public RuleCall getConstSectionParserRuleCall_1() { return cConstSectionParserRuleCall_1; }
		
		//typeSection
		public RuleCall getTypeSectionParserRuleCall_2() { return cTypeSectionParserRuleCall_2; }
		
		//varSection
		public RuleCall getVarSectionParserRuleCall_3() { return cVarSectionParserRuleCall_3; }
		
		//procedureDeclSection
		public RuleCall getProcedureDeclSectionParserRuleCall_4() { return cProcedureDeclSectionParserRuleCall_4; }
	}
	public class LabelDeclSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.labelDeclSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdLabelIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//labelDeclSection:
		//	'label' id=labelId;
		@Override public ParserRule getRule() { return rule; }
		
		//'label' id=labelId
		public Group getGroup() { return cGroup; }
		
		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//id=labelId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//labelId
		public RuleCall getIdLabelIdParserRuleCall_1_0() { return cIdLabelIdParserRuleCall_1_0; }
	}
	public class ConstSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.constSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cConstantDeclAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cConstantDeclConstantDeclParserRuleCall_2_0_0 = (RuleCall)cConstantDeclAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//constSection:
		//	{constSection} 'const' (constantDecl+=constantDecl ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{constSection} 'const' (constantDecl+=constantDecl ';')*
		public Group getGroup() { return cGroup; }
		
		//{constSection}
		public Action getConstSectionAction_0() { return cConstSectionAction_0; }
		
		//'const'
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//(constantDecl+=constantDecl ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//constantDecl+=constantDecl
		public Assignment getConstantDeclAssignment_2_0() { return cConstantDeclAssignment_2_0; }
		
		//constantDecl
		public RuleCall getConstantDeclConstantDeclParserRuleCall_2_0_0() { return cConstantDeclConstantDeclParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class ConstantDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.constantDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConstAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConstConstExprParserRuleCall_0_2_0 = (RuleCall)cConstAssignment_0_2.eContents().get(0);
		private final Assignment cPortAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_0_3_0 = (RuleCall)cPortAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeRefAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeRefTypeIdParserRuleCall_1_2_0 = (RuleCall)cTypeRefAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTypedConstatAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypedConstatTypedConstantParserRuleCall_1_4_0 = (RuleCall)cTypedConstatAssignment_1_4.eContents().get(0);
		private final Assignment cPortAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_1_5_0 = (RuleCall)cPortAssignment_1_5.eContents().get(0);
		
		//constantDecl:
		//	id=ident '=' const=constExpr port=portabilityDirective?
		//	| id=ident ':' typeRef=typeId '=' typedConstat=typedConstant port=portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ident '=' const=constExpr port=portabilityDirective? | id=ident ':' typeRef=typeId '=' typedConstat=typedConstant
		//port=portabilityDirective?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ident '=' const=constExpr port=portabilityDirective?
		public Group getGroup_0() { return cGroup_0; }
		
		//id=ident
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_0_0_0() { return cIdIdentParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//const=constExpr
		public Assignment getConstAssignment_0_2() { return cConstAssignment_0_2; }
		
		//constExpr
		public RuleCall getConstConstExprParserRuleCall_0_2_0() { return cConstConstExprParserRuleCall_0_2_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_0_3() { return cPortAssignment_0_3; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_0_3_0() { return cPortPortabilityDirectiveParserRuleCall_0_3_0; }
		
		//id=ident ':' typeRef=typeId '=' typedConstat=typedConstant port=portabilityDirective?
		public Group getGroup_1() { return cGroup_1; }
		
		//id=ident
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0_0() { return cIdIdentParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//typeRef=typeId
		public Assignment getTypeRefAssignment_1_2() { return cTypeRefAssignment_1_2; }
		
		//typeId
		public RuleCall getTypeRefTypeIdParserRuleCall_1_2_0() { return cTypeRefTypeIdParserRuleCall_1_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }
		
		//typedConstat=typedConstant
		public Assignment getTypedConstatAssignment_1_4() { return cTypedConstatAssignment_1_4; }
		
		//typedConstant
		public RuleCall getTypedConstatTypedConstantParserRuleCall_1_4_0() { return cTypedConstatTypedConstantParserRuleCall_1_4_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_1_5() { return cPortAssignment_1_5; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_1_5_0() { return cPortPortabilityDirectiveParserRuleCall_1_5_0; }
	}
	public class TypeSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.typeSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTypeDeclAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeDeclTypeDeclParserRuleCall_2_0_0 = (RuleCall)cTypeDeclAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//typeSection:
		//	{typeSection} 'type' (typeDecl+=typeDecl ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{typeSection} 'type' (typeDecl+=typeDecl ';')*
		public Group getGroup() { return cGroup; }
		
		//{typeSection}
		public Action getTypeSectionAction_0() { return cTypeSectionAction_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//(typeDecl+=typeDecl ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//typeDecl+=typeDecl
		public Assignment getTypeDeclAssignment_2_0() { return cTypeDeclAssignment_2_0; }
		
		//typeDecl
		public RuleCall getTypeDeclTypeDeclParserRuleCall_2_0_0() { return cTypeDeclTypeDeclParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.typeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cTypeKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Assignment cPortAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_0_4_0 = (RuleCall)cPortAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cTypeKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRestrictedTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRestrictedTypeRestrictedTypeParserRuleCall_1_3_0 = (RuleCall)cRestrictedTypeAssignment_1_3.eContents().get(0);
		private final Assignment cPortAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_1_4_0 = (RuleCall)cPortAssignment_1_4.eContents().get(0);
		
		//typeDecl:
		//	id=ident '=' 'type'? type=type port=portabilityDirective?
		//	| id=ident '=' 'type'? restrictedType=restrictedType port=portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ident '=' 'type'? type=type port=portabilityDirective? | id=ident '=' 'type'? restrictedType=restrictedType
		//port=portabilityDirective?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ident '=' 'type'? type=type port=portabilityDirective?
		public Group getGroup_0() { return cGroup_0; }
		
		//id=ident
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_0_0_0() { return cIdIdentParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//'type'?
		public Keyword getTypeKeyword_0_2() { return cTypeKeyword_0_2; }
		
		//type=type
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_3_0() { return cTypeTypeParserRuleCall_0_3_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_0_4() { return cPortAssignment_0_4; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_0_4_0() { return cPortPortabilityDirectiveParserRuleCall_0_4_0; }
		
		//id=ident '=' 'type'? restrictedType=restrictedType port=portabilityDirective?
		public Group getGroup_1() { return cGroup_1; }
		
		//id=ident
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0_0() { return cIdIdentParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//'type'?
		public Keyword getTypeKeyword_1_2() { return cTypeKeyword_1_2; }
		
		//restrictedType=restrictedType
		public Assignment getRestrictedTypeAssignment_1_3() { return cRestrictedTypeAssignment_1_3; }
		
		//restrictedType
		public RuleCall getRestrictedTypeRestrictedTypeParserRuleCall_1_3_0() { return cRestrictedTypeRestrictedTypeParserRuleCall_1_3_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_1_4() { return cPortAssignment_1_4; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_1_4_0() { return cPortPortabilityDirectiveParserRuleCall_1_4_0; }
	}
	public class TypedConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.typedConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConstConstExprParserRuleCall_1_0_0 = (RuleCall)cConstAssignment_1_0.eContents().get(0);
		private final Assignment cArrayAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cArrayArrayConstantParserRuleCall_1_1_0 = (RuleCall)cArrayAssignment_1_1.eContents().get(0);
		private final Assignment cRecordAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cRecordRecordConstantParserRuleCall_1_2_0 = (RuleCall)cRecordAssignment_1_2.eContents().get(0);
		
		//typedConstant:
		//	{typedConstant} (const=constExpr | array=arrayConstant | record=recordConstant);
		@Override public ParserRule getRule() { return rule; }
		
		//{typedConstant} (const=constExpr | array=arrayConstant | record=recordConstant)
		public Group getGroup() { return cGroup; }
		
		//{typedConstant}
		public Action getTypedConstantAction_0() { return cTypedConstantAction_0; }
		
		//(const=constExpr | array=arrayConstant | record=recordConstant)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//const=constExpr
		public Assignment getConstAssignment_1_0() { return cConstAssignment_1_0; }
		
		//constExpr
		public RuleCall getConstConstExprParserRuleCall_1_0_0() { return cConstConstExprParserRuleCall_1_0_0; }
		
		//array=arrayConstant
		public Assignment getArrayAssignment_1_1() { return cArrayAssignment_1_1; }
		
		//arrayConstant
		public RuleCall getArrayArrayConstantParserRuleCall_1_1_0() { return cArrayArrayConstantParserRuleCall_1_1_0; }
		
		//record=recordConstant
		public Assignment getRecordAssignment_1_2() { return cRecordAssignment_1_2; }
		
		//recordConstant
		public RuleCall getRecordRecordConstantParserRuleCall_1_2_0() { return cRecordRecordConstantParserRuleCall_1_2_0; }
	}
	public class ArrayConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.arrayConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypedConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypedConstantTypedConstantParserRuleCall_1_0 = (RuleCall)cTypedConstantAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//arrayConstant:
		//	'(' typedConstant=typedConstant ',' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' typedConstant=typedConstant ',' ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//typedConstant=typedConstant
		public Assignment getTypedConstantAssignment_1() { return cTypedConstantAssignment_1; }
		
		//typedConstant
		public RuleCall getTypedConstantTypedConstantParserRuleCall_1_0() { return cTypedConstantTypedConstantParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RecordConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.recordConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecordConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRecordFieldAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRecordFieldRecordFieldConstantParserRuleCall_2_0_0 = (RuleCall)cRecordFieldAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//recordConstant:
		//	{recordConstant} '(' (recordField+=recordFieldConstant ';')* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{recordConstant} '(' (recordField+=recordFieldConstant ';')* ')'
		public Group getGroup() { return cGroup; }
		
		//{recordConstant}
		public Action getRecordConstantAction_0() { return cRecordConstantAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(recordField+=recordFieldConstant ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//recordField+=recordFieldConstant
		public Assignment getRecordFieldAssignment_2_0() { return cRecordFieldAssignment_2_0; }
		
		//recordFieldConstant
		public RuleCall getRecordFieldRecordFieldConstantParserRuleCall_2_0_0() { return cRecordFieldRecordFieldConstantParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RecordFieldConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.recordFieldConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypedConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypedConstantTypedConstantParserRuleCall_2_0 = (RuleCall)cTypedConstantAssignment_2.eContents().get(0);
		
		//recordFieldConstant:
		//	id=ident ':' typedConstant=typedConstant;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ident ':' typedConstant=typedConstant
		public Group getGroup() { return cGroup; }
		
		//id=ident
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_0_0() { return cIdIdentParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typedConstant=typedConstant
		public Assignment getTypedConstantAssignment_2() { return cTypedConstantAssignment_2; }
		
		//typedConstant
		public RuleCall getTypedConstantTypedConstantParserRuleCall_2_0() { return cTypedConstantTypedConstantParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStrucTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPointerTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProcedureTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVariantTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cClassRefTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//type:
		//	typeId
		//	| simpleType
		//	| strucType
		//	| pointerType
		//	| stringType
		//	| procedureType
		//	| variantType
		//	| classRefType;
		@Override public ParserRule getRule() { return rule; }
		
		//typeId | simpleType | strucType | pointerType | stringType | procedureType | variantType | classRefType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeId
		public RuleCall getTypeIdParserRuleCall_0() { return cTypeIdParserRuleCall_0; }
		
		//simpleType
		public RuleCall getSimpleTypeParserRuleCall_1() { return cSimpleTypeParserRuleCall_1; }
		
		//strucType
		public RuleCall getStrucTypeParserRuleCall_2() { return cStrucTypeParserRuleCall_2; }
		
		//pointerType
		public RuleCall getPointerTypeParserRuleCall_3() { return cPointerTypeParserRuleCall_3; }
		
		//stringType
		public RuleCall getStringTypeParserRuleCall_4() { return cStringTypeParserRuleCall_4; }
		
		//procedureType
		public RuleCall getProcedureTypeParserRuleCall_5() { return cProcedureTypeParserRuleCall_5; }
		
		//variantType
		public RuleCall getVariantTypeParserRuleCall_6() { return cVariantTypeParserRuleCall_6; }
		
		//classRefType
		public RuleCall getClassRefTypeParserRuleCall_7() { return cClassRefTypeParserRuleCall_7; }
	}
	public class RestrictedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.restrictedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//restrictedType:
		//	objectType
		//	| classType
		//	| interfaceType;
		@Override public ParserRule getRule() { return rule; }
		
		//objectType | classType | interfaceType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//objectType
		public RuleCall getObjectTypeParserRuleCall_0() { return cObjectTypeParserRuleCall_0; }
		
		//classType
		public RuleCall getClassTypeParserRuleCall_1() { return cClassTypeParserRuleCall_1; }
		
		//interfaceType
		public RuleCall getInterfaceTypeParserRuleCall_2() { return cInterfaceTypeParserRuleCall_2; }
	}
	public class ClassRefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classRefType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRefTypeIdParserRuleCall_2_0 = (RuleCall)cTypeRefAssignment_2.eContents().get(0);
		
		//classRefType:
		//	'class' 'of' typeRef=typeId;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' 'of' typeRef=typeId
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//typeRef=typeId
		public Assignment getTypeRefAssignment_2() { return cTypeRefAssignment_2; }
		
		//typeId
		public RuleCall getTypeRefTypeIdParserRuleCall_2_0() { return cTypeRefTypeIdParserRuleCall_2_0; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.simpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrdinalTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//simpleType:
		//	ordinalType
		//	| realType;
		@Override public ParserRule getRule() { return rule; }
		
		//ordinalType | realType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ordinalType
		public RuleCall getOrdinalTypeParserRuleCall_0() { return cOrdinalTypeParserRuleCall_0; }
		
		//realType
		public RuleCall getRealTypeParserRuleCall_1() { return cRealTypeParserRuleCall_1; }
	}
	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.realType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cReal48Keyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRealKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSingleKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDoubleKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cExtendedKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cCurrencyKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cCompKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		
		//realType:
		//	{realType} ('real48'
		//	| 'real'
		//	| 'single'
		//	| 'double'
		//	| 'extended'
		//	| 'currency'
		//	| 'comp');
		@Override public ParserRule getRule() { return rule; }
		
		//{realType} ('real48' | 'real' | 'single' | 'double' | 'extended' | 'currency' | 'comp')
		public Group getGroup() { return cGroup; }
		
		//{realType}
		public Action getRealTypeAction_0() { return cRealTypeAction_0; }
		
		//('real48' | 'real' | 'single' | 'double' | 'extended' | 'currency' | 'comp')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'real48'
		public Keyword getReal48Keyword_1_0() { return cReal48Keyword_1_0; }
		
		//'real'
		public Keyword getRealKeyword_1_1() { return cRealKeyword_1_1; }
		
		//'single'
		public Keyword getSingleKeyword_1_2() { return cSingleKeyword_1_2; }
		
		//'double'
		public Keyword getDoubleKeyword_1_3() { return cDoubleKeyword_1_3; }
		
		//'extended'
		public Keyword getExtendedKeyword_1_4() { return cExtendedKeyword_1_4; }
		
		//'currency'
		public Keyword getCurrencyKeyword_1_5() { return cCurrencyKeyword_1_5; }
		
		//'comp'
		public Keyword getCompKeyword_1_6() { return cCompKeyword_1_6; }
	}
	public class OrdinalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.ordinalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubrangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumeratedTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrdIdentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ordinalType:
		//	subrangeType
		//	| enumeratedType
		//	| ordIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//subrangeType | enumeratedType | ordIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//subrangeType
		public RuleCall getSubrangeTypeParserRuleCall_0() { return cSubrangeTypeParserRuleCall_0; }
		
		//enumeratedType
		public RuleCall getEnumeratedTypeParserRuleCall_1() { return cEnumeratedTypeParserRuleCall_1; }
		
		//ordIdent
		public RuleCall getOrdIdentParserRuleCall_2() { return cOrdIdentParserRuleCall_2; }
	}
	public class OrdIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.ordIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrdIdentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cShortintKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSmallintKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cIntegerKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cByteKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cLongintKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cInt64Keyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cWordKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cBooleanKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cCharKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cWidecharKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		private final Keyword cLongwordKeyword_1_10 = (Keyword)cAlternatives_1.eContents().get(10);
		private final Keyword cPcharKeyword_1_11 = (Keyword)cAlternatives_1.eContents().get(11);
		
		//ordIdent:
		//	{ordIdent} ('shortint'
		//	| 'smallint'
		//	| 'integer'
		//	| 'byte'
		//	| 'longint'
		//	| 'int64'
		//	| 'word'
		//	| 'boolean'
		//	| 'char'
		//	| 'widechar'
		//	| 'longword'
		//	| 'pchar');
		@Override public ParserRule getRule() { return rule; }
		
		//{ordIdent} ('shortint' | 'smallint' | 'integer' | 'byte' | 'longint' | 'int64' | 'word' | 'boolean' | 'char' |
		//'widechar' | 'longword' | 'pchar')
		public Group getGroup() { return cGroup; }
		
		//{ordIdent}
		public Action getOrdIdentAction_0() { return cOrdIdentAction_0; }
		
		//('shortint' | 'smallint' | 'integer' | 'byte' | 'longint' | 'int64' | 'word' | 'boolean' | 'char' | 'widechar' |
		//'longword' | 'pchar')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'shortint'
		public Keyword getShortintKeyword_1_0() { return cShortintKeyword_1_0; }
		
		//'smallint'
		public Keyword getSmallintKeyword_1_1() { return cSmallintKeyword_1_1; }
		
		//'integer'
		public Keyword getIntegerKeyword_1_2() { return cIntegerKeyword_1_2; }
		
		//'byte'
		public Keyword getByteKeyword_1_3() { return cByteKeyword_1_3; }
		
		//'longint'
		public Keyword getLongintKeyword_1_4() { return cLongintKeyword_1_4; }
		
		//'int64'
		public Keyword getInt64Keyword_1_5() { return cInt64Keyword_1_5; }
		
		//'word'
		public Keyword getWordKeyword_1_6() { return cWordKeyword_1_6; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1_7() { return cBooleanKeyword_1_7; }
		
		//'char'
		public Keyword getCharKeyword_1_8() { return cCharKeyword_1_8; }
		
		//'widechar'
		public Keyword getWidecharKeyword_1_9() { return cWidecharKeyword_1_9; }
		
		//'longword'
		public Keyword getLongwordKeyword_1_10() { return cLongwordKeyword_1_10; }
		
		//'pchar'
		public Keyword getPcharKeyword_1_11() { return cPcharKeyword_1_11; }
	}
	public class VariantTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.variantType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVariantKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOlevariantKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//variantType:
		//	{variantType} ('variant'
		//	| 'olevariant');
		@Override public ParserRule getRule() { return rule; }
		
		//{variantType} ('variant' | 'olevariant')
		public Group getGroup() { return cGroup; }
		
		//{variantType}
		public Action getVariantTypeAction_0() { return cVariantTypeAction_0; }
		
		//('variant' | 'olevariant')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'variant'
		public Keyword getVariantKeyword_1_0() { return cVariantKeyword_1_0; }
		
		//'olevariant'
		public Keyword getOlevariantKeyword_1_1() { return cOlevariantKeyword_1_1; }
	}
	public class SubrangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.subrangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstConstExprParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLastAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLastConstExprParserRuleCall_2_0 = (RuleCall)cLastAssignment_2.eContents().get(0);
		
		//subrangeType:
		//	first=constExpr '..' last=constExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//first=constExpr '..' last=constExpr
		public Group getGroup() { return cGroup; }
		
		//first=constExpr
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//constExpr
		public RuleCall getFirstConstExprParserRuleCall_0_0() { return cFirstConstExprParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//last=constExpr
		public Assignment getLastAssignment_2() { return cLastAssignment_2; }
		
		//constExpr
		public RuleCall getLastConstExprParserRuleCall_2_0() { return cLastConstExprParserRuleCall_2_0; }
	}
	public class EnumeratedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.enumeratedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumeratedTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementEnumeratedTypeElementParserRuleCall_2_0_0 = (RuleCall)cElementAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//enumeratedType:
		//	{enumeratedType} '(' (element+=enumeratedTypeElement ',')* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{enumeratedType} '(' (element+=enumeratedTypeElement ',')* ')'
		public Group getGroup() { return cGroup; }
		
		//{enumeratedType}
		public Action getEnumeratedTypeAction_0() { return cEnumeratedTypeAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(element+=enumeratedTypeElement ',')*
		public Group getGroup_2() { return cGroup_2; }
		
		//element+=enumeratedTypeElement
		public Assignment getElementAssignment_2_0() { return cElementAssignment_2_0; }
		
		//enumeratedTypeElement
		public RuleCall getElementEnumeratedTypeElementParserRuleCall_2_0_0() { return cElementEnumeratedTypeElementParserRuleCall_2_0_0; }
		
		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EnumeratedTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.enumeratedTypeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLiteralExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralExpConstExprParserRuleCall_1_1_0 = (RuleCall)cLiteralExpAssignment_1_1.eContents().get(0);
		
		//enumeratedTypeElement:
		//	id=ident ('=' literalExp=constExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ident ('=' literalExp=constExpr)?
		public Group getGroup() { return cGroup; }
		
		//id=ident
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_0_0() { return cIdIdentParserRuleCall_0_0; }
		
		//('=' literalExp=constExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//literalExp=constExpr
		public Assignment getLiteralExpAssignment_1_1() { return cLiteralExpAssignment_1_1; }
		
		//constExpr
		public RuleCall getLiteralExpConstExprParserRuleCall_1_1_0() { return cLiteralExpConstExprParserRuleCall_1_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.stringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cStringKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAnsistringKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cWidestringKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cStringKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cConstExpAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cConstExpConstExprParserRuleCall_1_3_2_0 = (RuleCall)cConstExpAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		
		//stringType:
		//	{stringType} ('string'
		//	| 'ansistring'
		//	| 'widestring'
		//	| 'string' '(' constExp=constExpr ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{stringType} ('string' | 'ansistring' | 'widestring' | 'string' '(' constExp=constExpr ')')
		public Group getGroup() { return cGroup; }
		
		//{stringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//('string' | 'ansistring' | 'widestring' | 'string' '(' constExp=constExpr ')')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'string'
		public Keyword getStringKeyword_1_0() { return cStringKeyword_1_0; }
		
		//'ansistring'
		public Keyword getAnsistringKeyword_1_1() { return cAnsistringKeyword_1_1; }
		
		//'widestring'
		public Keyword getWidestringKeyword_1_2() { return cWidestringKeyword_1_2; }
		
		//'string' '(' constExp=constExpr ')'
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'string'
		public Keyword getStringKeyword_1_3_0() { return cStringKeyword_1_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3_1() { return cLeftParenthesisKeyword_1_3_1; }
		
		//constExp=constExpr
		public Assignment getConstExpAssignment_1_3_2() { return cConstExpAssignment_1_3_2; }
		
		//constExpr
		public RuleCall getConstExpConstExprParserRuleCall_1_3_2_0() { return cConstExpConstExprParserRuleCall_1_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_3() { return cRightParenthesisKeyword_1_3_3; }
	}
	public class StrucTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.strucType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSetTypeParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cFileTypeParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cRecTypeParserRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Keyword cPackedKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		
		//strucType:
		//	'packed'? (arrayType | setType | fileType | recType 'packed'?);
		@Override public ParserRule getRule() { return rule; }
		
		//'packed'? (arrayType | setType | fileType | recType 'packed'?)
		public Group getGroup() { return cGroup; }
		
		//'packed'?
		public Keyword getPackedKeyword_0() { return cPackedKeyword_0; }
		
		//(arrayType | setType | fileType | recType 'packed'?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//arrayType
		public RuleCall getArrayTypeParserRuleCall_1_0() { return cArrayTypeParserRuleCall_1_0; }
		
		//setType
		public RuleCall getSetTypeParserRuleCall_1_1() { return cSetTypeParserRuleCall_1_1; }
		
		//fileType
		public RuleCall getFileTypeParserRuleCall_1_2() { return cFileTypeParserRuleCall_1_2; }
		
		//recType 'packed'?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//recType
		public RuleCall getRecTypeParserRuleCall_1_3_0() { return cRecTypeParserRuleCall_1_3_0; }
		
		//'packed'?
		public Keyword getPackedKeyword_1_3_1() { return cPackedKeyword_1_3_1; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.arrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrdinalTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrdinalTypeOrdinalTypeParserRuleCall_1_1_0 = (RuleCall)cOrdinalTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOrdinalTypAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOrdinalTypOrdinalTypeParserRuleCall_1_2_1_0 = (RuleCall)cOrdinalTypAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_4_0 = (RuleCall)cPortAssignment_4.eContents().get(0);
		
		//arrayType:
		//	'array' ('[' ordinalType+=ordinalType (',' ordinalTyp+=ordinalType)* ']')? 'of' type=type port=portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//'array' ('[' ordinalType+=ordinalType (',' ordinalTyp+=ordinalType)* ']')? 'of' type=type port=portabilityDirective?
		public Group getGroup() { return cGroup; }
		
		//'array'
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }
		
		//('[' ordinalType+=ordinalType (',' ordinalTyp+=ordinalType)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//ordinalType+=ordinalType
		public Assignment getOrdinalTypeAssignment_1_1() { return cOrdinalTypeAssignment_1_1; }
		
		//ordinalType
		public RuleCall getOrdinalTypeOrdinalTypeParserRuleCall_1_1_0() { return cOrdinalTypeOrdinalTypeParserRuleCall_1_1_0; }
		
		//(',' ordinalTyp+=ordinalType)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//ordinalTyp+=ordinalType
		public Assignment getOrdinalTypAssignment_1_2_1() { return cOrdinalTypAssignment_1_2_1; }
		
		//ordinalType
		public RuleCall getOrdinalTypOrdinalTypeParserRuleCall_1_2_1_0() { return cOrdinalTypOrdinalTypeParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//type=type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_4() { return cPortAssignment_4; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_4_0() { return cPortPortabilityDirectiveParserRuleCall_4_0; }
	}
	public class RecTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.recType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRecordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsFieldListParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_4_0 = (RuleCall)cPortAssignment_4.eContents().get(0);
		
		//recType:
		//	{recType} 'record' fields=fieldList? 'end' port=portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//{recType} 'record' fields=fieldList? 'end' port=portabilityDirective?
		public Group getGroup() { return cGroup; }
		
		//{recType}
		public Action getRecTypeAction_0() { return cRecTypeAction_0; }
		
		//'record'
		public Keyword getRecordKeyword_1() { return cRecordKeyword_1; }
		
		//fields=fieldList?
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }
		
		//fieldList
		public RuleCall getFieldsFieldListParserRuleCall_2_0() { return cFieldsFieldListParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_4() { return cPortAssignment_4; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_4_0() { return cPortPortabilityDirectiveParserRuleCall_4_0; }
	}
	public class FieldListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.fieldList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFieldFieldDeclParserRuleCall_0_0_0 = (RuleCall)cFieldAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVariantSectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariantSectVariantSectionParserRuleCall_1_0 = (RuleCall)cVariantSectAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fieldList:
		//	(field+=fieldDecl ';')+ variantSect=variantSection? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(field+=fieldDecl ';')+ variantSect=variantSection? ';'?
		public Group getGroup() { return cGroup; }
		
		//(field+=fieldDecl ';')+
		public Group getGroup_0() { return cGroup_0; }
		
		//field+=fieldDecl
		public Assignment getFieldAssignment_0_0() { return cFieldAssignment_0_0; }
		
		//fieldDecl
		public RuleCall getFieldFieldDeclParserRuleCall_0_0_0() { return cFieldFieldDeclParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//variantSect=variantSection?
		public Assignment getVariantSectAssignment_1() { return cVariantSectAssignment_1; }
		
		//variantSection
		public RuleCall getVariantSectVariantSectionParserRuleCall_1_0() { return cVariantSectVariantSectionParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.fieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdListIdentListParserRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		
		//fieldDecl:
		//	idList=identList ':' type=type port=portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//idList=identList ':' type=type port=portabilityDirective?
		public Group getGroup() { return cGroup; }
		
		//idList=identList
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_0_0() { return cIdListIdentListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_3_0() { return cPortPortabilityDirectiveParserRuleCall_3_0; }
	}
	public class VariantSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.variantSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRefTypeIdParserRuleCall_2_0 = (RuleCall)cTypeRefAssignment_2.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRecVariantsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRecVariantsRecVariantParserRuleCall_4_0_0 = (RuleCall)cRecVariantsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//variantSection:
		//	'case' (id=ident ':')? typeRef=typeId 'of' (recVariants+=recVariant ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' (id=ident ':')? typeRef=typeId 'of' (recVariants+=recVariant ';')+
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//(id=ident ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//id=ident
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0_0() { return cIdIdentParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//typeRef=typeId
		public Assignment getTypeRefAssignment_2() { return cTypeRefAssignment_2; }
		
		//typeId
		public RuleCall getTypeRefTypeIdParserRuleCall_2_0() { return cTypeRefTypeIdParserRuleCall_2_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//(recVariants+=recVariant ';')+
		public Group getGroup_4() { return cGroup_4; }
		
		//recVariants+=recVariant
		public Assignment getRecVariantsAssignment_4_0() { return cRecVariantsAssignment_4_0; }
		
		//recVariant
		public RuleCall getRecVariantsRecVariantParserRuleCall_4_0_0() { return cRecVariantsRecVariantParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class RecVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.recVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstExpConstExprParserRuleCall_0_0 = (RuleCall)cConstExpAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstExpConstExprParserRuleCall_2_0 = (RuleCall)cConstExpAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldListFieldListParserRuleCall_5_0 = (RuleCall)cFieldListAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//recVariant:
		//	constExp+=constExpr ',' constExp+=constExpr+ ':' '(' fieldList=fieldList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//constExp+=constExpr ',' constExp+=constExpr+ ':' '(' fieldList=fieldList ')'
		public Group getGroup() { return cGroup; }
		
		//constExp+=constExpr
		public Assignment getConstExpAssignment_0() { return cConstExpAssignment_0; }
		
		//constExpr
		public RuleCall getConstExpConstExprParserRuleCall_0_0() { return cConstExpConstExprParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//constExp+=constExpr+
		public Assignment getConstExpAssignment_2() { return cConstExpAssignment_2; }
		
		//constExpr
		public RuleCall getConstExpConstExprParserRuleCall_2_0() { return cConstExpConstExprParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//fieldList=fieldList
		public Assignment getFieldListAssignment_5() { return cFieldListAssignment_5; }
		
		//fieldList
		public RuleCall getFieldListFieldListParserRuleCall_5_0() { return cFieldListFieldListParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.setType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrdinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrdinalOrdinalTypeParserRuleCall_2_0 = (RuleCall)cOrdinalAssignment_2.eContents().get(0);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		
		//setType:
		//	'set' 'of' ordinal=ordinalType port=portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'of' ordinal=ordinalType port=portabilityDirective?
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//ordinal=ordinalType
		public Assignment getOrdinalAssignment_2() { return cOrdinalAssignment_2; }
		
		//ordinalType
		public RuleCall getOrdinalOrdinalTypeParserRuleCall_2_0() { return cOrdinalOrdinalTypeParserRuleCall_2_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_3_0() { return cPortPortabilityDirectiveParserRuleCall_3_0; }
	}
	public class FileTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.fileType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRefTypeIdParserRuleCall_2_0 = (RuleCall)cTypeRefAssignment_2.eContents().get(0);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		
		//fileType:
		//	'file' 'of' typeRef=typeId port=portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//'file' 'of' typeRef=typeId port=portabilityDirective?
		public Group getGroup() { return cGroup; }
		
		//'file'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//typeRef=typeId
		public Assignment getTypeRefAssignment_2() { return cTypeRefAssignment_2; }
		
		//typeId
		public RuleCall getTypeRefTypeIdParserRuleCall_2_0() { return cTypeRefTypeIdParserRuleCall_2_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_3_0() { return cPortPortabilityDirectiveParserRuleCall_3_0; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.pointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeIdParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPortabilityDirectiveParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//pointerType:
		//	'^' typeId portabilityDirective?;
		@Override public ParserRule getRule() { return rule; }
		
		//'^' typeId portabilityDirective?
		public Group getGroup() { return cGroup; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//typeId
		public RuleCall getTypeIdParserRuleCall_1() { return cTypeIdParserRuleCall_1; }
		
		//portabilityDirective?
		public RuleCall getPortabilityDirectiveParserRuleCall_2() { return cPortabilityDirectiveParserRuleCall_2; }
	}
	public class ProcedureTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.procedureType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPHeadingAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPHeadingProcedureHeadingParserRuleCall_0_0_0 = (RuleCall)cPHeadingAssignment_0_0.eContents().get(0);
		private final Assignment cFHeadingAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cFHeadingFunctionHeadingParserRuleCall_0_1_0 = (RuleCall)cFHeadingAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cObjectKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//procedureType:
		//	(pHeading=procedureHeading | fHeading=functionHeading) ('of' 'object')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(pHeading=procedureHeading | fHeading=functionHeading) ('of' 'object')?
		public Group getGroup() { return cGroup; }
		
		//(pHeading=procedureHeading | fHeading=functionHeading)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//pHeading=procedureHeading
		public Assignment getPHeadingAssignment_0_0() { return cPHeadingAssignment_0_0; }
		
		//procedureHeading
		public RuleCall getPHeadingProcedureHeadingParserRuleCall_0_0_0() { return cPHeadingProcedureHeadingParserRuleCall_0_0_0; }
		
		//fHeading=functionHeading
		public Assignment getFHeadingAssignment_0_1() { return cFHeadingAssignment_0_1; }
		
		//functionHeading
		public RuleCall getFHeadingFunctionHeadingParserRuleCall_0_1_0() { return cFHeadingFunctionHeadingParserRuleCall_0_1_0; }
		
		//('of' 'object')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'of'
		public Keyword getOfKeyword_1_0() { return cOfKeyword_1_0; }
		
		//'object'
		public Keyword getObjectKeyword_1_1() { return cObjectKeyword_1_1; }
	}
	public class VarSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.varSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVarDeclsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarDeclsVarDeclParserRuleCall_1_0_0 = (RuleCall)cVarDeclsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//varSection:
		//	'var' (varDecls+=varDecl ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' (varDecls+=varDecl ';')+
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//(varDecls+=varDecl ';')+
		public Group getGroup_1() { return cGroup_1; }
		
		//varDecls+=varDecl
		public Assignment getVarDeclsAssignment_1_0() { return cVarDeclsAssignment_1_0; }
		
		//varDecl
		public RuleCall getVarDeclsVarDeclParserRuleCall_1_0_0() { return cVarDeclsVarDeclParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.varDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdListIdentListParserRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cAbsoluteKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cAbsIdAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cAbsIdIdentParserRuleCall_3_0_1_0_0 = (RuleCall)cAbsIdAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cAbsConstAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cAbsConstConstExprParserRuleCall_3_0_1_1_0 = (RuleCall)cAbsConstAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cAbsInitiAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cAbsInitiConstExprParserRuleCall_3_1_1_0 = (RuleCall)cAbsInitiAssignment_3_1_1.eContents().get(0);
		private final RuleCall cPortabilityDirectiveParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//varDecl:
		//	idList=identList ':' type=type ('absolute' (absId=ident | absConst=constExpr) | '=' absIniti=constExpr)?
		//	portabilityDirective?
		//	//	| 	identList ':' type ('absolute' (ident) | '=' constExpr)? (portabilityDirective)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//idList=identList ':' type=type ('absolute' (absId=ident | absConst=constExpr) | '=' absIniti=constExpr)?
		//portabilityDirective?
		public Group getGroup() { return cGroup; }
		
		//idList=identList
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_0_0() { return cIdListIdentListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//('absolute' (absId=ident | absConst=constExpr) | '=' absIniti=constExpr)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'absolute' (absId=ident | absConst=constExpr)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'absolute'
		public Keyword getAbsoluteKeyword_3_0_0() { return cAbsoluteKeyword_3_0_0; }
		
		//(absId=ident | absConst=constExpr)
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//absId=ident
		public Assignment getAbsIdAssignment_3_0_1_0() { return cAbsIdAssignment_3_0_1_0; }
		
		//ident
		public RuleCall getAbsIdIdentParserRuleCall_3_0_1_0_0() { return cAbsIdIdentParserRuleCall_3_0_1_0_0; }
		
		//absConst=constExpr
		public Assignment getAbsConstAssignment_3_0_1_1() { return cAbsConstAssignment_3_0_1_1; }
		
		//constExpr
		public RuleCall getAbsConstConstExprParserRuleCall_3_0_1_1_0() { return cAbsConstConstExprParserRuleCall_3_0_1_1_0; }
		
		//'=' absIniti=constExpr
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_0() { return cEqualsSignKeyword_3_1_0; }
		
		//absIniti=constExpr
		public Assignment getAbsInitiAssignment_3_1_1() { return cAbsInitiAssignment_3_1_1; }
		
		//constExpr
		public RuleCall getAbsInitiConstExprParserRuleCall_3_1_1_0() { return cAbsInitiConstExprParserRuleCall_3_1_1_0; }
		
		//portabilityDirective?
		public RuleCall getPortabilityDirectiveParserRuleCall_4() { return cPortabilityDirectiveParserRuleCall_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRelOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelOpRelOpParserRuleCall_1_1_0 = (RuleCall)cRelOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//expression:
		//	simpleExpression ({relExp.left=current} relOp=relOp right=simpleExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleExpression ({relExp.left=current} relOp=relOp right=simpleExpression)*
		public Group getGroup() { return cGroup; }
		
		//simpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0() { return cSimpleExpressionParserRuleCall_0; }
		
		//({relExp.left=current} relOp=relOp right=simpleExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{relExp.left=current}
		public Action getRelExpLeftAction_1_0() { return cRelExpLeftAction_1_0; }
		
		//relOp=relOp
		public Assignment getRelOpAssignment_1_1() { return cRelOpAssignment_1_1; }
		
		//relOp
		public RuleCall getRelOpRelOpParserRuleCall_1_1_0() { return cRelOpRelOpParserRuleCall_1_1_0; }
		
		//right=simpleExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//simpleExpression
		public RuleCall getRightSimpleExpressionParserRuleCall_1_2_0() { return cRightSimpleExpressionParserRuleCall_1_2_0; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.simpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cTermParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cAddExpLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAddOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAddOpAddOpParserRuleCall_2_1_0 = (RuleCall)cAddOpAssignment_2_1.eContents().get(0);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//simpleExpression:
		//	('+' | '-')? term ({addExp.left=current} addOp=addOp right=term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | '-')? term ({addExp.left=current} addOp=addOp right=term)*
		public Group getGroup() { return cGroup; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//term
		public RuleCall getTermParserRuleCall_1() { return cTermParserRuleCall_1; }
		
		//({addExp.left=current} addOp=addOp right=term)*
		public Group getGroup_2() { return cGroup_2; }
		
		//{addExp.left=current}
		public Action getAddExpLeftAction_2_0() { return cAddExpLeftAction_2_0; }
		
		//addOp=addOp
		public Assignment getAddOpAssignment_2_1() { return cAddOpAssignment_2_1; }
		
		//addOp
		public RuleCall getAddOpAddOpParserRuleCall_2_1_0() { return cAddOpAddOpParserRuleCall_2_1_0; }
		
		//right=term
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }
		
		//term
		public RuleCall getRightTermParserRuleCall_2_2_0() { return cRightTermParserRuleCall_2_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMultOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultOpMulOpParserRuleCall_1_1_0 = (RuleCall)cMultOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//term:
		//	factor ({multExp.left=current} multOp=mulOp right=factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//factor ({multExp.left=current} multOp=mulOp right=factor)*
		public Group getGroup() { return cGroup; }
		
		//factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({multExp.left=current} multOp=mulOp right=factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{multExp.left=current}
		public Action getMultExpLeftAction_1_0() { return cMultExpLeftAction_1_0; }
		
		//multOp=mulOp
		public Assignment getMultOpAssignment_1_1() { return cMultOpAssignment_1_1; }
		
		//mulOp
		public RuleCall getMultOpMulOpParserRuleCall_1_1_0() { return cMultOpMulOpParserRuleCall_1_1_0; }
		
		//right=factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFactorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDesignatorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_1_0_0_0 = (RuleCall)cDesignatorAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExpListAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExpListExprListParserRuleCall_1_0_1_1_0 = (RuleCall)cExpListAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDesignatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDesignatorDesignatorParserRuleCall_1_1_1_0 = (RuleCall)cDesignatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cNumberAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cNumberNumberParserRuleCall_1_2_0 = (RuleCall)cNumberAssignment_1_2.eContents().get(0);
		private final Assignment cStringAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cStringStringParserRuleCall_1_3_0 = (RuleCall)cStringAssignment_1_3.eContents().get(0);
		private final Keyword cNilKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cExpAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_5_1_0 = (RuleCall)cExpAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5_2 = (Keyword)cGroup_1_5.eContents().get(2);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Keyword cNotKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cExpAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cExpFactorParserRuleCall_1_6_1_0 = (RuleCall)cExpAssignment_1_6_1.eContents().get(0);
		private final Assignment cSetConstuctorAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cSetConstuctorSetConstructorParserRuleCall_1_7_0 = (RuleCall)cSetConstuctorAssignment_1_7.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cAlternatives_1.eContents().get(8);
		private final Assignment cTypeRefAssignment_1_8_0 = (Assignment)cGroup_1_8.eContents().get(0);
		private final RuleCall cTypeRefTypeIdParserRuleCall_1_8_0_0 = (RuleCall)cTypeRefAssignment_1_8_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cExpAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_1_8_2_0 = (RuleCall)cExpAssignment_1_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_8_3 = (Keyword)cGroup_1_8.eContents().get(3);
		
		//factor:
		//	{factor} (designator=designator ('(' expList=exprList ')')?
		//	| '@' designator=designator
		//	| number=number
		//	| string=string
		//	| 'nil'
		//	| '(' exp=expression ')'
		//	| 'not' exp=factor
		//	| setConstuctor=setConstructor
		//	| typeRef=typeId '(' exp=expression ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{factor} (designator=designator ('(' expList=exprList ')')? | '@' designator=designator | number=number | string=string
		//| 'nil' | '(' exp=expression ')' | 'not' exp=factor | setConstuctor=setConstructor | typeRef=typeId '(' exp=expression
		//')')
		public Group getGroup() { return cGroup; }
		
		//{factor}
		public Action getFactorAction_0() { return cFactorAction_0; }
		
		//(designator=designator ('(' expList=exprList ')')? | '@' designator=designator | number=number | string=string | 'nil' |
		//'(' exp=expression ')' | 'not' exp=factor | setConstuctor=setConstructor | typeRef=typeId '(' exp=expression ')')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//designator=designator ('(' expList=exprList ')')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_1_0_0() { return cDesignatorAssignment_1_0_0; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_1_0_0_0() { return cDesignatorDesignatorParserRuleCall_1_0_0_0; }
		
		//('(' expList=exprList ')')?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1_0() { return cLeftParenthesisKeyword_1_0_1_0; }
		
		//expList=exprList
		public Assignment getExpListAssignment_1_0_1_1() { return cExpListAssignment_1_0_1_1; }
		
		//exprList
		public RuleCall getExpListExprListParserRuleCall_1_0_1_1_0() { return cExpListExprListParserRuleCall_1_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_1_2() { return cRightParenthesisKeyword_1_0_1_2; }
		
		//'@' designator=designator
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_1_0() { return cCommercialAtKeyword_1_1_0; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_1_1_1() { return cDesignatorAssignment_1_1_1; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_1_1_1_0() { return cDesignatorDesignatorParserRuleCall_1_1_1_0; }
		
		//number=number
		public Assignment getNumberAssignment_1_2() { return cNumberAssignment_1_2; }
		
		//number
		public RuleCall getNumberNumberParserRuleCall_1_2_0() { return cNumberNumberParserRuleCall_1_2_0; }
		
		//string=string
		public Assignment getStringAssignment_1_3() { return cStringAssignment_1_3; }
		
		//string
		public RuleCall getStringStringParserRuleCall_1_3_0() { return cStringStringParserRuleCall_1_3_0; }
		
		//'nil'
		public Keyword getNilKeyword_1_4() { return cNilKeyword_1_4; }
		
		//'(' exp=expression ')'
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_5_0() { return cLeftParenthesisKeyword_1_5_0; }
		
		//exp=expression
		public Assignment getExpAssignment_1_5_1() { return cExpAssignment_1_5_1; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_1_5_1_0() { return cExpExpressionParserRuleCall_1_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5_2() { return cRightParenthesisKeyword_1_5_2; }
		
		//'not' exp=factor
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'not'
		public Keyword getNotKeyword_1_6_0() { return cNotKeyword_1_6_0; }
		
		//exp=factor
		public Assignment getExpAssignment_1_6_1() { return cExpAssignment_1_6_1; }
		
		//factor
		public RuleCall getExpFactorParserRuleCall_1_6_1_0() { return cExpFactorParserRuleCall_1_6_1_0; }
		
		//setConstuctor=setConstructor
		public Assignment getSetConstuctorAssignment_1_7() { return cSetConstuctorAssignment_1_7; }
		
		//setConstructor
		public RuleCall getSetConstuctorSetConstructorParserRuleCall_1_7_0() { return cSetConstuctorSetConstructorParserRuleCall_1_7_0; }
		
		//typeRef=typeId '(' exp=expression ')'
		public Group getGroup_1_8() { return cGroup_1_8; }
		
		//typeRef=typeId
		public Assignment getTypeRefAssignment_1_8_0() { return cTypeRefAssignment_1_8_0; }
		
		//typeId
		public RuleCall getTypeRefTypeIdParserRuleCall_1_8_0_0() { return cTypeRefTypeIdParserRuleCall_1_8_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_8_1() { return cLeftParenthesisKeyword_1_8_1; }
		
		//exp=expression
		public Assignment getExpAssignment_1_8_2() { return cExpAssignment_1_8_2; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_1_8_2_0() { return cExpExpressionParserRuleCall_1_8_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_8_3() { return cRightParenthesisKeyword_1_8_3; }
	}
	public class RelOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.relOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpLessThanSignGreaterThanSignKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Keyword cOpInKeyword_1_0_6 = (Keyword)cOpAlternatives_1_0.eContents().get(6);
		private final Keyword cOpIsKeyword_1_0_7 = (Keyword)cOpAlternatives_1_0.eContents().get(7);
		private final Keyword cOpAsKeyword_1_0_8 = (Keyword)cOpAlternatives_1_0.eContents().get(8);
		
		//relOp:
		//	{relOp} op=('='
		//	| '>'
		//	| '<'
		//	| '<='
		//	| '>='
		//	| '<>'
		//	| 'in'
		//	| 'is'
		//	| 'as');
		@Override public ParserRule getRule() { return rule; }
		
		//{relOp} op=('=' | '>' | '<' | '<=' | '>=' | '<>' | 'in' | 'is' | 'as')
		public Group getGroup() { return cGroup; }
		
		//{relOp}
		public Action getRelOpAction_0() { return cRelOpAction_0; }
		
		//op=('=' | '>' | '<' | '<=' | '>=' | '<>' | 'in' | 'is' | 'as')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('=' | '>' | '<' | '<=' | '>=' | '<>' | 'in' | 'is' | 'as')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_0_0() { return cOpEqualsSignKeyword_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_1() { return cOpGreaterThanSignKeyword_1_0_1; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_2() { return cOpLessThanSignKeyword_1_0_2; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_3() { return cOpLessThanSignEqualsSignKeyword_1_0_3; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_4() { return cOpGreaterThanSignEqualsSignKeyword_1_0_4; }
		
		//'<>'
		public Keyword getOpLessThanSignGreaterThanSignKeyword_1_0_5() { return cOpLessThanSignGreaterThanSignKeyword_1_0_5; }
		
		//'in'
		public Keyword getOpInKeyword_1_0_6() { return cOpInKeyword_1_0_6; }
		
		//'is'
		public Keyword getOpIsKeyword_1_0_7() { return cOpIsKeyword_1_0_7; }
		
		//'as'
		public Keyword getOpAsKeyword_1_0_8() { return cOpAsKeyword_1_0_8; }
	}
	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.addOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAdOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpXorKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		
		//addOp:
		//	{adOp} op=('+'
		//	| '-'
		//	| 'or'
		//	| 'xor');
		@Override public ParserRule getRule() { return rule; }
		
		//{adOp} op=('+' | '-' | 'or' | 'xor')
		public Group getGroup() { return cGroup; }
		
		//{adOp}
		public Action getAdOpAction_0() { return cAdOpAction_0; }
		
		//op=('+' | '-' | 'or' | 'xor')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('+' | '-' | 'or' | 'xor')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0() { return cOpPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_1() { return cOpHyphenMinusKeyword_1_0_1; }
		
		//'or'
		public Keyword getOpOrKeyword_1_0_2() { return cOpOrKeyword_1_0_2; }
		
		//'xor'
		public Keyword getOpXorKeyword_1_0_3() { return cOpXorKeyword_1_0_3; }
	}
	public class MulOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.mulOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMulOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpDivKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpModKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpAndKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpShlKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Keyword cOpShrKeyword_1_0_6 = (Keyword)cOpAlternatives_1_0.eContents().get(6);
		
		//mulOp:
		//	{mulOp} op=('*'
		//	| '/'
		//	| 'div'
		//	| 'mod'
		//	| 'and'
		//	| 'shl'
		//	| 'shr');
		@Override public ParserRule getRule() { return rule; }
		
		//{mulOp} op=('*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr')
		public Group getGroup() { return cGroup; }
		
		//{mulOp}
		public Action getMulOpAction_0() { return cMulOpAction_0; }
		
		//op=('*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0() { return cOpAsteriskKeyword_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_1() { return cOpSolidusKeyword_1_0_1; }
		
		//'div'
		public Keyword getOpDivKeyword_1_0_2() { return cOpDivKeyword_1_0_2; }
		
		//'mod'
		public Keyword getOpModKeyword_1_0_3() { return cOpModKeyword_1_0_3; }
		
		//'and'
		public Keyword getOpAndKeyword_1_0_4() { return cOpAndKeyword_1_0_4; }
		
		//'shl'
		public Keyword getOpShlKeyword_1_0_5() { return cOpShlKeyword_1_0_5; }
		
		//'shr'
		public Keyword getOpShrKeyword_1_0_6() { return cOpShrKeyword_1_0_6; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.designator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubpartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubpartDesignatorSubPartParserRuleCall_0_0 = (RuleCall)cSubpartAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDesignatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDesignatorDesignatorParserRuleCall_1_1_0 = (RuleCall)cDesignatorAssignment_1_1.eContents().get(0);
		
		//designator:
		//	subpart=designatorSubPart ('.' designator=designator)?;
		@Override public ParserRule getRule() { return rule; }
		
		//subpart=designatorSubPart ('.' designator=designator)?
		public Group getGroup() { return cGroup; }
		
		//subpart=designatorSubPart
		public Assignment getSubpartAssignment_0() { return cSubpartAssignment_0; }
		
		//designatorSubPart
		public RuleCall getSubpartDesignatorSubPartParserRuleCall_0_0() { return cSubpartDesignatorSubPartParserRuleCall_0_0; }
		
		//('.' designator=designator)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_1_1() { return cDesignatorAssignment_1_1; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_1_1_0() { return cDesignatorDesignatorParserRuleCall_1_1_0; }
	}
	public class DesignatorSubPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.designatorSubPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPartDesignatorPartParserRuleCall_0_0 = (RuleCall)cPartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExprListAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExprListExprListParserRuleCall_1_0_1_0 = (RuleCall)cExprListAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//designatorSubPart // modified
		//:
		//	part=designatorPart ('[' exprList+=exprList ']' | '^')*;
		@Override public ParserRule getRule() { return rule; }
		
		//part=designatorPart ('[' exprList+=exprList ']' | '^')*
		public Group getGroup() { return cGroup; }
		
		//part=designatorPart
		public Assignment getPartAssignment_0() { return cPartAssignment_0; }
		
		//designatorPart
		public RuleCall getPartDesignatorPartParserRuleCall_0_0() { return cPartDesignatorPartParserRuleCall_0_0; }
		
		//('[' exprList+=exprList ']' | '^')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'[' exprList+=exprList ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//exprList+=exprList
		public Assignment getExprListAssignment_1_0_1() { return cExprListAssignment_1_0_1; }
		
		//exprList
		public RuleCall getExprListExprListParserRuleCall_1_0_1_0() { return cExprListExprListParserRuleCall_1_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
	}
	public class DesignatorPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.designatorPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReservedWordAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReservedWordReservedWordParserRuleCall_1_1_0 = (RuleCall)cReservedWordAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_2_0_0 = (RuleCall)cIdAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cId2Assignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cId2IDTerminalRuleCall_2_2_0 = (RuleCall)cId2Assignment_2_2.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//designatorPart // modified
		//:
		//	id=ID
		//	| '&' reservedWord=reservedWord
		//	| id=ID '(' id2=ID '^' ')' // mine
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID | '&' reservedWord=reservedWord | id=ID '(' id2=ID '^' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//'&' reservedWord=reservedWord
		public Group getGroup_1() { return cGroup_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }
		
		//reservedWord=reservedWord
		public Assignment getReservedWordAssignment_1_1() { return cReservedWordAssignment_1_1; }
		
		//reservedWord
		public RuleCall getReservedWordReservedWordParserRuleCall_1_1_0() { return cReservedWordReservedWordParserRuleCall_1_1_0; }
		
		//id=ID '(' id2=ID '^' ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//id=ID
		public Assignment getIdAssignment_2_0() { return cIdAssignment_2_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0_0() { return cIdIDTerminalRuleCall_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//id2=ID
		public Assignment getId2Assignment_2_2() { return cId2Assignment_2_2; }
		
		//ID
		public RuleCall getId2IDTerminalRuleCall_2_2_0() { return cId2IDTerminalRuleCall_2_2_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_2_3() { return cCircumflexAccentKeyword_2_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}
	public class SetConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.setConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementSetElementParserRuleCall_1_0_0 = (RuleCall)cElementAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementSetElementParserRuleCall_1_1_1_0 = (RuleCall)cElementAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//setConstructor:
		//	'[' (element+=setElement (',' element+=setElement)*) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (element+=setElement (',' element+=setElement)*) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(element+=setElement (',' element+=setElement)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//element+=setElement
		public Assignment getElementAssignment_1_0() { return cElementAssignment_1_0; }
		
		//setElement
		public RuleCall getElementSetElementParserRuleCall_1_0_0() { return cElementSetElementParserRuleCall_1_0_0; }
		
		//(',' element+=setElement)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//element+=setElement
		public Assignment getElementAssignment_1_1_1() { return cElementAssignment_1_1_1; }
		
		//setElement
		public RuleCall getElementSetElementParserRuleCall_1_1_1_0() { return cElementSetElementParserRuleCall_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SetElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.setElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstExpressionParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLastAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLastExpressionParserRuleCall_1_1_0 = (RuleCall)cLastAssignment_1_1.eContents().get(0);
		
		//setElement:
		//	first=expression ('..' last=expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//first=expression ('..' last=expression)?
		public Group getGroup() { return cGroup; }
		
		//first=expression
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//expression
		public RuleCall getFirstExpressionParserRuleCall_0_0() { return cFirstExpressionParserRuleCall_0_0; }
		
		//('..' last=expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//last=expression
		public Assignment getLastAssignment_1_1() { return cLastAssignment_1_1; }
		
		//expression
		public RuleCall getLastExpressionParserRuleCall_1_1_0() { return cLastExpressionParserRuleCall_1_1_0; }
	}
	public class ExprListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.exprList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpsExpressionParserRuleCall_0_0 = (RuleCall)cExpsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//exprList:
		//	exps+=expression (',' exps+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exps+=expression (',' exps+=expression)*
		public Group getGroup() { return cGroup; }
		
		//exps+=expression
		public Assignment getExpsAssignment_0() { return cExpsAssignment_0; }
		
		//expression
		public RuleCall getExpsExpressionParserRuleCall_0_0() { return cExpsExpressionParserRuleCall_0_0; }
		
		//(',' exps+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exps+=expression
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }
		
		//expression
		public RuleCall getExpsExpressionParserRuleCall_1_1_0() { return cExpsExpressionParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelIdLabelIdParserRuleCall_0_0_0 = (RuleCall)cLabelIdAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementUnlabelledStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//statement:
		//	(labelId=labelId ':')? statement=unlabelledStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//(labelId=labelId ':')? statement=unlabelledStatement
		public Group getGroup() { return cGroup; }
		
		//(labelId=labelId ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//labelId=labelId
		public Assignment getLabelIdAssignment_0_0() { return cLabelIdAssignment_0_0; }
		
		//labelId
		public RuleCall getLabelIdLabelIdParserRuleCall_0_0_0() { return cLabelIdLabelIdParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//statement=unlabelledStatement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//unlabelledStatement
		public RuleCall getStatementUnlabelledStatementParserRuleCall_1_0() { return cStatementUnlabelledStatementParserRuleCall_1_0; }
	}
	public class StmtListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.stmtList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatmentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatmentsStatementParserRuleCall_1_0_0 = (RuleCall)cStatmentsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//stmtList:
		//	{stmtList} (statments+=statement ';'?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{stmtList} (statments+=statement ';'?)*
		public Group getGroup() { return cGroup; }
		
		//{stmtList}
		public Action getStmtListAction_0() { return cStmtListAction_0; }
		
		//(statments+=statement ';'?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//statments+=statement
		public Assignment getStatmentsAssignment_1_0() { return cStatmentsAssignment_1_0; }
		
		//statement
		public RuleCall getStatmentsStatementParserRuleCall_1_0_0() { return cStatmentsStatementParserRuleCall_1_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class UnlabelledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.unlabelledStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//unlabelledStatement:
		//	simpleStatement | structStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleStatement | structStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simpleStatement
		public RuleCall getSimpleStatementParserRuleCall_0() { return cSimpleStatementParserRuleCall_0; }
		
		//structStmt
		public RuleCall getStructStmtParserRuleCall_1() { return cStructStmtParserRuleCall_1; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.simpleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentStmntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDesignatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDesignatorDesignatorParserRuleCall_0_1_0 = (RuleCall)cDesignatorAssignment_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cOperatorColonEqualsSignKeyword_0_2_0 = (Keyword)cOperatorAssignment_0_2.eContents().get(0);
		private final Assignment cExpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_0_3_0 = (RuleCall)cExpAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCallStmntAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cDesignatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDesignatorDesignatorParserRuleCall_1_1_0 = (RuleCall)cDesignatorAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgsExprListParserRuleCall_1_2_1_0 = (RuleCall)cArgsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInheritedStamntAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cInheritedKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cGotoStmntAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGotoKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLabelAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLabelLabelIdParserRuleCall_3_2_0 = (RuleCall)cLabelAssignment_3_2.eContents().get(0);
		
		//simpleStatement:
		//	{assignmentStmnt} designator=designator operator=':=' exp=expression
		//	| {callStmnt} designator=designator ('(' args=exprList ')')?
		//	| {inheritedStamnt} 'inherited'
		//	| {gotoStmnt} 'goto' label=labelId;
		@Override public ParserRule getRule() { return rule; }
		
		//{assignmentStmnt} designator=designator operator=':=' exp=expression | {callStmnt} designator=designator ('('
		//args=exprList ')')? | {inheritedStamnt} 'inherited' | {gotoStmnt} 'goto' label=labelId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{assignmentStmnt} designator=designator operator=':=' exp=expression
		public Group getGroup_0() { return cGroup_0; }
		
		//{assignmentStmnt}
		public Action getAssignmentStmntAction_0_0() { return cAssignmentStmntAction_0_0; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_0_1() { return cDesignatorAssignment_0_1; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_0_1_0() { return cDesignatorDesignatorParserRuleCall_0_1_0; }
		
		//operator=':='
		public Assignment getOperatorAssignment_0_2() { return cOperatorAssignment_0_2; }
		
		//':='
		public Keyword getOperatorColonEqualsSignKeyword_0_2_0() { return cOperatorColonEqualsSignKeyword_0_2_0; }
		
		//exp=expression
		public Assignment getExpAssignment_0_3() { return cExpAssignment_0_3; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_0_3_0() { return cExpExpressionParserRuleCall_0_3_0; }
		
		//{callStmnt} designator=designator ('(' args=exprList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{callStmnt}
		public Action getCallStmntAction_1_0() { return cCallStmntAction_1_0; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_1_1() { return cDesignatorAssignment_1_1; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_1_1_0() { return cDesignatorDesignatorParserRuleCall_1_1_0; }
		
		//('(' args=exprList ')')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }
		
		//args=exprList
		public Assignment getArgsAssignment_1_2_1() { return cArgsAssignment_1_2_1; }
		
		//exprList
		public RuleCall getArgsExprListParserRuleCall_1_2_1_0() { return cArgsExprListParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }
		
		//{inheritedStamnt} 'inherited'
		public Group getGroup_2() { return cGroup_2; }
		
		//{inheritedStamnt}
		public Action getInheritedStamntAction_2_0() { return cInheritedStamntAction_2_0; }
		
		//'inherited'
		public Keyword getInheritedKeyword_2_1() { return cInheritedKeyword_2_1; }
		
		//{gotoStmnt} 'goto' label=labelId
		public Group getGroup_3() { return cGroup_3; }
		
		//{gotoStmnt}
		public Action getGotoStmntAction_3_0() { return cGotoStmntAction_3_0; }
		
		//'goto'
		public Keyword getGotoKeyword_3_1() { return cGotoKeyword_3_1; }
		
		//label=labelId
		public Assignment getLabelAssignment_3_2() { return cLabelAssignment_3_2; }
		
		//labelId
		public RuleCall getLabelLabelIdParserRuleCall_3_2_0() { return cLabelLabelIdParserRuleCall_3_2_0; }
	}
	public class StructStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.structStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompoundStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWithStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTryStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRaiseStmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAssemblerStmtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//structStmt:
		//	compoundStmt
		//	| conditionalStmt
		//	| loopStmt
		//	| withStmt
		//	| tryStmt
		//	| raiseStmt
		//	| assemblerStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//compoundStmt | conditionalStmt | loopStmt | withStmt | tryStmt | raiseStmt | assemblerStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//compoundStmt
		public RuleCall getCompoundStmtParserRuleCall_0() { return cCompoundStmtParserRuleCall_0; }
		
		//conditionalStmt
		public RuleCall getConditionalStmtParserRuleCall_1() { return cConditionalStmtParserRuleCall_1; }
		
		//loopStmt
		public RuleCall getLoopStmtParserRuleCall_2() { return cLoopStmtParserRuleCall_2; }
		
		//withStmt
		public RuleCall getWithStmtParserRuleCall_3() { return cWithStmtParserRuleCall_3; }
		
		//tryStmt
		public RuleCall getTryStmtParserRuleCall_4() { return cTryStmtParserRuleCall_4; }
		
		//raiseStmt
		public RuleCall getRaiseStmtParserRuleCall_5() { return cRaiseStmtParserRuleCall_5; }
		
		//assemblerStmt
		public RuleCall getAssemblerStmtParserRuleCall_6() { return cAssemblerStmtParserRuleCall_6; }
	}
	public class CompoundStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.compoundStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStamtListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStamtListStmtListParserRuleCall_1_0 = (RuleCall)cStamtListAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//compoundStmt:
		//	'begin' stamtList=stmtList 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'begin' stamtList=stmtList 'end'
		public Group getGroup() { return cGroup; }
		
		//'begin'
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }
		
		//stamtList=stmtList
		public Assignment getStamtListAssignment_1() { return cStamtListAssignment_1; }
		
		//stmtList
		public RuleCall getStamtListStmtListParserRuleCall_1_0() { return cStamtListStmtListParserRuleCall_1_0; }
		
		//'end'
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class ConditionalStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.conditionalStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaseStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//conditionalStmt:
		//	ifStmt
		//	| caseStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//ifStmt | caseStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ifStmt
		public RuleCall getIfStmtParserRuleCall_0() { return cIfStmtParserRuleCall_0; }
		
		//caseStmt
		public RuleCall getCaseStmtParserRuleCall_1() { return cCaseStmtParserRuleCall_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.ifStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//ifStmt:
		//	'if' condition=expression 'then' then=statement ';'? ('else' else=statement ';'?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=expression 'then' then=statement ';'? ('else' else=statement ';'?)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then=statement
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//statement
		public RuleCall getThenStatementParserRuleCall_3_0() { return cThenStatementParserRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//('else' else=statement ';'?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }
	}
	public class CaseStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.caseStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesCaseSelectorParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cCasesCaseSelectorParserRuleCall_5_0_0 = (RuleCall)cCasesAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDefaultAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDefaultStmtListParserRuleCall_6_1_0 = (RuleCall)cDefaultAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//caseStmt:
		//	'case' expression=expression 'of' cases+=caseSelector ';' (cases+=caseSelector ';')* ('else' default=stmtList) ';'
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' expression=expression 'of' cases+=caseSelector ';' (cases+=caseSelector ';')* ('else' default=stmtList) ';' 'end'
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//cases+=caseSelector
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }
		
		//caseSelector
		public RuleCall getCasesCaseSelectorParserRuleCall_3_0() { return cCasesCaseSelectorParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//(cases+=caseSelector ';')*
		public Group getGroup_5() { return cGroup_5; }
		
		//cases+=caseSelector
		public Assignment getCasesAssignment_5_0() { return cCasesAssignment_5_0; }
		
		//caseSelector
		public RuleCall getCasesCaseSelectorParserRuleCall_5_0_0() { return cCasesCaseSelectorParserRuleCall_5_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//('else' default=stmtList)
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//default=stmtList
		public Assignment getDefaultAssignment_6_1() { return cDefaultAssignment_6_1; }
		
		//stmtList
		public RuleCall getDefaultStmtListParserRuleCall_6_1_0() { return cDefaultStmtListParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'end'
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}
	public class CaseSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.caseSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsCaseLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLabelsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelsCaseLabelParserRuleCall_1_1_0 = (RuleCall)cLabelsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtStatementParserRuleCall_3_0 = (RuleCall)cStmtAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//caseSelector:
		//	labels+=caseLabel (',' labels+=caseLabel)* ':' stmt=statement ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//labels+=caseLabel (',' labels+=caseLabel)* ':' stmt=statement ';'?
		public Group getGroup() { return cGroup; }
		
		//labels+=caseLabel
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }
		
		//caseLabel
		public RuleCall getLabelsCaseLabelParserRuleCall_0_0() { return cLabelsCaseLabelParserRuleCall_0_0; }
		
		//(',' labels+=caseLabel)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//labels+=caseLabel
		public Assignment getLabelsAssignment_1_1() { return cLabelsAssignment_1_1; }
		
		//caseLabel
		public RuleCall getLabelsCaseLabelParserRuleCall_1_1_0() { return cLabelsCaseLabelParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//stmt=statement
		public Assignment getStmtAssignment_3() { return cStmtAssignment_3; }
		
		//statement
		public RuleCall getStmtStatementParserRuleCall_3_0() { return cStmtStatementParserRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class CaseLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.caseLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstConstExprParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLastAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLastConstExprParserRuleCall_1_1_0 = (RuleCall)cLastAssignment_1_1.eContents().get(0);
		
		//caseLabel:
		//	first=constExpr ('..' last=constExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//first=constExpr ('..' last=constExpr)?
		public Group getGroup() { return cGroup; }
		
		//first=constExpr
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//constExpr
		public RuleCall getFirstConstExprParserRuleCall_0_0() { return cFirstConstExprParserRuleCall_0_0; }
		
		//('..' last=constExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//last=constExpr
		public Assignment getLastAssignment_1_1() { return cLastAssignment_1_1; }
		
		//constExpr
		public RuleCall getLastConstExprParserRuleCall_1_1_0() { return cLastConstExprParserRuleCall_1_1_0; }
	}
	public class LoopStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.loopStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRepeatStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//loopStmt:
		//	repeatStmt
		//	| whileStmt
		//	| forStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//repeatStmt | whileStmt | forStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//repeatStmt
		public RuleCall getRepeatStmtParserRuleCall_0() { return cRepeatStmtParserRuleCall_0; }
		
		//whileStmt
		public RuleCall getWhileStmtParserRuleCall_1() { return cWhileStmtParserRuleCall_1; }
		
		//forStmt
		public RuleCall getForStmtParserRuleCall_2() { return cForStmtParserRuleCall_2; }
	}
	public class RepeatStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.repeatStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStmtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtStatementParserRuleCall_1_0 = (RuleCall)cStmtAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cUntilKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		
		//repeatStmt:
		//	'repeat' stmt=statement ';'? 'until' condition=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat' stmt=statement ';'? 'until' condition=expression
		public Group getGroup() { return cGroup; }
		
		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//stmt=statement
		public Assignment getStmtAssignment_1() { return cStmtAssignment_1; }
		
		//statement
		public RuleCall getStmtStatementParserRuleCall_1_0() { return cStmtStatementParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//'until'
		public Keyword getUntilKeyword_3() { return cUntilKeyword_3; }
		
		//condition=expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
	}
	public class WhileStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.whileStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtStatementParserRuleCall_3_0 = (RuleCall)cStmtAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//whileStmt:
		//	'while' condition=expression 'do' stmt=statement ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=expression 'do' stmt=statement ';'?
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//stmt=statement
		public Assignment getStmtAssignment_3() { return cStmtAssignment_3; }
		
		//statement
		public RuleCall getStmtStatementParserRuleCall_3_0() { return cStmtStatementParserRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.forStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIdQualIdParserRuleCall_1_0 = (RuleCall)cVarIdAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarInitExpressionParserRuleCall_3_0 = (RuleCall)cVarInitAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cDowntoKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionExpressionParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Keyword cDoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStmtAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStmtStatementParserRuleCall_7_0 = (RuleCall)cStmtAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//forStmt:
		//	'for' varId=qualId ':=' varInit=expression ('to' | 'downto') condition=expression 'do' stmt=statement ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' varId=qualId ':=' varInit=expression ('to' | 'downto') condition=expression 'do' stmt=statement ';'?
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//varId=qualId
		public Assignment getVarIdAssignment_1() { return cVarIdAssignment_1; }
		
		//qualId
		public RuleCall getVarIdQualIdParserRuleCall_1_0() { return cVarIdQualIdParserRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//varInit=expression
		public Assignment getVarInitAssignment_3() { return cVarInitAssignment_3; }
		
		//expression
		public RuleCall getVarInitExpressionParserRuleCall_3_0() { return cVarInitExpressionParserRuleCall_3_0; }
		
		//('to' | 'downto')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'to'
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }
		
		//'downto'
		public Keyword getDowntoKeyword_4_1() { return cDowntoKeyword_4_1; }
		
		//condition=expression
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//expression
		public RuleCall getConditionExpressionParserRuleCall_5_0() { return cConditionExpressionParserRuleCall_5_0; }
		
		//'do'
		public Keyword getDoKeyword_6() { return cDoKeyword_6; }
		
		//stmt=statement
		public Assignment getStmtAssignment_7() { return cStmtAssignment_7; }
		
		//statement
		public RuleCall getStmtStatementParserRuleCall_7_0() { return cStmtStatementParserRuleCall_7_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class WithStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.withStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsIdentListParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtStatementParserRuleCall_3_0 = (RuleCall)cStmtAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//withStmt // added simpleStatement
		//:
		//	'with' vars=identList 'do' stmt=statement ';'? // changed identList by expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' vars=identList 'do' stmt=statement ';'?
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//vars=identList
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//identList
		public RuleCall getVarsIdentListParserRuleCall_1_0() { return cVarsIdentListParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//stmt=statement
		public Assignment getStmtAssignment_3() { return cStmtAssignment_3; }
		
		//statement
		public RuleCall getStmtStatementParserRuleCall_3_0() { return cStmtStatementParserRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TryStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.tryStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStmtListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtListStmtListParserRuleCall_1_0 = (RuleCall)cStmtListAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cExceptKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cExceptionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExceptionExceptionBlockParserRuleCall_3_0_1_0 = (RuleCall)cExceptionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFinallyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFinalAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFinalStmtListParserRuleCall_3_1_1_0 = (RuleCall)cFinalAssignment_3_1_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//tryStmt // Joined
		//:
		//	'try' stmtList=stmtList ';'? ('except' exception=exceptionBlock | 'finally' final=stmtList) 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'try' stmtList=stmtList ';'? ('except' exception=exceptionBlock | 'finally' final=stmtList) 'end'
		public Group getGroup() { return cGroup; }
		
		//'try'
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }
		
		//stmtList=stmtList
		public Assignment getStmtListAssignment_1() { return cStmtListAssignment_1; }
		
		//stmtList
		public RuleCall getStmtListStmtListParserRuleCall_1_0() { return cStmtListStmtListParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//('except' exception=exceptionBlock | 'finally' final=stmtList)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'except' exception=exceptionBlock
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'except'
		public Keyword getExceptKeyword_3_0_0() { return cExceptKeyword_3_0_0; }
		
		//exception=exceptionBlock
		public Assignment getExceptionAssignment_3_0_1() { return cExceptionAssignment_3_0_1; }
		
		//exceptionBlock
		public RuleCall getExceptionExceptionBlockParserRuleCall_3_0_1_0() { return cExceptionExceptionBlockParserRuleCall_3_0_1_0; }
		
		//'finally' final=stmtList
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'finally'
		public Keyword getFinallyKeyword_3_1_0() { return cFinallyKeyword_3_1_0; }
		
		//final=stmtList
		public Assignment getFinalAssignment_3_1_1() { return cFinalAssignment_3_1_1; }
		
		//stmtList
		public RuleCall getFinalStmtListParserRuleCall_3_1_1_0() { return cFinalStmtListParserRuleCall_3_1_1_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class ExceptionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.exceptionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExceptionBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExceptionIdAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExceptionIdIdentParserRuleCall_1_1_0_0 = (RuleCall)cExceptionIdAssignment_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cIdKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cDoKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cDoStmtAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cDoStmtStatementParserRuleCall_1_5_0 = (RuleCall)cDoStmtAssignment_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseStmtsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseStmtsStmtListParserRuleCall_2_1_0 = (RuleCall)cElseStmtsAssignment_2_1.eContents().get(0);
		
		//exceptionBlock:
		//	{exceptionBlock} ('on' (exceptionId+=ident ':')? type+=type 'id' 'do' doStmt+=statement ';'?)* ('else'?
		//	elseStmts=stmtList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{exceptionBlock} ('on' (exceptionId+=ident ':')? type+=type 'id' 'do' doStmt+=statement ';'?)* ('else'?
		//elseStmts=stmtList)?
		public Group getGroup() { return cGroup; }
		
		//{exceptionBlock}
		public Action getExceptionBlockAction_0() { return cExceptionBlockAction_0; }
		
		//('on' (exceptionId+=ident ':')? type+=type 'id' 'do' doStmt+=statement ';'?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'on'
		public Keyword getOnKeyword_1_0() { return cOnKeyword_1_0; }
		
		//(exceptionId+=ident ':')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//exceptionId+=ident
		public Assignment getExceptionIdAssignment_1_1_0() { return cExceptionIdAssignment_1_1_0; }
		
		//ident
		public RuleCall getExceptionIdIdentParserRuleCall_1_1_0_0() { return cExceptionIdIdentParserRuleCall_1_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//type+=type
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_2_0() { return cTypeTypeParserRuleCall_1_2_0; }
		
		//'id'
		public Keyword getIdKeyword_1_3() { return cIdKeyword_1_3; }
		
		//'do'
		public Keyword getDoKeyword_1_4() { return cDoKeyword_1_4; }
		
		//doStmt+=statement
		public Assignment getDoStmtAssignment_1_5() { return cDoStmtAssignment_1_5; }
		
		//statement
		public RuleCall getDoStmtStatementParserRuleCall_1_5_0() { return cDoStmtStatementParserRuleCall_1_5_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//('else'? elseStmts=stmtList)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'else'?
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//elseStmts=stmtList
		public Assignment getElseStmtsAssignment_2_1() { return cElseStmtsAssignment_2_1; }
		
		//stmtList
		public RuleCall getElseStmtsStmtListParserRuleCall_2_1_0() { return cElseStmtsStmtListParserRuleCall_2_1_0; }
	}
	public class RaiseStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.raiseStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRaiseStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRaiseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRaiseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRaiseIDTerminalRuleCall_2_0 = (RuleCall)cRaiseAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAtAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAtIDTerminalRuleCall_3_1_0 = (RuleCall)cAtAssignment_3_1.eContents().get(0);
		
		//raiseStmt:
		//	{raiseStmt} 'raise' raise=ID? ('at' at=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{raiseStmt} 'raise' raise=ID? ('at' at=ID)?
		public Group getGroup() { return cGroup; }
		
		//{raiseStmt}
		public Action getRaiseStmtAction_0() { return cRaiseStmtAction_0; }
		
		//'raise'
		public Keyword getRaiseKeyword_1() { return cRaiseKeyword_1; }
		
		//raise=ID?
		public Assignment getRaiseAssignment_2() { return cRaiseAssignment_2; }
		
		//ID
		public RuleCall getRaiseIDTerminalRuleCall_2_0() { return cRaiseIDTerminalRuleCall_2_0; }
		
		//('at' at=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'at'
		public Keyword getAtKeyword_3_0() { return cAtKeyword_3_0; }
		
		//at=ID
		public Assignment getAtAssignment_3_1() { return cAtAssignment_3_1; }
		
		//ID
		public RuleCall getAtIDTerminalRuleCall_3_1_0() { return cAtIDTerminalRuleCall_3_1_0; }
	}
	public class AssemblerStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.assemblerStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssemblerStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//assemblerStmt:
		//	{assemblerStmt} 'asm'
		//	//|	<assemblylanguage>
		//	//	|	'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{assemblerStmt} 'asm'
		public Group getGroup() { return cGroup; }
		
		//{assemblerStmt}
		public Action getAssemblerStmtAction_0() { return cAssemblerStmtAction_0; }
		
		//'asm'
		public Keyword getAsmKeyword_1() { return cAsmKeyword_1; }
	}
	public class ProcedureDeclSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.procedureDeclSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//procedureDeclSection:
		//	procedureDecl
		//	| functionDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//procedureDecl | functionDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//procedureDecl
		public RuleCall getProcedureDeclParserRuleCall_0() { return cProcedureDeclParserRuleCall_0; }
		
		//functionDecl
		public RuleCall getFunctionDeclParserRuleCall_1() { return cFunctionDeclParserRuleCall_1; }
	}
	public class ProcedureDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.procedureDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadingProcedureHeadingParserRuleCall_0_0 = (RuleCall)cHeadingAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectiveDirectiveParserRuleCall_2_0 = (RuleCall)cDirectiveAssignment_2.eContents().get(0);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//procedureDecl:
		//	heading=procedureHeading ';' directive=directive? port=portabilityDirective? block=block ';';
		@Override public ParserRule getRule() { return rule; }
		
		//heading=procedureHeading ';' directive=directive? port=portabilityDirective? block=block ';'
		public Group getGroup() { return cGroup; }
		
		//heading=procedureHeading
		public Assignment getHeadingAssignment_0() { return cHeadingAssignment_0; }
		
		//procedureHeading
		public RuleCall getHeadingProcedureHeadingParserRuleCall_0_0() { return cHeadingProcedureHeadingParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//directive=directive?
		public Assignment getDirectiveAssignment_2() { return cDirectiveAssignment_2; }
		
		//directive
		public RuleCall getDirectiveDirectiveParserRuleCall_2_0() { return cDirectiveDirectiveParserRuleCall_2_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_3_0() { return cPortPortabilityDirectiveParserRuleCall_3_0; }
		
		//block=block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.functionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadingFunctionHeadingParserRuleCall_0_0 = (RuleCall)cHeadingAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectiveDirectiveParserRuleCall_2_0 = (RuleCall)cDirectiveAssignment_2.eContents().get(0);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//functionDecl:
		//	heading=functionHeading ';' directive=directive? port=portabilityDirective? block=block ';';
		@Override public ParserRule getRule() { return rule; }
		
		//heading=functionHeading ';' directive=directive? port=portabilityDirective? block=block ';'
		public Group getGroup() { return cGroup; }
		
		//heading=functionHeading
		public Assignment getHeadingAssignment_0() { return cHeadingAssignment_0; }
		
		//functionHeading
		public RuleCall getHeadingFunctionHeadingParserRuleCall_0_0() { return cHeadingFunctionHeadingParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//directive=directive?
		public Assignment getDirectiveAssignment_2() { return cDirectiveAssignment_2; }
		
		//directive
		public RuleCall getDirectiveDirectiveParserRuleCall_2_0() { return cDirectiveDirectiveParserRuleCall_2_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_3_0() { return cPortPortabilityDirectiveParserRuleCall_3_0; }
		
		//block=block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FunctionHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.functionHeading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIdentParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cFormalParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalParamsFormalParametersParserRuleCall_3_0 = (RuleCall)cFormalParamsAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		
		//functionHeading:
		//	'class'? 'function' id=ident formalParams=formalParameters? ':' type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//'class'? 'function' id=ident formalParams=formalParameters? ':' type=type
		public Group getGroup() { return cGroup; }
		
		//'class'?
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//id=ident
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_2_0() { return cIdIdentParserRuleCall_2_0; }
		
		//formalParams=formalParameters?
		public Assignment getFormalParamsAssignment_3() { return cFormalParamsAssignment_3; }
		
		//formalParameters
		public RuleCall getFormalParamsFormalParametersParserRuleCall_3_0() { return cFormalParamsFormalParametersParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=type
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_5_0() { return cTypeTypeParserRuleCall_5_0; }
	}
	public class ProcedureHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.procedureHeading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIdentParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cFormalParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalParamsFormalParametersParserRuleCall_3_0 = (RuleCall)cFormalParamsAssignment_3.eContents().get(0);
		
		//procedureHeading:
		//	'class'? 'procedure' id=ident formalParams=formalParameters?;
		@Override public ParserRule getRule() { return rule; }
		
		//'class'? 'procedure' id=ident formalParams=formalParameters?
		public Group getGroup() { return cGroup; }
		
		//'class'?
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'procedure'
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }
		
		//id=ident
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_2_0() { return cIdIdentParserRuleCall_2_0; }
		
		//formalParams=formalParameters?
		public Assignment getFormalParamsAssignment_3() { return cFormalParamsAssignment_3; }
		
		//formalParameters
		public RuleCall getFormalParamsFormalParametersParserRuleCall_3_0() { return cFormalParamsFormalParametersParserRuleCall_3_0; }
	}
	public class FormalParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.formalParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParamsFormalParmParserRuleCall_1_0_0 = (RuleCall)cParamsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParamsFormalParmParserRuleCall_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//formalParameters:
		//	'(' (params+=formalParm (';' params+=formalParm)*) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (params+=formalParm (';' params+=formalParm)*) ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(params+=formalParm (';' params+=formalParm)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//params+=formalParm
		public Assignment getParamsAssignment_1_0() { return cParamsAssignment_1_0; }
		
		//formalParm
		public RuleCall getParamsFormalParmParserRuleCall_1_0_0() { return cParamsFormalParmParserRuleCall_1_0_0; }
		
		//(';' params+=formalParm)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }
		
		//params+=formalParm
		public Assignment getParamsAssignment_1_1_1() { return cParamsAssignment_1_1_1; }
		
		//formalParm
		public RuleCall getParamsFormalParmParserRuleCall_1_1_1_0() { return cParamsFormalParmParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class FormalParmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.formalParm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConstKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cOutKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamParameterParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		
		//formalParm:
		//	('var' | 'const' | 'out')? param=parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//('var' | 'const' | 'out')? param=parameter
		public Group getGroup() { return cGroup; }
		
		//('var' | 'const' | 'out')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'var'
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }
		
		//'const'
		public Keyword getConstKeyword_0_1() { return cConstKeyword_0_1; }
		
		//'out'
		public Keyword getOutKeyword_0_2() { return cOutKeyword_0_2; }
		
		//param=parameter
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//parameter
		public RuleCall getParamParameterParserRuleCall_1_0() { return cParamParameterParserRuleCall_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParameterListAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdListIdentListParserRuleCall_0_1_0 = (RuleCall)cIdListAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_2_1 = (Alternatives)cGroup_0_2.eContents().get(1);
		private final Group cGroup_0_2_1_0 = (Group)cAlternatives_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_1_0_0 = (Group)cGroup_0_2_1_0.eContents().get(0);
		private final Keyword cArrayKeyword_0_2_1_0_0_0 = (Keyword)cGroup_0_2_1_0_0.eContents().get(0);
		private final Keyword cOfKeyword_0_2_1_0_0_1 = (Keyword)cGroup_0_2_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2_1_0_1 = (Assignment)cGroup_0_2_1_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_2_1_0_1_0 = (RuleCall)cTypeAssignment_0_2_1_0_1.eContents().get(0);
		private final Keyword cFileKeyword_0_2_1_1 = (Keyword)cAlternatives_0_2_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParameterSimpleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIfAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIfIdentParserRuleCall_1_1_0 = (RuleCall)cIfAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cInitExpAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cInitExpConstExprParserRuleCall_1_5_0 = (RuleCall)cInitExpAssignment_1_5.eContents().get(0);
		
		//parameter:
		//	{parameterList} idList=identList (':' (('array' 'of')? type=type | 'file'))? // changed simpleType by type, deleted string alternative
		//	| {parameterSimple} if=ident ':' type=type '=' initExp=constExpr // changed simpleType by type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{parameterList} idList=identList (':' (('array' 'of')? type=type | 'file'))? // changed simpleType by type, deleted string alternative
		//| {parameterSimple} if=ident ':' type=type '=' initExp=constExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{parameterList} idList=identList (':' (('array' 'of')? type=type | 'file'))?
		public Group getGroup_0() { return cGroup_0; }
		
		//{parameterList}
		public Action getParameterListAction_0_0() { return cParameterListAction_0_0; }
		
		//idList=identList
		public Assignment getIdListAssignment_0_1() { return cIdListAssignment_0_1; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_0_1_0() { return cIdListIdentListParserRuleCall_0_1_0; }
		
		//(':' (('array' 'of')? type=type | 'file'))?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//':'
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }
		
		//(('array' 'of')? type=type | 'file')
		public Alternatives getAlternatives_0_2_1() { return cAlternatives_0_2_1; }
		
		//('array' 'of')? type=type
		public Group getGroup_0_2_1_0() { return cGroup_0_2_1_0; }
		
		//('array' 'of')?
		public Group getGroup_0_2_1_0_0() { return cGroup_0_2_1_0_0; }
		
		//'array'
		public Keyword getArrayKeyword_0_2_1_0_0_0() { return cArrayKeyword_0_2_1_0_0_0; }
		
		//'of'
		public Keyword getOfKeyword_0_2_1_0_0_1() { return cOfKeyword_0_2_1_0_0_1; }
		
		//type=type
		public Assignment getTypeAssignment_0_2_1_0_1() { return cTypeAssignment_0_2_1_0_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_2_1_0_1_0() { return cTypeTypeParserRuleCall_0_2_1_0_1_0; }
		
		//'file'
		public Keyword getFileKeyword_0_2_1_1() { return cFileKeyword_0_2_1_1; }
		
		//{parameterSimple} if=ident ':' type=type '=' initExp=constExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//{parameterSimple}
		public Action getParameterSimpleAction_1_0() { return cParameterSimpleAction_1_0; }
		
		//if=ident
		public Assignment getIfAssignment_1_1() { return cIfAssignment_1_1; }
		
		//ident
		public RuleCall getIfIdentParserRuleCall_1_1_0() { return cIfIdentParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//type=type
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_3_0() { return cTypeTypeParserRuleCall_1_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }
		
		//initExp=constExpr
		public Assignment getInitExpAssignment_1_5() { return cInitExpAssignment_1_5; }
		
		//constExpr
		public RuleCall getInitExpConstExprParserRuleCall_1_5_0() { return cInitExpConstExprParserRuleCall_1_5_0; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.directive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDirAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cDirCdeclKeyword_0_0 = (Keyword)cDirAssignment_0.eContents().get(0);
		private final Assignment cDirAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDirRegisterKeyword_1_0 = (Keyword)cDirAssignment_1.eContents().get(0);
		private final Assignment cDirAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cDirDynamicKeyword_2_0 = (Keyword)cDirAssignment_2.eContents().get(0);
		private final Assignment cDirAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cDirVirtualKeyword_3_0 = (Keyword)cDirAssignment_3.eContents().get(0);
		private final Assignment cDirAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cDirExportKeyword_4_0 = (Keyword)cDirAssignment_4.eContents().get(0);
		private final Assignment cDirAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cDirExternalKeyword_5_0 = (Keyword)cDirAssignment_5.eContents().get(0);
		private final Assignment cDirAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cDirNearKeyword_6_0 = (Keyword)cDirAssignment_6.eContents().get(0);
		private final Assignment cDirAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cDirFarKeyword_7_0 = (Keyword)cDirAssignment_7.eContents().get(0);
		private final Assignment cDirAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cDirForwardKeyword_8_0 = (Keyword)cDirAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cDirAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cDirMessageKeyword_9_0_0 = (Keyword)cDirAssignment_9_0.eContents().get(0);
		private final Assignment cMessageExpAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cMessageExpConstExprParserRuleCall_9_1_0 = (RuleCall)cMessageExpAssignment_9_1.eContents().get(0);
		private final Assignment cDirAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cDirOverrideKeyword_10_0 = (Keyword)cDirAssignment_10.eContents().get(0);
		private final Assignment cDirAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cDirOverloadKeyword_11_0 = (Keyword)cDirAssignment_11.eContents().get(0);
		private final Assignment cDirAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cDirPascalKeyword_12_0 = (Keyword)cDirAssignment_12.eContents().get(0);
		private final Assignment cDirAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final Keyword cDirReintroduceKeyword_13_0 = (Keyword)cDirAssignment_13.eContents().get(0);
		private final Assignment cDirAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final Keyword cDirSafecallKeyword_14_0 = (Keyword)cDirAssignment_14.eContents().get(0);
		private final Assignment cDirAssignment_15 = (Assignment)cAlternatives.eContents().get(15);
		private final Keyword cDirStdcallKeyword_15_0 = (Keyword)cDirAssignment_15.eContents().get(0);
		private final Assignment cDirAssignment_16 = (Assignment)cAlternatives.eContents().get(16);
		private final Keyword cDirVarargsKeyword_16_0 = (Keyword)cDirAssignment_16.eContents().get(0);
		private final Assignment cDirAssignment_17 = (Assignment)cAlternatives.eContents().get(17);
		private final Keyword cDirLocalKeyword_17_0 = (Keyword)cDirAssignment_17.eContents().get(0);
		private final Assignment cDirAssignment_18 = (Assignment)cAlternatives.eContents().get(18);
		private final Keyword cDirAbstractKeyword_18_0 = (Keyword)cDirAssignment_18.eContents().get(0);
		
		//directive:
		//	dir='cdecl'
		//	| dir='register'
		//	| dir='dynamic'
		//	| dir='virtual'
		//	| dir='export'
		//	| dir='external'
		//	| dir='near'
		//	| dir='far'
		//	| dir='forward'
		//	| dir='message' messageExp=constExpr
		//	| dir='override'
		//	| dir='overload'
		//	| dir='pascal'
		//	| dir='reintroduce'
		//	| dir='safecall'
		//	| dir='stdcall'
		//	| dir='varargs'
		//	| dir='local'
		//	| dir='abstract';
		@Override public ParserRule getRule() { return rule; }
		
		//dir='cdecl' | dir='register' | dir='dynamic' | dir='virtual' | dir='export' | dir='external' | dir='near' | dir='far' |
		//dir='forward' | dir='message' messageExp=constExpr | dir='override' | dir='overload' | dir='pascal' |
		//dir='reintroduce' | dir='safecall' | dir='stdcall' | dir='varargs' | dir='local' | dir='abstract'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dir='cdecl'
		public Assignment getDirAssignment_0() { return cDirAssignment_0; }
		
		//'cdecl'
		public Keyword getDirCdeclKeyword_0_0() { return cDirCdeclKeyword_0_0; }
		
		//dir='register'
		public Assignment getDirAssignment_1() { return cDirAssignment_1; }
		
		//'register'
		public Keyword getDirRegisterKeyword_1_0() { return cDirRegisterKeyword_1_0; }
		
		//dir='dynamic'
		public Assignment getDirAssignment_2() { return cDirAssignment_2; }
		
		//'dynamic'
		public Keyword getDirDynamicKeyword_2_0() { return cDirDynamicKeyword_2_0; }
		
		//dir='virtual'
		public Assignment getDirAssignment_3() { return cDirAssignment_3; }
		
		//'virtual'
		public Keyword getDirVirtualKeyword_3_0() { return cDirVirtualKeyword_3_0; }
		
		//dir='export'
		public Assignment getDirAssignment_4() { return cDirAssignment_4; }
		
		//'export'
		public Keyword getDirExportKeyword_4_0() { return cDirExportKeyword_4_0; }
		
		//dir='external'
		public Assignment getDirAssignment_5() { return cDirAssignment_5; }
		
		//'external'
		public Keyword getDirExternalKeyword_5_0() { return cDirExternalKeyword_5_0; }
		
		//dir='near'
		public Assignment getDirAssignment_6() { return cDirAssignment_6; }
		
		//'near'
		public Keyword getDirNearKeyword_6_0() { return cDirNearKeyword_6_0; }
		
		//dir='far'
		public Assignment getDirAssignment_7() { return cDirAssignment_7; }
		
		//'far'
		public Keyword getDirFarKeyword_7_0() { return cDirFarKeyword_7_0; }
		
		//dir='forward'
		public Assignment getDirAssignment_8() { return cDirAssignment_8; }
		
		//'forward'
		public Keyword getDirForwardKeyword_8_0() { return cDirForwardKeyword_8_0; }
		
		//dir='message' messageExp=constExpr
		public Group getGroup_9() { return cGroup_9; }
		
		//dir='message'
		public Assignment getDirAssignment_9_0() { return cDirAssignment_9_0; }
		
		//'message'
		public Keyword getDirMessageKeyword_9_0_0() { return cDirMessageKeyword_9_0_0; }
		
		//messageExp=constExpr
		public Assignment getMessageExpAssignment_9_1() { return cMessageExpAssignment_9_1; }
		
		//constExpr
		public RuleCall getMessageExpConstExprParserRuleCall_9_1_0() { return cMessageExpConstExprParserRuleCall_9_1_0; }
		
		//dir='override'
		public Assignment getDirAssignment_10() { return cDirAssignment_10; }
		
		//'override'
		public Keyword getDirOverrideKeyword_10_0() { return cDirOverrideKeyword_10_0; }
		
		//dir='overload'
		public Assignment getDirAssignment_11() { return cDirAssignment_11; }
		
		//'overload'
		public Keyword getDirOverloadKeyword_11_0() { return cDirOverloadKeyword_11_0; }
		
		//dir='pascal'
		public Assignment getDirAssignment_12() { return cDirAssignment_12; }
		
		//'pascal'
		public Keyword getDirPascalKeyword_12_0() { return cDirPascalKeyword_12_0; }
		
		//dir='reintroduce'
		public Assignment getDirAssignment_13() { return cDirAssignment_13; }
		
		//'reintroduce'
		public Keyword getDirReintroduceKeyword_13_0() { return cDirReintroduceKeyword_13_0; }
		
		//dir='safecall'
		public Assignment getDirAssignment_14() { return cDirAssignment_14; }
		
		//'safecall'
		public Keyword getDirSafecallKeyword_14_0() { return cDirSafecallKeyword_14_0; }
		
		//dir='stdcall'
		public Assignment getDirAssignment_15() { return cDirAssignment_15; }
		
		//'stdcall'
		public Keyword getDirStdcallKeyword_15_0() { return cDirStdcallKeyword_15_0; }
		
		//dir='varargs'
		public Assignment getDirAssignment_16() { return cDirAssignment_16; }
		
		//'varargs'
		public Keyword getDirVarargsKeyword_16_0() { return cDirVarargsKeyword_16_0; }
		
		//dir='local'
		public Assignment getDirAssignment_17() { return cDirAssignment_17; }
		
		//'local'
		public Keyword getDirLocalKeyword_17_0() { return cDirLocalKeyword_17_0; }
		
		//dir='abstract'
		public Assignment getDirAssignment_18() { return cDirAssignment_18; }
		
		//'abstract'
		public Keyword getDirAbstractKeyword_18_0() { return cDirAbstractKeyword_18_0; }
	}
	public class ObjectTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.objectType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHeritageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeritageObjHeritageParserRuleCall_2_0 = (RuleCall)cHeritageAssignment_2.eContents().get(0);
		private final Assignment cFieldListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldListObjFieldListParserRuleCall_3_0 = (RuleCall)cFieldListAssignment_3.eContents().get(0);
		private final Assignment cMethodListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodListMethodListParserRuleCall_4_0 = (RuleCall)cMethodListAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//objectType:
		//	{objectType} 'object' heritage=objHeritage? fieldList=objFieldList? methodList=methodList? 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{objectType} 'object' heritage=objHeritage? fieldList=objFieldList? methodList=methodList? 'end'
		public Group getGroup() { return cGroup; }
		
		//{objectType}
		public Action getObjectTypeAction_0() { return cObjectTypeAction_0; }
		
		//'object'
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }
		
		//heritage=objHeritage?
		public Assignment getHeritageAssignment_2() { return cHeritageAssignment_2; }
		
		//objHeritage
		public RuleCall getHeritageObjHeritageParserRuleCall_2_0() { return cHeritageObjHeritageParserRuleCall_2_0; }
		
		//fieldList=objFieldList?
		public Assignment getFieldListAssignment_3() { return cFieldListAssignment_3; }
		
		//objFieldList
		public RuleCall getFieldListObjFieldListParserRuleCall_3_0() { return cFieldListObjFieldListParserRuleCall_3_0; }
		
		//methodList=methodList?
		public Assignment getMethodListAssignment_4() { return cMethodListAssignment_4; }
		
		//methodList
		public RuleCall getMethodListMethodListParserRuleCall_4_0() { return cMethodListMethodListParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class ObjHeritageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.objHeritage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//objHeritage:
		//	'(' id=qualId ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' id=qualId ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//id=qualId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//qualId
		public RuleCall getIdQualIdParserRuleCall_1_0() { return cIdQualIdParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MethodListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.methodList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cHeadingMethodHeadingParserRuleCall_0_0_0 = (RuleCall)cHeadingAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cVirtualKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cDirectiveAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cDirectiveDirectiveParserRuleCall_0_2_1_0 = (RuleCall)cDirectiveAssignment_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//methodList:
		//	(heading=methodHeading (';' 'virtual')? (';' directive+=directive)*) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(heading=methodHeading (';' 'virtual')? (';' directive+=directive)*) ';'
		public Group getGroup() { return cGroup; }
		
		//(heading=methodHeading (';' 'virtual')? (';' directive+=directive)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//heading=methodHeading
		public Assignment getHeadingAssignment_0_0() { return cHeadingAssignment_0_0; }
		
		//methodHeading
		public RuleCall getHeadingMethodHeadingParserRuleCall_0_0_0() { return cHeadingMethodHeadingParserRuleCall_0_0_0; }
		
		//(';' 'virtual')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1_0() { return cSemicolonKeyword_0_1_0; }
		
		//'virtual'
		public Keyword getVirtualKeyword_0_1_1() { return cVirtualKeyword_0_1_1; }
		
		//(';' directive+=directive)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2_0() { return cSemicolonKeyword_0_2_0; }
		
		//directive+=directive
		public Assignment getDirectiveAssignment_0_2_1() { return cDirectiveAssignment_0_2_1; }
		
		//directive
		public RuleCall getDirectiveDirectiveParserRuleCall_0_2_1_0() { return cDirectiveDirectiveParserRuleCall_0_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class MethodHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.methodHeading");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureHeadingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionHeadingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorHeadingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDestructorHeadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//methodHeading:
		//	procedureHeading
		//	| functionHeading
		//	| constructorHeading
		//	| destructorHeading;
		@Override public ParserRule getRule() { return rule; }
		
		//procedureHeading | functionHeading | constructorHeading | destructorHeading
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//procedureHeading
		public RuleCall getProcedureHeadingParserRuleCall_0() { return cProcedureHeadingParserRuleCall_0; }
		
		//functionHeading
		public RuleCall getFunctionHeadingParserRuleCall_1() { return cFunctionHeadingParserRuleCall_1; }
		
		//constructorHeading
		public RuleCall getConstructorHeadingParserRuleCall_2() { return cConstructorHeadingParserRuleCall_2; }
		
		//destructorHeading
		public RuleCall getDestructorHeadingParserRuleCall_3() { return cDestructorHeadingParserRuleCall_3; }
	}
	public class ConstructorHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.constructorHeading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cFormalParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParamsFormalParametersParserRuleCall_2_0 = (RuleCall)cFormalParamsAssignment_2.eContents().get(0);
		
		//constructorHeading:
		//	'constructor' id=ident formalParams=formalParameters?;
		@Override public ParserRule getRule() { return rule; }
		
		//'constructor' id=ident formalParams=formalParameters?
		public Group getGroup() { return cGroup; }
		
		//'constructor'
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
		
		//formalParams=formalParameters?
		public Assignment getFormalParamsAssignment_2() { return cFormalParamsAssignment_2; }
		
		//formalParameters
		public RuleCall getFormalParamsFormalParametersParserRuleCall_2_0() { return cFormalParamsFormalParametersParserRuleCall_2_0; }
	}
	public class DestructorHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.destructorHeading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cFormalParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParamsFormalParametersParserRuleCall_2_0 = (RuleCall)cFormalParamsAssignment_2.eContents().get(0);
		
		//destructorHeading:
		//	'destructor' id=ident formalParams=formalParameters?;
		@Override public ParserRule getRule() { return rule; }
		
		//'destructor' id=ident formalParams=formalParameters?
		public Group getGroup() { return cGroup; }
		
		//'destructor'
		public Keyword getDestructorKeyword_0() { return cDestructorKeyword_0; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
		
		//formalParams=formalParameters?
		public Assignment getFormalParamsAssignment_2() { return cFormalParamsAssignment_2; }
		
		//formalParameters
		public RuleCall getFormalParamsFormalParametersParserRuleCall_2_0() { return cFormalParamsFormalParametersParserRuleCall_2_0; }
	}
	public class ObjFieldListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.objFieldList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIdentListParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//objFieldList:
		//	(identList ':' type=type) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(identList ':' type=type) ';'
		public Group getGroup() { return cGroup; }
		
		//(identList ':' type=type)
		public Group getGroup_0() { return cGroup_0; }
		
		//identList
		public RuleCall getIdentListParserRuleCall_0_0() { return cIdentListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//type=type
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_2_0() { return cTypeTypeParserRuleCall_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class InitSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.initSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cInitializationKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cStmtListAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cStmtListStmtListParserRuleCall_1_0_1_0 = (RuleCall)cStmtListAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cFinalizationKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cEndStmtListAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cEndStmtListStmtListParserRuleCall_1_0_2_1_0 = (RuleCall)cEndStmtListAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cEndKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cBeginKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStmtListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStmtListStmtListParserRuleCall_1_1_1_0 = (RuleCall)cStmtListAssignment_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cEndKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//initSection:
		//	{initSection} ('initialization' stmtList=stmtList ('finalization' endStmtList=stmtList)? 'end'
		//	| 'begin' stmtList=stmtList 'end'
		//	| 'end');
		@Override public ParserRule getRule() { return rule; }
		
		//{initSection} ('initialization' stmtList=stmtList ('finalization' endStmtList=stmtList)? 'end' | 'begin'
		//stmtList=stmtList 'end' | 'end')
		public Group getGroup() { return cGroup; }
		
		//{initSection}
		public Action getInitSectionAction_0() { return cInitSectionAction_0; }
		
		//('initialization' stmtList=stmtList ('finalization' endStmtList=stmtList)? 'end' | 'begin' stmtList=stmtList 'end' |
		//'end')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'initialization' stmtList=stmtList ('finalization' endStmtList=stmtList)? 'end'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'initialization'
		public Keyword getInitializationKeyword_1_0_0() { return cInitializationKeyword_1_0_0; }
		
		//stmtList=stmtList
		public Assignment getStmtListAssignment_1_0_1() { return cStmtListAssignment_1_0_1; }
		
		//stmtList
		public RuleCall getStmtListStmtListParserRuleCall_1_0_1_0() { return cStmtListStmtListParserRuleCall_1_0_1_0; }
		
		//('finalization' endStmtList=stmtList)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'finalization'
		public Keyword getFinalizationKeyword_1_0_2_0() { return cFinalizationKeyword_1_0_2_0; }
		
		//endStmtList=stmtList
		public Assignment getEndStmtListAssignment_1_0_2_1() { return cEndStmtListAssignment_1_0_2_1; }
		
		//stmtList
		public RuleCall getEndStmtListStmtListParserRuleCall_1_0_2_1_0() { return cEndStmtListStmtListParserRuleCall_1_0_2_1_0; }
		
		//'end'
		public Keyword getEndKeyword_1_0_3() { return cEndKeyword_1_0_3; }
		
		//'begin' stmtList=stmtList 'end'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'begin'
		public Keyword getBeginKeyword_1_1_0() { return cBeginKeyword_1_1_0; }
		
		//stmtList=stmtList
		public Assignment getStmtListAssignment_1_1_1() { return cStmtListAssignment_1_1_1; }
		
		//stmtList
		public RuleCall getStmtListStmtListParserRuleCall_1_1_1_0() { return cStmtListStmtListParserRuleCall_1_1_1_0; }
		
		//'end'
		public Keyword getEndKeyword_1_1_2() { return cEndKeyword_1_1_2; }
		
		//'end'
		public Keyword getEndKeyword_1_2() { return cEndKeyword_1_2; }
	}
	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHeritageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeritageClassHeritageParserRuleCall_2_0 = (RuleCall)cHeritageAssignment_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVisibilityClassVisibilityParserRuleCall_3_0 = (RuleCall)cVisibilityAssignment_3.eContents().get(0);
		private final Assignment cFieldListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldListClassFieldListParserRuleCall_4_0 = (RuleCall)cFieldListAssignment_4.eContents().get(0);
		private final Assignment cMethodListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodListClassMethodListParserRuleCall_5_0 = (RuleCall)cMethodListAssignment_5.eContents().get(0);
		private final Assignment cPropListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropListClassPropertyListParserRuleCall_6_0 = (RuleCall)cPropListAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//classType:
		//	{classType} 'class' heritage=classHeritage? visibility=classVisibility? fieldList=classFieldList?
		//	methodList=classMethodList? propList=classPropertyList? 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{classType} 'class' heritage=classHeritage? visibility=classVisibility? fieldList=classFieldList?
		//methodList=classMethodList? propList=classPropertyList? 'end'
		public Group getGroup() { return cGroup; }
		
		//{classType}
		public Action getClassTypeAction_0() { return cClassTypeAction_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//heritage=classHeritage?
		public Assignment getHeritageAssignment_2() { return cHeritageAssignment_2; }
		
		//classHeritage
		public RuleCall getHeritageClassHeritageParserRuleCall_2_0() { return cHeritageClassHeritageParserRuleCall_2_0; }
		
		//visibility=classVisibility?
		public Assignment getVisibilityAssignment_3() { return cVisibilityAssignment_3; }
		
		//classVisibility
		public RuleCall getVisibilityClassVisibilityParserRuleCall_3_0() { return cVisibilityClassVisibilityParserRuleCall_3_0; }
		
		//fieldList=classFieldList?
		public Assignment getFieldListAssignment_4() { return cFieldListAssignment_4; }
		
		//classFieldList
		public RuleCall getFieldListClassFieldListParserRuleCall_4_0() { return cFieldListClassFieldListParserRuleCall_4_0; }
		
		//methodList=classMethodList?
		public Assignment getMethodListAssignment_5() { return cMethodListAssignment_5; }
		
		//classMethodList
		public RuleCall getMethodListClassMethodListParserRuleCall_5_0() { return cMethodListClassMethodListParserRuleCall_5_0; }
		
		//propList=classPropertyList?
		public Assignment getPropListAssignment_6() { return cPropListAssignment_6; }
		
		//classPropertyList
		public RuleCall getPropListClassPropertyListParserRuleCall_6_0() { return cPropListClassPropertyListParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class ClassHeritageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classHeritage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//classHeritage:
		//	'(' identList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' identList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//identList
		public RuleCall getIdentListParserRuleCall_1() { return cIdentListParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ClassVisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classVisibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProtectedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrivateKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPublishedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//classVisibility:
		//	'public'
		//	| 'protected'
		//	| 'private'
		//	| 'published';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' | 'protected' | 'private' | 'published'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'protected'
		public Keyword getProtectedKeyword_1() { return cProtectedKeyword_1; }
		
		//'private'
		public Keyword getPrivateKeyword_2() { return cPrivateKeyword_2; }
		
		//'published'
		public Keyword getPublishedKeyword_3() { return cPublishedKeyword_3; }
	}
	public class ClassFieldListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classFieldList");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFieldClassFieldParserRuleCall_0 = (RuleCall)cFieldAssignment.eContents().get(0);
		
		//classFieldList:
		//	field+=classField+;
		@Override public ParserRule getRule() { return rule; }
		
		//field+=classField+
		public Assignment getFieldAssignment() { return cFieldAssignment; }
		
		//classField
		public RuleCall getFieldClassFieldParserRuleCall_0() { return cFieldClassFieldParserRuleCall_0; }
	}
	public class ClassFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityClassVisibilityParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cFieldListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldListObjFieldListParserRuleCall_1_0 = (RuleCall)cFieldListAssignment_1.eContents().get(0);
		
		//classField:
		//	visibility=classVisibility? fieldList=objFieldList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=classVisibility? fieldList=objFieldList
		public Group getGroup() { return cGroup; }
		
		//visibility=classVisibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//classVisibility
		public RuleCall getVisibilityClassVisibilityParserRuleCall_0_0() { return cVisibilityClassVisibilityParserRuleCall_0_0; }
		
		//fieldList=objFieldList
		public Assignment getFieldListAssignment_1() { return cFieldListAssignment_1; }
		
		//objFieldList
		public RuleCall getFieldListObjFieldListParserRuleCall_1_0() { return cFieldListObjFieldListParserRuleCall_1_0; }
	}
	public class ClassMethodListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classMethodList");
		private final Assignment cMetodAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMetodClassMethodParserRuleCall_0 = (RuleCall)cMetodAssignment.eContents().get(0);
		
		//classMethodList:
		//	metod+=classMethod+;
		@Override public ParserRule getRule() { return rule; }
		
		//metod+=classMethod+
		public Assignment getMetodAssignment() { return cMetodAssignment; }
		
		//classMethod
		public RuleCall getMetodClassMethodParserRuleCall_0() { return cMetodClassMethodParserRuleCall_0; }
	}
	public class ClassMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityClassVisibilityParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cMethodListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodListMethodListParserRuleCall_1_0 = (RuleCall)cMethodListAssignment_1.eContents().get(0);
		
		//classMethod:
		//	visibility=classVisibility? methodList=methodList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=classVisibility? methodList=methodList
		public Group getGroup() { return cGroup; }
		
		//visibility=classVisibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//classVisibility
		public RuleCall getVisibilityClassVisibilityParserRuleCall_0_0() { return cVisibilityClassVisibilityParserRuleCall_0_0; }
		
		//methodList=methodList
		public Assignment getMethodListAssignment_1() { return cMethodListAssignment_1; }
		
		//methodList
		public RuleCall getMethodListMethodListParserRuleCall_1_0() { return cMethodListMethodListParserRuleCall_1_0; }
	}
	public class ClassPropertyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classPropertyList");
		private final Assignment cPropertyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPropertyClassPropertyParserRuleCall_0 = (RuleCall)cPropertyAssignment.eContents().get(0);
		
		//classPropertyList:
		//	property+=classProperty+;
		@Override public ParserRule getRule() { return rule; }
		
		//property+=classProperty+
		public Assignment getPropertyAssignment() { return cPropertyAssignment; }
		
		//classProperty
		public RuleCall getPropertyClassPropertyParserRuleCall_0() { return cPropertyClassPropertyParserRuleCall_0; }
	}
	public class ClassPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.classProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVisibilityClassVisibilityParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVisibilityAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVisibilityClassVisibilityParserRuleCall_1_0_0 = (RuleCall)cVisibilityAssignment_1_0.eContents().get(0);
		private final Assignment cPropListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropListPropertyListParserRuleCall_1_1_0 = (RuleCall)cPropListAssignment_1_1.eContents().get(0);
		
		//classProperty:
		//	visibility=classVisibility
		//	| visibility=classVisibility? propList=propertyList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=classVisibility | visibility=classVisibility? propList=propertyList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//visibility=classVisibility
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//classVisibility
		public RuleCall getVisibilityClassVisibilityParserRuleCall_0_0() { return cVisibilityClassVisibilityParserRuleCall_0_0; }
		
		//visibility=classVisibility? propList=propertyList
		public Group getGroup_1() { return cGroup_1; }
		
		//visibility=classVisibility?
		public Assignment getVisibilityAssignment_1_0() { return cVisibilityAssignment_1_0; }
		
		//classVisibility
		public RuleCall getVisibilityClassVisibilityParserRuleCall_1_0_0() { return cVisibilityClassVisibilityParserRuleCall_1_0_0; }
		
		//propList=propertyList
		public Assignment getPropListAssignment_1_1() { return cPropListAssignment_1_1; }
		
		//propertyList
		public RuleCall getPropListPropertyListParserRuleCall_1_1_0() { return cPropListPropertyListParserRuleCall_1_1_0; }
	}
	public class PropertyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.propertyList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfacePropertyInterfaceParserRuleCall_2_0 = (RuleCall)cInterfaceAssignment_2.eContents().get(0);
		private final Assignment cSpecifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecifiersPropertySpecifiersParserRuleCall_3_0 = (RuleCall)cSpecifiersAssignment_3.eContents().get(0);
		private final Assignment cPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortPortabilityDirectiveParserRuleCall_4_0 = (RuleCall)cPortAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//propertyList:
		//	'property' id=ident interface=propertyInterface? specifiers=propertySpecifiers? port=portabilityDirective? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'property' id=ident interface=propertyInterface? specifiers=propertySpecifiers? port=portabilityDirective? ';'
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
		
		//interface=propertyInterface?
		public Assignment getInterfaceAssignment_2() { return cInterfaceAssignment_2; }
		
		//propertyInterface
		public RuleCall getInterfacePropertyInterfaceParserRuleCall_2_0() { return cInterfacePropertyInterfaceParserRuleCall_2_0; }
		
		//specifiers=propertySpecifiers?
		public Assignment getSpecifiersAssignment_3() { return cSpecifiersAssignment_3; }
		
		//propertySpecifiers
		public RuleCall getSpecifiersPropertySpecifiersParserRuleCall_3_0() { return cSpecifiersPropertySpecifiersParserRuleCall_3_0; }
		
		//port=portabilityDirective?
		public Assignment getPortAssignment_4() { return cPortAssignment_4; }
		
		//portabilityDirective
		public RuleCall getPortPortabilityDirectiveParserRuleCall_4_0() { return cPortPortabilityDirectiveParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PropertyInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.propertyInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamListPropertyParameterListParserRuleCall_0_0 = (RuleCall)cParamListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIdentParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//propertyInterface:
		//	paramList=propertyParameterList? ':' id=ident;
		@Override public ParserRule getRule() { return rule; }
		
		//paramList=propertyParameterList? ':' id=ident
		public Group getGroup() { return cGroup; }
		
		//paramList=propertyParameterList?
		public Assignment getParamListAssignment_0() { return cParamListAssignment_0; }
		
		//propertyParameterList
		public RuleCall getParamListPropertyParameterListParserRuleCall_0_0() { return cParamListPropertyParameterListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//id=ident
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_2_0() { return cIdIdentParserRuleCall_2_0; }
	}
	public class PropertyParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.propertyParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdListIdentListParserRuleCall_1_0 = (RuleCall)cIdListAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRefTypeIdParserRuleCall_3_0 = (RuleCall)cTypeRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cIdListAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cIdListIdentListParserRuleCall_5_0_0 = (RuleCall)cIdListAssignment_5_0.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTypeRefAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTypeRefTypeIdParserRuleCall_5_2_0 = (RuleCall)cTypeRefAssignment_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//propertyParameterList:
		//	'[' idList+=identList ':' typeRef+=typeId ';' (idList+=identList ':' typeRef+=typeId ';')* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' idList+=identList ':' typeRef+=typeId ';' (idList+=identList ':' typeRef+=typeId ';')* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//idList+=identList
		public Assignment getIdListAssignment_1() { return cIdListAssignment_1; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_1_0() { return cIdListIdentListParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//typeRef+=typeId
		public Assignment getTypeRefAssignment_3() { return cTypeRefAssignment_3; }
		
		//typeId
		public RuleCall getTypeRefTypeIdParserRuleCall_3_0() { return cTypeRefTypeIdParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//(idList+=identList ':' typeRef+=typeId ';')*
		public Group getGroup_5() { return cGroup_5; }
		
		//idList+=identList
		public Assignment getIdListAssignment_5_0() { return cIdListAssignment_5_0; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_5_0_0() { return cIdListIdentListParserRuleCall_5_0_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//typeRef+=typeId
		public Assignment getTypeRefAssignment_5_2() { return cTypeRefAssignment_5_2; }
		
		//typeId
		public RuleCall getTypeRefTypeIdParserRuleCall_5_2_0() { return cTypeRefTypeIdParserRuleCall_5_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class PropertySpecifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.propertySpecifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertySpecifiersAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIndexKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexConstExprParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cReadKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReadIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReadIdIdentParserRuleCall_2_1_0 = (RuleCall)cReadIdAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWriteKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWriteIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWriteIdIdentParserRuleCall_3_1_0 = (RuleCall)cWriteIdAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStoredKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cStoreIdAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cStoreIdIdentParserRuleCall_4_1_0_0 = (RuleCall)cStoreIdAssignment_4_1_0.eContents().get(0);
		private final Assignment cStoreExpAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cStoreExpConstExprParserRuleCall_4_1_1_0 = (RuleCall)cStoreExpAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cDefaultKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cDefaulExpAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cDefaulExpConstExprParserRuleCall_5_0_1_0 = (RuleCall)cDefaulExpAssignment_5_0_1.eContents().get(0);
		private final Keyword cNodefaultKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImplementsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cImplementAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cImplementTypeIdParserRuleCall_6_1_0 = (RuleCall)cImplementAssignment_6_1.eContents().get(0);
		
		//propertySpecifiers // Modified constExpr
		//:
		//	{propertySpecifiers} ('index' index=constExpr)? ('read' readId=ident)? ('write' writeId=ident)? ('stored'
		//	(storeId=ident | storeExp=constExpr))? ('default' defaulExp=constExpr | 'nodefault')? ('implements'
		//	implement=typeId)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{propertySpecifiers} ('index' index=constExpr)? ('read' readId=ident)? ('write' writeId=ident)? ('stored' (storeId=ident
		//| storeExp=constExpr))? ('default' defaulExp=constExpr | 'nodefault')? ('implements' implement=typeId)?
		public Group getGroup() { return cGroup; }
		
		//{propertySpecifiers}
		public Action getPropertySpecifiersAction_0() { return cPropertySpecifiersAction_0; }
		
		//('index' index=constExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'index'
		public Keyword getIndexKeyword_1_0() { return cIndexKeyword_1_0; }
		
		//index=constExpr
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }
		
		//constExpr
		public RuleCall getIndexConstExprParserRuleCall_1_1_0() { return cIndexConstExprParserRuleCall_1_1_0; }
		
		//('read' readId=ident)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'read'
		public Keyword getReadKeyword_2_0() { return cReadKeyword_2_0; }
		
		//readId=ident
		public Assignment getReadIdAssignment_2_1() { return cReadIdAssignment_2_1; }
		
		//ident
		public RuleCall getReadIdIdentParserRuleCall_2_1_0() { return cReadIdIdentParserRuleCall_2_1_0; }
		
		//('write' writeId=ident)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'write'
		public Keyword getWriteKeyword_3_0() { return cWriteKeyword_3_0; }
		
		//writeId=ident
		public Assignment getWriteIdAssignment_3_1() { return cWriteIdAssignment_3_1; }
		
		//ident
		public RuleCall getWriteIdIdentParserRuleCall_3_1_0() { return cWriteIdIdentParserRuleCall_3_1_0; }
		
		//('stored' (storeId=ident | storeExp=constExpr))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'stored'
		public Keyword getStoredKeyword_4_0() { return cStoredKeyword_4_0; }
		
		//(storeId=ident | storeExp=constExpr)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//storeId=ident
		public Assignment getStoreIdAssignment_4_1_0() { return cStoreIdAssignment_4_1_0; }
		
		//ident
		public RuleCall getStoreIdIdentParserRuleCall_4_1_0_0() { return cStoreIdIdentParserRuleCall_4_1_0_0; }
		
		//storeExp=constExpr
		public Assignment getStoreExpAssignment_4_1_1() { return cStoreExpAssignment_4_1_1; }
		
		//constExpr
		public RuleCall getStoreExpConstExprParserRuleCall_4_1_1_0() { return cStoreExpConstExprParserRuleCall_4_1_1_0; }
		
		//('default' defaulExp=constExpr | 'nodefault')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'default' defaulExp=constExpr
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'default'
		public Keyword getDefaultKeyword_5_0_0() { return cDefaultKeyword_5_0_0; }
		
		//defaulExp=constExpr
		public Assignment getDefaulExpAssignment_5_0_1() { return cDefaulExpAssignment_5_0_1; }
		
		//constExpr
		public RuleCall getDefaulExpConstExprParserRuleCall_5_0_1_0() { return cDefaulExpConstExprParserRuleCall_5_0_1_0; }
		
		//'nodefault'
		public Keyword getNodefaultKeyword_5_1() { return cNodefaultKeyword_5_1; }
		
		//('implements' implement=typeId)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'implements'
		public Keyword getImplementsKeyword_6_0() { return cImplementsKeyword_6_0; }
		
		//implement=typeId
		public Assignment getImplementAssignment_6_1() { return cImplementAssignment_6_1; }
		
		//typeId
		public RuleCall getImplementTypeIdParserRuleCall_6_1_0() { return cImplementTypeIdParserRuleCall_6_1_0; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.interfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeritageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeritageInterfaceHeritageParserRuleCall_1_0 = (RuleCall)cHeritageAssignment_1.eContents().get(0);
		private final Assignment cMethodListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodListClassMethodListParserRuleCall_2_0 = (RuleCall)cMethodListAssignment_2.eContents().get(0);
		private final Assignment cPropListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropListClassPropertyListParserRuleCall_3_0 = (RuleCall)cPropListAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//interfaceType:
		//	'interface' heritage=interfaceHeritage methodList=classMethodList propList+=classPropertyList* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' heritage=interfaceHeritage methodList=classMethodList propList+=classPropertyList* 'end'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//heritage=interfaceHeritage
		public Assignment getHeritageAssignment_1() { return cHeritageAssignment_1; }
		
		//interfaceHeritage
		public RuleCall getHeritageInterfaceHeritageParserRuleCall_1_0() { return cHeritageInterfaceHeritageParserRuleCall_1_0; }
		
		//methodList=classMethodList
		public Assignment getMethodListAssignment_2() { return cMethodListAssignment_2; }
		
		//classMethodList
		public RuleCall getMethodListClassMethodListParserRuleCall_2_0() { return cMethodListClassMethodListParserRuleCall_2_0; }
		
		//propList+=classPropertyList*
		public Assignment getPropListAssignment_3() { return cPropListAssignment_3; }
		
		//classPropertyList
		public RuleCall getPropListClassPropertyListParserRuleCall_3_0() { return cPropListClassPropertyListParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class InterfaceHeritageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.interfaceHeritage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdListIdentListParserRuleCall_1_0 = (RuleCall)cIdListAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//interfaceHeritage:
		//	'(' idList=identList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' idList=identList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//idList=identList
		public Assignment getIdListAssignment_1() { return cIdListAssignment_1; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_1_0() { return cIdListIdentListParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class RequiresClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.requiresClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequiresClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequiresKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdListIdentListParserRuleCall_2_0 = (RuleCall)cIdListAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//requiresClause:
		//	{requiresClause} 'requires' idList+=identList* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{requiresClause} 'requires' idList+=identList* ';'
		public Group getGroup() { return cGroup; }
		
		//{requiresClause}
		public Action getRequiresClauseAction_0() { return cRequiresClauseAction_0; }
		
		//'requires'
		public Keyword getRequiresKeyword_1() { return cRequiresKeyword_1; }
		
		//idList+=identList*
		public Assignment getIdListAssignment_2() { return cIdListAssignment_2; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_2_0() { return cIdListIdentListParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ContainsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.containsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainsClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdListIdentListParserRuleCall_2_0 = (RuleCall)cIdListAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//containsClause:
		//	{containsClause} 'contains' idList+=identList* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{containsClause} 'contains' idList+=identList* ';'
		public Group getGroup() { return cGroup; }
		
		//{containsClause}
		public Action getContainsClauseAction_0() { return cContainsClauseAction_0; }
		
		//'contains'
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }
		
		//idList+=identList*
		public Assignment getIdListAssignment_2() { return cIdListAssignment_2; }
		
		//identList
		public RuleCall getIdListIdentListParserRuleCall_2_0() { return cIdListIdentListParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IdentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.identList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdsIdentParserRuleCall_0_0 = (RuleCall)cIdsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdsIdentParserRuleCall_1_1_0 = (RuleCall)cIdsAssignment_1_1.eContents().get(0);
		
		//identList:
		//	ids+=ident (',' ids+=ident)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ids+=ident (',' ids+=ident)*
		public Group getGroup() { return cGroup; }
		
		//ids+=ident
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }
		
		//ident
		public RuleCall getIdsIdentParserRuleCall_0_0() { return cIdsIdentParserRuleCall_0_0; }
		
		//(',' ids+=ident)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ids+=ident
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }
		
		//ident
		public RuleCall getIdsIdentParserRuleCall_1_1_0() { return cIdsIdentParserRuleCall_1_1_0; }
	}
	public class QualIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.qualId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cUnitIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cUnitIdUnitIdParserRuleCall_0_0_0 = (RuleCall)cUnitIdAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//qualId:
		//	(unitId=unitId '.')? id=ident;
		@Override public ParserRule getRule() { return rule; }
		
		//(unitId=unitId '.')? id=ident
		public Group getGroup() { return cGroup; }
		
		//(unitId=unitId '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//unitId=unitId
		public Assignment getUnitIdAssignment_0_0() { return cUnitIdAssignment_0_0; }
		
		//unitId
		public RuleCall getUnitIdUnitIdParserRuleCall_0_0_0() { return cUnitIdUnitIdParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//id=ident
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_1_0() { return cIdIdentParserRuleCall_1_0; }
	}
	public class TypeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.typeId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cUnitIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cUnitIdUnitIdParserRuleCall_0_0_0 = (RuleCall)cUnitIdAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//typeId //modified
		//:
		//	(unitId=unitId '.')? id=qualId;
		@Override public ParserRule getRule() { return rule; }
		
		//(unitId=unitId '.')? id=qualId
		public Group getGroup() { return cGroup; }
		
		//(unitId=unitId '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//unitId=unitId
		public Assignment getUnitIdAssignment_0_0() { return cUnitIdAssignment_0_0; }
		
		//unitId
		public RuleCall getUnitIdUnitIdParserRuleCall_0_0_0() { return cUnitIdUnitIdParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//id=qualId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//qualId
		public RuleCall getIdQualIdParserRuleCall_1_0() { return cIdQualIdParserRuleCall_1_0; }
	}
	public class IdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.ident");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMultipleIdAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cIdAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0_2_1_0 = (RuleCall)cIdAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cReservedIdAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cReservedWordAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cReservedWordReservedWordParserRuleCall_1_2_0 = (RuleCall)cReservedWordAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMineIDAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cFirstAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFirstIDTerminalRuleCall_2_1_0 = (RuleCall)cFirstAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cSecondAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSecondIDTerminalRuleCall_2_3_0 = (RuleCall)cSecondAssignment_2_3.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//ident // modified
		//:
		//	{MultipleId} id+=ID ('.' id+=ID)*
		//	| {ReservedId} '&' reservedWord=reservedWord
		//	| {MineID} first=ID '(' second=ID '^' ')' // mine
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MultipleId} id+=ID ('.' id+=ID)* | {ReservedId} '&' reservedWord=reservedWord | {MineID} first=ID '(' second=ID '^' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MultipleId} id+=ID ('.' id+=ID)*
		public Group getGroup_0() { return cGroup_0; }
		
		//{MultipleId}
		public Action getMultipleIdAction_0_0() { return cMultipleIdAction_0_0; }
		
		//id+=ID
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_1_0() { return cIdIDTerminalRuleCall_0_1_0; }
		
		//('.' id+=ID)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2_0() { return cFullStopKeyword_0_2_0; }
		
		//id+=ID
		public Assignment getIdAssignment_0_2_1() { return cIdAssignment_0_2_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_2_1_0() { return cIdIDTerminalRuleCall_0_2_1_0; }
		
		//{ReservedId} '&' reservedWord=reservedWord
		public Group getGroup_1() { return cGroup_1; }
		
		//{ReservedId}
		public Action getReservedIdAction_1_0() { return cReservedIdAction_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//reservedWord=reservedWord
		public Assignment getReservedWordAssignment_1_2() { return cReservedWordAssignment_1_2; }
		
		//reservedWord
		public RuleCall getReservedWordReservedWordParserRuleCall_1_2_0() { return cReservedWordReservedWordParserRuleCall_1_2_0; }
		
		//{MineID} first=ID '(' second=ID '^' ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{MineID}
		public Action getMineIDAction_2_0() { return cMineIDAction_2_0; }
		
		//first=ID
		public Assignment getFirstAssignment_2_1() { return cFirstAssignment_2_1; }
		
		//ID
		public RuleCall getFirstIDTerminalRuleCall_2_1_0() { return cFirstIDTerminalRuleCall_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//second=ID
		public Assignment getSecondAssignment_2_3() { return cSecondAssignment_2_3; }
		
		//ID
		public RuleCall getSecondIDTerminalRuleCall_2_3_0() { return cSecondIDTerminalRuleCall_2_3_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_2_4() { return cCircumflexAccentKeyword_2_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}
	public class ReservedWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.reservedWord");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//reservedWord:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class ConstExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.constExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpsExpressionParserRuleCall_0_0 = (RuleCall)cExpsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsConstExprParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpsConstExprParserRuleCall_1_2_1_0 = (RuleCall)cExpsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpsRecordConstExprParserRuleCall_2_1_0 = (RuleCall)cExpsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cExpsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cExpsRecordConstExprParserRuleCall_2_2_1_0 = (RuleCall)cExpsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//constExpr // modified
		//:
		//	exps+=expression
		//	| '(' exps+=constExpr (',' exps+=constExpr)* ')'
		//	| '(' exps+=recordConstExpr (',' exps+=recordConstExpr)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//exps+=expression | '(' exps+=constExpr (',' exps+=constExpr)* ')' | '(' exps+=recordConstExpr (','
		//exps+=recordConstExpr)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exps+=expression
		public Assignment getExpsAssignment_0() { return cExpsAssignment_0; }
		
		//expression
		public RuleCall getExpsExpressionParserRuleCall_0_0() { return cExpsExpressionParserRuleCall_0_0; }
		
		//'(' exps+=constExpr (',' exps+=constExpr)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//exps+=constExpr
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }
		
		//constExpr
		public RuleCall getExpsConstExprParserRuleCall_1_1_0() { return cExpsConstExprParserRuleCall_1_1_0; }
		
		//(',' exps+=constExpr)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//exps+=constExpr
		public Assignment getExpsAssignment_1_2_1() { return cExpsAssignment_1_2_1; }
		
		//constExpr
		public RuleCall getExpsConstExprParserRuleCall_1_2_1_0() { return cExpsConstExprParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'(' exps+=recordConstExpr (',' exps+=recordConstExpr)* ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//exps+=recordConstExpr
		public Assignment getExpsAssignment_2_1() { return cExpsAssignment_2_1; }
		
		//recordConstExpr
		public RuleCall getExpsRecordConstExprParserRuleCall_2_1_0() { return cExpsRecordConstExprParserRuleCall_2_1_0; }
		
		//(',' exps+=recordConstExpr)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//exps+=recordConstExpr
		public Assignment getExpsAssignment_2_2_1() { return cExpsAssignment_2_2_1; }
		
		//recordConstExpr
		public RuleCall getExpsRecordConstExprParserRuleCall_2_2_1_0() { return cExpsRecordConstExprParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class RecordConstExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.recordConstExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstExpConstExprParserRuleCall_2_0 = (RuleCall)cConstExpAssignment_2.eContents().get(0);
		
		//recordConstExpr // added
		//:
		//	id=ident ':' constExp=constExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ident ':' constExp=constExpr
		public Group getGroup() { return cGroup; }
		
		//id=ident
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ident
		public RuleCall getIdIdentParserRuleCall_0_0() { return cIdIdentParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//constExp=constExpr
		public Assignment getConstExpAssignment_2() { return cConstExpAssignment_2; }
		
		//constExpr
		public RuleCall getConstExpConstExprParserRuleCall_2_0() { return cConstExpConstExprParserRuleCall_2_0; }
	}
	public class UnitIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.unitId");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//unitId // modified
		//:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class LabelIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.labelId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//labelId // modified
		//:
		//	ID
		//	| INT
		//	| HEX;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT | HEX
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_2() { return cHEXTerminalRuleCall_2; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//number:
		//	INT
		//	| '#' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | '#' INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'#' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class StringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.string");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQVALUETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDQVALUETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//string:
		//	QVALUE
		//	| DQVALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//QVALUE | DQVALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QVALUE
		public RuleCall getQVALUETerminalRuleCall_0() { return cQVALUETerminalRuleCall_0; }
		
		//DQVALUE
		public RuleCall getDQVALUETerminalRuleCall_1() { return cDQVALUETerminalRuleCall_1; }
	}
	
	
	private final MainRuleElements pMainRule;
	private final FileElements pFile;
	private final ProgramElements pProgram;
	private final UnitElements pUnit;
	private final PackageDeclElements pPackageDecl;
	private final LibraryElements pLibrary;
	private final ProgramBlockElements pProgramBlock;
	private final UsesClauseElements pUsesClause;
	private final PortabilityDirectiveElements pPortabilityDirective;
	private final InterfaceSectionElements pInterfaceSection;
	private final InterfaceDeclElements pInterfaceDecl;
	private final ExportedHeadingElements pExportedHeading;
	private final ImplementationSectionElements pImplementationSection;
	private final BlockElements pBlock;
	private final ExportsItemElements pExportsItem;
	private final ExportsStmtElements pExportsStmt;
	private final DeclSectionElements pDeclSection;
	private final LabelDeclSectionElements pLabelDeclSection;
	private final ConstSectionElements pConstSection;
	private final ConstantDeclElements pConstantDecl;
	private final TypeSectionElements pTypeSection;
	private final TypeDeclElements pTypeDecl;
	private final TypedConstantElements pTypedConstant;
	private final ArrayConstantElements pArrayConstant;
	private final RecordConstantElements pRecordConstant;
	private final RecordFieldConstantElements pRecordFieldConstant;
	private final TypeElements pType;
	private final RestrictedTypeElements pRestrictedType;
	private final ClassRefTypeElements pClassRefType;
	private final SimpleTypeElements pSimpleType;
	private final RealTypeElements pRealType;
	private final OrdinalTypeElements pOrdinalType;
	private final OrdIdentElements pOrdIdent;
	private final VariantTypeElements pVariantType;
	private final SubrangeTypeElements pSubrangeType;
	private final EnumeratedTypeElements pEnumeratedType;
	private final EnumeratedTypeElementElements pEnumeratedTypeElement;
	private final StringTypeElements pStringType;
	private final StrucTypeElements pStrucType;
	private final ArrayTypeElements pArrayType;
	private final RecTypeElements pRecType;
	private final FieldListElements pFieldList;
	private final FieldDeclElements pFieldDecl;
	private final VariantSectionElements pVariantSection;
	private final RecVariantElements pRecVariant;
	private final SetTypeElements pSetType;
	private final FileTypeElements pFileType;
	private final PointerTypeElements pPointerType;
	private final ProcedureTypeElements pProcedureType;
	private final VarSectionElements pVarSection;
	private final VarDeclElements pVarDecl;
	private final ExpressionElements pExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final RelOpElements pRelOp;
	private final AddOpElements pAddOp;
	private final MulOpElements pMulOp;
	private final DesignatorElements pDesignator;
	private final DesignatorSubPartElements pDesignatorSubPart;
	private final DesignatorPartElements pDesignatorPart;
	private final SetConstructorElements pSetConstructor;
	private final SetElementElements pSetElement;
	private final ExprListElements pExprList;
	private final StatementElements pStatement;
	private final StmtListElements pStmtList;
	private final UnlabelledStatementElements pUnlabelledStatement;
	private final SimpleStatementElements pSimpleStatement;
	private final StructStmtElements pStructStmt;
	private final CompoundStmtElements pCompoundStmt;
	private final ConditionalStmtElements pConditionalStmt;
	private final IfStmtElements pIfStmt;
	private final CaseStmtElements pCaseStmt;
	private final CaseSelectorElements pCaseSelector;
	private final CaseLabelElements pCaseLabel;
	private final LoopStmtElements pLoopStmt;
	private final RepeatStmtElements pRepeatStmt;
	private final WhileStmtElements pWhileStmt;
	private final ForStmtElements pForStmt;
	private final WithStmtElements pWithStmt;
	private final TryStmtElements pTryStmt;
	private final ExceptionBlockElements pExceptionBlock;
	private final RaiseStmtElements pRaiseStmt;
	private final AssemblerStmtElements pAssemblerStmt;
	private final ProcedureDeclSectionElements pProcedureDeclSection;
	private final ProcedureDeclElements pProcedureDecl;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionHeadingElements pFunctionHeading;
	private final ProcedureHeadingElements pProcedureHeading;
	private final FormalParametersElements pFormalParameters;
	private final FormalParmElements pFormalParm;
	private final ParameterElements pParameter;
	private final DirectiveElements pDirective;
	private final ObjectTypeElements pObjectType;
	private final ObjHeritageElements pObjHeritage;
	private final MethodListElements pMethodList;
	private final MethodHeadingElements pMethodHeading;
	private final ConstructorHeadingElements pConstructorHeading;
	private final DestructorHeadingElements pDestructorHeading;
	private final ObjFieldListElements pObjFieldList;
	private final InitSectionElements pInitSection;
	private final ClassTypeElements pClassType;
	private final ClassHeritageElements pClassHeritage;
	private final ClassVisibilityElements pClassVisibility;
	private final ClassFieldListElements pClassFieldList;
	private final ClassFieldElements pClassField;
	private final ClassMethodListElements pClassMethodList;
	private final ClassMethodElements pClassMethod;
	private final ClassPropertyListElements pClassPropertyList;
	private final ClassPropertyElements pClassProperty;
	private final PropertyListElements pPropertyList;
	private final PropertyInterfaceElements pPropertyInterface;
	private final PropertyParameterListElements pPropertyParameterList;
	private final PropertySpecifiersElements pPropertySpecifiers;
	private final InterfaceTypeElements pInterfaceType;
	private final InterfaceHeritageElements pInterfaceHeritage;
	private final RequiresClauseElements pRequiresClause;
	private final ContainsClauseElements pContainsClause;
	private final IdentListElements pIdentList;
	private final QualIdElements pQualId;
	private final TypeIdElements pTypeId;
	private final IdentElements pIdent;
	private final ReservedWordElements pReservedWord;
	private final ConstExprElements pConstExpr;
	private final RecordConstExprElements pRecordConstExpr;
	private final UnitIdElements pUnitId;
	private final LabelIdElements pLabelId;
	private final NumberElements pNumber;
	private final StringElements pString;
	private final TerminalRule tSLASH;
	private final TerminalRule tQUOTE;
	private final TerminalRule tID;
	private final TerminalRule tDOUBLEQUOTE;
	private final TerminalRule tDQVALUE;
	private final TerminalRule tQVALUE;
	private final TerminalRule tHEX;
	private final TerminalRule tINT;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tMORECOMMENT;
	private final TerminalRule tLINE_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DelphiGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pMainRule = new MainRuleElements();
		this.pFile = new FileElements();
		this.pProgram = new ProgramElements();
		this.pUnit = new UnitElements();
		this.pPackageDecl = new PackageDeclElements();
		this.pLibrary = new LibraryElements();
		this.pProgramBlock = new ProgramBlockElements();
		this.pUsesClause = new UsesClauseElements();
		this.pPortabilityDirective = new PortabilityDirectiveElements();
		this.pInterfaceSection = new InterfaceSectionElements();
		this.pInterfaceDecl = new InterfaceDeclElements();
		this.pExportedHeading = new ExportedHeadingElements();
		this.pImplementationSection = new ImplementationSectionElements();
		this.pBlock = new BlockElements();
		this.pExportsItem = new ExportsItemElements();
		this.pExportsStmt = new ExportsStmtElements();
		this.pDeclSection = new DeclSectionElements();
		this.pLabelDeclSection = new LabelDeclSectionElements();
		this.pConstSection = new ConstSectionElements();
		this.pConstantDecl = new ConstantDeclElements();
		this.pTypeSection = new TypeSectionElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypedConstant = new TypedConstantElements();
		this.pArrayConstant = new ArrayConstantElements();
		this.pRecordConstant = new RecordConstantElements();
		this.pRecordFieldConstant = new RecordFieldConstantElements();
		this.pType = new TypeElements();
		this.pRestrictedType = new RestrictedTypeElements();
		this.pClassRefType = new ClassRefTypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pRealType = new RealTypeElements();
		this.pOrdinalType = new OrdinalTypeElements();
		this.pOrdIdent = new OrdIdentElements();
		this.pVariantType = new VariantTypeElements();
		this.pSubrangeType = new SubrangeTypeElements();
		this.pEnumeratedType = new EnumeratedTypeElements();
		this.pEnumeratedTypeElement = new EnumeratedTypeElementElements();
		this.pStringType = new StringTypeElements();
		this.pStrucType = new StrucTypeElements();
		this.pArrayType = new ArrayTypeElements();
		this.pRecType = new RecTypeElements();
		this.pFieldList = new FieldListElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pVariantSection = new VariantSectionElements();
		this.pRecVariant = new RecVariantElements();
		this.pSetType = new SetTypeElements();
		this.pFileType = new FileTypeElements();
		this.pPointerType = new PointerTypeElements();
		this.pProcedureType = new ProcedureTypeElements();
		this.pVarSection = new VarSectionElements();
		this.pVarDecl = new VarDeclElements();
		this.pExpression = new ExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pRelOp = new RelOpElements();
		this.pAddOp = new AddOpElements();
		this.pMulOp = new MulOpElements();
		this.pDesignator = new DesignatorElements();
		this.pDesignatorSubPart = new DesignatorSubPartElements();
		this.pDesignatorPart = new DesignatorPartElements();
		this.pSetConstructor = new SetConstructorElements();
		this.pSetElement = new SetElementElements();
		this.pExprList = new ExprListElements();
		this.pStatement = new StatementElements();
		this.pStmtList = new StmtListElements();
		this.pUnlabelledStatement = new UnlabelledStatementElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pStructStmt = new StructStmtElements();
		this.pCompoundStmt = new CompoundStmtElements();
		this.pConditionalStmt = new ConditionalStmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pCaseStmt = new CaseStmtElements();
		this.pCaseSelector = new CaseSelectorElements();
		this.pCaseLabel = new CaseLabelElements();
		this.pLoopStmt = new LoopStmtElements();
		this.pRepeatStmt = new RepeatStmtElements();
		this.pWhileStmt = new WhileStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pWithStmt = new WithStmtElements();
		this.pTryStmt = new TryStmtElements();
		this.pExceptionBlock = new ExceptionBlockElements();
		this.pRaiseStmt = new RaiseStmtElements();
		this.pAssemblerStmt = new AssemblerStmtElements();
		this.pProcedureDeclSection = new ProcedureDeclSectionElements();
		this.pProcedureDecl = new ProcedureDeclElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunctionHeading = new FunctionHeadingElements();
		this.pProcedureHeading = new ProcedureHeadingElements();
		this.pFormalParameters = new FormalParametersElements();
		this.pFormalParm = new FormalParmElements();
		this.pParameter = new ParameterElements();
		this.pDirective = new DirectiveElements();
		this.pObjectType = new ObjectTypeElements();
		this.pObjHeritage = new ObjHeritageElements();
		this.pMethodList = new MethodListElements();
		this.pMethodHeading = new MethodHeadingElements();
		this.pConstructorHeading = new ConstructorHeadingElements();
		this.pDestructorHeading = new DestructorHeadingElements();
		this.pObjFieldList = new ObjFieldListElements();
		this.pInitSection = new InitSectionElements();
		this.pClassType = new ClassTypeElements();
		this.pClassHeritage = new ClassHeritageElements();
		this.pClassVisibility = new ClassVisibilityElements();
		this.pClassFieldList = new ClassFieldListElements();
		this.pClassField = new ClassFieldElements();
		this.pClassMethodList = new ClassMethodListElements();
		this.pClassMethod = new ClassMethodElements();
		this.pClassPropertyList = new ClassPropertyListElements();
		this.pClassProperty = new ClassPropertyElements();
		this.pPropertyList = new PropertyListElements();
		this.pPropertyInterface = new PropertyInterfaceElements();
		this.pPropertyParameterList = new PropertyParameterListElements();
		this.pPropertySpecifiers = new PropertySpecifiersElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pInterfaceHeritage = new InterfaceHeritageElements();
		this.pRequiresClause = new RequiresClauseElements();
		this.pContainsClause = new ContainsClauseElements();
		this.pIdentList = new IdentListElements();
		this.pQualId = new QualIdElements();
		this.pTypeId = new TypeIdElements();
		this.pIdent = new IdentElements();
		this.pReservedWord = new ReservedWordElements();
		this.pConstExpr = new ConstExprElements();
		this.pRecordConstExpr = new RecordConstExprElements();
		this.pUnitId = new UnitIdElements();
		this.pLabelId = new LabelIdElements();
		this.pNumber = new NumberElements();
		this.pString = new StringElements();
		this.tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.SLASH");
		this.tQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.QUOTE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.ID");
		this.tDOUBLEQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.DOUBLEQUOTE");
		this.tDQVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.DQVALUE");
		this.tQVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.QVALUE");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.HEX");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.INT");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.COMMENT");
		this.tMORECOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.MORECOMMENT");
		this.tLINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.LINE_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.delphi.Delphi.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.delphi.Delphi".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//mainRule:
	//	file=file // ASBH modified
	//;
	public MainRuleElements getMainRuleAccess() {
		return pMainRule;
	}
	
	public ParserRule getMainRuleRule() {
		return getMainRuleAccess().getRule();
	}
	
	//file:
	//	program
	//	| packageDecl
	//	| library
	//	| unit;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//program:
	//	('program' id=ident ('(' paramsList=identList ')')? ';')? block=programBlock '.';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//unit:
	//	'unit' id=ident port=portabilityDirective? ';' interfaceSect=interfaceSection
	//	implementationSect=implementationSection initSect=initSection '.';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//packageDecl:
	//	'package' id=ident ';' requires=requiresClause? contains=containsClause? 'end' '.';
	public PackageDeclElements getPackageDeclAccess() {
		return pPackageDecl;
	}
	
	public ParserRule getPackageDeclRule() {
		return getPackageDeclAccess().getRule();
	}
	
	//library:
	//	'library' id=ident ';' pBlock=programBlock '.';
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}
	
	//programBlock:
	//	uses=usesClause? block=block;
	public ProgramBlockElements getProgramBlockAccess() {
		return pProgramBlock;
	}
	
	public ParserRule getProgramBlockRule() {
		return getProgramBlockAccess().getRule();
	}
	
	//usesClause:
	//	'uses' idList=identList ';';
	public UsesClauseElements getUsesClauseAccess() {
		return pUsesClause;
	}
	
	public ParserRule getUsesClauseRule() {
		return getUsesClauseAccess().getRule();
	}
	
	//portabilityDirective:
	//	'platform'
	//	| 'deprecated'
	//	| 'library';
	public PortabilityDirectiveElements getPortabilityDirectiveAccess() {
		return pPortabilityDirective;
	}
	
	public ParserRule getPortabilityDirectiveRule() {
		return getPortabilityDirectiveAccess().getRule();
	}
	
	//interfaceSection:
	//	{interfaceSection} 'interface' uses=usesClause? interfaceDecl+=interfaceDecl*;
	public InterfaceSectionElements getInterfaceSectionAccess() {
		return pInterfaceSection;
	}
	
	public ParserRule getInterfaceSectionRule() {
		return getInterfaceSectionAccess().getRule();
	}
	
	//interfaceDecl:
	//	constSection
	//	| typeSection
	//	| varSection
	//	| exportedHeading;
	public InterfaceDeclElements getInterfaceDeclAccess() {
		return pInterfaceDecl;
	}
	
	public ParserRule getInterfaceDeclRule() {
		return getInterfaceDeclAccess().getRule();
	}
	
	//exportedHeading:
	//	pHeading=procedureHeading ';' directive=directive?
	//	| fHeading=functionHeading ';' directive=directive?;
	public ExportedHeadingElements getExportedHeadingAccess() {
		return pExportedHeading;
	}
	
	public ParserRule getExportedHeadingRule() {
		return getExportedHeadingAccess().getRule();
	}
	
	//implementationSection:
	//	{implementationSection} 'implementation' uses=usesClause? declSect+=declSection* exports+=exportsStmt*;
	public ImplementationSectionElements getImplementationSectionAccess() {
		return pImplementationSection;
	}
	
	public ParserRule getImplementationSectionRule() {
		return getImplementationSectionAccess().getRule();
	}
	
	//block:
	//	declSect=declSection? exports+=exportsStmt* compound=compoundStmt exports+=exportsStmt*;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//exportsItem // modified	
	//:
	//	{exportsItem} id=ident ('name' | 'index' constExp+=constExpr)? ('index' | 'name' constExp+=constExpr)?;
	public ExportsItemElements getExportsItemAccess() {
		return pExportsItem;
	}
	
	public ParserRule getExportsItemRule() {
		return getExportsItemAccess().getRule();
	}
	
	//exportsStmt:
	//	'exports' items+=exportsItem (',' items+=exportsItem)*;
	public ExportsStmtElements getExportsStmtAccess() {
		return pExportsStmt;
	}
	
	public ParserRule getExportsStmtRule() {
		return getExportsStmtAccess().getRule();
	}
	
	//declSection:
	//	labelDeclSection
	//	| constSection
	//	| typeSection
	//	| varSection
	//	| procedureDeclSection;
	public DeclSectionElements getDeclSectionAccess() {
		return pDeclSection;
	}
	
	public ParserRule getDeclSectionRule() {
		return getDeclSectionAccess().getRule();
	}
	
	//labelDeclSection:
	//	'label' id=labelId;
	public LabelDeclSectionElements getLabelDeclSectionAccess() {
		return pLabelDeclSection;
	}
	
	public ParserRule getLabelDeclSectionRule() {
		return getLabelDeclSectionAccess().getRule();
	}
	
	//constSection:
	//	{constSection} 'const' (constantDecl+=constantDecl ';')*;
	public ConstSectionElements getConstSectionAccess() {
		return pConstSection;
	}
	
	public ParserRule getConstSectionRule() {
		return getConstSectionAccess().getRule();
	}
	
	//constantDecl:
	//	id=ident '=' const=constExpr port=portabilityDirective?
	//	| id=ident ':' typeRef=typeId '=' typedConstat=typedConstant port=portabilityDirective?;
	public ConstantDeclElements getConstantDeclAccess() {
		return pConstantDecl;
	}
	
	public ParserRule getConstantDeclRule() {
		return getConstantDeclAccess().getRule();
	}
	
	//typeSection:
	//	{typeSection} 'type' (typeDecl+=typeDecl ';')*;
	public TypeSectionElements getTypeSectionAccess() {
		return pTypeSection;
	}
	
	public ParserRule getTypeSectionRule() {
		return getTypeSectionAccess().getRule();
	}
	
	//typeDecl:
	//	id=ident '=' 'type'? type=type port=portabilityDirective?
	//	| id=ident '=' 'type'? restrictedType=restrictedType port=portabilityDirective?;
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//typedConstant:
	//	{typedConstant} (const=constExpr | array=arrayConstant | record=recordConstant);
	public TypedConstantElements getTypedConstantAccess() {
		return pTypedConstant;
	}
	
	public ParserRule getTypedConstantRule() {
		return getTypedConstantAccess().getRule();
	}
	
	//arrayConstant:
	//	'(' typedConstant=typedConstant ',' ')';
	public ArrayConstantElements getArrayConstantAccess() {
		return pArrayConstant;
	}
	
	public ParserRule getArrayConstantRule() {
		return getArrayConstantAccess().getRule();
	}
	
	//recordConstant:
	//	{recordConstant} '(' (recordField+=recordFieldConstant ';')* ')';
	public RecordConstantElements getRecordConstantAccess() {
		return pRecordConstant;
	}
	
	public ParserRule getRecordConstantRule() {
		return getRecordConstantAccess().getRule();
	}
	
	//recordFieldConstant:
	//	id=ident ':' typedConstant=typedConstant;
	public RecordFieldConstantElements getRecordFieldConstantAccess() {
		return pRecordFieldConstant;
	}
	
	public ParserRule getRecordFieldConstantRule() {
		return getRecordFieldConstantAccess().getRule();
	}
	
	//type:
	//	typeId
	//	| simpleType
	//	| strucType
	//	| pointerType
	//	| stringType
	//	| procedureType
	//	| variantType
	//	| classRefType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//restrictedType:
	//	objectType
	//	| classType
	//	| interfaceType;
	public RestrictedTypeElements getRestrictedTypeAccess() {
		return pRestrictedType;
	}
	
	public ParserRule getRestrictedTypeRule() {
		return getRestrictedTypeAccess().getRule();
	}
	
	//classRefType:
	//	'class' 'of' typeRef=typeId;
	public ClassRefTypeElements getClassRefTypeAccess() {
		return pClassRefType;
	}
	
	public ParserRule getClassRefTypeRule() {
		return getClassRefTypeAccess().getRule();
	}
	
	//simpleType:
	//	ordinalType
	//	| realType;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//realType:
	//	{realType} ('real48'
	//	| 'real'
	//	| 'single'
	//	| 'double'
	//	| 'extended'
	//	| 'currency'
	//	| 'comp');
	public RealTypeElements getRealTypeAccess() {
		return pRealType;
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}
	
	//ordinalType:
	//	subrangeType
	//	| enumeratedType
	//	| ordIdent;
	public OrdinalTypeElements getOrdinalTypeAccess() {
		return pOrdinalType;
	}
	
	public ParserRule getOrdinalTypeRule() {
		return getOrdinalTypeAccess().getRule();
	}
	
	//ordIdent:
	//	{ordIdent} ('shortint'
	//	| 'smallint'
	//	| 'integer'
	//	| 'byte'
	//	| 'longint'
	//	| 'int64'
	//	| 'word'
	//	| 'boolean'
	//	| 'char'
	//	| 'widechar'
	//	| 'longword'
	//	| 'pchar');
	public OrdIdentElements getOrdIdentAccess() {
		return pOrdIdent;
	}
	
	public ParserRule getOrdIdentRule() {
		return getOrdIdentAccess().getRule();
	}
	
	//variantType:
	//	{variantType} ('variant'
	//	| 'olevariant');
	public VariantTypeElements getVariantTypeAccess() {
		return pVariantType;
	}
	
	public ParserRule getVariantTypeRule() {
		return getVariantTypeAccess().getRule();
	}
	
	//subrangeType:
	//	first=constExpr '..' last=constExpr;
	public SubrangeTypeElements getSubrangeTypeAccess() {
		return pSubrangeType;
	}
	
	public ParserRule getSubrangeTypeRule() {
		return getSubrangeTypeAccess().getRule();
	}
	
	//enumeratedType:
	//	{enumeratedType} '(' (element+=enumeratedTypeElement ',')* ')';
	public EnumeratedTypeElements getEnumeratedTypeAccess() {
		return pEnumeratedType;
	}
	
	public ParserRule getEnumeratedTypeRule() {
		return getEnumeratedTypeAccess().getRule();
	}
	
	//enumeratedTypeElement:
	//	id=ident ('=' literalExp=constExpr)?;
	public EnumeratedTypeElementElements getEnumeratedTypeElementAccess() {
		return pEnumeratedTypeElement;
	}
	
	public ParserRule getEnumeratedTypeElementRule() {
		return getEnumeratedTypeElementAccess().getRule();
	}
	
	//stringType:
	//	{stringType} ('string'
	//	| 'ansistring'
	//	| 'widestring'
	//	| 'string' '(' constExp=constExpr ')');
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//strucType:
	//	'packed'? (arrayType | setType | fileType | recType 'packed'?);
	public StrucTypeElements getStrucTypeAccess() {
		return pStrucType;
	}
	
	public ParserRule getStrucTypeRule() {
		return getStrucTypeAccess().getRule();
	}
	
	//arrayType:
	//	'array' ('[' ordinalType+=ordinalType (',' ordinalTyp+=ordinalType)* ']')? 'of' type=type port=portabilityDirective?;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//recType:
	//	{recType} 'record' fields=fieldList? 'end' port=portabilityDirective?;
	public RecTypeElements getRecTypeAccess() {
		return pRecType;
	}
	
	public ParserRule getRecTypeRule() {
		return getRecTypeAccess().getRule();
	}
	
	//fieldList:
	//	(field+=fieldDecl ';')+ variantSect=variantSection? ';'?;
	public FieldListElements getFieldListAccess() {
		return pFieldList;
	}
	
	public ParserRule getFieldListRule() {
		return getFieldListAccess().getRule();
	}
	
	//fieldDecl:
	//	idList=identList ':' type=type port=portabilityDirective?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//variantSection:
	//	'case' (id=ident ':')? typeRef=typeId 'of' (recVariants+=recVariant ';')+;
	public VariantSectionElements getVariantSectionAccess() {
		return pVariantSection;
	}
	
	public ParserRule getVariantSectionRule() {
		return getVariantSectionAccess().getRule();
	}
	
	//recVariant:
	//	constExp+=constExpr ',' constExp+=constExpr+ ':' '(' fieldList=fieldList ')';
	public RecVariantElements getRecVariantAccess() {
		return pRecVariant;
	}
	
	public ParserRule getRecVariantRule() {
		return getRecVariantAccess().getRule();
	}
	
	//setType:
	//	'set' 'of' ordinal=ordinalType port=portabilityDirective?;
	public SetTypeElements getSetTypeAccess() {
		return pSetType;
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}
	
	//fileType:
	//	'file' 'of' typeRef=typeId port=portabilityDirective?;
	public FileTypeElements getFileTypeAccess() {
		return pFileType;
	}
	
	public ParserRule getFileTypeRule() {
		return getFileTypeAccess().getRule();
	}
	
	//pointerType:
	//	'^' typeId portabilityDirective?;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//procedureType:
	//	(pHeading=procedureHeading | fHeading=functionHeading) ('of' 'object')?;
	public ProcedureTypeElements getProcedureTypeAccess() {
		return pProcedureType;
	}
	
	public ParserRule getProcedureTypeRule() {
		return getProcedureTypeAccess().getRule();
	}
	
	//varSection:
	//	'var' (varDecls+=varDecl ';')+;
	public VarSectionElements getVarSectionAccess() {
		return pVarSection;
	}
	
	public ParserRule getVarSectionRule() {
		return getVarSectionAccess().getRule();
	}
	
	//varDecl:
	//	idList=identList ':' type=type ('absolute' (absId=ident | absConst=constExpr) | '=' absIniti=constExpr)?
	//	portabilityDirective?
	//	//	| 	identList ':' type ('absolute' (ident) | '=' constExpr)? (portabilityDirective)?
	//;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//expression:
	//	simpleExpression ({relExp.left=current} relOp=relOp right=simpleExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//simpleExpression:
	//	('+' | '-')? term ({addExp.left=current} addOp=addOp right=term)*;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//term:
	//	factor ({multExp.left=current} multOp=mulOp right=factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//factor:
	//	{factor} (designator=designator ('(' expList=exprList ')')?
	//	| '@' designator=designator
	//	| number=number
	//	| string=string
	//	| 'nil'
	//	| '(' exp=expression ')'
	//	| 'not' exp=factor
	//	| setConstuctor=setConstructor
	//	| typeRef=typeId '(' exp=expression ')');
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//relOp:
	//	{relOp} op=('='
	//	| '>'
	//	| '<'
	//	| '<='
	//	| '>='
	//	| '<>'
	//	| 'in'
	//	| 'is'
	//	| 'as');
	public RelOpElements getRelOpAccess() {
		return pRelOp;
	}
	
	public ParserRule getRelOpRule() {
		return getRelOpAccess().getRule();
	}
	
	//addOp:
	//	{adOp} op=('+'
	//	| '-'
	//	| 'or'
	//	| 'xor');
	public AddOpElements getAddOpAccess() {
		return pAddOp;
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}
	
	//mulOp:
	//	{mulOp} op=('*'
	//	| '/'
	//	| 'div'
	//	| 'mod'
	//	| 'and'
	//	| 'shl'
	//	| 'shr');
	public MulOpElements getMulOpAccess() {
		return pMulOp;
	}
	
	public ParserRule getMulOpRule() {
		return getMulOpAccess().getRule();
	}
	
	//designator:
	//	subpart=designatorSubPart ('.' designator=designator)?;
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	//designatorSubPart // modified
	//:
	//	part=designatorPart ('[' exprList+=exprList ']' | '^')*;
	public DesignatorSubPartElements getDesignatorSubPartAccess() {
		return pDesignatorSubPart;
	}
	
	public ParserRule getDesignatorSubPartRule() {
		return getDesignatorSubPartAccess().getRule();
	}
	
	//designatorPart // modified
	//:
	//	id=ID
	//	| '&' reservedWord=reservedWord
	//	| id=ID '(' id2=ID '^' ')' // mine
	//;
	public DesignatorPartElements getDesignatorPartAccess() {
		return pDesignatorPart;
	}
	
	public ParserRule getDesignatorPartRule() {
		return getDesignatorPartAccess().getRule();
	}
	
	//setConstructor:
	//	'[' (element+=setElement (',' element+=setElement)*) ']';
	public SetConstructorElements getSetConstructorAccess() {
		return pSetConstructor;
	}
	
	public ParserRule getSetConstructorRule() {
		return getSetConstructorAccess().getRule();
	}
	
	//setElement:
	//	first=expression ('..' last=expression)?;
	public SetElementElements getSetElementAccess() {
		return pSetElement;
	}
	
	public ParserRule getSetElementRule() {
		return getSetElementAccess().getRule();
	}
	
	//exprList:
	//	exps+=expression (',' exps+=expression)*;
	public ExprListElements getExprListAccess() {
		return pExprList;
	}
	
	public ParserRule getExprListRule() {
		return getExprListAccess().getRule();
	}
	
	//statement:
	//	(labelId=labelId ':')? statement=unlabelledStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//stmtList:
	//	{stmtList} (statments+=statement ';'?)*;
	public StmtListElements getStmtListAccess() {
		return pStmtList;
	}
	
	public ParserRule getStmtListRule() {
		return getStmtListAccess().getRule();
	}
	
	//unlabelledStatement:
	//	simpleStatement | structStmt;
	public UnlabelledStatementElements getUnlabelledStatementAccess() {
		return pUnlabelledStatement;
	}
	
	public ParserRule getUnlabelledStatementRule() {
		return getUnlabelledStatementAccess().getRule();
	}
	
	//simpleStatement:
	//	{assignmentStmnt} designator=designator operator=':=' exp=expression
	//	| {callStmnt} designator=designator ('(' args=exprList ')')?
	//	| {inheritedStamnt} 'inherited'
	//	| {gotoStmnt} 'goto' label=labelId;
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//structStmt:
	//	compoundStmt
	//	| conditionalStmt
	//	| loopStmt
	//	| withStmt
	//	| tryStmt
	//	| raiseStmt
	//	| assemblerStmt;
	public StructStmtElements getStructStmtAccess() {
		return pStructStmt;
	}
	
	public ParserRule getStructStmtRule() {
		return getStructStmtAccess().getRule();
	}
	
	//compoundStmt:
	//	'begin' stamtList=stmtList 'end';
	public CompoundStmtElements getCompoundStmtAccess() {
		return pCompoundStmt;
	}
	
	public ParserRule getCompoundStmtRule() {
		return getCompoundStmtAccess().getRule();
	}
	
	//conditionalStmt:
	//	ifStmt
	//	| caseStmt;
	public ConditionalStmtElements getConditionalStmtAccess() {
		return pConditionalStmt;
	}
	
	public ParserRule getConditionalStmtRule() {
		return getConditionalStmtAccess().getRule();
	}
	
	//ifStmt:
	//	'if' condition=expression 'then' then=statement ';'? ('else' else=statement ';'?)?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//caseStmt:
	//	'case' expression=expression 'of' cases+=caseSelector ';' (cases+=caseSelector ';')* ('else' default=stmtList) ';'
	//	'end';
	public CaseStmtElements getCaseStmtAccess() {
		return pCaseStmt;
	}
	
	public ParserRule getCaseStmtRule() {
		return getCaseStmtAccess().getRule();
	}
	
	//caseSelector:
	//	labels+=caseLabel (',' labels+=caseLabel)* ':' stmt=statement ';'?;
	public CaseSelectorElements getCaseSelectorAccess() {
		return pCaseSelector;
	}
	
	public ParserRule getCaseSelectorRule() {
		return getCaseSelectorAccess().getRule();
	}
	
	//caseLabel:
	//	first=constExpr ('..' last=constExpr)?;
	public CaseLabelElements getCaseLabelAccess() {
		return pCaseLabel;
	}
	
	public ParserRule getCaseLabelRule() {
		return getCaseLabelAccess().getRule();
	}
	
	//loopStmt:
	//	repeatStmt
	//	| whileStmt
	//	| forStmt;
	public LoopStmtElements getLoopStmtAccess() {
		return pLoopStmt;
	}
	
	public ParserRule getLoopStmtRule() {
		return getLoopStmtAccess().getRule();
	}
	
	//repeatStmt:
	//	'repeat' stmt=statement ';'? 'until' condition=expression;
	public RepeatStmtElements getRepeatStmtAccess() {
		return pRepeatStmt;
	}
	
	public ParserRule getRepeatStmtRule() {
		return getRepeatStmtAccess().getRule();
	}
	
	//whileStmt:
	//	'while' condition=expression 'do' stmt=statement ';'?;
	public WhileStmtElements getWhileStmtAccess() {
		return pWhileStmt;
	}
	
	public ParserRule getWhileStmtRule() {
		return getWhileStmtAccess().getRule();
	}
	
	//forStmt:
	//	'for' varId=qualId ':=' varInit=expression ('to' | 'downto') condition=expression 'do' stmt=statement ';'?;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//withStmt // added simpleStatement
	//:
	//	'with' vars=identList 'do' stmt=statement ';'? // changed identList by expression
	//;
	public WithStmtElements getWithStmtAccess() {
		return pWithStmt;
	}
	
	public ParserRule getWithStmtRule() {
		return getWithStmtAccess().getRule();
	}
	
	//tryStmt // Joined
	//:
	//	'try' stmtList=stmtList ';'? ('except' exception=exceptionBlock | 'finally' final=stmtList) 'end';
	public TryStmtElements getTryStmtAccess() {
		return pTryStmt;
	}
	
	public ParserRule getTryStmtRule() {
		return getTryStmtAccess().getRule();
	}
	
	//exceptionBlock:
	//	{exceptionBlock} ('on' (exceptionId+=ident ':')? type+=type 'id' 'do' doStmt+=statement ';'?)* ('else'?
	//	elseStmts=stmtList)?;
	public ExceptionBlockElements getExceptionBlockAccess() {
		return pExceptionBlock;
	}
	
	public ParserRule getExceptionBlockRule() {
		return getExceptionBlockAccess().getRule();
	}
	
	//raiseStmt:
	//	{raiseStmt} 'raise' raise=ID? ('at' at=ID)?;
	public RaiseStmtElements getRaiseStmtAccess() {
		return pRaiseStmt;
	}
	
	public ParserRule getRaiseStmtRule() {
		return getRaiseStmtAccess().getRule();
	}
	
	//assemblerStmt:
	//	{assemblerStmt} 'asm'
	//	//|	<assemblylanguage>
	//	//	|	'end'
	//;
	public AssemblerStmtElements getAssemblerStmtAccess() {
		return pAssemblerStmt;
	}
	
	public ParserRule getAssemblerStmtRule() {
		return getAssemblerStmtAccess().getRule();
	}
	
	//procedureDeclSection:
	//	procedureDecl
	//	| functionDecl;
	public ProcedureDeclSectionElements getProcedureDeclSectionAccess() {
		return pProcedureDeclSection;
	}
	
	public ParserRule getProcedureDeclSectionRule() {
		return getProcedureDeclSectionAccess().getRule();
	}
	
	//procedureDecl:
	//	heading=procedureHeading ';' directive=directive? port=portabilityDirective? block=block ';';
	public ProcedureDeclElements getProcedureDeclAccess() {
		return pProcedureDecl;
	}
	
	public ParserRule getProcedureDeclRule() {
		return getProcedureDeclAccess().getRule();
	}
	
	//functionDecl:
	//	heading=functionHeading ';' directive=directive? port=portabilityDirective? block=block ';';
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//functionHeading:
	//	'class'? 'function' id=ident formalParams=formalParameters? ':' type=type;
	public FunctionHeadingElements getFunctionHeadingAccess() {
		return pFunctionHeading;
	}
	
	public ParserRule getFunctionHeadingRule() {
		return getFunctionHeadingAccess().getRule();
	}
	
	//procedureHeading:
	//	'class'? 'procedure' id=ident formalParams=formalParameters?;
	public ProcedureHeadingElements getProcedureHeadingAccess() {
		return pProcedureHeading;
	}
	
	public ParserRule getProcedureHeadingRule() {
		return getProcedureHeadingAccess().getRule();
	}
	
	//formalParameters:
	//	'(' (params+=formalParm (';' params+=formalParm)*) ')';
	public FormalParametersElements getFormalParametersAccess() {
		return pFormalParameters;
	}
	
	public ParserRule getFormalParametersRule() {
		return getFormalParametersAccess().getRule();
	}
	
	//formalParm:
	//	('var' | 'const' | 'out')? param=parameter;
	public FormalParmElements getFormalParmAccess() {
		return pFormalParm;
	}
	
	public ParserRule getFormalParmRule() {
		return getFormalParmAccess().getRule();
	}
	
	//parameter:
	//	{parameterList} idList=identList (':' (('array' 'of')? type=type | 'file'))? // changed simpleType by type, deleted string alternative
	//	| {parameterSimple} if=ident ':' type=type '=' initExp=constExpr // changed simpleType by type
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//directive:
	//	dir='cdecl'
	//	| dir='register'
	//	| dir='dynamic'
	//	| dir='virtual'
	//	| dir='export'
	//	| dir='external'
	//	| dir='near'
	//	| dir='far'
	//	| dir='forward'
	//	| dir='message' messageExp=constExpr
	//	| dir='override'
	//	| dir='overload'
	//	| dir='pascal'
	//	| dir='reintroduce'
	//	| dir='safecall'
	//	| dir='stdcall'
	//	| dir='varargs'
	//	| dir='local'
	//	| dir='abstract';
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	//objectType:
	//	{objectType} 'object' heritage=objHeritage? fieldList=objFieldList? methodList=methodList? 'end';
	public ObjectTypeElements getObjectTypeAccess() {
		return pObjectType;
	}
	
	public ParserRule getObjectTypeRule() {
		return getObjectTypeAccess().getRule();
	}
	
	//objHeritage:
	//	'(' id=qualId ')';
	public ObjHeritageElements getObjHeritageAccess() {
		return pObjHeritage;
	}
	
	public ParserRule getObjHeritageRule() {
		return getObjHeritageAccess().getRule();
	}
	
	//methodList:
	//	(heading=methodHeading (';' 'virtual')? (';' directive+=directive)*) ';';
	public MethodListElements getMethodListAccess() {
		return pMethodList;
	}
	
	public ParserRule getMethodListRule() {
		return getMethodListAccess().getRule();
	}
	
	//methodHeading:
	//	procedureHeading
	//	| functionHeading
	//	| constructorHeading
	//	| destructorHeading;
	public MethodHeadingElements getMethodHeadingAccess() {
		return pMethodHeading;
	}
	
	public ParserRule getMethodHeadingRule() {
		return getMethodHeadingAccess().getRule();
	}
	
	//constructorHeading:
	//	'constructor' id=ident formalParams=formalParameters?;
	public ConstructorHeadingElements getConstructorHeadingAccess() {
		return pConstructorHeading;
	}
	
	public ParserRule getConstructorHeadingRule() {
		return getConstructorHeadingAccess().getRule();
	}
	
	//destructorHeading:
	//	'destructor' id=ident formalParams=formalParameters?;
	public DestructorHeadingElements getDestructorHeadingAccess() {
		return pDestructorHeading;
	}
	
	public ParserRule getDestructorHeadingRule() {
		return getDestructorHeadingAccess().getRule();
	}
	
	//objFieldList:
	//	(identList ':' type=type) ';';
	public ObjFieldListElements getObjFieldListAccess() {
		return pObjFieldList;
	}
	
	public ParserRule getObjFieldListRule() {
		return getObjFieldListAccess().getRule();
	}
	
	//initSection:
	//	{initSection} ('initialization' stmtList=stmtList ('finalization' endStmtList=stmtList)? 'end'
	//	| 'begin' stmtList=stmtList 'end'
	//	| 'end');
	public InitSectionElements getInitSectionAccess() {
		return pInitSection;
	}
	
	public ParserRule getInitSectionRule() {
		return getInitSectionAccess().getRule();
	}
	
	//classType:
	//	{classType} 'class' heritage=classHeritage? visibility=classVisibility? fieldList=classFieldList?
	//	methodList=classMethodList? propList=classPropertyList? 'end';
	public ClassTypeElements getClassTypeAccess() {
		return pClassType;
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//classHeritage:
	//	'(' identList ')';
	public ClassHeritageElements getClassHeritageAccess() {
		return pClassHeritage;
	}
	
	public ParserRule getClassHeritageRule() {
		return getClassHeritageAccess().getRule();
	}
	
	//classVisibility:
	//	'public'
	//	| 'protected'
	//	| 'private'
	//	| 'published';
	public ClassVisibilityElements getClassVisibilityAccess() {
		return pClassVisibility;
	}
	
	public ParserRule getClassVisibilityRule() {
		return getClassVisibilityAccess().getRule();
	}
	
	//classFieldList:
	//	field+=classField+;
	public ClassFieldListElements getClassFieldListAccess() {
		return pClassFieldList;
	}
	
	public ParserRule getClassFieldListRule() {
		return getClassFieldListAccess().getRule();
	}
	
	//classField:
	//	visibility=classVisibility? fieldList=objFieldList;
	public ClassFieldElements getClassFieldAccess() {
		return pClassField;
	}
	
	public ParserRule getClassFieldRule() {
		return getClassFieldAccess().getRule();
	}
	
	//classMethodList:
	//	metod+=classMethod+;
	public ClassMethodListElements getClassMethodListAccess() {
		return pClassMethodList;
	}
	
	public ParserRule getClassMethodListRule() {
		return getClassMethodListAccess().getRule();
	}
	
	//classMethod:
	//	visibility=classVisibility? methodList=methodList;
	public ClassMethodElements getClassMethodAccess() {
		return pClassMethod;
	}
	
	public ParserRule getClassMethodRule() {
		return getClassMethodAccess().getRule();
	}
	
	//classPropertyList:
	//	property+=classProperty+;
	public ClassPropertyListElements getClassPropertyListAccess() {
		return pClassPropertyList;
	}
	
	public ParserRule getClassPropertyListRule() {
		return getClassPropertyListAccess().getRule();
	}
	
	//classProperty:
	//	visibility=classVisibility
	//	| visibility=classVisibility? propList=propertyList;
	public ClassPropertyElements getClassPropertyAccess() {
		return pClassProperty;
	}
	
	public ParserRule getClassPropertyRule() {
		return getClassPropertyAccess().getRule();
	}
	
	//propertyList:
	//	'property' id=ident interface=propertyInterface? specifiers=propertySpecifiers? port=portabilityDirective? ';';
	public PropertyListElements getPropertyListAccess() {
		return pPropertyList;
	}
	
	public ParserRule getPropertyListRule() {
		return getPropertyListAccess().getRule();
	}
	
	//propertyInterface:
	//	paramList=propertyParameterList? ':' id=ident;
	public PropertyInterfaceElements getPropertyInterfaceAccess() {
		return pPropertyInterface;
	}
	
	public ParserRule getPropertyInterfaceRule() {
		return getPropertyInterfaceAccess().getRule();
	}
	
	//propertyParameterList:
	//	'[' idList+=identList ':' typeRef+=typeId ';' (idList+=identList ':' typeRef+=typeId ';')* ']';
	public PropertyParameterListElements getPropertyParameterListAccess() {
		return pPropertyParameterList;
	}
	
	public ParserRule getPropertyParameterListRule() {
		return getPropertyParameterListAccess().getRule();
	}
	
	//propertySpecifiers // Modified constExpr
	//:
	//	{propertySpecifiers} ('index' index=constExpr)? ('read' readId=ident)? ('write' writeId=ident)? ('stored'
	//	(storeId=ident | storeExp=constExpr))? ('default' defaulExp=constExpr | 'nodefault')? ('implements'
	//	implement=typeId)?;
	public PropertySpecifiersElements getPropertySpecifiersAccess() {
		return pPropertySpecifiers;
	}
	
	public ParserRule getPropertySpecifiersRule() {
		return getPropertySpecifiersAccess().getRule();
	}
	
	//interfaceType:
	//	'interface' heritage=interfaceHeritage methodList=classMethodList propList+=classPropertyList* 'end';
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//interfaceHeritage:
	//	'(' idList=identList ')';
	public InterfaceHeritageElements getInterfaceHeritageAccess() {
		return pInterfaceHeritage;
	}
	
	public ParserRule getInterfaceHeritageRule() {
		return getInterfaceHeritageAccess().getRule();
	}
	
	//requiresClause:
	//	{requiresClause} 'requires' idList+=identList* ';';
	public RequiresClauseElements getRequiresClauseAccess() {
		return pRequiresClause;
	}
	
	public ParserRule getRequiresClauseRule() {
		return getRequiresClauseAccess().getRule();
	}
	
	//containsClause:
	//	{containsClause} 'contains' idList+=identList* ';';
	public ContainsClauseElements getContainsClauseAccess() {
		return pContainsClause;
	}
	
	public ParserRule getContainsClauseRule() {
		return getContainsClauseAccess().getRule();
	}
	
	//identList:
	//	ids+=ident (',' ids+=ident)*;
	public IdentListElements getIdentListAccess() {
		return pIdentList;
	}
	
	public ParserRule getIdentListRule() {
		return getIdentListAccess().getRule();
	}
	
	//qualId:
	//	(unitId=unitId '.')? id=ident;
	public QualIdElements getQualIdAccess() {
		return pQualId;
	}
	
	public ParserRule getQualIdRule() {
		return getQualIdAccess().getRule();
	}
	
	//typeId //modified
	//:
	//	(unitId=unitId '.')? id=qualId;
	public TypeIdElements getTypeIdAccess() {
		return pTypeId;
	}
	
	public ParserRule getTypeIdRule() {
		return getTypeIdAccess().getRule();
	}
	
	//ident // modified
	//:
	//	{MultipleId} id+=ID ('.' id+=ID)*
	//	| {ReservedId} '&' reservedWord=reservedWord
	//	| {MineID} first=ID '(' second=ID '^' ')' // mine
	//;
	public IdentElements getIdentAccess() {
		return pIdent;
	}
	
	public ParserRule getIdentRule() {
		return getIdentAccess().getRule();
	}
	
	//reservedWord:
	//	id=ID;
	public ReservedWordElements getReservedWordAccess() {
		return pReservedWord;
	}
	
	public ParserRule getReservedWordRule() {
		return getReservedWordAccess().getRule();
	}
	
	//constExpr // modified
	//:
	//	exps+=expression
	//	| '(' exps+=constExpr (',' exps+=constExpr)* ')'
	//	| '(' exps+=recordConstExpr (',' exps+=recordConstExpr)* ')';
	public ConstExprElements getConstExprAccess() {
		return pConstExpr;
	}
	
	public ParserRule getConstExprRule() {
		return getConstExprAccess().getRule();
	}
	
	//recordConstExpr // added
	//:
	//	id=ident ':' constExp=constExpr;
	public RecordConstExprElements getRecordConstExprAccess() {
		return pRecordConstExpr;
	}
	
	public ParserRule getRecordConstExprRule() {
		return getRecordConstExprAccess().getRule();
	}
	
	//unitId // modified
	//:
	//	id=ID;
	public UnitIdElements getUnitIdAccess() {
		return pUnitId;
	}
	
	public ParserRule getUnitIdRule() {
		return getUnitIdAccess().getRule();
	}
	
	//labelId // modified
	//:
	//	ID
	//	| INT
	//	| HEX;
	public LabelIdElements getLabelIdAccess() {
		return pLabelId;
	}
	
	public ParserRule getLabelIdRule() {
		return getLabelIdAccess().getRule();
	}
	
	//number:
	//	INT
	//	| '#' INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//string:
	//	QVALUE
	//	| DQVALUE;
	public StringElements getStringAccess() {
		return pString;
	}
	
	public ParserRule getStringRule() {
		return getStringAccess().getRule();
	}
	
	//terminal SLASH:
	//	'\\u005C';
	public TerminalRule getSLASHRule() {
		return tSLASH;
	}
	
	//terminal QUOTE:
	//	'\\u0027';
	public TerminalRule getQUOTERule() {
		return tQUOTE;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$' | '#' | SLASH | '-')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal DOUBLEQUOTE:
	//	'\\u0022';
	public TerminalRule getDOUBLEQUOTERule() {
		return tDOUBLEQUOTE;
	}
	
	//terminal DQVALUE:
	//	DOUBLEQUOTE ('\\' . | !('\\' | DOUBLEQUOTE))* DOUBLEQUOTE;
	public TerminalRule getDQVALUERule() {
		return tDQVALUE;
	}
	
	//terminal QVALUE:
	//	QUOTE ('\\' . | !('\\' | QUOTE))* QUOTE;
	public TerminalRule getQVALUERule() {
		return tQVALUE;
	}
	
	//terminal HEX:
	//	('+' | '-')? '0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal INT returns ecore::EInt:
	//	('+' | '-')? '0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal MORECOMMENT:
	//	'{'->'}';
	public TerminalRule getMORECOMMENTRule() {
		return tMORECOMMENT;
	}
	
	//terminal LINE_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getLINE_COMMENTRule() {
		return tLINE_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\r' | '\t' | '\\u000C' | '\n';
	public TerminalRule getWSRule() {
		return tWS;
	}
}
