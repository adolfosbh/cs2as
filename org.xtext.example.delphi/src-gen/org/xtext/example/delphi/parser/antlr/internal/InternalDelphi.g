/*
 * generated by Xtext 2.10.0
 */
grammar InternalDelphi;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	memoize=true;
}

@lexer::header {
package org.xtext.example.delphi.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.delphi.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.delphi.services.DelphiGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private DelphiGrammarAccess grammarAccess;

    public InternalDelphiParser(TokenStream input, DelphiGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "mainRule";
   	}

   	@Override
   	protected DelphiGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulemainRule
entryRulemainRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRuleRule()); }
	iv_rulemainRule=rulemainRule
	{ $current=$iv_rulemainRule.current; }
	EOF;

// Rule mainRule
rulemainRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMainRuleAccess().getFileFileParserRuleCall_0());
			}
			lv_file_0_0=rulefile
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMainRuleRule());
				}
				set(
					$current,
					"file",
					lv_file_0_0,
					"org.xtext.example.delphi.Delphi.file");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulefile
entryRulefile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_rulefile=rulefile
	{ $current=$iv_rulefile.current; }
	EOF;

// Rule file
rulefile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFileAccess().getProgramParserRuleCall_0());
		}
		this_program_0=ruleprogram
		{
			$current = $this_program_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFileAccess().getPackageDeclParserRuleCall_1());
		}
		this_packageDecl_1=rulepackageDecl
		{
			$current = $this_packageDecl_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFileAccess().getLibraryParserRuleCall_2());
		}
		this_library_2=rulelibrary
		{
			$current = $this_library_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFileAccess().getUnitParserRuleCall_3());
		}
		this_unit_3=ruleunit
		{
			$current = $this_unit_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='program'
			{
				newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getIdIdentParserRuleCall_0_1_0());
					}
					lv_id_1_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						set(
							$current,
							"id",
							lv_id_1_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftParenthesisKeyword_0_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProgramAccess().getParamsListIdentListParserRuleCall_0_2_1_0());
						}
						lv_paramsList_3_0=ruleidentList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProgramRule());
							}
							set(
								$current,
								"paramsList",
								lv_paramsList_3_0,
								"org.xtext.example.delphi.Delphi.identList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getRightParenthesisKeyword_0_2_2());
				}
			)?
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getProgramAccess().getSemicolonKeyword_0_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlockProgramBlockParserRuleCall_1_0());
				}
				lv_block_6_0=ruleprogramBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"block",
						lv_block_6_0,
						"org.xtext.example.delphi.Delphi.programBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='.'
		{
			newLeafNode(otherlv_7, grammarAccess.getProgramAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleunit
entryRuleunit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	iv_ruleunit=ruleunit
	{ $current=$iv_ruleunit.current; }
	EOF;

// Rule unit
ruleunit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='unit'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnitAccess().getUnitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_1_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitAccess().getPortPortabilityDirectiveParserRuleCall_2_0());
				}
				lv_port_2_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitRule());
					}
					set(
						$current,
						"port",
						lv_port_2_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getUnitAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitAccess().getInterfaceSectInterfaceSectionParserRuleCall_4_0());
				}
				lv_interfaceSect_4_0=ruleinterfaceSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitRule());
					}
					set(
						$current,
						"interfaceSect",
						lv_interfaceSect_4_0,
						"org.xtext.example.delphi.Delphi.interfaceSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitAccess().getImplementationSectImplementationSectionParserRuleCall_5_0());
				}
				lv_implementationSect_5_0=ruleimplementationSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitRule());
					}
					set(
						$current,
						"implementationSect",
						lv_implementationSect_5_0,
						"org.xtext.example.delphi.Delphi.implementationSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitAccess().getInitSectInitSectionParserRuleCall_6_0());
				}
				lv_initSect_6_0=ruleinitSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitRule());
					}
					set(
						$current,
						"initSect",
						lv_initSect_6_0,
						"org.xtext.example.delphi.Delphi.initSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='.'
		{
			newLeafNode(otherlv_7, grammarAccess.getUnitAccess().getFullStopKeyword_7());
		}
	)
;

// Entry rule entryRulepackageDecl
entryRulepackageDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclRule()); }
	iv_rulepackageDecl=rulepackageDecl
	{ $current=$iv_rulepackageDecl.current; }
	EOF;

// Rule packageDecl
rulepackageDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_1_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclAccess().getRequiresRequiresClauseParserRuleCall_3_0());
				}
				lv_requires_3_0=rulerequiresClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclRule());
					}
					set(
						$current,
						"requires",
						lv_requires_3_0,
						"org.xtext.example.delphi.Delphi.requiresClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclAccess().getContainsContainsClauseParserRuleCall_4_0());
				}
				lv_contains_4_0=rulecontainsClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclRule());
					}
					set(
						$current,
						"contains",
						lv_contains_4_0,
						"org.xtext.example.delphi.Delphi.containsClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getPackageDeclAccess().getEndKeyword_5());
		}
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getPackageDeclAccess().getFullStopKeyword_6());
		}
	)
;

// Entry rule entryRulelibrary
entryRulelibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	iv_rulelibrary=rulelibrary
	{ $current=$iv_rulelibrary.current; }
	EOF;

// Rule library
rulelibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='library'
		{
			newLeafNode(otherlv_0, grammarAccess.getLibraryAccess().getLibraryKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLibraryAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_1_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLibraryRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getLibraryAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLibraryAccess().getPBlockProgramBlockParserRuleCall_3_0());
				}
				lv_pBlock_3_0=ruleprogramBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLibraryRule());
					}
					set(
						$current,
						"pBlock",
						lv_pBlock_3_0,
						"org.xtext.example.delphi.Delphi.programBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='.'
		{
			newLeafNode(otherlv_4, grammarAccess.getLibraryAccess().getFullStopKeyword_4());
		}
	)
;

// Entry rule entryRuleprogramBlock
entryRuleprogramBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramBlockRule()); }
	iv_ruleprogramBlock=ruleprogramBlock
	{ $current=$iv_ruleprogramBlock.current; }
	EOF;

// Rule programBlock
ruleprogramBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramBlockAccess().getUsesUsesClauseParserRuleCall_0_0());
				}
				lv_uses_0_0=ruleusesClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramBlockRule());
					}
					set(
						$current,
						"uses",
						lv_uses_0_0,
						"org.xtext.example.delphi.Delphi.usesClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramBlockAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramBlockRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"org.xtext.example.delphi.Delphi.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleusesClause
entryRuleusesClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsesClauseRule()); }
	iv_ruleusesClause=ruleusesClause
	{ $current=$iv_ruleusesClause.current; }
	EOF;

// Rule usesClause
ruleusesClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='uses'
		{
			newLeafNode(otherlv_0, grammarAccess.getUsesClauseAccess().getUsesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUsesClauseAccess().getIdListIdentListParserRuleCall_1_0());
				}
				lv_idList_1_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUsesClauseRule());
					}
					set(
						$current,
						"idList",
						lv_idList_1_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getUsesClauseAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleportabilityDirective
entryRuleportabilityDirective returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPortabilityDirectiveRule()); }
	iv_ruleportabilityDirective=ruleportabilityDirective
	{ $current=$iv_ruleportabilityDirective.current.getText(); }
	EOF;

// Rule portabilityDirective
ruleportabilityDirective returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='platform'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPortabilityDirectiveAccess().getPlatformKeyword_0());
		}
		    |
		kw='deprecated'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPortabilityDirectiveAccess().getDeprecatedKeyword_1());
		}
		    |
		kw='library'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPortabilityDirectiveAccess().getLibraryKeyword_2());
		}
	)
;

// Entry rule entryRuleinterfaceSection
entryRuleinterfaceSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceSectionRule()); }
	iv_ruleinterfaceSection=ruleinterfaceSection
	{ $current=$iv_ruleinterfaceSection.current; }
	EOF;

// Rule interfaceSection
ruleinterfaceSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getInterfaceSectionAccess().getInterfaceSectionAction_0(),
					$current);
			}
		)
		otherlv_1='interface'
		{
			newLeafNode(otherlv_1, grammarAccess.getInterfaceSectionAccess().getInterfaceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceSectionAccess().getUsesUsesClauseParserRuleCall_2_0());
				}
				lv_uses_2_0=ruleusesClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceSectionRule());
					}
					set(
						$current,
						"uses",
						lv_uses_2_0,
						"org.xtext.example.delphi.Delphi.usesClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceSectionAccess().getInterfaceDeclInterfaceDeclParserRuleCall_3_0());
				}
				lv_interfaceDecl_3_0=ruleinterfaceDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceSectionRule());
					}
					add(
						$current,
						"interfaceDecl",
						lv_interfaceDecl_3_0,
						"org.xtext.example.delphi.Delphi.interfaceDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleinterfaceDecl
entryRuleinterfaceDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceDeclRule()); }
	iv_ruleinterfaceDecl=ruleinterfaceDecl
	{ $current=$iv_ruleinterfaceDecl.current; }
	EOF;

// Rule interfaceDecl
ruleinterfaceDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getInterfaceDeclAccess().getConstSectionParserRuleCall_0());
		}
		this_constSection_0=ruleconstSection
		{
			$current = $this_constSection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getInterfaceDeclAccess().getTypeSectionParserRuleCall_1());
		}
		this_typeSection_1=ruletypeSection
		{
			$current = $this_typeSection_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getInterfaceDeclAccess().getVarSectionParserRuleCall_2());
		}
		this_varSection_2=rulevarSection
		{
			$current = $this_varSection_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getInterfaceDeclAccess().getExportedHeadingParserRuleCall_3());
		}
		this_exportedHeading_3=ruleexportedHeading
		{
			$current = $this_exportedHeading_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleexportedHeading
entryRuleexportedHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportedHeadingRule()); }
	iv_ruleexportedHeading=ruleexportedHeading
	{ $current=$iv_ruleexportedHeading.current; }
	EOF;

// Rule exportedHeading
ruleexportedHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExportedHeadingAccess().getPHeadingProcedureHeadingParserRuleCall_0_0_0());
					}
					lv_pHeading_0_0=ruleprocedureHeading
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportedHeadingRule());
						}
						set(
							$current,
							"pHeading",
							lv_pHeading_0_0,
							"org.xtext.example.delphi.Delphi.procedureHeading");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getExportedHeadingAccess().getSemicolonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExportedHeadingAccess().getDirectiveDirectiveParserRuleCall_0_2_0());
					}
					lv_directive_2_0=ruledirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportedHeadingRule());
						}
						set(
							$current,
							"directive",
							lv_directive_2_0,
							"org.xtext.example.delphi.Delphi.directive");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExportedHeadingAccess().getFHeadingFunctionHeadingParserRuleCall_1_0_0());
					}
					lv_fHeading_3_0=rulefunctionHeading
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportedHeadingRule());
						}
						set(
							$current,
							"fHeading",
							lv_fHeading_3_0,
							"org.xtext.example.delphi.Delphi.functionHeading");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getExportedHeadingAccess().getSemicolonKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExportedHeadingAccess().getDirectiveDirectiveParserRuleCall_1_2_0());
					}
					lv_directive_5_0=ruledirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportedHeadingRule());
						}
						set(
							$current,
							"directive",
							lv_directive_5_0,
							"org.xtext.example.delphi.Delphi.directive");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleimplementationSection
entryRuleimplementationSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplementationSectionRule()); }
	iv_ruleimplementationSection=ruleimplementationSection
	{ $current=$iv_ruleimplementationSection.current; }
	EOF;

// Rule implementationSection
ruleimplementationSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getImplementationSectionAccess().getImplementationSectionAction_0(),
					$current);
			}
		)
		otherlv_1='implementation'
		{
			newLeafNode(otherlv_1, grammarAccess.getImplementationSectionAccess().getImplementationKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImplementationSectionAccess().getUsesUsesClauseParserRuleCall_2_0());
				}
				lv_uses_2_0=ruleusesClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImplementationSectionRule());
					}
					set(
						$current,
						"uses",
						lv_uses_2_0,
						"org.xtext.example.delphi.Delphi.usesClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getImplementationSectionAccess().getDeclSectDeclSectionParserRuleCall_3_0());
				}
				lv_declSect_3_0=ruledeclSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImplementationSectionRule());
					}
					add(
						$current,
						"declSect",
						lv_declSect_3_0,
						"org.xtext.example.delphi.Delphi.declSection");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getImplementationSectionAccess().getExportsExportsStmtParserRuleCall_4_0());
				}
				lv_exports_4_0=ruleexportsStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImplementationSectionRule());
					}
					add(
						$current,
						"exports",
						lv_exports_4_0,
						"org.xtext.example.delphi.Delphi.exportsStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getDeclSectDeclSectionParserRuleCall_0_0());
				}
				lv_declSect_0_0=ruledeclSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"declSect",
						lv_declSect_0_0,
						"org.xtext.example.delphi.Delphi.declSection");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getExportsExportsStmtParserRuleCall_1_0());
				}
				lv_exports_1_0=ruleexportsStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"exports",
						lv_exports_1_0,
						"org.xtext.example.delphi.Delphi.exportsStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getCompoundCompoundStmtParserRuleCall_2_0());
				}
				lv_compound_2_0=rulecompoundStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"compound",
						lv_compound_2_0,
						"org.xtext.example.delphi.Delphi.compoundStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getExportsExportsStmtParserRuleCall_3_0());
				}
				lv_exports_3_0=ruleexportsStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"exports",
						lv_exports_3_0,
						"org.xtext.example.delphi.Delphi.exportsStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleexportsItem
entryRuleexportsItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportsItemRule()); }
	iv_ruleexportsItem=ruleexportsItem
	{ $current=$iv_ruleexportsItem.current; }
	EOF;

// Rule exportsItem
ruleexportsItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getExportsItemAccess().getExportsItemAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExportsItemAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_1_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportsItemRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='name'
			{
				newLeafNode(otherlv_2, grammarAccess.getExportsItemAccess().getNameKeyword_2_0());
			}
			    |
			(
				otherlv_3='index'
				{
					newLeafNode(otherlv_3, grammarAccess.getExportsItemAccess().getIndexKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExportsItemAccess().getConstExpConstExprParserRuleCall_2_1_1_0());
						}
						lv_constExp_4_0=ruleconstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExportsItemRule());
							}
							add(
								$current,
								"constExp",
								lv_constExp_4_0,
								"org.xtext.example.delphi.Delphi.constExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			otherlv_5='index'
			{
				newLeafNode(otherlv_5, grammarAccess.getExportsItemAccess().getIndexKeyword_3_0());
			}
			    |
			(
				otherlv_6='name'
				{
					newLeafNode(otherlv_6, grammarAccess.getExportsItemAccess().getNameKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExportsItemAccess().getConstExpConstExprParserRuleCall_3_1_1_0());
						}
						lv_constExp_7_0=ruleconstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExportsItemRule());
							}
							add(
								$current,
								"constExp",
								lv_constExp_7_0,
								"org.xtext.example.delphi.Delphi.constExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleexportsStmt
entryRuleexportsStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportsStmtRule()); }
	iv_ruleexportsStmt=ruleexportsStmt
	{ $current=$iv_ruleexportsStmt.current; }
	EOF;

// Rule exportsStmt
ruleexportsStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='exports'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportsStmtAccess().getExportsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExportsStmtAccess().getItemsExportsItemParserRuleCall_1_0());
				}
				lv_items_1_0=ruleexportsItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportsStmtRule());
					}
					add(
						$current,
						"items",
						lv_items_1_0,
						"org.xtext.example.delphi.Delphi.exportsItem");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getExportsStmtAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExportsStmtAccess().getItemsExportsItemParserRuleCall_2_1_0());
					}
					lv_items_3_0=ruleexportsItem
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportsStmtRule());
						}
						add(
							$current,
							"items",
							lv_items_3_0,
							"org.xtext.example.delphi.Delphi.exportsItem");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuledeclSection
entryRuledeclSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclSectionRule()); }
	iv_ruledeclSection=ruledeclSection
	{ $current=$iv_ruledeclSection.current; }
	EOF;

// Rule declSection
ruledeclSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDeclSectionAccess().getLabelDeclSectionParserRuleCall_0());
		}
		this_labelDeclSection_0=rulelabelDeclSection
		{
			$current = $this_labelDeclSection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDeclSectionAccess().getConstSectionParserRuleCall_1());
		}
		this_constSection_1=ruleconstSection
		{
			$current = $this_constSection_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDeclSectionAccess().getTypeSectionParserRuleCall_2());
		}
		this_typeSection_2=ruletypeSection
		{
			$current = $this_typeSection_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDeclSectionAccess().getVarSectionParserRuleCall_3());
		}
		this_varSection_3=rulevarSection
		{
			$current = $this_varSection_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDeclSectionAccess().getProcedureDeclSectionParserRuleCall_4());
		}
		this_procedureDeclSection_4=ruleprocedureDeclSection
		{
			$current = $this_procedureDeclSection_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulelabelDeclSection
entryRulelabelDeclSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelDeclSectionRule()); }
	iv_rulelabelDeclSection=rulelabelDeclSection
	{ $current=$iv_rulelabelDeclSection.current; }
	EOF;

// Rule labelDeclSection
rulelabelDeclSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='label'
		{
			newLeafNode(otherlv_0, grammarAccess.getLabelDeclSectionAccess().getLabelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelDeclSectionAccess().getIdLabelIdParserRuleCall_1_0());
				}
				lv_id_1_0=rulelabelId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelDeclSectionRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.labelId");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstSection
entryRuleconstSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstSectionRule()); }
	iv_ruleconstSection=ruleconstSection
	{ $current=$iv_ruleconstSection.current; }
	EOF;

// Rule constSection
ruleconstSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstSectionAccess().getConstSectionAction_0(),
					$current);
			}
		)
		otherlv_1='const'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstSectionAccess().getConstKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstSectionAccess().getConstantDeclConstantDeclParserRuleCall_2_0_0());
					}
					lv_constantDecl_2_0=ruleconstantDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstSectionRule());
						}
						add(
							$current,
							"constantDecl",
							lv_constantDecl_2_0,
							"org.xtext.example.delphi.Delphi.constantDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getConstSectionAccess().getSemicolonKeyword_2_1());
			}
		)*
	)
;

// Entry rule entryRuleconstantDecl
entryRuleconstantDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantDeclRule()); }
	iv_ruleconstantDecl=ruleconstantDecl
	{ $current=$iv_ruleconstantDecl.current; }
	EOF;

// Rule constantDecl
ruleconstantDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDeclAccess().getIdIdentParserRuleCall_0_0_0());
					}
					lv_id_0_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDeclRule());
						}
						set(
							$current,
							"id",
							lv_id_0_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getConstantDeclAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDeclAccess().getConstConstExprParserRuleCall_0_2_0());
					}
					lv_const_2_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDeclRule());
						}
						set(
							$current,
							"const",
							lv_const_2_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDeclAccess().getPortPortabilityDirectiveParserRuleCall_0_3_0());
					}
					lv_port_3_0=ruleportabilityDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDeclRule());
						}
						set(
							$current,
							"port",
							lv_port_3_0,
							"org.xtext.example.delphi.Delphi.portabilityDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDeclAccess().getIdIdentParserRuleCall_1_0_0());
					}
					lv_id_4_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDeclRule());
						}
						set(
							$current,
							"id",
							lv_id_4_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getConstantDeclAccess().getColonKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDeclAccess().getTypeRefTypeIdParserRuleCall_1_2_0());
					}
					lv_typeRef_6_0=ruletypeId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDeclRule());
						}
						set(
							$current,
							"typeRef",
							lv_typeRef_6_0,
							"org.xtext.example.delphi.Delphi.typeId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getConstantDeclAccess().getEqualsSignKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDeclAccess().getTypedConstatTypedConstantParserRuleCall_1_4_0());
					}
					lv_typedConstat_8_0=ruletypedConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDeclRule());
						}
						set(
							$current,
							"typedConstat",
							lv_typedConstat_8_0,
							"org.xtext.example.delphi.Delphi.typedConstant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDeclAccess().getPortPortabilityDirectiveParserRuleCall_1_5_0());
					}
					lv_port_9_0=ruleportabilityDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDeclRule());
						}
						set(
							$current,
							"port",
							lv_port_9_0,
							"org.xtext.example.delphi.Delphi.portabilityDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuletypeSection
entryRuletypeSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSectionRule()); }
	iv_ruletypeSection=ruletypeSection
	{ $current=$iv_ruletypeSection.current; }
	EOF;

// Rule typeSection
ruletypeSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeSectionAccess().getTypeSectionAction_0(),
					$current);
			}
		)
		otherlv_1='type'
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeSectionAccess().getTypeKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSectionAccess().getTypeDeclTypeDeclParserRuleCall_2_0_0());
					}
					lv_typeDecl_2_0=ruletypeDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSectionRule());
						}
						add(
							$current,
							"typeDecl",
							lv_typeDecl_2_0,
							"org.xtext.example.delphi.Delphi.typeDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeSectionAccess().getSemicolonKeyword_2_1());
			}
		)*
	)
;

// Entry rule entryRuletypeDecl
entryRuletypeDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	iv_ruletypeDecl=ruletypeDecl
	{ $current=$iv_ruletypeDecl.current; }
	EOF;

// Rule typeDecl
ruletypeDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getIdIdentParserRuleCall_0_0_0());
					}
					lv_id_0_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						set(
							$current,
							"id",
							lv_id_0_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeDeclAccess().getEqualsSignKeyword_0_1());
			}
			(
				otherlv_2='type'
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeDeclAccess().getTypeKeyword_0_2());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_0_3_0());
					}
					lv_type_3_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.xtext.example.delphi.Delphi.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getPortPortabilityDirectiveParserRuleCall_0_4_0());
					}
					lv_port_4_0=ruleportabilityDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						set(
							$current,
							"port",
							lv_port_4_0,
							"org.xtext.example.delphi.Delphi.portabilityDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getIdIdentParserRuleCall_1_0_0());
					}
					lv_id_5_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						set(
							$current,
							"id",
							lv_id_5_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getTypeDeclAccess().getEqualsSignKeyword_1_1());
			}
			(
				otherlv_7='type'
				{
					newLeafNode(otherlv_7, grammarAccess.getTypeDeclAccess().getTypeKeyword_1_2());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getRestrictedTypeRestrictedTypeParserRuleCall_1_3_0());
					}
					lv_restrictedType_8_0=rulerestrictedType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						set(
							$current,
							"restrictedType",
							lv_restrictedType_8_0,
							"org.xtext.example.delphi.Delphi.restrictedType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getPortPortabilityDirectiveParserRuleCall_1_4_0());
					}
					lv_port_9_0=ruleportabilityDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						set(
							$current,
							"port",
							lv_port_9_0,
							"org.xtext.example.delphi.Delphi.portabilityDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuletypedConstant
entryRuletypedConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedConstantRule()); }
	iv_ruletypedConstant=ruletypedConstant
	{ $current=$iv_ruletypedConstant.current; }
	EOF;

// Rule typedConstant
ruletypedConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypedConstantAccess().getTypedConstantAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedConstantAccess().getConstConstExprParserRuleCall_1_0_0());
					}
					lv_const_1_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedConstantRule());
						}
						set(
							$current,
							"const",
							lv_const_1_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedConstantAccess().getArrayArrayConstantParserRuleCall_1_1_0());
					}
					lv_array_2_0=rulearrayConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedConstantRule());
						}
						set(
							$current,
							"array",
							lv_array_2_0,
							"org.xtext.example.delphi.Delphi.arrayConstant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedConstantAccess().getRecordRecordConstantParserRuleCall_1_2_0());
					}
					lv_record_3_0=rulerecordConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedConstantRule());
						}
						set(
							$current,
							"record",
							lv_record_3_0,
							"org.xtext.example.delphi.Delphi.recordConstant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulearrayConstant
entryRulearrayConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayConstantRule()); }
	iv_rulearrayConstant=rulearrayConstant
	{ $current=$iv_rulearrayConstant.current; }
	EOF;

// Rule arrayConstant
rulearrayConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayConstantAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayConstantAccess().getTypedConstantTypedConstantParserRuleCall_1_0());
				}
				lv_typedConstant_1_0=ruletypedConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayConstantRule());
					}
					set(
						$current,
						"typedConstant",
						lv_typedConstant_1_0,
						"org.xtext.example.delphi.Delphi.typedConstant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayConstantAccess().getCommaKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayConstantAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulerecordConstant
entryRulerecordConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordConstantRule()); }
	iv_rulerecordConstant=rulerecordConstant
	{ $current=$iv_rulerecordConstant.current; }
	EOF;

// Rule recordConstant
rulerecordConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRecordConstantAccess().getRecordConstantAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordConstantAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRecordConstantAccess().getRecordFieldRecordFieldConstantParserRuleCall_2_0_0());
					}
					lv_recordField_2_0=rulerecordFieldConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRecordConstantRule());
						}
						add(
							$current,
							"recordField",
							lv_recordField_2_0,
							"org.xtext.example.delphi.Delphi.recordFieldConstant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getRecordConstantAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getRecordConstantAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulerecordFieldConstant
entryRulerecordFieldConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordFieldConstantRule()); }
	iv_rulerecordFieldConstant=rulerecordFieldConstant
	{ $current=$iv_rulerecordFieldConstant.current; }
	EOF;

// Rule recordFieldConstant
rulerecordFieldConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordFieldConstantAccess().getIdIdentParserRuleCall_0_0());
				}
				lv_id_0_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordFieldConstantRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordFieldConstantAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordFieldConstantAccess().getTypedConstantTypedConstantParserRuleCall_2_0());
				}
				lv_typedConstant_2_0=ruletypedConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordFieldConstantRule());
					}
					set(
						$current,
						"typedConstant",
						lv_typedConstant_2_0,
						"org.xtext.example.delphi.Delphi.typedConstant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype
entryRuletype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current; }
	EOF;

// Rule type
ruletype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getTypeIdParserRuleCall_0());
		}
		this_typeId_0=ruletypeId
		{
			$current = $this_typeId_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_1());
		}
		this_simpleType_1=rulesimpleType
		{
			$current = $this_simpleType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getStrucTypeParserRuleCall_2());
		}
		this_strucType_2=rulestrucType
		{
			$current = $this_strucType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getPointerTypeParserRuleCall_3());
		}
		this_pointerType_3=rulepointerType
		{
			$current = $this_pointerType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getStringTypeParserRuleCall_4());
		}
		this_stringType_4=rulestringType
		{
			$current = $this_stringType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getProcedureTypeParserRuleCall_5());
		}
		this_procedureType_5=ruleprocedureType
		{
			$current = $this_procedureType_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getVariantTypeParserRuleCall_6());
		}
		this_variantType_6=rulevariantType
		{
			$current = $this_variantType_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getClassRefTypeParserRuleCall_7());
		}
		this_classRefType_7=ruleclassRefType
		{
			$current = $this_classRefType_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerestrictedType
entryRulerestrictedType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestrictedTypeRule()); }
	iv_rulerestrictedType=rulerestrictedType
	{ $current=$iv_rulerestrictedType.current; }
	EOF;

// Rule restrictedType
rulerestrictedType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRestrictedTypeAccess().getObjectTypeParserRuleCall_0());
		}
		this_objectType_0=ruleobjectType
		{
			$current = $this_objectType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRestrictedTypeAccess().getClassTypeParserRuleCall_1());
		}
		this_classType_1=ruleclassType
		{
			$current = $this_classType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRestrictedTypeAccess().getInterfaceTypeParserRuleCall_2());
		}
		this_interfaceType_2=ruleinterfaceType
		{
			$current = $this_interfaceType_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleclassRefType
entryRuleclassRefType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRefTypeRule()); }
	iv_ruleclassRefType=ruleclassRefType
	{ $current=$iv_ruleclassRefType.current; }
	EOF;

// Rule classRefType
ruleclassRefType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassRefTypeAccess().getClassKeyword_0());
		}
		otherlv_1='of'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassRefTypeAccess().getOfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassRefTypeAccess().getTypeRefTypeIdParserRuleCall_2_0());
				}
				lv_typeRef_2_0=ruletypeId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRefTypeRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_2_0,
						"org.xtext.example.delphi.Delphi.typeId");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimpleType
entryRulesimpleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	iv_rulesimpleType=rulesimpleType
	{ $current=$iv_rulesimpleType.current; }
	EOF;

// Rule simpleType
rulesimpleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSimpleTypeAccess().getOrdinalTypeParserRuleCall_0());
		}
		this_ordinalType_0=ruleordinalType
		{
			$current = $this_ordinalType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSimpleTypeAccess().getRealTypeParserRuleCall_1());
		}
		this_realType_1=rulerealType
		{
			$current = $this_realType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerealType
entryRulerealType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealTypeRule()); }
	iv_rulerealType=rulerealType
	{ $current=$iv_rulerealType.current; }
	EOF;

// Rule realType
rulerealType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRealTypeAccess().getRealTypeAction_0(),
					$current);
			}
		)
		(
			otherlv_1='real48'
			{
				newLeafNode(otherlv_1, grammarAccess.getRealTypeAccess().getReal48Keyword_1_0());
			}
			    |
			otherlv_2='real'
			{
				newLeafNode(otherlv_2, grammarAccess.getRealTypeAccess().getRealKeyword_1_1());
			}
			    |
			otherlv_3='single'
			{
				newLeafNode(otherlv_3, grammarAccess.getRealTypeAccess().getSingleKeyword_1_2());
			}
			    |
			otherlv_4='double'
			{
				newLeafNode(otherlv_4, grammarAccess.getRealTypeAccess().getDoubleKeyword_1_3());
			}
			    |
			otherlv_5='extended'
			{
				newLeafNode(otherlv_5, grammarAccess.getRealTypeAccess().getExtendedKeyword_1_4());
			}
			    |
			otherlv_6='currency'
			{
				newLeafNode(otherlv_6, grammarAccess.getRealTypeAccess().getCurrencyKeyword_1_5());
			}
			    |
			otherlv_7='comp'
			{
				newLeafNode(otherlv_7, grammarAccess.getRealTypeAccess().getCompKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleordinalType
entryRuleordinalType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrdinalTypeRule()); }
	iv_ruleordinalType=ruleordinalType
	{ $current=$iv_ruleordinalType.current; }
	EOF;

// Rule ordinalType
ruleordinalType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOrdinalTypeAccess().getSubrangeTypeParserRuleCall_0());
		}
		this_subrangeType_0=rulesubrangeType
		{
			$current = $this_subrangeType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOrdinalTypeAccess().getEnumeratedTypeParserRuleCall_1());
		}
		this_enumeratedType_1=ruleenumeratedType
		{
			$current = $this_enumeratedType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOrdinalTypeAccess().getOrdIdentParserRuleCall_2());
		}
		this_ordIdent_2=ruleordIdent
		{
			$current = $this_ordIdent_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleordIdent
entryRuleordIdent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrdIdentRule()); }
	iv_ruleordIdent=ruleordIdent
	{ $current=$iv_ruleordIdent.current; }
	EOF;

// Rule ordIdent
ruleordIdent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getOrdIdentAccess().getOrdIdentAction_0(),
					$current);
			}
		)
		(
			otherlv_1='shortint'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrdIdentAccess().getShortintKeyword_1_0());
			}
			    |
			otherlv_2='smallint'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrdIdentAccess().getSmallintKeyword_1_1());
			}
			    |
			otherlv_3='integer'
			{
				newLeafNode(otherlv_3, grammarAccess.getOrdIdentAccess().getIntegerKeyword_1_2());
			}
			    |
			otherlv_4='byte'
			{
				newLeafNode(otherlv_4, grammarAccess.getOrdIdentAccess().getByteKeyword_1_3());
			}
			    |
			otherlv_5='longint'
			{
				newLeafNode(otherlv_5, grammarAccess.getOrdIdentAccess().getLongintKeyword_1_4());
			}
			    |
			otherlv_6='int64'
			{
				newLeafNode(otherlv_6, grammarAccess.getOrdIdentAccess().getInt64Keyword_1_5());
			}
			    |
			otherlv_7='word'
			{
				newLeafNode(otherlv_7, grammarAccess.getOrdIdentAccess().getWordKeyword_1_6());
			}
			    |
			otherlv_8='boolean'
			{
				newLeafNode(otherlv_8, grammarAccess.getOrdIdentAccess().getBooleanKeyword_1_7());
			}
			    |
			otherlv_9='char'
			{
				newLeafNode(otherlv_9, grammarAccess.getOrdIdentAccess().getCharKeyword_1_8());
			}
			    |
			otherlv_10='widechar'
			{
				newLeafNode(otherlv_10, grammarAccess.getOrdIdentAccess().getWidecharKeyword_1_9());
			}
			    |
			otherlv_11='longword'
			{
				newLeafNode(otherlv_11, grammarAccess.getOrdIdentAccess().getLongwordKeyword_1_10());
			}
			    |
			otherlv_12='pchar'
			{
				newLeafNode(otherlv_12, grammarAccess.getOrdIdentAccess().getPcharKeyword_1_11());
			}
		)
	)
;

// Entry rule entryRulevariantType
entryRulevariantType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantTypeRule()); }
	iv_rulevariantType=rulevariantType
	{ $current=$iv_rulevariantType.current; }
	EOF;

// Rule variantType
rulevariantType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariantTypeAccess().getVariantTypeAction_0(),
					$current);
			}
		)
		(
			otherlv_1='variant'
			{
				newLeafNode(otherlv_1, grammarAccess.getVariantTypeAccess().getVariantKeyword_1_0());
			}
			    |
			otherlv_2='olevariant'
			{
				newLeafNode(otherlv_2, grammarAccess.getVariantTypeAccess().getOlevariantKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRulesubrangeType
entryRulesubrangeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubrangeTypeRule()); }
	iv_rulesubrangeType=rulesubrangeType
	{ $current=$iv_rulesubrangeType.current; }
	EOF;

// Rule subrangeType
rulesubrangeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrangeTypeAccess().getFirstConstExprParserRuleCall_0_0());
				}
				lv_first_0_0=ruleconstExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrangeTypeRule());
					}
					set(
						$current,
						"first",
						lv_first_0_0,
						"org.xtext.example.delphi.Delphi.constExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubrangeTypeAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrangeTypeAccess().getLastConstExprParserRuleCall_2_0());
				}
				lv_last_2_0=ruleconstExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrangeTypeRule());
					}
					set(
						$current,
						"last",
						lv_last_2_0,
						"org.xtext.example.delphi.Delphi.constExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleenumeratedType
entryRuleenumeratedType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumeratedTypeRule()); }
	iv_ruleenumeratedType=ruleenumeratedType
	{ $current=$iv_ruleenumeratedType.current; }
	EOF;

// Rule enumeratedType
ruleenumeratedType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumeratedTypeAccess().getEnumeratedTypeAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumeratedTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumeratedTypeAccess().getElementEnumeratedTypeElementParserRuleCall_2_0_0());
					}
					lv_element_2_0=ruleenumeratedTypeElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumeratedTypeRule());
						}
						add(
							$current,
							"element",
							lv_element_2_0,
							"org.xtext.example.delphi.Delphi.enumeratedTypeElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getEnumeratedTypeAccess().getCommaKeyword_2_1());
			}
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getEnumeratedTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleenumeratedTypeElement
entryRuleenumeratedTypeElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumeratedTypeElementRule()); }
	iv_ruleenumeratedTypeElement=ruleenumeratedTypeElement
	{ $current=$iv_ruleenumeratedTypeElement.current; }
	EOF;

// Rule enumeratedTypeElement
ruleenumeratedTypeElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumeratedTypeElementAccess().getIdIdentParserRuleCall_0_0());
				}
				lv_id_0_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumeratedTypeElementRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getEnumeratedTypeElementAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumeratedTypeElementAccess().getLiteralExpConstExprParserRuleCall_1_1_0());
					}
					lv_literalExp_2_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumeratedTypeElementRule());
						}
						set(
							$current,
							"literalExp",
							lv_literalExp_2_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulestringType
entryRulestringType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	iv_rulestringType=rulestringType
	{ $current=$iv_rulestringType.current; }
	EOF;

// Rule stringType
rulestringType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringTypeAccess().getStringTypeAction_0(),
					$current);
			}
		)
		(
			otherlv_1='string'
			{
				newLeafNode(otherlv_1, grammarAccess.getStringTypeAccess().getStringKeyword_1_0());
			}
			    |
			otherlv_2='ansistring'
			{
				newLeafNode(otherlv_2, grammarAccess.getStringTypeAccess().getAnsistringKeyword_1_1());
			}
			    |
			otherlv_3='widestring'
			{
				newLeafNode(otherlv_3, grammarAccess.getStringTypeAccess().getWidestringKeyword_1_2());
			}
			    |
			(
				otherlv_4='string'
				{
					newLeafNode(otherlv_4, grammarAccess.getStringTypeAccess().getStringKeyword_1_3_0());
				}
				otherlv_5='('
				{
					newLeafNode(otherlv_5, grammarAccess.getStringTypeAccess().getLeftParenthesisKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStringTypeAccess().getConstExpConstExprParserRuleCall_1_3_2_0());
						}
						lv_constExp_6_0=ruleconstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStringTypeRule());
							}
							set(
								$current,
								"constExp",
								lv_constExp_6_0,
								"org.xtext.example.delphi.Delphi.constExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getStringTypeAccess().getRightParenthesisKeyword_1_3_3());
				}
			)
		)
	)
;

// Entry rule entryRulestrucType
entryRulestrucType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStrucTypeRule()); }
	iv_rulestrucType=rulestrucType
	{ $current=$iv_rulestrucType.current; }
	EOF;

// Rule strucType
rulestrucType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='packed'
			{
				newLeafNode(otherlv_0, grammarAccess.getStrucTypeAccess().getPackedKeyword_0());
			}
		)?
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStrucTypeAccess().getArrayTypeParserRuleCall_1_0());
			}
			this_arrayType_1=rulearrayType
			{
				$current = $this_arrayType_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStrucTypeAccess().getSetTypeParserRuleCall_1_1());
			}
			this_setType_2=rulesetType
			{
				$current = $this_setType_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStrucTypeAccess().getFileTypeParserRuleCall_1_2());
			}
			this_fileType_3=rulefileType
			{
				$current = $this_fileType_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			(
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getStrucTypeAccess().getRecTypeParserRuleCall_1_3_0());
				}
				this_recType_4=rulerecType
				{
					$current = $this_recType_4.current;
					afterParserOrEnumRuleCall();
				}
				(
					otherlv_5='packed'
					{
						newLeafNode(otherlv_5, grammarAccess.getStrucTypeAccess().getPackedKeyword_1_3_1());
					}
				)?
			)
		)
	)
;

// Entry rule entryRulearrayType
entryRulearrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_rulearrayType=rulearrayType
	{ $current=$iv_rulearrayType.current; }
	EOF;

// Rule arrayType
rulearrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='array'
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayTypeAccess().getArrayKeyword_0());
		}
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayTypeAccess().getOrdinalTypeOrdinalTypeParserRuleCall_1_1_0());
					}
					lv_ordinalType_2_0=ruleordinalType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
						}
						add(
							$current,
							"ordinalType",
							lv_ordinalType_2_0,
							"org.xtext.example.delphi.Delphi.ordinalType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getArrayTypeAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArrayTypeAccess().getOrdinalTypOrdinalTypeParserRuleCall_1_2_1_0());
						}
						lv_ordinalTyp_4_0=ruleordinalType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
							}
							add(
								$current,
								"ordinalTyp",
								lv_ordinalTyp_4_0,
								"org.xtext.example.delphi.Delphi.ordinalType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_1_3());
			}
		)?
		otherlv_6='of'
		{
			newLeafNode(otherlv_6, grammarAccess.getArrayTypeAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_7_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_7_0,
						"org.xtext.example.delphi.Delphi.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getPortPortabilityDirectiveParserRuleCall_4_0());
				}
				lv_port_8_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"port",
						lv_port_8_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulerecType
entryRulerecType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecTypeRule()); }
	iv_rulerecType=rulerecType
	{ $current=$iv_rulerecType.current; }
	EOF;

// Rule recType
rulerecType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRecTypeAccess().getRecTypeAction_0(),
					$current);
			}
		)
		otherlv_1='record'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecTypeAccess().getRecordKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecTypeAccess().getFieldsFieldListParserRuleCall_2_0());
				}
				lv_fields_2_0=rulefieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecTypeRule());
					}
					set(
						$current,
						"fields",
						lv_fields_2_0,
						"org.xtext.example.delphi.Delphi.fieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getRecTypeAccess().getEndKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecTypeAccess().getPortPortabilityDirectiveParserRuleCall_4_0());
				}
				lv_port_4_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecTypeRule());
					}
					set(
						$current,
						"port",
						lv_port_4_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulefieldList
entryRulefieldList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldListRule()); }
	iv_rulefieldList=rulefieldList
	{ $current=$iv_rulefieldList.current; }
	EOF;

// Rule fieldList
rulefieldList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldListAccess().getFieldFieldDeclParserRuleCall_0_0_0());
					}
					lv_field_0_0=rulefieldDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldListRule());
						}
						add(
							$current,
							"field",
							lv_field_0_0,
							"org.xtext.example.delphi.Delphi.fieldDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getFieldListAccess().getSemicolonKeyword_0_1());
			}
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldListAccess().getVariantSectVariantSectionParserRuleCall_1_0());
				}
				lv_variantSect_2_0=rulevariantSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldListRule());
					}
					set(
						$current,
						"variantSect",
						lv_variantSect_2_0,
						"org.xtext.example.delphi.Delphi.variantSection");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getFieldListAccess().getSemicolonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRulefieldDecl
entryRulefieldDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_rulefieldDecl=rulefieldDecl
	{ $current=$iv_rulefieldDecl.current; }
	EOF;

// Rule fieldDecl
rulefieldDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getIdListIdentListParserRuleCall_0_0());
				}
				lv_idList_0_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
					}
					set(
						$current,
						"idList",
						lv_idList_0_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldDeclAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.delphi.Delphi.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getPortPortabilityDirectiveParserRuleCall_3_0());
				}
				lv_port_3_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
					}
					set(
						$current,
						"port",
						lv_port_3_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulevariantSection
entryRulevariantSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantSectionRule()); }
	iv_rulevariantSection=rulevariantSection
	{ $current=$iv_rulevariantSection.current; }
	EOF;

// Rule variantSection
rulevariantSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariantSectionAccess().getCaseKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariantSectionAccess().getIdIdentParserRuleCall_1_0_0());
					}
					lv_id_1_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariantSectionRule());
						}
						set(
							$current,
							"id",
							lv_id_1_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getVariantSectionAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantSectionAccess().getTypeRefTypeIdParserRuleCall_2_0());
				}
				lv_typeRef_3_0=ruletypeId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantSectionRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_3_0,
						"org.xtext.example.delphi.Delphi.typeId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='of'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariantSectionAccess().getOfKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariantSectionAccess().getRecVariantsRecVariantParserRuleCall_4_0_0());
					}
					lv_recVariants_5_0=rulerecVariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariantSectionRule());
						}
						add(
							$current,
							"recVariants",
							lv_recVariants_5_0,
							"org.xtext.example.delphi.Delphi.recVariant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getVariantSectionAccess().getSemicolonKeyword_4_1());
			}
		)+
	)
;

// Entry rule entryRulerecVariant
entryRulerecVariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecVariantRule()); }
	iv_rulerecVariant=rulerecVariant
	{ $current=$iv_rulerecVariant.current; }
	EOF;

// Rule recVariant
rulerecVariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecVariantAccess().getConstExpConstExprParserRuleCall_0_0());
				}
				lv_constExp_0_0=ruleconstExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecVariantRule());
					}
					add(
						$current,
						"constExp",
						lv_constExp_0_0,
						"org.xtext.example.delphi.Delphi.constExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getRecVariantAccess().getCommaKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecVariantAccess().getConstExpConstExprParserRuleCall_2_0());
				}
				lv_constExp_2_0=ruleconstExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecVariantRule());
					}
					add(
						$current,
						"constExp",
						lv_constExp_2_0,
						"org.xtext.example.delphi.Delphi.constExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRecVariantAccess().getColonKeyword_3());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getRecVariantAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecVariantAccess().getFieldListFieldListParserRuleCall_5_0());
				}
				lv_fieldList_5_0=rulefieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecVariantRule());
					}
					set(
						$current,
						"fieldList",
						lv_fieldList_5_0,
						"org.xtext.example.delphi.Delphi.fieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getRecVariantAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRulesetType
entryRulesetType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetTypeRule()); }
	iv_rulesetType=rulesetType
	{ $current=$iv_rulesetType.current; }
	EOF;

// Rule setType
rulesetType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetTypeAccess().getSetKeyword_0());
		}
		otherlv_1='of'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetTypeAccess().getOfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetTypeAccess().getOrdinalOrdinalTypeParserRuleCall_2_0());
				}
				lv_ordinal_2_0=ruleordinalType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetTypeRule());
					}
					set(
						$current,
						"ordinal",
						lv_ordinal_2_0,
						"org.xtext.example.delphi.Delphi.ordinalType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSetTypeAccess().getPortPortabilityDirectiveParserRuleCall_3_0());
				}
				lv_port_3_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetTypeRule());
					}
					set(
						$current,
						"port",
						lv_port_3_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulefileType
entryRulefileType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileTypeRule()); }
	iv_rulefileType=rulefileType
	{ $current=$iv_rulefileType.current; }
	EOF;

// Rule fileType
rulefileType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='file'
		{
			newLeafNode(otherlv_0, grammarAccess.getFileTypeAccess().getFileKeyword_0());
		}
		otherlv_1='of'
		{
			newLeafNode(otherlv_1, grammarAccess.getFileTypeAccess().getOfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFileTypeAccess().getTypeRefTypeIdParserRuleCall_2_0());
				}
				lv_typeRef_2_0=ruletypeId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileTypeRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_2_0,
						"org.xtext.example.delphi.Delphi.typeId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFileTypeAccess().getPortPortabilityDirectiveParserRuleCall_3_0());
				}
				lv_port_3_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileTypeRule());
					}
					set(
						$current,
						"port",
						lv_port_3_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulepointerType
entryRulepointerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulepointerType=rulepointerType
	{ $current=$iv_rulepointerType.current; }
	EOF;

// Rule pointerType
rulepointerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='^'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointerTypeAccess().getCircumflexAccentKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPointerTypeAccess().getTypeIdParserRuleCall_1());
		}
		this_typeId_1=ruletypeId
		{
			$current = $this_typeId_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getPointerTypeAccess().getPortabilityDirectiveParserRuleCall_2());
			}
			ruleportabilityDirective
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleprocedureType
entryRuleprocedureType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureTypeRule()); }
	iv_ruleprocedureType=ruleprocedureType
	{ $current=$iv_ruleprocedureType.current; }
	EOF;

// Rule procedureType
ruleprocedureType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcedureTypeAccess().getPHeadingProcedureHeadingParserRuleCall_0_0_0());
					}
					lv_pHeading_0_0=ruleprocedureHeading
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcedureTypeRule());
						}
						set(
							$current,
							"pHeading",
							lv_pHeading_0_0,
							"org.xtext.example.delphi.Delphi.procedureHeading");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProcedureTypeAccess().getFHeadingFunctionHeadingParserRuleCall_0_1_0());
					}
					lv_fHeading_1_0=rulefunctionHeading
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcedureTypeRule());
						}
						set(
							$current,
							"fHeading",
							lv_fHeading_1_0,
							"org.xtext.example.delphi.Delphi.functionHeading");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getProcedureTypeAccess().getOfKeyword_1_0());
			}
			otherlv_3='object'
			{
				newLeafNode(otherlv_3, grammarAccess.getProcedureTypeAccess().getObjectKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRulevarSection
entryRulevarSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarSectionRule()); }
	iv_rulevarSection=rulevarSection
	{ $current=$iv_rulevarSection.current; }
	EOF;

// Rule varSection
rulevarSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarSectionAccess().getVarKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVarSectionAccess().getVarDeclsVarDeclParserRuleCall_1_0_0());
					}
					lv_varDecls_1_0=rulevarDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarSectionRule());
						}
						add(
							$current,
							"varDecls",
							lv_varDecls_1_0,
							"org.xtext.example.delphi.Delphi.varDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getVarSectionAccess().getSemicolonKeyword_1_1());
			}
		)+
	)
;

// Entry rule entryRulevarDecl
entryRulevarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_rulevarDecl=rulevarDecl
	{ $current=$iv_rulevarDecl.current; }
	EOF;

// Rule varDecl
rulevarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclAccess().getIdListIdentListParserRuleCall_0_0());
				}
				lv_idList_0_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclRule());
					}
					set(
						$current,
						"idList",
						lv_idList_0_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarDeclAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.delphi.Delphi.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_3='absolute'
				{
					newLeafNode(otherlv_3, grammarAccess.getVarDeclAccess().getAbsoluteKeyword_3_0_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getVarDeclAccess().getAbsIdIdentParserRuleCall_3_0_1_0_0());
							}
							lv_absId_4_0=ruleident
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarDeclRule());
								}
								set(
									$current,
									"absId",
									lv_absId_4_0,
									"org.xtext.example.delphi.Delphi.ident");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getVarDeclAccess().getAbsConstConstExprParserRuleCall_3_0_1_1_0());
							}
							lv_absConst_5_0=ruleconstExpr
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarDeclRule());
								}
								set(
									$current,
									"absConst",
									lv_absConst_5_0,
									"org.xtext.example.delphi.Delphi.constExpr");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			    |
			(
				otherlv_6='='
				{
					newLeafNode(otherlv_6, grammarAccess.getVarDeclAccess().getEqualsSignKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVarDeclAccess().getAbsInitiConstExprParserRuleCall_3_1_1_0());
						}
						lv_absIniti_7_0=ruleconstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarDeclRule());
							}
							set(
								$current,
								"absIniti",
								lv_absIniti_7_0,
								"org.xtext.example.delphi.Delphi.constExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getVarDeclAccess().getPortabilityDirectiveParserRuleCall_4());
			}
			ruleportabilityDirective
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0());
		}
		this_simpleExpression_0=rulesimpleExpression
		{
			$current = $this_simpleExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getRelExpLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRelOpRelOpParserRuleCall_1_1_0());
					}
					lv_relOp_2_0=rulerelOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"relOp",
							lv_relOp_2_0,
							"org.xtext.example.delphi.Delphi.relOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightSimpleExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulesimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.delphi.Delphi.simpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulesimpleExpression
entryRulesimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_rulesimpleExpression=rulesimpleExpression
	{ $current=$iv_rulesimpleExpression.current; }
	EOF;

// Rule simpleExpression
rulesimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='+'
			{
				newLeafNode(otherlv_0, grammarAccess.getSimpleExpressionAccess().getPlusSignKeyword_0_0());
			}
			    |
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getSimpleExpressionAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermParserRuleCall_1());
		}
		this_term_2=ruleterm
		{
			$current = $this_term_2.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSimpleExpressionAccess().getAddExpLeftAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpressionAccess().getAddOpAddOpParserRuleCall_2_1_0());
					}
					lv_addOp_4_0=ruleaddOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
						}
						set(
							$current,
							"addOp",
							lv_addOp_4_0,
							"org.xtext.example.delphi.Delphi.addOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpressionAccess().getRightTermParserRuleCall_2_2_0());
					}
					lv_right_5_0=ruleterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.xtext.example.delphi.Delphi.term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0());
		}
		this_factor_0=rulefactor
		{
			$current = $this_factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getTermAccess().getMultExpLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getMultOpMulOpParserRuleCall_1_1_0());
					}
					lv_multOp_2_0=rulemulOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"multOp",
							lv_multOp_2_0,
							"org.xtext.example.delphi.Delphi.mulOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.delphi.Delphi.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_rulefactor=rulefactor
	{ $current=$iv_rulefactor.current; }
	EOF;

// Rule factor
rulefactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getDesignatorDesignatorParserRuleCall_0_0_0());
					}
					lv_designator_0_0=ruledesignator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"designator",
							lv_designator_0_0,
							"org.xtext.example.delphi.Delphi.designator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpListExprListParserRuleCall_0_2_0());
					}
					lv_expList_2_0=ruleexprList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expList",
							lv_expList_2_0,
							"org.xtext.example.delphi.Delphi.exprList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getFactorAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getSimpleFactorAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getDesignatorDesignatorParserRuleCall_1_1_0());
					}
					lv_designator_5_0=ruledesignator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"designator",
							lv_designator_5_0,
							"org.xtext.example.delphi.Delphi.designator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_6='@'
			{
				newLeafNode(otherlv_6, grammarAccess.getFactorAccess().getCommercialAtKeyword_2_0());
			}
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getSimpleFactorAction_2_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getDesignatorDesignatorParserRuleCall_2_2_0());
					}
					lv_designator_8_0=ruledesignator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"designator",
							lv_designator_8_0,
							"org.xtext.example.delphi.Delphi.designator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getNumberNumberParserRuleCall_3_0());
				}
				lv_number_9_0=rulenumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"number",
						lv_number_9_0,
						"org.xtext.example.delphi.Delphi.number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getStringStringParserRuleCall_4_0());
				}
				lv_string_10_0=rulestring
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"string",
						lv_string_10_0,
						"org.xtext.example.delphi.Delphi.string");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getFactorAction_5_0(),
						$current);
				}
			)
			otherlv_12='nil'
			{
				newLeafNode(otherlv_12, grammarAccess.getFactorAccess().getNilKeyword_5_1());
			}
		)
		    |
		(
			otherlv_13='('
			{
				newLeafNode(otherlv_13, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpExpressionParserRuleCall_6_1_0());
					}
					lv_exp_14_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"exp",
							lv_exp_14_0,
							"org.xtext.example.delphi.Delphi.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15=')'
			{
				newLeafNode(otherlv_15, grammarAccess.getFactorAccess().getRightParenthesisKeyword_6_2());
			}
		)
		    |
		(
			otherlv_16='not'
			{
				newLeafNode(otherlv_16, grammarAccess.getFactorAccess().getNotKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpFactorParserRuleCall_7_1_0());
					}
					lv_exp_17_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"exp",
							lv_exp_17_0,
							"org.xtext.example.delphi.Delphi.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getSetConstuctorSetConstructorParserRuleCall_8_0());
				}
				lv_setConstuctor_18_0=rulesetConstructor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"setConstuctor",
						lv_setConstuctor_18_0,
						"org.xtext.example.delphi.Delphi.setConstructor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getTypeRefTypeIdParserRuleCall_9_0_0());
					}
					lv_typeRef_19_0=ruletypeId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"typeRef",
							lv_typeRef_19_0,
							"org.xtext.example.delphi.Delphi.typeId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_20='('
			{
				newLeafNode(otherlv_20, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_9_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpExpressionParserRuleCall_9_2_0());
					}
					lv_exp_21_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"exp",
							lv_exp_21_0,
							"org.xtext.example.delphi.Delphi.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_22=')'
			{
				newLeafNode(otherlv_22, grammarAccess.getFactorAccess().getRightParenthesisKeyword_9_3());
			}
		)
	)
;

// Entry rule entryRulerelOp
entryRulerelOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelOpRule()); }
	iv_rulerelOp=rulerelOp
	{ $current=$iv_rulerelOp.current; }
	EOF;

// Rule relOp
rulerelOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelOpAccess().getRelOpAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_op_1_1='='
					{
						newLeafNode(lv_op_1_1, grammarAccess.getRelOpAccess().getOpEqualsSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='>'
					{
						newLeafNode(lv_op_1_2, grammarAccess.getRelOpAccess().getOpGreaterThanSignKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
					    |
					lv_op_1_3='<'
					{
						newLeafNode(lv_op_1_3, grammarAccess.getRelOpAccess().getOpLessThanSignKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_3, null);
					}
					    |
					lv_op_1_4='<='
					{
						newLeafNode(lv_op_1_4, grammarAccess.getRelOpAccess().getOpLessThanSignEqualsSignKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_4, null);
					}
					    |
					lv_op_1_5='>='
					{
						newLeafNode(lv_op_1_5, grammarAccess.getRelOpAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_5, null);
					}
					    |
					lv_op_1_6='<>'
					{
						newLeafNode(lv_op_1_6, grammarAccess.getRelOpAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_6, null);
					}
					    |
					lv_op_1_7='in'
					{
						newLeafNode(lv_op_1_7, grammarAccess.getRelOpAccess().getOpInKeyword_1_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_7, null);
					}
					    |
					lv_op_1_8='is'
					{
						newLeafNode(lv_op_1_8, grammarAccess.getRelOpAccess().getOpIsKeyword_1_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_8, null);
					}
					    |
					lv_op_1_9='as'
					{
						newLeafNode(lv_op_1_9, grammarAccess.getRelOpAccess().getOpAsKeyword_1_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_9, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleaddOp
entryRuleaddOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddOpRule()); }
	iv_ruleaddOp=ruleaddOp
	{ $current=$iv_ruleaddOp.current; }
	EOF;

// Rule addOp
ruleaddOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAddOpAccess().getAdOpAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_op_1_1='+'
					{
						newLeafNode(lv_op_1_1, grammarAccess.getAddOpAccess().getOpPlusSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='-'
					{
						newLeafNode(lv_op_1_2, grammarAccess.getAddOpAccess().getOpHyphenMinusKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
					    |
					lv_op_1_3='or'
					{
						newLeafNode(lv_op_1_3, grammarAccess.getAddOpAccess().getOpOrKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_3, null);
					}
					    |
					lv_op_1_4='xor'
					{
						newLeafNode(lv_op_1_4, grammarAccess.getAddOpAccess().getOpXorKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_4, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRulemulOp
entryRulemulOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOpRule()); }
	iv_rulemulOp=rulemulOp
	{ $current=$iv_rulemulOp.current; }
	EOF;

// Rule mulOp
rulemulOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getMulOpAccess().getMulOpAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_op_1_1='*'
					{
						newLeafNode(lv_op_1_1, grammarAccess.getMulOpAccess().getOpAsteriskKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMulOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='/'
					{
						newLeafNode(lv_op_1_2, grammarAccess.getMulOpAccess().getOpSolidusKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMulOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
					    |
					lv_op_1_3='div'
					{
						newLeafNode(lv_op_1_3, grammarAccess.getMulOpAccess().getOpDivKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMulOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_3, null);
					}
					    |
					lv_op_1_4='mod'
					{
						newLeafNode(lv_op_1_4, grammarAccess.getMulOpAccess().getOpModKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMulOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_4, null);
					}
					    |
					lv_op_1_5='and'
					{
						newLeafNode(lv_op_1_5, grammarAccess.getMulOpAccess().getOpAndKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMulOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_5, null);
					}
					    |
					lv_op_1_6='shl'
					{
						newLeafNode(lv_op_1_6, grammarAccess.getMulOpAccess().getOpShlKeyword_1_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMulOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_6, null);
					}
					    |
					lv_op_1_7='shr'
					{
						newLeafNode(lv_op_1_7, grammarAccess.getMulOpAccess().getOpShrKeyword_1_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMulOpRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_7, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuledesignator
entryRuledesignator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDesignatorRule()); }
	iv_ruledesignator=ruledesignator
	{ $current=$iv_ruledesignator.current; }
	EOF;

// Rule designator
ruledesignator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDesignatorAccess().getSubpartDesignatorSubPartParserRuleCall_0_0());
				}
				lv_subpart_0_0=ruledesignatorSubPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDesignatorRule());
					}
					set(
						$current,
						"subpart",
						lv_subpart_0_0,
						"org.xtext.example.delphi.Delphi.designatorSubPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getDesignatorAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDesignatorAccess().getDesignatorDesignatorParserRuleCall_1_1_0());
					}
					lv_designator_2_0=ruledesignator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDesignatorRule());
						}
						set(
							$current,
							"designator",
							lv_designator_2_0,
							"org.xtext.example.delphi.Delphi.designator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuledesignatorSubPart
entryRuledesignatorSubPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDesignatorSubPartRule()); }
	iv_ruledesignatorSubPart=ruledesignatorSubPart
	{ $current=$iv_ruledesignatorSubPart.current; }
	EOF;

// Rule designatorSubPart
ruledesignatorSubPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDesignatorSubPartAccess().getPartDesignatorPartParserRuleCall_0_0());
				}
				lv_part_0_0=ruledesignatorPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDesignatorSubPartRule());
					}
					set(
						$current,
						"part",
						lv_part_0_0,
						"org.xtext.example.delphi.Delphi.designatorPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='['
				{
					newLeafNode(otherlv_1, grammarAccess.getDesignatorSubPartAccess().getLeftSquareBracketKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDesignatorSubPartAccess().getExprListExprListParserRuleCall_1_0_1_0());
						}
						lv_exprList_2_0=ruleexprList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDesignatorSubPartRule());
							}
							add(
								$current,
								"exprList",
								lv_exprList_2_0,
								"org.xtext.example.delphi.Delphi.exprList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=']'
				{
					newLeafNode(otherlv_3, grammarAccess.getDesignatorSubPartAccess().getRightSquareBracketKeyword_1_0_2());
				}
			)
			    |
			otherlv_4='^'
			{
				newLeafNode(otherlv_4, grammarAccess.getDesignatorSubPartAccess().getCircumflexAccentKeyword_1_1());
			}
		)*
	)
;

// Entry rule entryRuledesignatorPart
entryRuledesignatorPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDesignatorPartRule()); }
	iv_ruledesignatorPart=ruledesignatorPart
	{ $current=$iv_ruledesignatorPart.current; }
	EOF;

// Rule designatorPart
ruledesignatorPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getDesignatorPartAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDesignatorPartRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.xtext.example.delphi.Delphi.ID");
				}
			)
		)
		    |
		(
			otherlv_1='&'
			{
				newLeafNode(otherlv_1, grammarAccess.getDesignatorPartAccess().getAmpersandKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDesignatorPartAccess().getReservedWordReservedWordParserRuleCall_1_1_0());
					}
					lv_reservedWord_2_0=rulereservedWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDesignatorPartRule());
						}
						set(
							$current,
							"reservedWord",
							lv_reservedWord_2_0,
							"org.xtext.example.delphi.Delphi.reservedWord");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_id_3_0=RULE_ID
					{
						newLeafNode(lv_id_3_0, grammarAccess.getDesignatorPartAccess().getIdIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDesignatorPartRule());
						}
						setWithLastConsumed(
							$current,
							"id",
							lv_id_3_0,
							"org.xtext.example.delphi.Delphi.ID");
					}
				)
			)
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getDesignatorPartAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					lv_id2_5_0=RULE_ID
					{
						newLeafNode(lv_id2_5_0, grammarAccess.getDesignatorPartAccess().getId2IDTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDesignatorPartRule());
						}
						setWithLastConsumed(
							$current,
							"id2",
							lv_id2_5_0,
							"org.xtext.example.delphi.Delphi.ID");
					}
				)
			)
			otherlv_6='^'
			{
				newLeafNode(otherlv_6, grammarAccess.getDesignatorPartAccess().getCircumflexAccentKeyword_2_3());
			}
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getDesignatorPartAccess().getRightParenthesisKeyword_2_4());
			}
		)
	)
;

// Entry rule entryRulesetConstructor
entryRulesetConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetConstructorRule()); }
	iv_rulesetConstructor=rulesetConstructor
	{ $current=$iv_rulesetConstructor.current; }
	EOF;

// Rule setConstructor
rulesetConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSetConstructorAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSetConstructorAccess().getElementSetElementParserRuleCall_1_0_0());
					}
					lv_element_1_0=rulesetElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetConstructorRule());
						}
						add(
							$current,
							"element",
							lv_element_1_0,
							"org.xtext.example.delphi.Delphi.setElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getSetConstructorAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSetConstructorAccess().getElementSetElementParserRuleCall_1_1_1_0());
						}
						lv_element_3_0=rulesetElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSetConstructorRule());
							}
							add(
								$current,
								"element",
								lv_element_3_0,
								"org.xtext.example.delphi.Delphi.setElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getSetConstructorAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRulesetElement
entryRulesetElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetElementRule()); }
	iv_rulesetElement=rulesetElement
	{ $current=$iv_rulesetElement.current; }
	EOF;

// Rule setElement
rulesetElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSetElementAccess().getFirstExpressionParserRuleCall_0_0());
				}
				lv_first_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetElementRule());
					}
					set(
						$current,
						"first",
						lv_first_0_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='..'
			{
				newLeafNode(otherlv_1, grammarAccess.getSetElementAccess().getFullStopFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetElementAccess().getLastExpressionParserRuleCall_1_1_0());
					}
					lv_last_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetElementRule());
						}
						set(
							$current,
							"last",
							lv_last_2_0,
							"org.xtext.example.delphi.Delphi.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleexprList
entryRuleexprList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprListRule()); }
	iv_ruleexprList=ruleexprList
	{ $current=$iv_ruleexprList.current; }
	EOF;

// Rule exprList
ruleexprList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprListAccess().getExpsExpressionParserRuleCall_0_0());
				}
				lv_exps_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprListRule());
					}
					add(
						$current,
						"exps",
						lv_exps_0_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExprListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprListAccess().getExpsExpressionParserRuleCall_1_1_0());
					}
					lv_exps_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprListRule());
						}
						add(
							$current,
							"exps",
							lv_exps_2_0,
							"org.xtext.example.delphi.Delphi.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulestmtList
entryRulestmtList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtListRule()); }
	iv_rulestmtList=rulestmtList
	{ $current=$iv_rulestmtList.current; }
	EOF;

// Rule stmtList
rulestmtList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getStmtListAccess().getStmtListAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStmtListAccess().getStatmentsStatementParserRuleCall_1_0_0());
					}
					lv_statments_1_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStmtListRule());
						}
						add(
							$current,
							"statments",
							lv_statments_1_0,
							"org.xtext.example.delphi.Delphi.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=';'
				{
					newLeafNode(otherlv_2, grammarAccess.getStmtListAccess().getSemicolonKeyword_1_1());
				}
			)?
		)*
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getLabelIdLabelIdParserRuleCall_0_0_0());
					}
					lv_labelId_0_0=rulelabelId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"labelId",
							lv_labelId_0_0,
							"org.xtext.example.delphi.Delphi.labelId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getStatementUnlabelledStatementParserRuleCall_1_0());
				}
				lv_statement_2_0=ruleunlabelledStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_2_0,
						"org.xtext.example.delphi.Delphi.unlabelledStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunlabelledStatement
entryRuleunlabelledStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnlabelledStatementRule()); }
	iv_ruleunlabelledStatement=ruleunlabelledStatement
	{ $current=$iv_ruleunlabelledStatement.current; }
	EOF;

// Rule unlabelledStatement
ruleunlabelledStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getSimpleStatementParserRuleCall_0());
		}
		this_simpleStatement_0=rulesimpleStatement
		{
			$current = $this_simpleStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getStructStmtParserRuleCall_1());
		}
		this_structStmt_1=rulestructStmt
		{
			$current = $this_structStmt_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulesimpleStatement
entryRulesimpleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStatementRule()); }
	iv_rulesimpleStatement=rulesimpleStatement
	{ $current=$iv_rulesimpleStatement.current; }
	EOF;

// Rule simpleStatement
rulesimpleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleStatementAccess().getAssignmentStmntAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleStatementAccess().getDesignatorDesignatorParserRuleCall_0_1_0());
					}
					lv_designator_1_0=ruledesignator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
						}
						set(
							$current,
							"designator",
							lv_designator_1_0,
							"org.xtext.example.delphi.Delphi.designator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_operator_2_0=':='
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getSimpleStatementAccess().getOperatorColonEqualsSignKeyword_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleStatementRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, ":=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleStatementAccess().getExpExpressionParserRuleCall_0_3_0());
					}
					lv_exp_3_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
						}
						set(
							$current,
							"exp",
							lv_exp_3_0,
							"org.xtext.example.delphi.Delphi.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleStatementAccess().getCallStmntAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleStatementAccess().getDesignatorDesignatorParserRuleCall_1_1_0());
					}
					lv_designator_5_0=ruledesignator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
						}
						set(
							$current,
							"designator",
							lv_designator_5_0,
							"org.xtext.example.delphi.Delphi.designator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6='('
				{
					newLeafNode(otherlv_6, grammarAccess.getSimpleStatementAccess().getLeftParenthesisKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleStatementAccess().getArgsExprListParserRuleCall_1_2_1_0());
						}
						lv_args_7_0=ruleexprList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
							}
							set(
								$current,
								"args",
								lv_args_7_0,
								"org.xtext.example.delphi.Delphi.exprList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=')'
				{
					newLeafNode(otherlv_8, grammarAccess.getSimpleStatementAccess().getRightParenthesisKeyword_1_2_2());
				}
			)?
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleStatementAccess().getInheritedStamntAction_2_0(),
						$current);
				}
			)
			otherlv_10='inherited'
			{
				newLeafNode(otherlv_10, grammarAccess.getSimpleStatementAccess().getInheritedKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleStatementAccess().getGotoStmntAction_3_0(),
						$current);
				}
			)
			otherlv_12='goto'
			{
				newLeafNode(otherlv_12, grammarAccess.getSimpleStatementAccess().getGotoKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleStatementAccess().getLabelLabelIdParserRuleCall_3_2_0());
					}
					lv_label_13_0=rulelabelId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
						}
						set(
							$current,
							"label",
							lv_label_13_0,
							"org.xtext.example.delphi.Delphi.labelId");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulestructStmt
entryRulestructStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructStmtRule()); }
	iv_rulestructStmt=rulestructStmt
	{ $current=$iv_rulestructStmt.current; }
	EOF;

// Rule structStmt
rulestructStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStructStmtAccess().getCompoundStmtParserRuleCall_0());
		}
		this_compoundStmt_0=rulecompoundStmt
		{
			$current = $this_compoundStmt_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStructStmtAccess().getConditionalStmtParserRuleCall_1());
		}
		this_conditionalStmt_1=ruleconditionalStmt
		{
			$current = $this_conditionalStmt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStructStmtAccess().getLoopStmtParserRuleCall_2());
		}
		this_loopStmt_2=ruleloopStmt
		{
			$current = $this_loopStmt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStructStmtAccess().getWithStmtParserRuleCall_3());
		}
		this_withStmt_3=rulewithStmt
		{
			$current = $this_withStmt_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStructStmtAccess().getTryStmtParserRuleCall_4());
		}
		this_tryStmt_4=ruletryStmt
		{
			$current = $this_tryStmt_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStructStmtAccess().getRaiseStmtParserRuleCall_5());
		}
		this_raiseStmt_5=ruleraiseStmt
		{
			$current = $this_raiseStmt_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStructStmtAccess().getAssemblerStmtParserRuleCall_6());
		}
		this_assemblerStmt_6=ruleassemblerStmt
		{
			$current = $this_assemblerStmt_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulecompoundStmt
entryRulecompoundStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundStmtRule()); }
	iv_rulecompoundStmt=rulecompoundStmt
	{ $current=$iv_rulecompoundStmt.current; }
	EOF;

// Rule compoundStmt
rulecompoundStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompoundStmtAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundStmtAccess().getStamtListStmtListParserRuleCall_1_0());
				}
				lv_stamtList_1_0=rulestmtList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundStmtRule());
					}
					set(
						$current,
						"stamtList",
						lv_stamtList_1_0,
						"org.xtext.example.delphi.Delphi.stmtList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompoundStmtAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRuleconditionalStmt
entryRuleconditionalStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalStmtRule()); }
	iv_ruleconditionalStmt=ruleconditionalStmt
	{ $current=$iv_ruleconditionalStmt.current; }
	EOF;

// Rule conditionalStmt
ruleconditionalStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionalStmtAccess().getIfStmtParserRuleCall_0());
		}
		this_ifStmt_0=ruleifStmt
		{
			$current = $this_ifStmt_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionalStmtAccess().getCaseStmtParserRuleCall_1());
		}
		this_caseStmt_1=rulecaseStmt
		{
			$current = $this_caseStmt_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleifStmt
entryRuleifStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleifStmt=ruleifStmt
	{ $current=$iv_ruleifStmt.current; }
	EOF;

// Rule ifStmt
ruleifStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStmtAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getThenStatementParserRuleCall_3_0());
				}
				lv_then_3_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"then",
						lv_then_3_0,
						"org.xtext.example.delphi.Delphi.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getIfStmtAccess().getSemicolonKeyword_4());
			}
		)?
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfStmtAccess().getElseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStmtAccess().getElseStatementParserRuleCall_5_1_0());
					}
					lv_else_6_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStmtRule());
						}
						set(
							$current,
							"else",
							lv_else_6_0,
							"org.xtext.example.delphi.Delphi.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=';'
				{
					newLeafNode(otherlv_7, grammarAccess.getIfStmtAccess().getSemicolonKeyword_5_2());
				}
			)?
		)?
	)
;

// Entry rule entryRulecaseStmt
entryRulecaseStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStmtRule()); }
	iv_rulecaseStmt=rulecaseStmt
	{ $current=$iv_rulecaseStmt.current; }
	EOF;

// Rule caseStmt
rulecaseStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseStmtAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStmtAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseStmtAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStmtAccess().getCasesCaseSelectorParserRuleCall_3_0());
				}
				lv_cases_3_0=rulecaseSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStmtRule());
					}
					add(
						$current,
						"cases",
						lv_cases_3_0,
						"org.xtext.example.delphi.Delphi.caseSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getCaseStmtAccess().getSemicolonKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStmtAccess().getCasesCaseSelectorParserRuleCall_5_0_0());
					}
					lv_cases_5_0=rulecaseSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStmtRule());
						}
						add(
							$current,
							"cases",
							lv_cases_5_0,
							"org.xtext.example.delphi.Delphi.caseSelector");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getCaseStmtAccess().getSemicolonKeyword_5_1());
			}
		)*
		(
			otherlv_7='else'
			{
				newLeafNode(otherlv_7, grammarAccess.getCaseStmtAccess().getElseKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStmtAccess().getDefaultStmtListParserRuleCall_6_1_0());
					}
					lv_default_8_0=rulestmtList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStmtRule());
						}
						set(
							$current,
							"default",
							lv_default_8_0,
							"org.xtext.example.delphi.Delphi.stmtList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getCaseStmtAccess().getSemicolonKeyword_7());
		}
		otherlv_10='end'
		{
			newLeafNode(otherlv_10, grammarAccess.getCaseStmtAccess().getEndKeyword_8());
		}
	)
;

// Entry rule entryRulecaseSelector
entryRulecaseSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseSelectorRule()); }
	iv_rulecaseSelector=rulecaseSelector
	{ $current=$iv_rulecaseSelector.current; }
	EOF;

// Rule caseSelector
rulecaseSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseSelectorAccess().getLabelsCaseLabelParserRuleCall_0_0());
				}
				lv_labels_0_0=rulecaseLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseSelectorRule());
					}
					add(
						$current,
						"labels",
						lv_labels_0_0,
						"org.xtext.example.delphi.Delphi.caseLabel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getCaseSelectorAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseSelectorAccess().getLabelsCaseLabelParserRuleCall_1_1_0());
					}
					lv_labels_2_0=rulecaseLabel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseSelectorRule());
						}
						add(
							$current,
							"labels",
							lv_labels_2_0,
							"org.xtext.example.delphi.Delphi.caseLabel");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getCaseSelectorAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseSelectorAccess().getStmtStatementParserRuleCall_3_0());
				}
				lv_stmt_4_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseSelectorRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_4_0,
						"org.xtext.example.delphi.Delphi.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getCaseSelectorAccess().getSemicolonKeyword_4());
			}
		)?
	)
;

// Entry rule entryRulecaseLabel
entryRulecaseLabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseLabelRule()); }
	iv_rulecaseLabel=rulecaseLabel
	{ $current=$iv_rulecaseLabel.current; }
	EOF;

// Rule caseLabel
rulecaseLabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseLabelAccess().getFirstConstExprParserRuleCall_0_0());
				}
				lv_first_0_0=ruleconstExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseLabelRule());
					}
					set(
						$current,
						"first",
						lv_first_0_0,
						"org.xtext.example.delphi.Delphi.constExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='..'
			{
				newLeafNode(otherlv_1, grammarAccess.getCaseLabelAccess().getFullStopFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseLabelAccess().getLastConstExprParserRuleCall_1_1_0());
					}
					lv_last_2_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseLabelRule());
						}
						set(
							$current,
							"last",
							lv_last_2_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleloopStmt
entryRuleloopStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopStmtRule()); }
	iv_ruleloopStmt=ruleloopStmt
	{ $current=$iv_ruleloopStmt.current; }
	EOF;

// Rule loopStmt
ruleloopStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLoopStmtAccess().getRepeatStmtParserRuleCall_0());
		}
		this_repeatStmt_0=rulerepeatStmt
		{
			$current = $this_repeatStmt_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLoopStmtAccess().getWhileStmtParserRuleCall_1());
		}
		this_whileStmt_1=rulewhileStmt
		{
			$current = $this_whileStmt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLoopStmtAccess().getForStmtParserRuleCall_2());
		}
		this_forStmt_2=ruleforStmt
		{
			$current = $this_forStmt_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerepeatStmt
entryRulerepeatStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStmtRule()); }
	iv_rulerepeatStmt=rulerepeatStmt
	{ $current=$iv_rulerepeatStmt.current; }
	EOF;

// Rule repeatStmt
rulerepeatStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatStmtAccess().getRepeatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStmtAccess().getStmtStatementParserRuleCall_1_0());
				}
				lv_stmt_1_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStmtRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_1_0,
						"org.xtext.example.delphi.Delphi.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getRepeatStmtAccess().getSemicolonKeyword_2());
			}
		)?
		otherlv_3='until'
		{
			newLeafNode(otherlv_3, grammarAccess.getRepeatStmtAccess().getUntilKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStmtAccess().getConditionExpressionParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStmtRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulewhileStmt
entryRulewhileStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStmtRule()); }
	iv_rulewhileStmt=rulewhileStmt
	{ $current=$iv_rulewhileStmt.current; }
	EOF;

// Rule whileStmt
rulewhileStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStmtAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStmtAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStmtRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStmtAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStmtAccess().getStmtStatementParserRuleCall_3_0());
				}
				lv_stmt_3_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStmtRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_3_0,
						"org.xtext.example.delphi.Delphi.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getWhileStmtAccess().getSemicolonKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuleforStmt
entryRuleforStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleforStmt=ruleforStmt
	{ $current=$iv_ruleforStmt.current; }
	EOF;

// Rule forStmt
ruleforStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getVarIdQualIdParserRuleCall_1_0());
				}
				lv_varId_1_0=rulequalId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"varId",
						lv_varId_1_0,
						"org.xtext.example.delphi.Delphi.qualId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getForStmtAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getVarInitExpressionParserRuleCall_3_0());
				}
				lv_varInit_3_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"varInit",
						lv_varInit_3_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='to'
			{
				newLeafNode(otherlv_4, grammarAccess.getForStmtAccess().getToKeyword_4_0());
			}
			    |
			otherlv_5='downto'
			{
				newLeafNode(otherlv_5, grammarAccess.getForStmtAccess().getDowntoKeyword_4_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getConditionExpressionParserRuleCall_5_0());
				}
				lv_condition_6_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"condition",
						lv_condition_6_0,
						"org.xtext.example.delphi.Delphi.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='do'
		{
			newLeafNode(otherlv_7, grammarAccess.getForStmtAccess().getDoKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getStmtStatementParserRuleCall_7_0());
				}
				lv_stmt_8_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_8_0,
						"org.xtext.example.delphi.Delphi.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getForStmtAccess().getSemicolonKeyword_8());
			}
		)?
	)
;

// Entry rule entryRulewithStmt
entryRulewithStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWithStmtRule()); }
	iv_rulewithStmt=rulewithStmt
	{ $current=$iv_rulewithStmt.current; }
	EOF;

// Rule withStmt
rulewithStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getWithStmtAccess().getWithKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWithStmtAccess().getVarsIdentListParserRuleCall_1_0());
				}
				lv_vars_1_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWithStmtRule());
					}
					set(
						$current,
						"vars",
						lv_vars_1_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWithStmtAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWithStmtAccess().getStmtStatementParserRuleCall_3_0());
				}
				lv_stmt_3_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWithStmtRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_3_0,
						"org.xtext.example.delphi.Delphi.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getWithStmtAccess().getSemicolonKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuletryStmt
entryRuletryStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTryStmtRule()); }
	iv_ruletryStmt=ruletryStmt
	{ $current=$iv_ruletryStmt.current; }
	EOF;

// Rule tryStmt
ruletryStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='try'
		{
			newLeafNode(otherlv_0, grammarAccess.getTryStmtAccess().getTryKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTryStmtAccess().getStmtListStmtListParserRuleCall_1_0());
				}
				lv_stmtList_1_0=rulestmtList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTryStmtRule());
					}
					set(
						$current,
						"stmtList",
						lv_stmtList_1_0,
						"org.xtext.example.delphi.Delphi.stmtList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getTryStmtAccess().getSemicolonKeyword_2());
			}
		)?
		(
			(
				otherlv_3='except'
				{
					newLeafNode(otherlv_3, grammarAccess.getTryStmtAccess().getExceptKeyword_3_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTryStmtAccess().getExceptionExceptionBlockParserRuleCall_3_0_1_0());
						}
						lv_exception_4_0=ruleexceptionBlock
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTryStmtRule());
							}
							set(
								$current,
								"exception",
								lv_exception_4_0,
								"org.xtext.example.delphi.Delphi.exceptionBlock");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_5='finally'
				{
					newLeafNode(otherlv_5, grammarAccess.getTryStmtAccess().getFinallyKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTryStmtAccess().getFinalStmtListParserRuleCall_3_1_1_0());
						}
						lv_final_6_0=rulestmtList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTryStmtRule());
							}
							set(
								$current,
								"final",
								lv_final_6_0,
								"org.xtext.example.delphi.Delphi.stmtList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getTryStmtAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleexceptionBlock
entryRuleexceptionBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExceptionBlockRule()); }
	iv_ruleexceptionBlock=ruleexceptionBlock
	{ $current=$iv_ruleexceptionBlock.current; }
	EOF;

// Rule exceptionBlock
ruleexceptionBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getExceptionBlockAccess().getExceptionBlockAction_0(),
					$current);
			}
		)
		(
			otherlv_1='on'
			{
				newLeafNode(otherlv_1, grammarAccess.getExceptionBlockAccess().getOnKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getExceptionBlockAccess().getExceptionIdIdentParserRuleCall_1_1_0_0());
						}
						lv_exceptionId_2_0=ruleident
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExceptionBlockRule());
							}
							add(
								$current,
								"exceptionId",
								lv_exceptionId_2_0,
								"org.xtext.example.delphi.Delphi.ident");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=':'
				{
					newLeafNode(otherlv_3, grammarAccess.getExceptionBlockAccess().getColonKeyword_1_1_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getExceptionBlockAccess().getTypeTypeParserRuleCall_1_2_0());
					}
					lv_type_4_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExceptionBlockRule());
						}
						add(
							$current,
							"type",
							lv_type_4_0,
							"org.xtext.example.delphi.Delphi.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='id'
			{
				newLeafNode(otherlv_5, grammarAccess.getExceptionBlockAccess().getIdKeyword_1_3());
			}
			otherlv_6='do'
			{
				newLeafNode(otherlv_6, grammarAccess.getExceptionBlockAccess().getDoKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExceptionBlockAccess().getDoStmtStatementParserRuleCall_1_5_0());
					}
					lv_doStmt_7_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExceptionBlockRule());
						}
						add(
							$current,
							"doStmt",
							lv_doStmt_7_0,
							"org.xtext.example.delphi.Delphi.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=';'
				{
					newLeafNode(otherlv_8, grammarAccess.getExceptionBlockAccess().getSemicolonKeyword_1_6());
				}
			)?
		)*
		(
			(
				otherlv_9='else'
				{
					newLeafNode(otherlv_9, grammarAccess.getExceptionBlockAccess().getElseKeyword_2_0());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getExceptionBlockAccess().getElseStmtsStmtListParserRuleCall_2_1_0());
					}
					lv_elseStmts_10_0=rulestmtList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExceptionBlockRule());
						}
						set(
							$current,
							"elseStmts",
							lv_elseStmts_10_0,
							"org.xtext.example.delphi.Delphi.stmtList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleraiseStmt
entryRuleraiseStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRaiseStmtRule()); }
	iv_ruleraiseStmt=ruleraiseStmt
	{ $current=$iv_ruleraiseStmt.current; }
	EOF;

// Rule raiseStmt
ruleraiseStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRaiseStmtAccess().getRaiseStmtAction_0(),
					$current);
			}
		)
		otherlv_1='raise'
		{
			newLeafNode(otherlv_1, grammarAccess.getRaiseStmtAccess().getRaiseKeyword_1());
		}
		(
			(
				lv_raise_2_0=RULE_ID
				{
					newLeafNode(lv_raise_2_0, grammarAccess.getRaiseStmtAccess().getRaiseIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRaiseStmtRule());
					}
					setWithLastConsumed(
						$current,
						"raise",
						lv_raise_2_0,
						"org.xtext.example.delphi.Delphi.ID");
				}
			)
		)?
		(
			otherlv_3='at'
			{
				newLeafNode(otherlv_3, grammarAccess.getRaiseStmtAccess().getAtKeyword_3_0());
			}
			(
				(
					lv_at_4_0=RULE_ID
					{
						newLeafNode(lv_at_4_0, grammarAccess.getRaiseStmtAccess().getAtIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRaiseStmtRule());
						}
						setWithLastConsumed(
							$current,
							"at",
							lv_at_4_0,
							"org.xtext.example.delphi.Delphi.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleassemblerStmt
entryRuleassemblerStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssemblerStmtRule()); }
	iv_ruleassemblerStmt=ruleassemblerStmt
	{ $current=$iv_ruleassemblerStmt.current; }
	EOF;

// Rule assemblerStmt
ruleassemblerStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAssemblerStmtAccess().getAssemblerStmtAction_0(),
					$current);
			}
		)
		otherlv_1='asm'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssemblerStmtAccess().getAsmKeyword_1());
		}
	)
;

// Entry rule entryRuleprocedureDeclSection
entryRuleprocedureDeclSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureDeclSectionRule()); }
	iv_ruleprocedureDeclSection=ruleprocedureDeclSection
	{ $current=$iv_ruleprocedureDeclSection.current; }
	EOF;

// Rule procedureDeclSection
ruleprocedureDeclSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProcedureDeclSectionAccess().getProcedureDeclParserRuleCall_0());
		}
		this_procedureDecl_0=ruleprocedureDecl
		{
			$current = $this_procedureDecl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProcedureDeclSectionAccess().getFunctionDeclParserRuleCall_1());
		}
		this_functionDecl_1=rulefunctionDecl
		{
			$current = $this_functionDecl_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleprocedureDecl
entryRuleprocedureDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureDeclRule()); }
	iv_ruleprocedureDecl=ruleprocedureDecl
	{ $current=$iv_ruleprocedureDecl.current; }
	EOF;

// Rule procedureDecl
ruleprocedureDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclAccess().getHeadingProcedureHeadingParserRuleCall_0_0());
				}
				lv_heading_0_0=ruleprocedureHeading
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
					}
					set(
						$current,
						"heading",
						lv_heading_0_0,
						"org.xtext.example.delphi.Delphi.procedureHeading");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedureDeclAccess().getSemicolonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclAccess().getDirectiveDirectiveParserRuleCall_2_0());
				}
				lv_directive_2_0=ruledirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
					}
					set(
						$current,
						"directive",
						lv_directive_2_0,
						"org.xtext.example.delphi.Delphi.directive");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclAccess().getPortPortabilityDirectiveParserRuleCall_3_0());
				}
				lv_port_3_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
					}
					set(
						$current,
						"port",
						lv_port_3_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.xtext.example.delphi.Delphi.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcedureDeclAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulefunctionDecl
entryRulefunctionDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_rulefunctionDecl=rulefunctionDecl
	{ $current=$iv_rulefunctionDecl.current; }
	EOF;

// Rule functionDecl
rulefunctionDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getHeadingFunctionHeadingParserRuleCall_0_0());
				}
				lv_heading_0_0=rulefunctionHeading
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"heading",
						lv_heading_0_0,
						"org.xtext.example.delphi.Delphi.functionHeading");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDeclAccess().getSemicolonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getDirectiveDirectiveParserRuleCall_2_0());
				}
				lv_directive_2_0=ruledirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"directive",
						lv_directive_2_0,
						"org.xtext.example.delphi.Delphi.directive");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getPortPortabilityDirectiveParserRuleCall_3_0());
				}
				lv_port_3_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"port",
						lv_port_3_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.xtext.example.delphi.Delphi.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionDeclAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulefunctionHeading
entryRulefunctionHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionHeadingRule()); }
	iv_rulefunctionHeading=rulefunctionHeading
	{ $current=$iv_rulefunctionHeading.current; }
	EOF;

// Rule functionHeading
rulefunctionHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='class'
			{
				newLeafNode(otherlv_0, grammarAccess.getFunctionHeadingAccess().getClassKeyword_0());
			}
		)?
		otherlv_1='function'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionHeadingAccess().getFunctionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionHeadingAccess().getIdIdentParserRuleCall_2_0());
				}
				lv_id_2_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionHeadingRule());
					}
					set(
						$current,
						"id",
						lv_id_2_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionHeadingAccess().getFormalParamsFormalParametersParserRuleCall_3_0());
				}
				lv_formalParams_3_0=ruleformalParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionHeadingRule());
					}
					set(
						$current,
						"formalParams",
						lv_formalParams_3_0,
						"org.xtext.example.delphi.Delphi.formalParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionHeadingAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionHeadingAccess().getTypeTypeParserRuleCall_5_0());
				}
				lv_type_5_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionHeadingRule());
					}
					set(
						$current,
						"type",
						lv_type_5_0,
						"org.xtext.example.delphi.Delphi.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedureHeading
entryRuleprocedureHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureHeadingRule()); }
	iv_ruleprocedureHeading=ruleprocedureHeading
	{ $current=$iv_ruleprocedureHeading.current; }
	EOF;

// Rule procedureHeading
ruleprocedureHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='class'
			{
				newLeafNode(otherlv_0, grammarAccess.getProcedureHeadingAccess().getClassKeyword_0());
			}
		)?
		otherlv_1='procedure'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedureHeadingAccess().getProcedureKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureHeadingAccess().getIdIdentParserRuleCall_2_0());
				}
				lv_id_2_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureHeadingRule());
					}
					set(
						$current,
						"id",
						lv_id_2_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureHeadingAccess().getFormalParamsFormalParametersParserRuleCall_3_0());
				}
				lv_formalParams_3_0=ruleformalParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureHeadingRule());
					}
					set(
						$current,
						"formalParams",
						lv_formalParams_3_0,
						"org.xtext.example.delphi.Delphi.formalParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleformalParameters
entryRuleformalParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalParametersRule()); }
	iv_ruleformalParameters=ruleformalParameters
	{ $current=$iv_ruleformalParameters.current; }
	EOF;

// Rule formalParameters
ruleformalParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFormalParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParametersAccess().getParamsFormalParmParserRuleCall_1_0_0());
					}
					lv_params_1_0=ruleformalParm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParametersRule());
						}
						add(
							$current,
							"params",
							lv_params_1_0,
							"org.xtext.example.delphi.Delphi.formalParm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=';'
				{
					newLeafNode(otherlv_2, grammarAccess.getFormalParametersAccess().getSemicolonKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFormalParametersAccess().getParamsFormalParmParserRuleCall_1_1_1_0());
						}
						lv_params_3_0=ruleformalParm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFormalParametersRule());
							}
							add(
								$current,
								"params",
								lv_params_3_0,
								"org.xtext.example.delphi.Delphi.formalParm");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFormalParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleformalParm
entryRuleformalParm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalParmRule()); }
	iv_ruleformalParm=ruleformalParm
	{ $current=$iv_ruleformalParm.current; }
	EOF;

// Rule formalParm
ruleformalParm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='var'
			{
				newLeafNode(otherlv_0, grammarAccess.getFormalParmAccess().getVarKeyword_0_0());
			}
			    |
			otherlv_1='const'
			{
				newLeafNode(otherlv_1, grammarAccess.getFormalParmAccess().getConstKeyword_0_1());
			}
			    |
			otherlv_2='out'
			{
				newLeafNode(otherlv_2, grammarAccess.getFormalParmAccess().getOutKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalParmAccess().getParamParameterParserRuleCall_1_0());
				}
				lv_param_3_0=ruleparameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalParmRule());
					}
					set(
						$current,
						"param",
						lv_param_3_0,
						"org.xtext.example.delphi.Delphi.parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleparameter
entryRuleparameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleparameter=ruleparameter
	{ $current=$iv_ruleparameter.current; }
	EOF;

// Rule parameter
ruleparameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterAccess().getParameterListAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getIdListIdentListParserRuleCall_0_1_0());
					}
					lv_idList_1_0=ruleidentList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"idList",
							lv_idList_1_0,
							"org.xtext.example.delphi.Delphi.identList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_0_2_0());
				}
				(
					(
						(
							otherlv_3='array'
							{
								newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getArrayKeyword_0_2_1_0_0_0());
							}
							otherlv_4='of'
							{
								newLeafNode(otherlv_4, grammarAccess.getParameterAccess().getOfKeyword_0_2_1_0_0_1());
							}
						)?
						(
							(
								{
									newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_2_1_0_1_0());
								}
								lv_type_5_0=ruletype
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getParameterRule());
									}
									set(
										$current,
										"type",
										lv_type_5_0,
										"org.xtext.example.delphi.Delphi.type");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					    |
					otherlv_6='file'
					{
						newLeafNode(otherlv_6, grammarAccess.getParameterAccess().getFileKeyword_0_2_1_1());
					}
				)
			)?
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterAccess().getParameterSimpleAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getIfIdentParserRuleCall_1_1_0());
					}
					lv_if_8_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"if",
							lv_if_8_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getParameterAccess().getColonKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_3_0());
					}
					lv_type_10_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"type",
							lv_type_10_0,
							"org.xtext.example.delphi.Delphi.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='='
			{
				newLeafNode(otherlv_11, grammarAccess.getParameterAccess().getEqualsSignKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getInitExpConstExprParserRuleCall_1_5_0());
					}
					lv_initExp_12_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"initExp",
							lv_initExp_12_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuledirective
entryRuledirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	iv_ruledirective=ruledirective
	{ $current=$iv_ruledirective.current; }
	EOF;

// Rule directive
ruledirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_dir_0_0='cdecl'
				{
					newLeafNode(lv_dir_0_0, grammarAccess.getDirectiveAccess().getDirCdeclKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_0_0, "cdecl");
				}
			)
		)
		    |
		(
			(
				lv_dir_1_0='register'
				{
					newLeafNode(lv_dir_1_0, grammarAccess.getDirectiveAccess().getDirRegisterKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_1_0, "register");
				}
			)
		)
		    |
		(
			(
				lv_dir_2_0='dynamic'
				{
					newLeafNode(lv_dir_2_0, grammarAccess.getDirectiveAccess().getDirDynamicKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_2_0, "dynamic");
				}
			)
		)
		    |
		(
			(
				lv_dir_3_0='virtual'
				{
					newLeafNode(lv_dir_3_0, grammarAccess.getDirectiveAccess().getDirVirtualKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_3_0, "virtual");
				}
			)
		)
		    |
		(
			(
				lv_dir_4_0='export'
				{
					newLeafNode(lv_dir_4_0, grammarAccess.getDirectiveAccess().getDirExportKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_4_0, "export");
				}
			)
		)
		    |
		(
			(
				lv_dir_5_0='external'
				{
					newLeafNode(lv_dir_5_0, grammarAccess.getDirectiveAccess().getDirExternalKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_5_0, "external");
				}
			)
		)
		    |
		(
			(
				lv_dir_6_0='near'
				{
					newLeafNode(lv_dir_6_0, grammarAccess.getDirectiveAccess().getDirNearKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_6_0, "near");
				}
			)
		)
		    |
		(
			(
				lv_dir_7_0='far'
				{
					newLeafNode(lv_dir_7_0, grammarAccess.getDirectiveAccess().getDirFarKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_7_0, "far");
				}
			)
		)
		    |
		(
			(
				lv_dir_8_0='forward'
				{
					newLeafNode(lv_dir_8_0, grammarAccess.getDirectiveAccess().getDirForwardKeyword_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_8_0, "forward");
				}
			)
		)
		    |
		(
			(
				(
					lv_dir_9_0='message'
					{
						newLeafNode(lv_dir_9_0, grammarAccess.getDirectiveAccess().getDirMessageKeyword_9_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDirectiveRule());
						}
						setWithLastConsumed($current, "dir", lv_dir_9_0, "message");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveAccess().getMessageExpConstExprParserRuleCall_9_1_0());
					}
					lv_messageExp_10_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveRule());
						}
						set(
							$current,
							"messageExp",
							lv_messageExp_10_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				lv_dir_11_0='override'
				{
					newLeafNode(lv_dir_11_0, grammarAccess.getDirectiveAccess().getDirOverrideKeyword_10_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_11_0, "override");
				}
			)
		)
		    |
		(
			(
				lv_dir_12_0='overload'
				{
					newLeafNode(lv_dir_12_0, grammarAccess.getDirectiveAccess().getDirOverloadKeyword_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_12_0, "overload");
				}
			)
		)
		    |
		(
			(
				lv_dir_13_0='pascal'
				{
					newLeafNode(lv_dir_13_0, grammarAccess.getDirectiveAccess().getDirPascalKeyword_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_13_0, "pascal");
				}
			)
		)
		    |
		(
			(
				lv_dir_14_0='reintroduce'
				{
					newLeafNode(lv_dir_14_0, grammarAccess.getDirectiveAccess().getDirReintroduceKeyword_13_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_14_0, "reintroduce");
				}
			)
		)
		    |
		(
			(
				lv_dir_15_0='safecall'
				{
					newLeafNode(lv_dir_15_0, grammarAccess.getDirectiveAccess().getDirSafecallKeyword_14_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_15_0, "safecall");
				}
			)
		)
		    |
		(
			(
				lv_dir_16_0='stdcall'
				{
					newLeafNode(lv_dir_16_0, grammarAccess.getDirectiveAccess().getDirStdcallKeyword_15_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_16_0, "stdcall");
				}
			)
		)
		    |
		(
			(
				lv_dir_17_0='varargs'
				{
					newLeafNode(lv_dir_17_0, grammarAccess.getDirectiveAccess().getDirVarargsKeyword_16_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_17_0, "varargs");
				}
			)
		)
		    |
		(
			(
				lv_dir_18_0='local'
				{
					newLeafNode(lv_dir_18_0, grammarAccess.getDirectiveAccess().getDirLocalKeyword_17_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_18_0, "local");
				}
			)
		)
		    |
		(
			(
				lv_dir_19_0='abstract'
				{
					newLeafNode(lv_dir_19_0, grammarAccess.getDirectiveAccess().getDirAbstractKeyword_18_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
					setWithLastConsumed($current, "dir", lv_dir_19_0, "abstract");
				}
			)
		)
	)
;

// Entry rule entryRuleobjectType
entryRuleobjectType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectTypeRule()); }
	iv_ruleobjectType=ruleobjectType
	{ $current=$iv_ruleobjectType.current; }
	EOF;

// Rule objectType
ruleobjectType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectTypeAccess().getObjectTypeAction_0(),
					$current);
			}
		)
		otherlv_1='object'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectTypeAccess().getObjectKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectTypeAccess().getHeritageObjHeritageParserRuleCall_2_0());
				}
				lv_heritage_2_0=ruleobjHeritage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectTypeRule());
					}
					set(
						$current,
						"heritage",
						lv_heritage_2_0,
						"org.xtext.example.delphi.Delphi.objHeritage");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectTypeAccess().getFieldListObjFieldListParserRuleCall_3_0());
				}
				lv_fieldList_3_0=ruleobjFieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectTypeRule());
					}
					set(
						$current,
						"fieldList",
						lv_fieldList_3_0,
						"org.xtext.example.delphi.Delphi.objFieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectTypeAccess().getMethodListMethodListParserRuleCall_4_0());
				}
				lv_methodList_4_0=rulemethodList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectTypeRule());
					}
					set(
						$current,
						"methodList",
						lv_methodList_4_0,
						"org.xtext.example.delphi.Delphi.methodList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getObjectTypeAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleobjHeritage
entryRuleobjHeritage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjHeritageRule()); }
	iv_ruleobjHeritage=ruleobjHeritage
	{ $current=$iv_ruleobjHeritage.current; }
	EOF;

// Rule objHeritage
ruleobjHeritage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getObjHeritageAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjHeritageAccess().getIdQualIdParserRuleCall_1_0());
				}
				lv_id_1_0=rulequalId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjHeritageRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.qualId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getObjHeritageAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulemethodList
entryRulemethodList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodListRule()); }
	iv_rulemethodList=rulemethodList
	{ $current=$iv_rulemethodList.current; }
	EOF;

// Rule methodList
rulemethodList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodListAccess().getHeadingMethodHeadingParserRuleCall_0_0_0());
					}
					lv_heading_0_0=rulemethodHeading
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodListRule());
						}
						set(
							$current,
							"heading",
							lv_heading_0_0,
							"org.xtext.example.delphi.Delphi.methodHeading");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1=';'
				{
					newLeafNode(otherlv_1, grammarAccess.getMethodListAccess().getSemicolonKeyword_0_1_0());
				}
				otherlv_2='virtual'
				{
					newLeafNode(otherlv_2, grammarAccess.getMethodListAccess().getVirtualKeyword_0_1_1());
				}
			)?
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getMethodListAccess().getSemicolonKeyword_0_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodListAccess().getDirectiveDirectiveParserRuleCall_0_2_1_0());
						}
						lv_directive_4_0=ruledirective
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodListRule());
							}
							add(
								$current,
								"directive",
								lv_directive_4_0,
								"org.xtext.example.delphi.Delphi.directive");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getMethodListAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRulemethodHeading
entryRulemethodHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodHeadingRule()); }
	iv_rulemethodHeading=rulemethodHeading
	{ $current=$iv_rulemethodHeading.current; }
	EOF;

// Rule methodHeading
rulemethodHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMethodHeadingAccess().getProcedureHeadingParserRuleCall_0());
		}
		this_procedureHeading_0=ruleprocedureHeading
		{
			$current = $this_procedureHeading_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMethodHeadingAccess().getFunctionHeadingParserRuleCall_1());
		}
		this_functionHeading_1=rulefunctionHeading
		{
			$current = $this_functionHeading_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMethodHeadingAccess().getConstructorHeadingParserRuleCall_2());
		}
		this_constructorHeading_2=ruleconstructorHeading
		{
			$current = $this_constructorHeading_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMethodHeadingAccess().getDestructorHeadingParserRuleCall_3());
		}
		this_destructorHeading_3=ruledestructorHeading
		{
			$current = $this_destructorHeading_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleconstructorHeading
entryRuleconstructorHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructorHeadingRule()); }
	iv_ruleconstructorHeading=ruleconstructorHeading
	{ $current=$iv_ruleconstructorHeading.current; }
	EOF;

// Rule constructorHeading
ruleconstructorHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constructor'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstructorHeadingAccess().getConstructorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructorHeadingAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_1_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructorHeadingRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructorHeadingAccess().getFormalParamsFormalParametersParserRuleCall_2_0());
				}
				lv_formalParams_2_0=ruleformalParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructorHeadingRule());
					}
					set(
						$current,
						"formalParams",
						lv_formalParams_2_0,
						"org.xtext.example.delphi.Delphi.formalParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuledestructorHeading
entryRuledestructorHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDestructorHeadingRule()); }
	iv_ruledestructorHeading=ruledestructorHeading
	{ $current=$iv_ruledestructorHeading.current; }
	EOF;

// Rule destructorHeading
ruledestructorHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='destructor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDestructorHeadingAccess().getDestructorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDestructorHeadingAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_1_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDestructorHeadingRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDestructorHeadingAccess().getFormalParamsFormalParametersParserRuleCall_2_0());
				}
				lv_formalParams_2_0=ruleformalParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDestructorHeadingRule());
					}
					set(
						$current,
						"formalParams",
						lv_formalParams_2_0,
						"org.xtext.example.delphi.Delphi.formalParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleobjFieldList
entryRuleobjFieldList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjFieldListRule()); }
	iv_ruleobjFieldList=ruleobjFieldList
	{ $current=$iv_ruleobjFieldList.current; }
	EOF;

// Rule objFieldList
ruleobjFieldList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getObjFieldListAccess().getIdentListParserRuleCall_0_0());
			}
			this_identList_0=ruleidentList
			{
				$current = $this_identList_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getObjFieldListAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObjFieldListAccess().getTypeTypeParserRuleCall_0_2_0());
					}
					lv_type_2_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjFieldListRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"org.xtext.example.delphi.Delphi.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getObjFieldListAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleinitSection
entryRuleinitSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitSectionRule()); }
	iv_ruleinitSection=ruleinitSection
	{ $current=$iv_ruleinitSection.current; }
	EOF;

// Rule initSection
ruleinitSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getInitSectionAccess().getInitSectionAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='initialization'
				{
					newLeafNode(otherlv_1, grammarAccess.getInitSectionAccess().getInitializationKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInitSectionAccess().getStmtListStmtListParserRuleCall_1_0_1_0());
						}
						lv_stmtList_2_0=rulestmtList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInitSectionRule());
							}
							set(
								$current,
								"stmtList",
								lv_stmtList_2_0,
								"org.xtext.example.delphi.Delphi.stmtList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3='finalization'
					{
						newLeafNode(otherlv_3, grammarAccess.getInitSectionAccess().getFinalizationKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getInitSectionAccess().getEndStmtListStmtListParserRuleCall_1_0_2_1_0());
							}
							lv_endStmtList_4_0=rulestmtList
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getInitSectionRule());
								}
								set(
									$current,
									"endStmtList",
									lv_endStmtList_4_0,
									"org.xtext.example.delphi.Delphi.stmtList");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
				otherlv_5='end'
				{
					newLeafNode(otherlv_5, grammarAccess.getInitSectionAccess().getEndKeyword_1_0_3());
				}
			)
			    |
			(
				otherlv_6='begin'
				{
					newLeafNode(otherlv_6, grammarAccess.getInitSectionAccess().getBeginKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInitSectionAccess().getStmtListStmtListParserRuleCall_1_1_1_0());
						}
						lv_stmtList_7_0=rulestmtList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInitSectionRule());
							}
							set(
								$current,
								"stmtList",
								lv_stmtList_7_0,
								"org.xtext.example.delphi.Delphi.stmtList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8='end'
				{
					newLeafNode(otherlv_8, grammarAccess.getInitSectionAccess().getEndKeyword_1_1_2());
				}
			)
			    |
			otherlv_9='end'
			{
				newLeafNode(otherlv_9, grammarAccess.getInitSectionAccess().getEndKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleclassType
entryRuleclassType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassTypeRule()); }
	iv_ruleclassType=ruleclassType
	{ $current=$iv_ruleclassType.current; }
	EOF;

// Rule classType
ruleclassType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getClassTypeAccess().getClassTypeAction_0(),
					$current);
			}
		)
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassTypeAccess().getClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassTypeAccess().getHeritageClassHeritageParserRuleCall_2_0());
				}
				lv_heritage_2_0=ruleclassHeritage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassTypeRule());
					}
					set(
						$current,
						"heritage",
						lv_heritage_2_0,
						"org.xtext.example.delphi.Delphi.classHeritage");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassTypeAccess().getVisibilityClassVisibilityParserRuleCall_3_0());
				}
				lv_visibility_3_0=ruleclassVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassTypeRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_3_0,
						"org.xtext.example.delphi.Delphi.classVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassTypeAccess().getFieldListClassFieldListParserRuleCall_4_0());
				}
				lv_fieldList_4_0=ruleclassFieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassTypeRule());
					}
					set(
						$current,
						"fieldList",
						lv_fieldList_4_0,
						"org.xtext.example.delphi.Delphi.classFieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassTypeAccess().getMethodListClassMethodListParserRuleCall_5_0());
				}
				lv_methodList_5_0=ruleclassMethodList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassTypeRule());
					}
					set(
						$current,
						"methodList",
						lv_methodList_5_0,
						"org.xtext.example.delphi.Delphi.classMethodList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassTypeAccess().getPropListClassPropertyListParserRuleCall_6_0());
				}
				lv_propList_6_0=ruleclassPropertyList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassTypeRule());
					}
					set(
						$current,
						"propList",
						lv_propList_6_0,
						"org.xtext.example.delphi.Delphi.classPropertyList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getClassTypeAccess().getEndKeyword_7());
		}
	)
;

// Entry rule entryRuleclassHeritage
entryRuleclassHeritage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassHeritageRule()); }
	iv_ruleclassHeritage=ruleclassHeritage
	{ $current=$iv_ruleclassHeritage.current; }
	EOF;

// Rule classHeritage
ruleclassHeritage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getClassHeritageAccess().getLeftParenthesisKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getClassHeritageAccess().getIdentListParserRuleCall_1());
		}
		this_identList_1=ruleidentList
		{
			$current = $this_identList_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getClassHeritageAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleclassVisibility
entryRuleclassVisibility returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClassVisibilityRule()); }
	iv_ruleclassVisibility=ruleclassVisibility
	{ $current=$iv_ruleclassVisibility.current.getText(); }
	EOF;

// Rule classVisibility
ruleclassVisibility returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='public'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassVisibilityAccess().getPublicKeyword_0());
		}
		    |
		kw='protected'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassVisibilityAccess().getProtectedKeyword_1());
		}
		    |
		kw='private'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassVisibilityAccess().getPrivateKeyword_2());
		}
		    |
		kw='published'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassVisibilityAccess().getPublishedKeyword_3());
		}
	)
;

// Entry rule entryRuleclassFieldList
entryRuleclassFieldList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassFieldListRule()); }
	iv_ruleclassFieldList=ruleclassFieldList
	{ $current=$iv_ruleclassFieldList.current; }
	EOF;

// Rule classFieldList
ruleclassFieldList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getClassFieldListAccess().getFieldClassFieldParserRuleCall_0());
			}
			lv_field_0_0=ruleclassField
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getClassFieldListRule());
				}
				add(
					$current,
					"field",
					lv_field_0_0,
					"org.xtext.example.delphi.Delphi.classField");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleclassField
entryRuleclassField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassFieldRule()); }
	iv_ruleclassField=ruleclassField
	{ $current=$iv_ruleclassField.current; }
	EOF;

// Rule classField
ruleclassField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClassFieldAccess().getVisibilityClassVisibilityParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleclassVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassFieldRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtext.example.delphi.Delphi.classVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassFieldAccess().getFieldListObjFieldListParserRuleCall_1_0());
				}
				lv_fieldList_1_0=ruleobjFieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassFieldRule());
					}
					set(
						$current,
						"fieldList",
						lv_fieldList_1_0,
						"org.xtext.example.delphi.Delphi.objFieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleclassMethodList
entryRuleclassMethodList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassMethodListRule()); }
	iv_ruleclassMethodList=ruleclassMethodList
	{ $current=$iv_ruleclassMethodList.current; }
	EOF;

// Rule classMethodList
ruleclassMethodList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getClassMethodListAccess().getMetodClassMethodParserRuleCall_0());
			}
			lv_metod_0_0=ruleclassMethod
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getClassMethodListRule());
				}
				add(
					$current,
					"metod",
					lv_metod_0_0,
					"org.xtext.example.delphi.Delphi.classMethod");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleclassMethod
entryRuleclassMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassMethodRule()); }
	iv_ruleclassMethod=ruleclassMethod
	{ $current=$iv_ruleclassMethod.current; }
	EOF;

// Rule classMethod
ruleclassMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClassMethodAccess().getVisibilityClassVisibilityParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleclassVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassMethodRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtext.example.delphi.Delphi.classVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassMethodAccess().getMethodListMethodListParserRuleCall_1_0());
				}
				lv_methodList_1_0=rulemethodList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassMethodRule());
					}
					set(
						$current,
						"methodList",
						lv_methodList_1_0,
						"org.xtext.example.delphi.Delphi.methodList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleclassPropertyList
entryRuleclassPropertyList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassPropertyListRule()); }
	iv_ruleclassPropertyList=ruleclassPropertyList
	{ $current=$iv_ruleclassPropertyList.current; }
	EOF;

// Rule classPropertyList
ruleclassPropertyList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getClassPropertyListAccess().getPropertyClassPropertyParserRuleCall_0());
			}
			lv_property_0_0=ruleclassProperty
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getClassPropertyListRule());
				}
				add(
					$current,
					"property",
					lv_property_0_0,
					"org.xtext.example.delphi.Delphi.classProperty");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleclassProperty
entryRuleclassProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassPropertyRule()); }
	iv_ruleclassProperty=ruleclassProperty
	{ $current=$iv_ruleclassProperty.current; }
	EOF;

// Rule classProperty
ruleclassProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClassPropertyAccess().getVisibilityClassVisibilityParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleclassVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassPropertyRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtext.example.delphi.Delphi.classVisibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClassPropertyAccess().getVisibilityClassVisibilityParserRuleCall_1_0_0());
					}
					lv_visibility_1_0=ruleclassVisibility
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassPropertyRule());
						}
						set(
							$current,
							"visibility",
							lv_visibility_1_0,
							"org.xtext.example.delphi.Delphi.classVisibility");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getClassPropertyAccess().getPropListPropertyListParserRuleCall_1_1_0());
					}
					lv_propList_2_0=rulepropertyList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassPropertyRule());
						}
						set(
							$current,
							"propList",
							lv_propList_2_0,
							"org.xtext.example.delphi.Delphi.propertyList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulepropertyList
entryRulepropertyList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyListRule()); }
	iv_rulepropertyList=rulepropertyList
	{ $current=$iv_rulepropertyList.current; }
	EOF;

// Rule propertyList
rulepropertyList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='property'
		{
			newLeafNode(otherlv_0, grammarAccess.getPropertyListAccess().getPropertyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyListAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_1_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyListRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyListAccess().getInterfacePropertyInterfaceParserRuleCall_2_0());
				}
				lv_interface_2_0=rulepropertyInterface
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyListRule());
					}
					set(
						$current,
						"interface",
						lv_interface_2_0,
						"org.xtext.example.delphi.Delphi.propertyInterface");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyListAccess().getSpecifiersPropertySpecifiersParserRuleCall_3_0());
				}
				lv_specifiers_3_0=rulepropertySpecifiers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyListRule());
					}
					set(
						$current,
						"specifiers",
						lv_specifiers_3_0,
						"org.xtext.example.delphi.Delphi.propertySpecifiers");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyListAccess().getPortPortabilityDirectiveParserRuleCall_4_0());
				}
				lv_port_4_0=ruleportabilityDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyListRule());
					}
					set(
						$current,
						"port",
						lv_port_4_0,
						"org.xtext.example.delphi.Delphi.portabilityDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getPropertyListAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulepropertyInterface
entryRulepropertyInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyInterfaceRule()); }
	iv_rulepropertyInterface=rulepropertyInterface
	{ $current=$iv_rulepropertyInterface.current; }
	EOF;

// Rule propertyInterface
rulepropertyInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyInterfaceAccess().getParamListPropertyParameterListParserRuleCall_0_0());
				}
				lv_paramList_0_0=rulepropertyParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyInterfaceRule());
					}
					set(
						$current,
						"paramList",
						lv_paramList_0_0,
						"org.xtext.example.delphi.Delphi.propertyParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPropertyInterfaceAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyInterfaceAccess().getIdIdentParserRuleCall_2_0());
				}
				lv_id_2_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyInterfaceRule());
					}
					set(
						$current,
						"id",
						lv_id_2_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulepropertyParameterList
entryRulepropertyParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyParameterListRule()); }
	iv_rulepropertyParameterList=rulepropertyParameterList
	{ $current=$iv_rulepropertyParameterList.current; }
	EOF;

// Rule propertyParameterList
rulepropertyParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getPropertyParameterListAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyParameterListAccess().getIdListIdentListParserRuleCall_1_0());
				}
				lv_idList_1_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyParameterListRule());
					}
					add(
						$current,
						"idList",
						lv_idList_1_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPropertyParameterListAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyParameterListAccess().getTypeRefTypeIdParserRuleCall_3_0());
				}
				lv_typeRef_3_0=ruletypeId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyParameterListRule());
					}
					add(
						$current,
						"typeRef",
						lv_typeRef_3_0,
						"org.xtext.example.delphi.Delphi.typeId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getPropertyParameterListAccess().getSemicolonKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyParameterListAccess().getIdListIdentListParserRuleCall_5_0_0());
					}
					lv_idList_5_0=ruleidentList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyParameterListRule());
						}
						add(
							$current,
							"idList",
							lv_idList_5_0,
							"org.xtext.example.delphi.Delphi.identList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getPropertyParameterListAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyParameterListAccess().getTypeRefTypeIdParserRuleCall_5_2_0());
					}
					lv_typeRef_7_0=ruletypeId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyParameterListRule());
						}
						add(
							$current,
							"typeRef",
							lv_typeRef_7_0,
							"org.xtext.example.delphi.Delphi.typeId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getPropertyParameterListAccess().getSemicolonKeyword_5_3());
			}
		)*
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getPropertyParameterListAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRulepropertySpecifiers
entryRulepropertySpecifiers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertySpecifiersRule()); }
	iv_rulepropertySpecifiers=rulepropertySpecifiers
	{ $current=$iv_rulepropertySpecifiers.current; }
	EOF;

// Rule propertySpecifiers
rulepropertySpecifiers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getPropertySpecifiersAccess().getPropertySpecifiersAction_0(),
					$current);
			}
		)
		(
			otherlv_1='index'
			{
				newLeafNode(otherlv_1, grammarAccess.getPropertySpecifiersAccess().getIndexKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySpecifiersAccess().getIndexConstExprParserRuleCall_1_1_0());
					}
					lv_index_2_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySpecifiersRule());
						}
						set(
							$current,
							"index",
							lv_index_2_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_3='read'
			{
				newLeafNode(otherlv_3, grammarAccess.getPropertySpecifiersAccess().getReadKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySpecifiersAccess().getReadIdIdentParserRuleCall_2_1_0());
					}
					lv_readId_4_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySpecifiersRule());
						}
						set(
							$current,
							"readId",
							lv_readId_4_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='write'
			{
				newLeafNode(otherlv_5, grammarAccess.getPropertySpecifiersAccess().getWriteKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySpecifiersAccess().getWriteIdIdentParserRuleCall_3_1_0());
					}
					lv_writeId_6_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySpecifiersRule());
						}
						set(
							$current,
							"writeId",
							lv_writeId_6_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='stored'
			{
				newLeafNode(otherlv_7, grammarAccess.getPropertySpecifiersAccess().getStoredKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPropertySpecifiersAccess().getStoreIdIdentParserRuleCall_4_1_0_0());
						}
						lv_storeId_8_0=ruleident
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPropertySpecifiersRule());
							}
							set(
								$current,
								"storeId",
								lv_storeId_8_0,
								"org.xtext.example.delphi.Delphi.ident");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getPropertySpecifiersAccess().getStoreExpConstExprParserRuleCall_4_1_1_0());
						}
						lv_storeExp_9_0=ruleconstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPropertySpecifiersRule());
							}
							set(
								$current,
								"storeExp",
								lv_storeExp_9_0,
								"org.xtext.example.delphi.Delphi.constExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			(
				otherlv_10='default'
				{
					newLeafNode(otherlv_10, grammarAccess.getPropertySpecifiersAccess().getDefaultKeyword_5_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPropertySpecifiersAccess().getDefaulExpConstExprParserRuleCall_5_0_1_0());
						}
						lv_defaulExp_11_0=ruleconstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPropertySpecifiersRule());
							}
							set(
								$current,
								"defaulExp",
								lv_defaulExp_11_0,
								"org.xtext.example.delphi.Delphi.constExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			otherlv_12='nodefault'
			{
				newLeafNode(otherlv_12, grammarAccess.getPropertySpecifiersAccess().getNodefaultKeyword_5_1());
			}
		)?
		(
			otherlv_13='implements'
			{
				newLeafNode(otherlv_13, grammarAccess.getPropertySpecifiersAccess().getImplementsKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySpecifiersAccess().getImplementTypeIdParserRuleCall_6_1_0());
					}
					lv_implement_14_0=ruletypeId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySpecifiersRule());
						}
						set(
							$current,
							"implement",
							lv_implement_14_0,
							"org.xtext.example.delphi.Delphi.typeId");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleinterfaceType
entryRuleinterfaceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeRule()); }
	iv_ruleinterfaceType=ruleinterfaceType
	{ $current=$iv_ruleinterfaceType.current; }
	EOF;

// Rule interfaceType
ruleinterfaceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceTypeAccess().getHeritageInterfaceHeritageParserRuleCall_1_0());
				}
				lv_heritage_1_0=ruleinterfaceHeritage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceTypeRule());
					}
					set(
						$current,
						"heritage",
						lv_heritage_1_0,
						"org.xtext.example.delphi.Delphi.interfaceHeritage");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceTypeAccess().getMethodListClassMethodListParserRuleCall_2_0());
				}
				lv_methodList_2_0=ruleclassMethodList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceTypeRule());
					}
					set(
						$current,
						"methodList",
						lv_methodList_2_0,
						"org.xtext.example.delphi.Delphi.classMethodList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceTypeAccess().getPropListClassPropertyListParserRuleCall_3_0());
				}
				lv_propList_3_0=ruleclassPropertyList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceTypeRule());
					}
					add(
						$current,
						"propList",
						lv_propList_3_0,
						"org.xtext.example.delphi.Delphi.classPropertyList");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getInterfaceTypeAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleinterfaceHeritage
entryRuleinterfaceHeritage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceHeritageRule()); }
	iv_ruleinterfaceHeritage=ruleinterfaceHeritage
	{ $current=$iv_ruleinterfaceHeritage.current; }
	EOF;

// Rule interfaceHeritage
ruleinterfaceHeritage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getInterfaceHeritageAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceHeritageAccess().getIdListIdentListParserRuleCall_1_0());
				}
				lv_idList_1_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceHeritageRule());
					}
					set(
						$current,
						"idList",
						lv_idList_1_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getInterfaceHeritageAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulerequiresClause
entryRulerequiresClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequiresClauseRule()); }
	iv_rulerequiresClause=rulerequiresClause
	{ $current=$iv_rulerequiresClause.current; }
	EOF;

// Rule requiresClause
rulerequiresClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRequiresClauseAccess().getRequiresClauseAction_0(),
					$current);
			}
		)
		otherlv_1='requires'
		{
			newLeafNode(otherlv_1, grammarAccess.getRequiresClauseAccess().getRequiresKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequiresClauseAccess().getIdListIdentListParserRuleCall_2_0());
				}
				lv_idList_2_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequiresClauseRule());
					}
					add(
						$current,
						"idList",
						lv_idList_2_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getRequiresClauseAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulecontainsClause
entryRulecontainsClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainsClauseRule()); }
	iv_rulecontainsClause=rulecontainsClause
	{ $current=$iv_rulecontainsClause.current; }
	EOF;

// Rule containsClause
rulecontainsClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getContainsClauseAccess().getContainsClauseAction_0(),
					$current);
			}
		)
		otherlv_1='contains'
		{
			newLeafNode(otherlv_1, grammarAccess.getContainsClauseAccess().getContainsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsClauseAccess().getIdListIdentListParserRuleCall_2_0());
				}
				lv_idList_2_0=ruleidentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsClauseRule());
					}
					add(
						$current,
						"idList",
						lv_idList_2_0,
						"org.xtext.example.delphi.Delphi.identList");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getContainsClauseAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleidentList
entryRuleidentList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentListRule()); }
	iv_ruleidentList=ruleidentList
	{ $current=$iv_ruleidentList.current; }
	EOF;

// Rule identList
ruleidentList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIdentListAccess().getIdsIdentParserRuleCall_0_0());
				}
				lv_ids_0_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdentListRule());
					}
					add(
						$current,
						"ids",
						lv_ids_0_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getIdentListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIdentListAccess().getIdsIdentParserRuleCall_1_1_0());
					}
					lv_ids_2_0=ruleident
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIdentListRule());
						}
						add(
							$current,
							"ids",
							lv_ids_2_0,
							"org.xtext.example.delphi.Delphi.ident");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulequalId
entryRulequalId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualIdRule()); }
	iv_rulequalId=rulequalId
	{ $current=$iv_rulequalId.current; }
	EOF;

// Rule qualId
rulequalId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getQualIdAccess().getUnitIdUnitIdParserRuleCall_0_0_0());
					}
					lv_unitId_0_0=ruleunitId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQualIdRule());
						}
						set(
							$current,
							"unitId",
							lv_unitId_0_0,
							"org.xtext.example.delphi.Delphi.unitId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getQualIdAccess().getFullStopKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQualIdAccess().getIdIdentParserRuleCall_1_0());
				}
				lv_id_2_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQualIdRule());
					}
					set(
						$current,
						"id",
						lv_id_2_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeId
entryRuletypeId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeIdRule()); }
	iv_ruletypeId=ruletypeId
	{ $current=$iv_ruletypeId.current; }
	EOF;

// Rule typeId
ruletypeId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeIdAccess().getUnitIdUnitIdParserRuleCall_0_0_0());
					}
					lv_unitId_0_0=ruleunitId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeIdRule());
						}
						set(
							$current,
							"unitId",
							lv_unitId_0_0,
							"org.xtext.example.delphi.Delphi.unitId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeIdAccess().getFullStopKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeIdAccess().getIdQualIdParserRuleCall_1_0());
				}
				lv_id_2_0=rulequalId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeIdRule());
					}
					set(
						$current,
						"id",
						lv_id_2_0,
						"org.xtext.example.delphi.Delphi.qualId");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleident
entryRuleident returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentRule()); }
	iv_ruleident=ruleident
	{ $current=$iv_ruleident.current; }
	EOF;

// Rule ident
ruleident returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getIdentAccess().getMultipleIdAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_id_1_0=RULE_ID
					{
						newLeafNode(lv_id_1_0, grammarAccess.getIdentAccess().getIdIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentRule());
						}
						addWithLastConsumed(
							$current,
							"id",
							lv_id_1_0,
							"org.xtext.example.delphi.Delphi.ID");
					}
				)
			)
			(
				otherlv_2='.'
				{
					newLeafNode(otherlv_2, grammarAccess.getIdentAccess().getFullStopKeyword_0_2_0());
				}
				(
					(
						lv_id_3_0=RULE_ID
						{
							newLeafNode(lv_id_3_0, grammarAccess.getIdentAccess().getIdIDTerminalRuleCall_0_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getIdentRule());
							}
							addWithLastConsumed(
								$current,
								"id",
								lv_id_3_0,
								"org.xtext.example.delphi.Delphi.ID");
						}
					)
				)
			)*
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getIdentAccess().getReservedIdAction_1_0(),
						$current);
				}
			)
			otherlv_5='&'
			{
				newLeafNode(otherlv_5, grammarAccess.getIdentAccess().getAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIdentAccess().getReservedWordReservedWordParserRuleCall_1_2_0());
					}
					lv_reservedWord_6_0=rulereservedWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIdentRule());
						}
						set(
							$current,
							"reservedWord",
							lv_reservedWord_6_0,
							"org.xtext.example.delphi.Delphi.reservedWord");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getIdentAccess().getMineIDAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_first_8_0=RULE_ID
					{
						newLeafNode(lv_first_8_0, grammarAccess.getIdentAccess().getFirstIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentRule());
						}
						setWithLastConsumed(
							$current,
							"first",
							lv_first_8_0,
							"org.xtext.example.delphi.Delphi.ID");
					}
				)
			)
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getIdentAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					lv_second_10_0=RULE_ID
					{
						newLeafNode(lv_second_10_0, grammarAccess.getIdentAccess().getSecondIDTerminalRuleCall_2_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentRule());
						}
						setWithLastConsumed(
							$current,
							"second",
							lv_second_10_0,
							"org.xtext.example.delphi.Delphi.ID");
					}
				)
			)
			otherlv_11='^'
			{
				newLeafNode(otherlv_11, grammarAccess.getIdentAccess().getCircumflexAccentKeyword_2_4());
			}
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getIdentAccess().getRightParenthesisKeyword_2_5());
			}
		)
	)
;

// Entry rule entryRulereservedWord
entryRulereservedWord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReservedWordRule()); }
	iv_rulereservedWord=rulereservedWord
	{ $current=$iv_rulereservedWord.current; }
	EOF;

// Rule reservedWord
rulereservedWord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getReservedWordAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getReservedWordRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.xtext.example.delphi.Delphi.ID");
			}
		)
	)
;

// Entry rule entryRuleconstExpr
entryRuleconstExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstExprRule()); }
	iv_ruleconstExpr=ruleconstExpr
	{ $current=$iv_ruleconstExpr.current; }
	EOF;

// Rule constExpr
ruleconstExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstExprAccess().getConstExpAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstExprAccess().getExpExpressionParserRuleCall_0_1_0());
					}
					lv_exp_1_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstExprRule());
						}
						set(
							$current,
							"exp",
							lv_exp_1_0,
							"org.xtext.example.delphi.Delphi.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstExprAccess().getMultipleConstExpAction_1_0(),
						$current);
				}
			)
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getConstExprAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstExprAccess().getExpsConstExprParserRuleCall_1_2_0());
					}
					lv_exps_4_0=ruleconstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstExprRule());
						}
						add(
							$current,
							"exps",
							lv_exps_4_0,
							"org.xtext.example.delphi.Delphi.constExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getConstExprAccess().getCommaKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConstExprAccess().getExpsConstExprParserRuleCall_1_3_1_0());
						}
						lv_exps_6_0=ruleconstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstExprRule());
							}
							add(
								$current,
								"exps",
								lv_exps_6_0,
								"org.xtext.example.delphi.Delphi.constExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getConstExprAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstExprAccess().getRecordConstExpAction_2_0(),
						$current);
				}
			)
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getConstExprAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstExprAccess().getExpsRecordConstExprParserRuleCall_2_2_0());
					}
					lv_exps_10_0=rulerecordConstExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstExprRule());
						}
						add(
							$current,
							"exps",
							lv_exps_10_0,
							"org.xtext.example.delphi.Delphi.recordConstExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getConstExprAccess().getCommaKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConstExprAccess().getExpsRecordConstExprParserRuleCall_2_3_1_0());
						}
						lv_exps_12_0=rulerecordConstExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstExprRule());
							}
							add(
								$current,
								"exps",
								lv_exps_12_0,
								"org.xtext.example.delphi.Delphi.recordConstExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_13=')'
			{
				newLeafNode(otherlv_13, grammarAccess.getConstExprAccess().getRightParenthesisKeyword_2_4());
			}
		)
	)
;

// Entry rule entryRulerecordConstExpr
entryRulerecordConstExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordConstExprRule()); }
	iv_rulerecordConstExpr=rulerecordConstExpr
	{ $current=$iv_rulerecordConstExpr.current; }
	EOF;

// Rule recordConstExpr
rulerecordConstExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordConstExprAccess().getIdIdentParserRuleCall_0_0());
				}
				lv_id_0_0=ruleident
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordConstExprRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"org.xtext.example.delphi.Delphi.ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordConstExprAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordConstExprAccess().getConstExpConstExprParserRuleCall_2_0());
				}
				lv_constExp_2_0=ruleconstExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordConstExprRule());
					}
					set(
						$current,
						"constExp",
						lv_constExp_2_0,
						"org.xtext.example.delphi.Delphi.constExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunitId
entryRuleunitId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitIdRule()); }
	iv_ruleunitId=ruleunitId
	{ $current=$iv_ruleunitId.current; }
	EOF;

// Rule unitId
ruleunitId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getUnitIdAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUnitIdRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.xtext.example.delphi.Delphi.ID");
			}
		)
	)
;

// Entry rule entryRulelabelId
entryRulelabelId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLabelIdRule()); }
	iv_rulelabelId=rulelabelId
	{ $current=$iv_rulelabelId.current.getText(); }
	EOF;

// Rule labelId
rulelabelId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getLabelIdAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getLabelIdAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_HEX_2=RULE_HEX
		{
			$current.merge(this_HEX_2);
		}
		{
			newLeafNode(this_HEX_2, grammarAccess.getLabelIdAccess().getHEXTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulenumber
entryRulenumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_rulenumber=rulenumber
	{ $current=$iv_rulenumber.current.getText(); }
	EOF;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0());
		}
		    |
		(
			kw='#'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getNumberSignKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRulestring
entryRulestring returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringRule()); }
	iv_rulestring=rulestring
	{ $current=$iv_rulestring.current.getText(); }
	EOF;

// Rule string
rulestring returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_QVALUE_0=RULE_QVALUE
		{
			$current.merge(this_QVALUE_0);
		}
		{
			newLeafNode(this_QVALUE_0, grammarAccess.getStringAccess().getQVALUETerminalRuleCall_0());
		}
		    |
		this_DQVALUE_1=RULE_DQVALUE
		{
			$current.merge(this_DQVALUE_1);
		}
		{
			newLeafNode(this_DQVALUE_1, grammarAccess.getStringAccess().getDQVALUETerminalRuleCall_1());
		}
	)
;

fragment RULE_SLASH : '\\';

fragment RULE_QUOTE : '\'';

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'$'|'#'|RULE_SLASH|'-')*;

fragment RULE_DOUBLEQUOTE : '"';

RULE_DQVALUE : RULE_DOUBLEQUOTE ('\\' .|~(('\\'|RULE_DOUBLEQUOTE)))* RULE_DOUBLEQUOTE;

RULE_QVALUE : RULE_QUOTE ('\\' .|~(('\\'|RULE_QUOTE)))* RULE_QUOTE;

RULE_HEX : ('+'|'-')? '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('+'|'-')? ('0'..'9')+;

RULE_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_MORECOMMENT : '{' ( options {greedy=false;} : . )*'}';

RULE_LINE_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\r'|'\t'|'\f'|'\n');
