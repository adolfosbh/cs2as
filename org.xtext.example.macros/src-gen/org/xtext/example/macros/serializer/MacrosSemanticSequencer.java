/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.macros.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.macros.macros.MacrosPackage;
import org.xtext.example.macros.macros.MainRule;
import org.xtext.example.macros.macros.Tab_Statement;
import org.xtext.example.macros.macros.Tag_Statement;
import org.xtext.example.macros.macros.Tag_attr;
import org.xtext.example.macros.macros.Url_Statement;
import org.xtext.example.macros.macros.Version_Statement;
import org.xtext.example.macros.macros.Version_attr;
import org.xtext.example.macros.macros.tab_attr;
import org.xtext.example.macros.macros.url_attr;
import org.xtext.example.macros.services.MacrosGrammarAccess;

@SuppressWarnings("all")
public class MacrosSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MacrosGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MacrosPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MacrosPackage.MAIN_RULE:
				sequence_MainRule(context, (MainRule) semanticObject); 
				return; 
			case MacrosPackage.TAB_STATEMENT:
				sequence_Tab_Statement(context, (Tab_Statement) semanticObject); 
				return; 
			case MacrosPackage.TAG_STATEMENT:
				sequence_Tag_Statement(context, (Tag_Statement) semanticObject); 
				return; 
			case MacrosPackage.TAG_ATTR:
				sequence_Tag_attr(context, (Tag_attr) semanticObject); 
				return; 
			case MacrosPackage.URL_STATEMENT:
				sequence_Url_Statement(context, (Url_Statement) semanticObject); 
				return; 
			case MacrosPackage.VERSION_STATEMENT:
				sequence_Version_Statement(context, (Version_Statement) semanticObject); 
				return; 
			case MacrosPackage.VERSION_ATTR:
				sequence_Version_attr(context, (Version_attr) semanticObject); 
				return; 
			case MacrosPackage.TAB_ATTR:
				sequence_tab_attr(context, (tab_attr) semanticObject); 
				return; 
			case MacrosPackage.URL_ATTR:
				sequence_url_attr(context, (url_attr) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MainRule returns MainRule
	 *
	 * Constraint:
	 *     ((version=Version_Statement statement+=Statement+) | statement+=Statement+)?
	 */
	protected void sequence_MainRule(ISerializationContext context, MainRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Tab_Statement
	 *     Tab_Statement returns Tab_Statement
	 *
	 * Constraint:
	 *     tabs+=tab_attr*
	 */
	protected void sequence_Tab_Statement(ISerializationContext context, Tab_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Tag_Statement
	 *     Tag_Statement returns Tag_Statement
	 *
	 * Constraint:
	 *     tags+=Tag_attr*
	 */
	protected void sequence_Tag_Statement(ISerializationContext context, Tag_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tag_attr returns Tag_attr
	 *
	 * Constraint:
	 *     ((tag='TYPE' | tag='ATTR' | tag='POS' | tag='CONTENT') value=DQVAL)
	 */
	protected void sequence_Tag_attr(ISerializationContext context, Tag_attr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Url_Statement
	 *     Url_Statement returns Url_Statement
	 *
	 * Constraint:
	 *     urls+=url_attr*
	 */
	protected void sequence_Url_Statement(ISerializationContext context, Url_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Version_Statement returns Version_Statement
	 *
	 * Constraint:
	 *     attribute=Version_attr
	 */
	protected void sequence_Version_Statement(ISerializationContext context, Version_Statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MacrosPackage.Literals.VERSION_STATEMENT__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MacrosPackage.Literals.VERSION_STATEMENT__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVersion_StatementAccess().getAttributeVersion_attrParserRuleCall_2_0(), semanticObject.getAttribute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Version_attr returns Version_attr
	 *
	 * Constraint:
	 *     value=DQVAL
	 */
	protected void sequence_Version_attr(ISerializationContext context, Version_attr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MacrosPackage.Literals.VERSION_ATTR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MacrosPackage.Literals.VERSION_ATTR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVersion_attrAccess().getValueDQVALTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     tab_attr returns tab_attr
	 *
	 * Constraint:
	 *     value=DQVAL
	 */
	protected void sequence_tab_attr(ISerializationContext context, tab_attr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MacrosPackage.Literals.TAB_ATTR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MacrosPackage.Literals.TAB_ATTR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTab_attrAccess().getValueDQVALTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     url_attr returns url_attr
	 *
	 * Constraint:
	 *     value=DQVAL
	 */
	protected void sequence_url_attr(ISerializationContext context, url_attr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MacrosPackage.Literals.URL_ATTR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MacrosPackage.Literals.URL_ATTR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUrl_attrAccess().getValueDQVALTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
