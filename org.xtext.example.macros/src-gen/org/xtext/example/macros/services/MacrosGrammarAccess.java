/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.macros.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MacrosGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MainRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.MainRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVersionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVersionVersion_StatementParserRuleCall_0_0 = (RuleCall)cVersionAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//MainRule:
		//	version=Version_Statement? statement+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//version=Version_Statement? statement+=Statement*
		public Group getGroup() { return cGroup; }
		
		//version=Version_Statement?
		public Assignment getVersionAssignment_0() { return cVersionAssignment_0; }
		
		//Version_Statement
		public RuleCall getVersionVersion_StatementParserRuleCall_0_0() { return cVersionVersion_StatementParserRuleCall_0_0; }
		
		//statement+=Statement*
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class Version_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.Version_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersion_StatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVERSIONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeVersion_attrParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		
		//Version_Statement:
		//	{Version_Statement} 'VERSION' attribute=Version_attr;
		@Override public ParserRule getRule() { return rule; }
		
		//{Version_Statement} 'VERSION' attribute=Version_attr
		public Group getGroup() { return cGroup; }
		
		//{Version_Statement}
		public Action getVersion_StatementAction_0() { return cVersion_StatementAction_0; }
		
		//'VERSION'
		public Keyword getVERSIONKeyword_1() { return cVERSIONKeyword_1; }
		
		//attribute=Version_attr
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//Version_attr
		public RuleCall getAttributeVersion_attrParserRuleCall_2_0() { return cAttributeVersion_attrParserRuleCall_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTag_StatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUrl_StatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTab_StatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	Tag_Statement | Url_Statement | Tab_Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//Tag_Statement | Url_Statement | Tab_Statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Tag_Statement
		public RuleCall getTag_StatementParserRuleCall_0() { return cTag_StatementParserRuleCall_0; }
		
		//Url_Statement
		public RuleCall getUrl_StatementParserRuleCall_1() { return cUrl_StatementParserRuleCall_1; }
		
		//Tab_Statement
		public RuleCall getTab_StatementParserRuleCall_2() { return cTab_StatementParserRuleCall_2; }
	}
	public class Tag_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.Tag_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTag_StatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTAGKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTagsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagsTag_attrParserRuleCall_2_0 = (RuleCall)cTagsAssignment_2.eContents().get(0);
		
		//Tag_Statement:
		//	{Tag_Statement} 'TAG' tags+=Tag_attr*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tag_Statement} 'TAG' tags+=Tag_attr*
		public Group getGroup() { return cGroup; }
		
		//{Tag_Statement}
		public Action getTag_StatementAction_0() { return cTag_StatementAction_0; }
		
		//'TAG'
		public Keyword getTAGKeyword_1() { return cTAGKeyword_1; }
		
		//tags+=Tag_attr*
		public Assignment getTagsAssignment_2() { return cTagsAssignment_2; }
		
		//Tag_attr
		public RuleCall getTagsTag_attrParserRuleCall_2_0() { return cTagsTag_attrParserRuleCall_2_0; }
	}
	public class Url_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.Url_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUrl_StatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cURLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlsUrl_attrParserRuleCall_2_0 = (RuleCall)cUrlsAssignment_2.eContents().get(0);
		
		//Url_Statement:
		//	{Url_Statement} 'URL' urls+=url_attr*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Url_Statement} 'URL' urls+=url_attr*
		public Group getGroup() { return cGroup; }
		
		//{Url_Statement}
		public Action getUrl_StatementAction_0() { return cUrl_StatementAction_0; }
		
		//'URL'
		public Keyword getURLKeyword_1() { return cURLKeyword_1; }
		
		//urls+=url_attr*
		public Assignment getUrlsAssignment_2() { return cUrlsAssignment_2; }
		
		//url_attr
		public RuleCall getUrlsUrl_attrParserRuleCall_2_0() { return cUrlsUrl_attrParserRuleCall_2_0; }
	}
	public class Tab_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.Tab_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTab_StatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTABKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTabsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTabsTab_attrParserRuleCall_2_0 = (RuleCall)cTabsAssignment_2.eContents().get(0);
		
		//Tab_Statement:
		//	{Tab_Statement} 'TAB' tabs+=tab_attr*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tab_Statement} 'TAB' tabs+=tab_attr*
		public Group getGroup() { return cGroup; }
		
		//{Tab_Statement}
		public Action getTab_StatementAction_0() { return cTab_StatementAction_0; }
		
		//'TAB'
		public Keyword getTABKeyword_1() { return cTABKeyword_1; }
		
		//tabs+=tab_attr*
		public Assignment getTabsAssignment_2() { return cTabsAssignment_2; }
		
		//tab_attr
		public RuleCall getTabsTab_attrParserRuleCall_2_0() { return cTabsTab_attrParserRuleCall_2_0; }
	}
	public class Version_attrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.Version_attr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBUILDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDQVALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Version_attr:
		//	'BUILD' '=' value=DQVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'BUILD' '=' value=DQVAL
		public Group getGroup() { return cGroup; }
		
		//'BUILD'
		public Keyword getBUILDKeyword_0() { return cBUILDKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=DQVAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DQVAL
		public RuleCall getValueDQVALTerminalRuleCall_2_0() { return cValueDQVALTerminalRuleCall_2_0; }
	}
	public class Tag_attrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.Tag_attr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTagAlternatives_0_0 = (Alternatives)cTagAssignment_0.eContents().get(0);
		private final Keyword cTagTYPEKeyword_0_0_0 = (Keyword)cTagAlternatives_0_0.eContents().get(0);
		private final Keyword cTagATTRKeyword_0_0_1 = (Keyword)cTagAlternatives_0_0.eContents().get(1);
		private final Keyword cTagPOSKeyword_0_0_2 = (Keyword)cTagAlternatives_0_0.eContents().get(2);
		private final Keyword cTagCONTENTKeyword_0_0_3 = (Keyword)cTagAlternatives_0_0.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDQVALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Tag_attr:
		//	tag=('TYPE' | 'ATTR' | 'POS' | 'CONTENT') '=' value=DQVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//tag=('TYPE' | 'ATTR' | 'POS' | 'CONTENT') '=' value=DQVAL
		public Group getGroup() { return cGroup; }
		
		//tag=('TYPE' | 'ATTR' | 'POS' | 'CONTENT')
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//('TYPE' | 'ATTR' | 'POS' | 'CONTENT')
		public Alternatives getTagAlternatives_0_0() { return cTagAlternatives_0_0; }
		
		//'TYPE'
		public Keyword getTagTYPEKeyword_0_0_0() { return cTagTYPEKeyword_0_0_0; }
		
		//'ATTR'
		public Keyword getTagATTRKeyword_0_0_1() { return cTagATTRKeyword_0_0_1; }
		
		//'POS'
		public Keyword getTagPOSKeyword_0_0_2() { return cTagPOSKeyword_0_0_2; }
		
		//'CONTENT'
		public Keyword getTagCONTENTKeyword_0_0_3() { return cTagCONTENTKeyword_0_0_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=DQVAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DQVAL
		public RuleCall getValueDQVALTerminalRuleCall_2_0() { return cValueDQVALTerminalRuleCall_2_0; }
	}
	public class Url_attrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.url_attr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGOTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDQVALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//url_attr:
		//	'GOTO' '=' value=DQVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'GOTO' '=' value=DQVAL
		public Group getGroup() { return cGroup; }
		
		//'GOTO'
		public Keyword getGOTOKeyword_0() { return cGOTOKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=DQVAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DQVAL
		public RuleCall getValueDQVALTerminalRuleCall_2_0() { return cValueDQVALTerminalRuleCall_2_0; }
	}
	public class Tab_attrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.tab_attr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDQVALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//tab_attr:
		//	'T' '=' value=DQVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'T' '=' value=DQVAL
		public Group getGroup() { return cGroup; }
		
		//'T'
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=DQVAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DQVAL
		public RuleCall getValueDQVALTerminalRuleCall_2_0() { return cValueDQVALTerminalRuleCall_2_0; }
	}
	
	
	private final MainRuleElements pMainRule;
	private final Version_StatementElements pVersion_Statement;
	private final StatementElements pStatement;
	private final Tag_StatementElements pTag_Statement;
	private final Url_StatementElements pUrl_Statement;
	private final Tab_StatementElements pTab_Statement;
	private final Version_attrElements pVersion_attr;
	private final Tag_attrElements pTag_attr;
	private final Url_attrElements pUrl_attr;
	private final Tab_attrElements pTab_attr;
	private final TerminalRule tWS;
	private final TerminalRule tDQVAL;
	
	private final Grammar grammar;

	@Inject
	public MacrosGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pMainRule = new MainRuleElements();
		this.pVersion_Statement = new Version_StatementElements();
		this.pStatement = new StatementElements();
		this.pTag_Statement = new Tag_StatementElements();
		this.pUrl_Statement = new Url_StatementElements();
		this.pTab_Statement = new Tab_StatementElements();
		this.pVersion_attr = new Version_attrElements();
		this.pTag_attr = new Tag_attrElements();
		this.pUrl_attr = new Url_attrElements();
		this.pTab_attr = new Tab_attrElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.WS");
		this.tDQVAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.macros.Macros.DQVAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.macros.Macros".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//MainRule:
	//	version=Version_Statement? statement+=Statement*;
	public MainRuleElements getMainRuleAccess() {
		return pMainRule;
	}
	
	public ParserRule getMainRuleRule() {
		return getMainRuleAccess().getRule();
	}
	
	//Version_Statement:
	//	{Version_Statement} 'VERSION' attribute=Version_attr;
	public Version_StatementElements getVersion_StatementAccess() {
		return pVersion_Statement;
	}
	
	public ParserRule getVersion_StatementRule() {
		return getVersion_StatementAccess().getRule();
	}
	
	//Statement:
	//	Tag_Statement | Url_Statement | Tab_Statement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Tag_Statement:
	//	{Tag_Statement} 'TAG' tags+=Tag_attr*;
	public Tag_StatementElements getTag_StatementAccess() {
		return pTag_Statement;
	}
	
	public ParserRule getTag_StatementRule() {
		return getTag_StatementAccess().getRule();
	}
	
	//Url_Statement:
	//	{Url_Statement} 'URL' urls+=url_attr*;
	public Url_StatementElements getUrl_StatementAccess() {
		return pUrl_Statement;
	}
	
	public ParserRule getUrl_StatementRule() {
		return getUrl_StatementAccess().getRule();
	}
	
	//Tab_Statement:
	//	{Tab_Statement} 'TAB' tabs+=tab_attr*;
	public Tab_StatementElements getTab_StatementAccess() {
		return pTab_Statement;
	}
	
	public ParserRule getTab_StatementRule() {
		return getTab_StatementAccess().getRule();
	}
	
	//Version_attr:
	//	'BUILD' '=' value=DQVAL;
	public Version_attrElements getVersion_attrAccess() {
		return pVersion_attr;
	}
	
	public ParserRule getVersion_attrRule() {
		return getVersion_attrAccess().getRule();
	}
	
	//Tag_attr:
	//	tag=('TYPE' | 'ATTR' | 'POS' | 'CONTENT') '=' value=DQVAL;
	public Tag_attrElements getTag_attrAccess() {
		return pTag_attr;
	}
	
	public ParserRule getTag_attrRule() {
		return getTag_attrAccess().getRule();
	}
	
	//url_attr:
	//	'GOTO' '=' value=DQVAL;
	public Url_attrElements getUrl_attrAccess() {
		return pUrl_attr;
	}
	
	public ParserRule getUrl_attrRule() {
		return getUrl_attrAccess().getRule();
	}
	
	//tab_attr:
	//	'T' '=' value=DQVAL;
	public Tab_attrElements getTab_attrAccess() {
		return pTab_attr;
	}
	
	public ParserRule getTab_attrRule() {
		return getTab_attrAccess().getRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal DQVAL:
	//	!(' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getDQVALRule() {
		return tDQVAL;
	}
}
