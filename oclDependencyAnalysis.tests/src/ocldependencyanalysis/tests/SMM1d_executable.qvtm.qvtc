import SourceMM: 'SourceMM1.ecore'::source;
import TargetMM: 'TargetMM1.ecore'::target;

--
-- This QVTm transformation, comprises the micro-mappings of a partitioned QVTm specification
-- semantically "equivalent" to SMM1d.ocl specification describing a transformation between SourceMM
-- and TargetMM.
--
-- For simplicity I've removed the traceability middle model
--

transformation source2target {
    source imports SourceMM;
    middle imports TargetMM;
}
--
-- micro-mapping corresponding to partial 
-- 
map X_To_A1 in source2target {
    source (x:X |
        x.isA1;) {
    }
    
    enforce middle (b : B |) {
        realize a:A1 |
    }
    
    where () {
        a.ownsB := b;
    }
}

map X_To_A2 in source2target {
    source (x:X | not x.isA1;) {}
    
    enforce middle (c : C |) {
        realize a:A2 |
    }
    
    where () {
        a.ownsC := c;
    }
}

map Y1_To_B in source2target {
	source (y:Y1 |) {}
    
    enforce middle (d : D  |) {
        realize b:B |
    }
    
    where () {
    	b.ownsD := D;
    }
}

map Y2_To_C in source2target {
	source (y:Y2 |) {}
    
    enforce middle (d : D  |) {
        realize c:C |
    }
    
    where () {
    	c.ownsD := D;
    }
}

--
-- Z to D have two micro-mappings since there is an if-condition-depending
-- on the type of the parent 

map Z_to_D_1_creation in source2target {
	
	-- I'd need the middle model to access to Y1-B trace
	-- So I temporarily change the guard to only use source meta-model information
	-- rather
	--source () {
	--	z : Z |  z.toY."access trace".b.oclIsKindOf(middle::B)
	--}
	
	source (z : Z | z.toY.oclIsKindOf(Y1);) {}
	
	enforce middle () {
		realize d:D |
	}
	
	where () {		
	}	
}

map Z_to_D_1_update in source2target {
		
	source (z : Z | z.toY.oclIsKindOf(Y1);) {}
	
	enforce middle (b:B, d:D |) {
		
	}
	
	where () {
		d.toA := b.toA1;
	}	
}

map Z_to_D_2_creation in source2target {
	-- I'd need the middle model to access to Y2-C trace
	-- So I temporarily change the guard to only use source meta-model information
	--source () {
	--	z : Z |  z.toY."access trace".c.oclIsKindOf(middle::C)
	--}
	
	source (z : Z | not z.toY.oclIsKindOf(Y1);) { }	
	
	enforce middle () {
		realize d:D |
	}
	
	where () { }
}

map Z_to_D_2_update in source2target {	
	
	source (z : Z | not z.toY.oclIsKindOf(Y1);) { }	
	
	enforce middle (c:C, d :D|) {
	}
	
	where () {
		d.toA := c.toA2;
	}	
}